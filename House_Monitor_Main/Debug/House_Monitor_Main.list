
House_Monitor_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08006af8  08006af8  00007af8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ef8  08006ef8  000081e8  2**0
                  CONTENTS
  4 .ARM          00000008  08006ef8  08006ef8  00007ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f00  08006f00  000081e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f00  08006f00  00007f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f04  08006f04  00007f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08006f08  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200001e8  080070f0  000081e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  080070f0  000083d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000926d  00000000  00000000  00008211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed2  00000000  00000000  0001147e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  00013350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000695  00000000  00000000  00013c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ad7  00000000  00000000  000142a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b433  00000000  00000000  0002cd7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008968d  00000000  00000000  000381af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c183c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003494  00000000  00000000  000c1880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000c4d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006ae0 	.word	0x08006ae0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08006ae0 	.word	0x08006ae0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <MX_ADC1_Init+0x74>)
 8000ff6:	4a19      	ldr	r2, [pc, #100]	@ (800105c <MX_ADC1_Init+0x78>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <MX_ADC1_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001000:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <MX_ADC1_Init+0x74>)
 8001002:	2201      	movs	r2, #1
 8001004:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001006:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <MX_ADC1_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <MX_ADC1_Init+0x74>)
 800100e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001012:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001014:	4b10      	ldr	r3, [pc, #64]	@ (8001058 <MX_ADC1_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <MX_ADC1_Init+0x74>)
 800101c:	2201      	movs	r2, #1
 800101e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001020:	480d      	ldr	r0, [pc, #52]	@ (8001058 <MX_ADC1_Init+0x74>)
 8001022:	f000 fbb9 	bl	8001798 <HAL_ADC_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800102c:	f000 f968 	bl	8001300 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001034:	2301      	movs	r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	@ (8001058 <MX_ADC1_Init+0x74>)
 8001042:	f000 fd3b 	bl	8001abc <HAL_ADC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800104c:	f000 f958 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000204 	.word	0x20000204
 800105c:	40012400 	.word	0x40012400

08001060 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a14      	ldr	r2, [pc, #80]	@ (80010cc <HAL_ADC_MspInit+0x6c>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d121      	bne.n	80010c4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001080:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a0c      	ldr	r2, [pc, #48]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010b0:	2301      	movs	r3, #1
 80010b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b4:	2303      	movs	r3, #3
 80010b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4619      	mov	r1, r3
 80010be:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <HAL_ADC_MspInit+0x74>)
 80010c0:	f001 f822 	bl	8002108 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40012400 	.word	0x40012400
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010800 	.word	0x40010800

080010d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <MX_GPIO_Init+0x5c>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a10      	ldr	r2, [pc, #64]	@ (8001134 <MX_GPIO_Init+0x5c>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <MX_GPIO_Init+0x5c>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	2120      	movs	r1, #32
 8001108:	480b      	ldr	r0, [pc, #44]	@ (8001138 <MX_GPIO_Init+0x60>)
 800110a:	f001 f981 	bl	8002410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800110e:	2320      	movs	r3, #32
 8001110:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2302      	movs	r3, #2
 800111c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	4619      	mov	r1, r3
 8001124:	4804      	ldr	r0, [pc, #16]	@ (8001138 <MX_GPIO_Init+0x60>)
 8001126:	f000 ffef 	bl	8002108 <HAL_GPIO_Init>

}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	40010800 	.word	0x40010800

0800113c <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Redirecting chars in printf statements to USART2
int __io_putchar(int ch)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b0a      	cmp	r3, #10
 8001148:	d102      	bne.n	8001150 <__io_putchar+0x14>
		__io_putchar('\r');
 800114a:	200d      	movs	r0, #13
 800114c:	f7ff fff6 	bl	800113c <__io_putchar>

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001150:	1d39      	adds	r1, r7, #4
 8001152:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001156:	2201      	movs	r2, #1
 8001158:	4803      	ldr	r0, [pc, #12]	@ (8001168 <__io_putchar+0x2c>)
 800115a:	f001 ff3d 	bl	8002fd8 <HAL_UART_Transmit>
	return 1;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000238 	.word	0x20000238

0800116c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800116c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001170:	b088      	sub	sp, #32
 8001172:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001174:	f000 fa8a 	bl	800168c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001178:	f000 f872 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117c:	f7ff ffac 	bl	80010d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001180:	f000 f9ea 	bl	8001558 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001184:	f7ff ff2e 	bl	8000fe4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001188:	482f      	ldr	r0, [pc, #188]	@ (8001248 <main+0xdc>)
 800118a:	f000 fe2b 	bl	8001de4 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start(&hadc1);
 800118e:	482e      	ldr	r0, [pc, #184]	@ (8001248 <main+0xdc>)
 8001190:	f000 fbda 	bl	8001948 <HAL_ADC_Start>
  while (1)
  {
	  float photoresistor_voltage = HAL_ADC_GetValue(&hadc1) * SUPPLIED_VOLTAGE / 4096.0f;
 8001194:	482c      	ldr	r0, [pc, #176]	@ (8001248 <main+0xdc>)
 8001196:	f000 fc85 	bl	8001aa4 <HAL_ADC_GetValue>
 800119a:	4603      	mov	r3, r0
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fd79 	bl	8000c94 <__aeabi_ui2f>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4929      	ldr	r1, [pc, #164]	@ (800124c <main+0xe0>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fdcc 	bl	8000d44 <__aeabi_fmul>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fe7a 	bl	8000eac <__aeabi_fdiv>
 80011b8:	4603      	mov	r3, r0
 80011ba:	60fb      	str	r3, [r7, #12]
	  float photoresistor_resistance = FIXED_PHOTORESISTOR_RESISTANCE * (SUPPLIED_VOLTAGE / photoresistor_voltage - 1);
 80011bc:	68f9      	ldr	r1, [r7, #12]
 80011be:	4823      	ldr	r0, [pc, #140]	@ (800124c <main+0xe0>)
 80011c0:	f7ff fe74 	bl	8000eac <__aeabi_fdiv>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fcb0 	bl	8000b30 <__aeabi_fsub>
 80011d0:	4603      	mov	r3, r0
 80011d2:	491f      	ldr	r1, [pc, #124]	@ (8001250 <main+0xe4>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fdb5 	bl	8000d44 <__aeabi_fmul>
 80011da:	4603      	mov	r3, r0
 80011dc:	60bb      	str	r3, [r7, #8]
	  float lux_level = PHOTORESISTOR_MULTIPLIER / pow(photoresistor_resistance, PHOTORESISTOR_EXPONENT);
 80011de:	68b8      	ldr	r0, [r7, #8]
 80011e0:	f7ff f922 	bl	8000428 <__aeabi_f2d>
 80011e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <main+0xe8>)
 80011ea:	f004 fd69 	bl	8005cc0 <pow>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	f04f 0000 	mov.w	r0, #0
 80011f6:	4918      	ldr	r1, [pc, #96]	@ (8001258 <main+0xec>)
 80011f8:	f7ff fa98 	bl	800072c <__aeabi_ddiv>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fc40 	bl	8000a88 <__aeabi_d2f>
 8001208:	4603      	mov	r3, r0
 800120a:	607b      	str	r3, [r7, #4]

	  printf("U = %.2f V, R = %.2f om, L = %.2f\n", photoresistor_voltage, photoresistor_resistance, lux_level);
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f7ff f90b 	bl	8000428 <__aeabi_f2d>
 8001212:	4680      	mov	r8, r0
 8001214:	4689      	mov	r9, r1
 8001216:	68b8      	ldr	r0, [r7, #8]
 8001218:	f7ff f906 	bl	8000428 <__aeabi_f2d>
 800121c:	4604      	mov	r4, r0
 800121e:	460d      	mov	r5, r1
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff f901 	bl	8000428 <__aeabi_f2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800122e:	e9cd 4500 	strd	r4, r5, [sp]
 8001232:	4642      	mov	r2, r8
 8001234:	464b      	mov	r3, r9
 8001236:	4809      	ldr	r0, [pc, #36]	@ (800125c <main+0xf0>)
 8001238:	f002 fdc0 	bl	8003dbc <iprintf>
	  HAL_Delay(250);
 800123c:	20fa      	movs	r0, #250	@ 0xfa
 800123e:	f000 fa87 	bl	8001750 <HAL_Delay>
  {
 8001242:	bf00      	nop
 8001244:	e7a6      	b.n	8001194 <main+0x28>
 8001246:	bf00      	nop
 8001248:	20000204 	.word	0x20000204
 800124c:	40533333 	.word	0x40533333
 8001250:	447a0000 	.word	0x447a0000
 8001254:	3ff33333 	.word	0x3ff33333
 8001258:	40a90000 	.word	0x40a90000
 800125c:	08006af8 	.word	0x08006af8

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b094      	sub	sp, #80	@ 0x50
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800126a:	2228      	movs	r2, #40	@ 0x28
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f002 fdf9 	bl	8003e66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001294:	2301      	movs	r3, #1
 8001296:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001298:	2310      	movs	r3, #16
 800129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800129c:	2300      	movs	r3, #0
 800129e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 f8cb 	bl	8002440 <HAL_RCC_OscConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80012b0:	f000 f826 	bl	8001300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b4:	230f      	movs	r3, #15
 80012b6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 fb38 	bl	8002944 <HAL_RCC_ClockConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80012da:	f000 f811 	bl	8001300 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012de:	2302      	movs	r3, #2
 80012e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4618      	mov	r0, r3
 80012ea:	f001 fcb9 	bl	8002c60 <HAL_RCCEx_PeriphCLKConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012f4:	f000 f804 	bl	8001300 <Error_Handler>
  }
}
 80012f8:	bf00      	nop
 80012fa:	3750      	adds	r7, #80	@ 0x50
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <Error_Handler+0x8>

0800130c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001312:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <HAL_MspInit+0x5c>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	4a14      	ldr	r2, [pc, #80]	@ (8001368 <HAL_MspInit+0x5c>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6193      	str	r3, [r2, #24]
 800131e:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <HAL_MspInit+0x5c>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <HAL_MspInit+0x5c>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4a0e      	ldr	r2, [pc, #56]	@ (8001368 <HAL_MspInit+0x5c>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001334:	61d3      	str	r3, [r2, #28]
 8001336:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <HAL_MspInit+0x5c>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <HAL_MspInit+0x60>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	4a04      	ldr	r2, [pc, #16]	@ (800136c <HAL_MspInit+0x60>)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	40021000 	.word	0x40021000
 800136c:	40010000 	.word	0x40010000

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <NMI_Handler+0x4>

08001378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <MemManage_Handler+0x4>

08001388 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <UsageFault_Handler+0x4>

08001398 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c0:	f000 f9aa 	bl	8001718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return 1;
 80013cc:	2301      	movs	r3, #1
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr

080013d6 <_kill>:

int _kill(int pid, int sig)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013e0:	f002 fd94 	bl	8003f0c <__errno>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2216      	movs	r2, #22
 80013e8:	601a      	str	r2, [r3, #0]
  return -1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <_exit>:

void _exit (int status)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013fe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffe7 	bl	80013d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <_exit+0x12>

0800140c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	e00a      	b.n	8001434 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800141e:	f3af 8000 	nop.w
 8001422:	4601      	mov	r1, r0
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	60ba      	str	r2, [r7, #8]
 800142a:	b2ca      	uxtb	r2, r1
 800142c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3301      	adds	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	429a      	cmp	r2, r3
 800143a:	dbf0      	blt.n	800141e <_read+0x12>
  }

  return len;
 800143c:	687b      	ldr	r3, [r7, #4]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	60f8      	str	r0, [r7, #12]
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	e009      	b.n	800146c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	1c5a      	adds	r2, r3, #1
 800145c:	60ba      	str	r2, [r7, #8]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fe6b 	bl	800113c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	3301      	adds	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	429a      	cmp	r2, r3
 8001472:	dbf1      	blt.n	8001458 <_write+0x12>
  }
  return len;
 8001474:	687b      	ldr	r3, [r7, #4]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <_close>:

int _close(int file)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014a4:	605a      	str	r2, [r3, #4]
  return 0;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr

080014b2 <_isatty>:

int _isatty(int file)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b085      	sub	sp, #20
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
	...

080014e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e8:	4a14      	ldr	r2, [pc, #80]	@ (800153c <_sbrk+0x5c>)
 80014ea:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <_sbrk+0x60>)
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f4:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d102      	bne.n	8001502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014fc:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <_sbrk+0x64>)
 80014fe:	4a12      	ldr	r2, [pc, #72]	@ (8001548 <_sbrk+0x68>)
 8001500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001502:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	429a      	cmp	r2, r3
 800150e:	d207      	bcs.n	8001520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001510:	f002 fcfc 	bl	8003f0c <__errno>
 8001514:	4603      	mov	r3, r0
 8001516:	220c      	movs	r2, #12
 8001518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800151e:	e009      	b.n	8001534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001520:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001526:	4b07      	ldr	r3, [pc, #28]	@ (8001544 <_sbrk+0x64>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	4a05      	ldr	r2, [pc, #20]	@ (8001544 <_sbrk+0x64>)
 8001530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001532:	68fb      	ldr	r3, [r7, #12]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20005000 	.word	0x20005000
 8001540:	00000400 	.word	0x00000400
 8001544:	20000234 	.word	0x20000234
 8001548:	200003d0 	.word	0x200003d0

0800154c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800155c:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <MX_USART2_UART_Init+0x4c>)
 800155e:	4a12      	ldr	r2, [pc, #72]	@ (80015a8 <MX_USART2_UART_Init+0x50>)
 8001560:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001564:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001568:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800156a:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <MX_USART2_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001576:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800157c:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <MX_USART2_UART_Init+0x4c>)
 800157e:	220c      	movs	r2, #12
 8001580:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001582:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <MX_USART2_UART_Init+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	@ (80015a4 <MX_USART2_UART_Init+0x4c>)
 8001590:	f001 fcd2 	bl	8002f38 <HAL_UART_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800159a:	f7ff feb1 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000238 	.word	0x20000238
 80015a8:	40004400 	.word	0x40004400

080015ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001634 <HAL_UART_MspInit+0x88>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d12f      	bne.n	800162c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <HAL_UART_MspInit+0x8c>)
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	4a19      	ldr	r2, [pc, #100]	@ (8001638 <HAL_UART_MspInit+0x8c>)
 80015d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d6:	61d3      	str	r3, [r2, #28]
 80015d8:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <HAL_UART_MspInit+0x8c>)
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	4b14      	ldr	r3, [pc, #80]	@ (8001638 <HAL_UART_MspInit+0x8c>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a13      	ldr	r2, [pc, #76]	@ (8001638 <HAL_UART_MspInit+0x8c>)
 80015ea:	f043 0304 	orr.w	r3, r3, #4
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <HAL_UART_MspInit+0x8c>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015fc:	2304      	movs	r3, #4
 80015fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	4619      	mov	r1, r3
 800160e:	480b      	ldr	r0, [pc, #44]	@ (800163c <HAL_UART_MspInit+0x90>)
 8001610:	f000 fd7a 	bl	8002108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001614:	2308      	movs	r3, #8
 8001616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	4619      	mov	r1, r3
 8001626:	4805      	ldr	r0, [pc, #20]	@ (800163c <HAL_UART_MspInit+0x90>)
 8001628:	f000 fd6e 	bl	8002108 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800162c:	bf00      	nop
 800162e:	3720      	adds	r7, #32
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40004400 	.word	0x40004400
 8001638:	40021000 	.word	0x40021000
 800163c:	40010800 	.word	0x40010800

08001640 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001640:	f7ff ff84 	bl	800154c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001644:	480b      	ldr	r0, [pc, #44]	@ (8001674 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001646:	490c      	ldr	r1, [pc, #48]	@ (8001678 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001648:	4a0c      	ldr	r2, [pc, #48]	@ (800167c <LoopFillZerobss+0x16>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800164c:	e002      	b.n	8001654 <LoopCopyDataInit>

0800164e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001652:	3304      	adds	r3, #4

08001654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001658:	d3f9      	bcc.n	800164e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165a:	4a09      	ldr	r2, [pc, #36]	@ (8001680 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800165c:	4c09      	ldr	r4, [pc, #36]	@ (8001684 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001660:	e001      	b.n	8001666 <LoopFillZerobss>

08001662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001664:	3204      	adds	r2, #4

08001666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001668:	d3fb      	bcc.n	8001662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166a:	f002 fc55 	bl	8003f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800166e:	f7ff fd7d 	bl	800116c <main>
  bx lr
 8001672:	4770      	bx	lr
  ldr r0, =_sdata
 8001674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001678:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800167c:	08006f08 	.word	0x08006f08
  ldr r2, =_sbss
 8001680:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001684:	200003d0 	.word	0x200003d0

08001688 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001688:	e7fe      	b.n	8001688 <ADC1_2_IRQHandler>
	...

0800168c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001690:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <HAL_Init+0x28>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a07      	ldr	r2, [pc, #28]	@ (80016b4 <HAL_Init+0x28>)
 8001696:	f043 0310 	orr.w	r3, r3, #16
 800169a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169c:	2003      	movs	r0, #3
 800169e:	f000 fcff 	bl	80020a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a2:	200f      	movs	r0, #15
 80016a4:	f000 f808 	bl	80016b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a8:	f7ff fe30 	bl	800130c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40022000 	.word	0x40022000

080016b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c0:	4b12      	ldr	r3, [pc, #72]	@ (800170c <HAL_InitTick+0x54>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <HAL_InitTick+0x58>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fd09 	bl	80020ee <HAL_SYSTICK_Config>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00e      	b.n	8001704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d80a      	bhi.n	8001702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016f4:	f000 fcdf 	bl	80020b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f8:	4a06      	ldr	r2, [pc, #24]	@ (8001714 <HAL_InitTick+0x5c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000000 	.word	0x20000000
 8001710:	20000008 	.word	0x20000008
 8001714:	20000004 	.word	0x20000004

08001718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800171c:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <HAL_IncTick+0x1c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <HAL_IncTick+0x20>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a03      	ldr	r2, [pc, #12]	@ (8001738 <HAL_IncTick+0x20>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	20000008 	.word	0x20000008
 8001738:	20000280 	.word	0x20000280

0800173c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTick;
 8001740:	4b02      	ldr	r3, [pc, #8]	@ (800174c <HAL_GetTick+0x10>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	20000280 	.word	0x20000280

08001750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff fff0 	bl	800173c <HAL_GetTick>
 800175c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001768:	d005      	beq.n	8001776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176a:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <HAL_Delay+0x44>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001776:	bf00      	nop
 8001778:	f7ff ffe0 	bl	800173c <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d8f7      	bhi.n	8001778 <HAL_Delay+0x28>
  {
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000008 	.word	0x20000008

08001798 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e0be      	b.n	8001938 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d109      	bne.n	80017dc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff fc42 	bl	8001060 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 fabf 	bl	8001d60 <ADC_ConversionStop_Disable>
 80017e2:	4603      	mov	r3, r0
 80017e4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ea:	f003 0310 	and.w	r3, r3, #16
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f040 8099 	bne.w	8001926 <HAL_ADC_Init+0x18e>
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f040 8095 	bne.w	8001926 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001800:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001804:	f023 0302 	bic.w	r3, r3, #2
 8001808:	f043 0202 	orr.w	r2, r3, #2
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001818:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	7b1b      	ldrb	r3, [r3, #12]
 800181e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001820:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	4313      	orrs	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001830:	d003      	beq.n	800183a <HAL_ADC_Init+0xa2>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d102      	bne.n	8001840 <HAL_ADC_Init+0xa8>
 800183a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800183e:	e000      	b.n	8001842 <HAL_ADC_Init+0xaa>
 8001840:	2300      	movs	r3, #0
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	7d1b      	ldrb	r3, [r3, #20]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d119      	bne.n	8001884 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	7b1b      	ldrb	r3, [r3, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d109      	bne.n	800186c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	3b01      	subs	r3, #1
 800185e:	035a      	lsls	r2, r3, #13
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	e00b      	b.n	8001884 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001870:	f043 0220 	orr.w	r2, r3, #32
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187c:	f043 0201 	orr.w	r2, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	430a      	orrs	r2, r1
 8001896:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	4b28      	ldr	r3, [pc, #160]	@ (8001940 <HAL_ADC_Init+0x1a8>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	68b9      	ldr	r1, [r7, #8]
 80018a8:	430b      	orrs	r3, r1
 80018aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018b4:	d003      	beq.n	80018be <HAL_ADC_Init+0x126>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d104      	bne.n	80018c8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	051b      	lsls	r3, r3, #20
 80018c6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ce:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	430a      	orrs	r2, r1
 80018da:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	4b18      	ldr	r3, [pc, #96]	@ (8001944 <HAL_ADC_Init+0x1ac>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d10b      	bne.n	8001904 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f6:	f023 0303 	bic.w	r3, r3, #3
 80018fa:	f043 0201 	orr.w	r2, r3, #1
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001902:	e018      	b.n	8001936 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001908:	f023 0312 	bic.w	r3, r3, #18
 800190c:	f043 0210 	orr.w	r2, r3, #16
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001918:	f043 0201 	orr.w	r2, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001924:	e007      	b.n	8001936 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192a:	f043 0210 	orr.w	r2, r3, #16
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001936:	7dfb      	ldrb	r3, [r7, #23]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	ffe1f7fd 	.word	0xffe1f7fd
 8001944:	ff1f0efe 	.word	0xff1f0efe

08001948 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800195a:	2b01      	cmp	r3, #1
 800195c:	d101      	bne.n	8001962 <HAL_ADC_Start+0x1a>
 800195e:	2302      	movs	r3, #2
 8001960:	e098      	b.n	8001a94 <HAL_ADC_Start+0x14c>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f99e 	bl	8001cac <ADC_Enable>
 8001970:	4603      	mov	r3, r0
 8001972:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f040 8087 	bne.w	8001a8a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001984:	f023 0301 	bic.w	r3, r3, #1
 8001988:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a41      	ldr	r2, [pc, #260]	@ (8001a9c <HAL_ADC_Start+0x154>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d105      	bne.n	80019a6 <HAL_ADC_Start+0x5e>
 800199a:	4b41      	ldr	r3, [pc, #260]	@ (8001aa0 <HAL_ADC_Start+0x158>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d115      	bne.n	80019d2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019aa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d026      	beq.n	8001a0e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019d0:	e01d      	b.n	8001a0e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a2f      	ldr	r2, [pc, #188]	@ (8001aa0 <HAL_ADC_Start+0x158>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d004      	beq.n	80019f2 <HAL_ADC_Start+0xaa>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a2b      	ldr	r2, [pc, #172]	@ (8001a9c <HAL_ADC_Start+0x154>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d10d      	bne.n	8001a0e <HAL_ADC_Start+0xc6>
 80019f2:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa0 <HAL_ADC_Start+0x158>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d007      	beq.n	8001a0e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a02:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a06:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d006      	beq.n	8001a28 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1e:	f023 0206 	bic.w	r2, r3, #6
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a26:	e002      	b.n	8001a2e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f06f 0202 	mvn.w	r2, #2
 8001a3e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001a4a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001a4e:	d113      	bne.n	8001a78 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a54:	4a11      	ldr	r2, [pc, #68]	@ (8001a9c <HAL_ADC_Start+0x154>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d105      	bne.n	8001a66 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a5a:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <HAL_ADC_Start+0x158>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d108      	bne.n	8001a78 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	e00c      	b.n	8001a92 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	e003      	b.n	8001a92 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40012800 	.word	0x40012800
 8001aa0:	40012400 	.word	0x40012400

08001aa4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x20>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e0dc      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x1da>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b06      	cmp	r3, #6
 8001aea:	d81c      	bhi.n	8001b26 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	3b05      	subs	r3, #5
 8001afe:	221f      	movs	r2, #31
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	4019      	ands	r1, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	3b05      	subs	r3, #5
 8001b18:	fa00 f203 	lsl.w	r2, r0, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b24:	e03c      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b0c      	cmp	r3, #12
 8001b2c:	d81c      	bhi.n	8001b68 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b23      	subs	r3, #35	@ 0x23
 8001b40:	221f      	movs	r2, #31
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	4019      	ands	r1, r3
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	6818      	ldr	r0, [r3, #0]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	3b23      	subs	r3, #35	@ 0x23
 8001b5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b66:	e01b      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	3b41      	subs	r3, #65	@ 0x41
 8001b7a:	221f      	movs	r2, #31
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	4019      	ands	r1, r3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	6818      	ldr	r0, [r3, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	3b41      	subs	r3, #65	@ 0x41
 8001b94:	fa00 f203 	lsl.w	r2, r0, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b09      	cmp	r3, #9
 8001ba6:	d91c      	bls.n	8001be2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68d9      	ldr	r1, [r3, #12]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3b1e      	subs	r3, #30
 8001bba:	2207      	movs	r2, #7
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	4019      	ands	r1, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	6898      	ldr	r0, [r3, #8]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3b1e      	subs	r3, #30
 8001bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	e019      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6919      	ldr	r1, [r3, #16]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	2207      	movs	r2, #7
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	4019      	ands	r1, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	6898      	ldr	r0, [r3, #8]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b10      	cmp	r3, #16
 8001c1c:	d003      	beq.n	8001c26 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c22:	2b11      	cmp	r3, #17
 8001c24:	d132      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca0 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d125      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d126      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001c4c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b10      	cmp	r3, #16
 8001c54:	d11a      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c56:	4b13      	ldr	r3, [pc, #76]	@ (8001ca4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a13      	ldr	r2, [pc, #76]	@ (8001ca8 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c60:	0c9a      	lsrs	r2, r3, #18
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c6c:	e002      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f9      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x1b2>
 8001c7a:	e007      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c80:	f043 0220 	orr.w	r2, r3, #32
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	40012400 	.word	0x40012400
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	431bde83 	.word	0x431bde83

08001cac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d040      	beq.n	8001d4c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 0201 	orr.w	r2, r2, #1
 8001cd8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cda:	4b1f      	ldr	r3, [pc, #124]	@ (8001d58 <ADC_Enable+0xac>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a1f      	ldr	r2, [pc, #124]	@ (8001d5c <ADC_Enable+0xb0>)
 8001ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce4:	0c9b      	lsrs	r3, r3, #18
 8001ce6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ce8:	e002      	b.n	8001cf0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f9      	bne.n	8001cea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cf6:	f7ff fd21 	bl	800173c <HAL_GetTick>
 8001cfa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cfc:	e01f      	b.n	8001d3e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cfe:	f7ff fd1d 	bl	800173c <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d918      	bls.n	8001d3e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d011      	beq.n	8001d3e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1e:	f043 0210 	orr.w	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2a:	f043 0201 	orr.w	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e007      	b.n	8001d4e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d1d8      	bne.n	8001cfe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	431bde83 	.word	0x431bde83

08001d60 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d12e      	bne.n	8001dd8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0201 	bic.w	r2, r2, #1
 8001d88:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d8a:	f7ff fcd7 	bl	800173c <HAL_GetTick>
 8001d8e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d90:	e01b      	b.n	8001dca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d92:	f7ff fcd3 	bl	800173c <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d914      	bls.n	8001dca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d10d      	bne.n	8001dca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db2:	f043 0210 	orr.w	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e007      	b.n	8001dda <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d0dc      	beq.n	8001d92 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001de4:	b590      	push	{r4, r7, lr}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADCEx_Calibration_Start+0x1e>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e097      	b.n	8001f32 <HAL_ADCEx_Calibration_Start+0x14e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffa8 	bl	8001d60 <ADC_ConversionStop_Disable>
 8001e10:	4603      	mov	r3, r0
 8001e12:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ff49 	bl	8001cac <ADC_Enable>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001e1e:	7dfb      	ldrb	r3, [r7, #23]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f040 8081 	bne.w	8001f28 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e2e:	f023 0302 	bic.w	r3, r3, #2
 8001e32:	f043 0202 	orr.w	r2, r3, #2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001e3a:	4b40      	ldr	r3, [pc, #256]	@ (8001f3c <HAL_ADCEx_Calibration_Start+0x158>)
 8001e3c:	681c      	ldr	r4, [r3, #0]
 8001e3e:	2002      	movs	r0, #2
 8001e40:	f000 ffc4 	bl	8002dcc <HAL_RCCEx_GetPeriphCLKFreq>
 8001e44:	4603      	mov	r3, r0
 8001e46:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001e4a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001e4c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001e4e:	e002      	b.n	8001e56 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f9      	bne.n	8001e50 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0208 	orr.w	r2, r2, #8
 8001e6a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001e6c:	f7ff fc66 	bl	800173c <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001e72:	e01b      	b.n	8001eac <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001e74:	f7ff fc62 	bl	800173c <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b0a      	cmp	r3, #10
 8001e80:	d914      	bls.n	8001eac <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00d      	beq.n	8001eac <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e94:	f023 0312 	bic.w	r3, r3, #18
 8001e98:	f043 0210 	orr.w	r2, r3, #16
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e042      	b.n	8001f32 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1dc      	bne.n	8001e74 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0204 	orr.w	r2, r2, #4
 8001ec8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001eca:	f7ff fc37 	bl	800173c <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001ed0:	e01b      	b.n	8001f0a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001ed2:	f7ff fc33 	bl	800173c <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b0a      	cmp	r3, #10
 8001ede:	d914      	bls.n	8001f0a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00d      	beq.n	8001f0a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef2:	f023 0312 	bic.w	r3, r3, #18
 8001ef6:	f043 0210 	orr.w	r2, r3, #16
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e013      	b.n	8001f32 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1dc      	bne.n	8001ed2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1c:	f023 0303 	bic.w	r3, r3, #3
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	371c      	adds	r7, #28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd90      	pop	{r4, r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000000 	.word	0x20000000

08001f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f50:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <__NVIC_SetPriorityGrouping+0x44>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f72:	4a04      	ldr	r2, [pc, #16]	@ (8001f84 <__NVIC_SetPriorityGrouping+0x44>)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	60d3      	str	r3, [r2, #12]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f8c:	4b04      	ldr	r3, [pc, #16]	@ (8001fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	0a1b      	lsrs	r3, r3, #8
 8001f92:	f003 0307 	and.w	r3, r3, #7
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db0a      	blt.n	8001fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	490c      	ldr	r1, [pc, #48]	@ (8001ff0 <__NVIC_SetPriority+0x4c>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fcc:	e00a      	b.n	8001fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4908      	ldr	r1, [pc, #32]	@ (8001ff4 <__NVIC_SetPriority+0x50>)
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3b04      	subs	r3, #4
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	761a      	strb	r2, [r3, #24]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	@ 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f1c3 0307 	rsb	r3, r3, #7
 8002012:	2b04      	cmp	r3, #4
 8002014:	bf28      	it	cs
 8002016:	2304      	movcs	r3, #4
 8002018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3304      	adds	r3, #4
 800201e:	2b06      	cmp	r3, #6
 8002020:	d902      	bls.n	8002028 <NVIC_EncodePriority+0x30>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3b03      	subs	r3, #3
 8002026:	e000      	b.n	800202a <NVIC_EncodePriority+0x32>
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002040:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43d9      	mvns	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	4313      	orrs	r3, r2
         );
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	@ 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800206c:	d301      	bcc.n	8002072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206e:	2301      	movs	r3, #1
 8002070:	e00f      	b.n	8002092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002072:	4a0a      	ldr	r2, [pc, #40]	@ (800209c <SysTick_Config+0x40>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207a:	210f      	movs	r1, #15
 800207c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002080:	f7ff ff90 	bl	8001fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002084:	4b05      	ldr	r3, [pc, #20]	@ (800209c <SysTick_Config+0x40>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208a:	4b04      	ldr	r3, [pc, #16]	@ (800209c <SysTick_Config+0x40>)
 800208c:	2207      	movs	r2, #7
 800208e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	e000e010 	.word	0xe000e010

080020a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ff49 	bl	8001f40 <__NVIC_SetPriorityGrouping>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c8:	f7ff ff5e 	bl	8001f88 <__NVIC_GetPriorityGrouping>
 80020cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	6978      	ldr	r0, [r7, #20]
 80020d4:	f7ff ff90 	bl	8001ff8 <NVIC_EncodePriority>
 80020d8:	4602      	mov	r2, r0
 80020da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff5f 	bl	8001fa4 <__NVIC_SetPriority>
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff ffb0 	bl	800205c <SysTick_Config>
 80020fc:	4603      	mov	r3, r0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002108:	b480      	push	{r7}
 800210a:	b08b      	sub	sp, #44	@ 0x2c
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211a:	e169      	b.n	80023f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800211c:	2201      	movs	r2, #1
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	429a      	cmp	r2, r3
 8002136:	f040 8158 	bne.w	80023ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	4a9a      	ldr	r2, [pc, #616]	@ (80023a8 <HAL_GPIO_Init+0x2a0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d05e      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
 8002144:	4a98      	ldr	r2, [pc, #608]	@ (80023a8 <HAL_GPIO_Init+0x2a0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d875      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 800214a:	4a98      	ldr	r2, [pc, #608]	@ (80023ac <HAL_GPIO_Init+0x2a4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d058      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
 8002150:	4a96      	ldr	r2, [pc, #600]	@ (80023ac <HAL_GPIO_Init+0x2a4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d86f      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 8002156:	4a96      	ldr	r2, [pc, #600]	@ (80023b0 <HAL_GPIO_Init+0x2a8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d052      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
 800215c:	4a94      	ldr	r2, [pc, #592]	@ (80023b0 <HAL_GPIO_Init+0x2a8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d869      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 8002162:	4a94      	ldr	r2, [pc, #592]	@ (80023b4 <HAL_GPIO_Init+0x2ac>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d04c      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
 8002168:	4a92      	ldr	r2, [pc, #584]	@ (80023b4 <HAL_GPIO_Init+0x2ac>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d863      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 800216e:	4a92      	ldr	r2, [pc, #584]	@ (80023b8 <HAL_GPIO_Init+0x2b0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d046      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
 8002174:	4a90      	ldr	r2, [pc, #576]	@ (80023b8 <HAL_GPIO_Init+0x2b0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d85d      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 800217a:	2b12      	cmp	r3, #18
 800217c:	d82a      	bhi.n	80021d4 <HAL_GPIO_Init+0xcc>
 800217e:	2b12      	cmp	r3, #18
 8002180:	d859      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 8002182:	a201      	add	r2, pc, #4	@ (adr r2, 8002188 <HAL_GPIO_Init+0x80>)
 8002184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002188:	08002203 	.word	0x08002203
 800218c:	080021dd 	.word	0x080021dd
 8002190:	080021ef 	.word	0x080021ef
 8002194:	08002231 	.word	0x08002231
 8002198:	08002237 	.word	0x08002237
 800219c:	08002237 	.word	0x08002237
 80021a0:	08002237 	.word	0x08002237
 80021a4:	08002237 	.word	0x08002237
 80021a8:	08002237 	.word	0x08002237
 80021ac:	08002237 	.word	0x08002237
 80021b0:	08002237 	.word	0x08002237
 80021b4:	08002237 	.word	0x08002237
 80021b8:	08002237 	.word	0x08002237
 80021bc:	08002237 	.word	0x08002237
 80021c0:	08002237 	.word	0x08002237
 80021c4:	08002237 	.word	0x08002237
 80021c8:	08002237 	.word	0x08002237
 80021cc:	080021e5 	.word	0x080021e5
 80021d0:	080021f9 	.word	0x080021f9
 80021d4:	4a79      	ldr	r2, [pc, #484]	@ (80023bc <HAL_GPIO_Init+0x2b4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d013      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021da:	e02c      	b.n	8002236 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	623b      	str	r3, [r7, #32]
          break;
 80021e2:	e029      	b.n	8002238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	3304      	adds	r3, #4
 80021ea:	623b      	str	r3, [r7, #32]
          break;
 80021ec:	e024      	b.n	8002238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	3308      	adds	r3, #8
 80021f4:	623b      	str	r3, [r7, #32]
          break;
 80021f6:	e01f      	b.n	8002238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	330c      	adds	r3, #12
 80021fe:	623b      	str	r3, [r7, #32]
          break;
 8002200:	e01a      	b.n	8002238 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d102      	bne.n	8002210 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800220a:	2304      	movs	r3, #4
 800220c:	623b      	str	r3, [r7, #32]
          break;
 800220e:	e013      	b.n	8002238 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d105      	bne.n	8002224 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002218:	2308      	movs	r3, #8
 800221a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	611a      	str	r2, [r3, #16]
          break;
 8002222:	e009      	b.n	8002238 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002224:	2308      	movs	r3, #8
 8002226:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69fa      	ldr	r2, [r7, #28]
 800222c:	615a      	str	r2, [r3, #20]
          break;
 800222e:	e003      	b.n	8002238 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002230:	2300      	movs	r3, #0
 8002232:	623b      	str	r3, [r7, #32]
          break;
 8002234:	e000      	b.n	8002238 <HAL_GPIO_Init+0x130>
          break;
 8002236:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2bff      	cmp	r3, #255	@ 0xff
 800223c:	d801      	bhi.n	8002242 <HAL_GPIO_Init+0x13a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	e001      	b.n	8002246 <HAL_GPIO_Init+0x13e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3304      	adds	r3, #4
 8002246:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2bff      	cmp	r3, #255	@ 0xff
 800224c:	d802      	bhi.n	8002254 <HAL_GPIO_Init+0x14c>
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	e002      	b.n	800225a <HAL_GPIO_Init+0x152>
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002256:	3b08      	subs	r3, #8
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	210f      	movs	r1, #15
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	401a      	ands	r2, r3
 800226c:	6a39      	ldr	r1, [r7, #32]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	431a      	orrs	r2, r3
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 80b1 	beq.w	80023ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002288:	4b4d      	ldr	r3, [pc, #308]	@ (80023c0 <HAL_GPIO_Init+0x2b8>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	4a4c      	ldr	r2, [pc, #304]	@ (80023c0 <HAL_GPIO_Init+0x2b8>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6193      	str	r3, [r2, #24]
 8002294:	4b4a      	ldr	r3, [pc, #296]	@ (80023c0 <HAL_GPIO_Init+0x2b8>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022a0:	4a48      	ldr	r2, [pc, #288]	@ (80023c4 <HAL_GPIO_Init+0x2bc>)
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	089b      	lsrs	r3, r3, #2
 80022a6:	3302      	adds	r3, #2
 80022a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	220f      	movs	r2, #15
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4013      	ands	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a40      	ldr	r2, [pc, #256]	@ (80023c8 <HAL_GPIO_Init+0x2c0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d013      	beq.n	80022f4 <HAL_GPIO_Init+0x1ec>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a3f      	ldr	r2, [pc, #252]	@ (80023cc <HAL_GPIO_Init+0x2c4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d00d      	beq.n	80022f0 <HAL_GPIO_Init+0x1e8>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a3e      	ldr	r2, [pc, #248]	@ (80023d0 <HAL_GPIO_Init+0x2c8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d007      	beq.n	80022ec <HAL_GPIO_Init+0x1e4>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a3d      	ldr	r2, [pc, #244]	@ (80023d4 <HAL_GPIO_Init+0x2cc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d101      	bne.n	80022e8 <HAL_GPIO_Init+0x1e0>
 80022e4:	2303      	movs	r3, #3
 80022e6:	e006      	b.n	80022f6 <HAL_GPIO_Init+0x1ee>
 80022e8:	2304      	movs	r3, #4
 80022ea:	e004      	b.n	80022f6 <HAL_GPIO_Init+0x1ee>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e002      	b.n	80022f6 <HAL_GPIO_Init+0x1ee>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <HAL_GPIO_Init+0x1ee>
 80022f4:	2300      	movs	r3, #0
 80022f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f8:	f002 0203 	and.w	r2, r2, #3
 80022fc:	0092      	lsls	r2, r2, #2
 80022fe:	4093      	lsls	r3, r2
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002306:	492f      	ldr	r1, [pc, #188]	@ (80023c4 <HAL_GPIO_Init+0x2bc>)
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d006      	beq.n	800232e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002320:	4b2d      	ldr	r3, [pc, #180]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	492c      	ldr	r1, [pc, #176]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	608b      	str	r3, [r1, #8]
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800232e:	4b2a      	ldr	r3, [pc, #168]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	43db      	mvns	r3, r3
 8002336:	4928      	ldr	r1, [pc, #160]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002338:	4013      	ands	r3, r2
 800233a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d006      	beq.n	8002356 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002348:	4b23      	ldr	r3, [pc, #140]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	4922      	ldr	r1, [pc, #136]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	60cb      	str	r3, [r1, #12]
 8002354:	e006      	b.n	8002364 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002356:	4b20      	ldr	r3, [pc, #128]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	43db      	mvns	r3, r3
 800235e:	491e      	ldr	r1, [pc, #120]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002360:	4013      	ands	r3, r2
 8002362:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d006      	beq.n	800237e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002370:	4b19      	ldr	r3, [pc, #100]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	4918      	ldr	r1, [pc, #96]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800237e:	4b16      	ldr	r3, [pc, #88]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	43db      	mvns	r3, r3
 8002386:	4914      	ldr	r1, [pc, #80]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002388:	4013      	ands	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d021      	beq.n	80023dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002398:	4b0f      	ldr	r3, [pc, #60]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	490e      	ldr	r1, [pc, #56]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]
 80023a4:	e021      	b.n	80023ea <HAL_GPIO_Init+0x2e2>
 80023a6:	bf00      	nop
 80023a8:	10320000 	.word	0x10320000
 80023ac:	10310000 	.word	0x10310000
 80023b0:	10220000 	.word	0x10220000
 80023b4:	10210000 	.word	0x10210000
 80023b8:	10120000 	.word	0x10120000
 80023bc:	10110000 	.word	0x10110000
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40010800 	.word	0x40010800
 80023cc:	40010c00 	.word	0x40010c00
 80023d0:	40011000 	.word	0x40011000
 80023d4:	40011400 	.word	0x40011400
 80023d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023dc:	4b0b      	ldr	r3, [pc, #44]	@ (800240c <HAL_GPIO_Init+0x304>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	4909      	ldr	r1, [pc, #36]	@ (800240c <HAL_GPIO_Init+0x304>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	3301      	adds	r3, #1
 80023ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f6:	fa22 f303 	lsr.w	r3, r2, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f47f ae8e 	bne.w	800211c <HAL_GPIO_Init+0x14>
  }
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	372c      	adds	r7, #44	@ 0x2c
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	40010400 	.word	0x40010400

08002410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	807b      	strh	r3, [r7, #2]
 800241c:	4613      	mov	r3, r2
 800241e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002420:	787b      	ldrb	r3, [r7, #1]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800242c:	e003      	b.n	8002436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800242e:	887b      	ldrh	r3, [r7, #2]
 8002430:	041a      	lsls	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	611a      	str	r2, [r3, #16]
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e272      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8087 	beq.w	800256e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002460:	4b92      	ldr	r3, [pc, #584]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	2b04      	cmp	r3, #4
 800246a:	d00c      	beq.n	8002486 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800246c:	4b8f      	ldr	r3, [pc, #572]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 030c 	and.w	r3, r3, #12
 8002474:	2b08      	cmp	r3, #8
 8002476:	d112      	bne.n	800249e <HAL_RCC_OscConfig+0x5e>
 8002478:	4b8c      	ldr	r3, [pc, #560]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002484:	d10b      	bne.n	800249e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002486:	4b89      	ldr	r3, [pc, #548]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d06c      	beq.n	800256c <HAL_RCC_OscConfig+0x12c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d168      	bne.n	800256c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e24c      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_OscConfig+0x76>
 80024a8:	4b80      	ldr	r3, [pc, #512]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a7f      	ldr	r2, [pc, #508]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	e02e      	b.n	8002514 <HAL_RCC_OscConfig+0xd4>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x98>
 80024be:	4b7b      	ldr	r3, [pc, #492]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a7a      	ldr	r2, [pc, #488]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b78      	ldr	r3, [pc, #480]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a77      	ldr	r2, [pc, #476]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e01d      	b.n	8002514 <HAL_RCC_OscConfig+0xd4>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0xbc>
 80024e2:	4b72      	ldr	r3, [pc, #456]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a71      	ldr	r2, [pc, #452]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b6f      	ldr	r3, [pc, #444]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6e      	ldr	r2, [pc, #440]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e00b      	b.n	8002514 <HAL_RCC_OscConfig+0xd4>
 80024fc:	4b6b      	ldr	r3, [pc, #428]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a6a      	ldr	r2, [pc, #424]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b68      	ldr	r3, [pc, #416]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a67      	ldr	r2, [pc, #412]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 800250e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002512:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d013      	beq.n	8002544 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7ff f90e 	bl	800173c <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002524:	f7ff f90a 	bl	800173c <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	@ 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e200      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002536:	4b5d      	ldr	r3, [pc, #372]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0xe4>
 8002542:	e014      	b.n	800256e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7ff f8fa 	bl	800173c <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800254c:	f7ff f8f6 	bl	800173c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	@ 0x64
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e1ec      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255e:	4b53      	ldr	r3, [pc, #332]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x10c>
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d063      	beq.n	8002642 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800257a:	4b4c      	ldr	r3, [pc, #304]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002586:	4b49      	ldr	r3, [pc, #292]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b08      	cmp	r3, #8
 8002590:	d11c      	bne.n	80025cc <HAL_RCC_OscConfig+0x18c>
 8002592:	4b46      	ldr	r3, [pc, #280]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d116      	bne.n	80025cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259e:	4b43      	ldr	r3, [pc, #268]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_RCC_OscConfig+0x176>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e1c0      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b6:	4b3d      	ldr	r3, [pc, #244]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4939      	ldr	r1, [pc, #228]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ca:	e03a      	b.n	8002642 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d4:	4b36      	ldr	r3, [pc, #216]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025da:	f7ff f8af 	bl	800173c <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e2:	f7ff f8ab 	bl	800173c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e1a1      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f4:	4b2d      	ldr	r3, [pc, #180]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002600:	4b2a      	ldr	r3, [pc, #168]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4927      	ldr	r1, [pc, #156]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]
 8002614:	e015      	b.n	8002642 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002616:	4b26      	ldr	r3, [pc, #152]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7ff f88e 	bl	800173c <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002624:	f7ff f88a 	bl	800173c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e180      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002636:	4b1d      	ldr	r3, [pc, #116]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d03a      	beq.n	80026c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d019      	beq.n	800268a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002656:	4b17      	ldr	r3, [pc, #92]	@ (80026b4 <HAL_RCC_OscConfig+0x274>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265c:	f7ff f86e 	bl	800173c <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002664:	f7ff f86a 	bl	800173c <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e160      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002676:	4b0d      	ldr	r3, [pc, #52]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002682:	2001      	movs	r0, #1
 8002684:	f000 face 	bl	8002c24 <RCC_Delay>
 8002688:	e01c      	b.n	80026c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800268a:	4b0a      	ldr	r3, [pc, #40]	@ (80026b4 <HAL_RCC_OscConfig+0x274>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002690:	f7ff f854 	bl	800173c <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002696:	e00f      	b.n	80026b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002698:	f7ff f850 	bl	800173c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d908      	bls.n	80026b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e146      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000
 80026b0:	42420000 	.word	0x42420000
 80026b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b8:	4b92      	ldr	r3, [pc, #584]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80026ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1e9      	bne.n	8002698 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80a6 	beq.w	800281e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d6:	4b8b      	ldr	r3, [pc, #556]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10d      	bne.n	80026fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	4b88      	ldr	r3, [pc, #544]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4a87      	ldr	r2, [pc, #540]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ec:	61d3      	str	r3, [r2, #28]
 80026ee:	4b85      	ldr	r3, [pc, #532]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fa:	2301      	movs	r3, #1
 80026fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fe:	4b82      	ldr	r3, [pc, #520]	@ (8002908 <HAL_RCC_OscConfig+0x4c8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d118      	bne.n	800273c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800270a:	4b7f      	ldr	r3, [pc, #508]	@ (8002908 <HAL_RCC_OscConfig+0x4c8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a7e      	ldr	r2, [pc, #504]	@ (8002908 <HAL_RCC_OscConfig+0x4c8>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002716:	f7ff f811 	bl	800173c <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271e:	f7ff f80d 	bl	800173c <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b64      	cmp	r3, #100	@ 0x64
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e103      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	4b75      	ldr	r3, [pc, #468]	@ (8002908 <HAL_RCC_OscConfig+0x4c8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x312>
 8002744:	4b6f      	ldr	r3, [pc, #444]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	4a6e      	ldr	r2, [pc, #440]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6213      	str	r3, [r2, #32]
 8002750:	e02d      	b.n	80027ae <HAL_RCC_OscConfig+0x36e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x334>
 800275a:	4b6a      	ldr	r3, [pc, #424]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	4a69      	ldr	r2, [pc, #420]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6213      	str	r3, [r2, #32]
 8002766:	4b67      	ldr	r3, [pc, #412]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4a66      	ldr	r2, [pc, #408]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800276c:	f023 0304 	bic.w	r3, r3, #4
 8002770:	6213      	str	r3, [r2, #32]
 8002772:	e01c      	b.n	80027ae <HAL_RCC_OscConfig+0x36e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b05      	cmp	r3, #5
 800277a:	d10c      	bne.n	8002796 <HAL_RCC_OscConfig+0x356>
 800277c:	4b61      	ldr	r3, [pc, #388]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4a60      	ldr	r2, [pc, #384]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	6213      	str	r3, [r2, #32]
 8002788:	4b5e      	ldr	r3, [pc, #376]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4a5d      	ldr	r2, [pc, #372]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6213      	str	r3, [r2, #32]
 8002794:	e00b      	b.n	80027ae <HAL_RCC_OscConfig+0x36e>
 8002796:	4b5b      	ldr	r3, [pc, #364]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4a5a      	ldr	r2, [pc, #360]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6213      	str	r3, [r2, #32]
 80027a2:	4b58      	ldr	r3, [pc, #352]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	4a57      	ldr	r2, [pc, #348]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	f023 0304 	bic.w	r3, r3, #4
 80027ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d015      	beq.n	80027e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b6:	f7fe ffc1 	bl	800173c <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7fe ffbd 	bl	800173c <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e0b1      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ee      	beq.n	80027be <HAL_RCC_OscConfig+0x37e>
 80027e0:	e014      	b.n	800280c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e2:	f7fe ffab 	bl	800173c <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e8:	e00a      	b.n	8002800 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7fe ffa7 	bl	800173c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e09b      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002800:	4b40      	ldr	r3, [pc, #256]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1ee      	bne.n	80027ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800280c:	7dfb      	ldrb	r3, [r7, #23]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d105      	bne.n	800281e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002812:	4b3c      	ldr	r3, [pc, #240]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	4a3b      	ldr	r2, [pc, #236]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800281c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8087 	beq.w	8002936 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002828:	4b36      	ldr	r3, [pc, #216]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b08      	cmp	r3, #8
 8002832:	d061      	beq.n	80028f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d146      	bne.n	80028ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283c:	4b33      	ldr	r3, [pc, #204]	@ (800290c <HAL_RCC_OscConfig+0x4cc>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002842:	f7fe ff7b 	bl	800173c <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284a:	f7fe ff77 	bl	800173c <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e06d      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285c:	4b29      	ldr	r3, [pc, #164]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f0      	bne.n	800284a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002870:	d108      	bne.n	8002884 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002872:	4b24      	ldr	r3, [pc, #144]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4921      	ldr	r1, [pc, #132]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002884:	4b1f      	ldr	r3, [pc, #124]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a19      	ldr	r1, [r3, #32]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002894:	430b      	orrs	r3, r1
 8002896:	491b      	ldr	r1, [pc, #108]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800289c:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <HAL_RCC_OscConfig+0x4cc>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7fe ff4b 	bl	800173c <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028aa:	f7fe ff47 	bl	800173c <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e03d      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028bc:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x46a>
 80028c8:	e035      	b.n	8002936 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ca:	4b10      	ldr	r3, [pc, #64]	@ (800290c <HAL_RCC_OscConfig+0x4cc>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d0:	f7fe ff34 	bl	800173c <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d8:	f7fe ff30 	bl	800173c <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e026      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ea:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x498>
 80028f6:	e01e      	b.n	8002936 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e019      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
 8002904:	40021000 	.word	0x40021000
 8002908:	40007000 	.word	0x40007000
 800290c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002910:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <HAL_RCC_OscConfig+0x500>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	429a      	cmp	r2, r3
 8002922:	d106      	bne.n	8002932 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d001      	beq.n	8002936 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000

08002944 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0d0      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002958:	4b6a      	ldr	r3, [pc, #424]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d910      	bls.n	8002988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b67      	ldr	r3, [pc, #412]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 0207 	bic.w	r2, r3, #7
 800296e:	4965      	ldr	r1, [pc, #404]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002976:	4b63      	ldr	r3, [pc, #396]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0b8      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d020      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029a0:	4b59      	ldr	r3, [pc, #356]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4a58      	ldr	r2, [pc, #352]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029b8:	4b53      	ldr	r3, [pc, #332]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	4a52      	ldr	r2, [pc, #328]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80029c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c4:	4b50      	ldr	r3, [pc, #320]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	494d      	ldr	r1, [pc, #308]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d040      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d107      	bne.n	80029fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ea:	4b47      	ldr	r3, [pc, #284]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d115      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e07f      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a02:	4b41      	ldr	r3, [pc, #260]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e073      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a12:	4b3d      	ldr	r3, [pc, #244]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e06b      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a22:	4b39      	ldr	r3, [pc, #228]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f023 0203 	bic.w	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4936      	ldr	r1, [pc, #216]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a34:	f7fe fe82 	bl	800173c <HAL_GetTick>
 8002a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3c:	f7fe fe7e 	bl	800173c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e053      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	4b2d      	ldr	r3, [pc, #180]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 020c 	and.w	r2, r3, #12
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d1eb      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a64:	4b27      	ldr	r3, [pc, #156]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d210      	bcs.n	8002a94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b24      	ldr	r3, [pc, #144]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 0207 	bic.w	r2, r3, #7
 8002a7a:	4922      	ldr	r1, [pc, #136]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b20      	ldr	r3, [pc, #128]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e032      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa0:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4916      	ldr	r1, [pc, #88]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002abe:	4b12      	ldr	r3, [pc, #72]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	490e      	ldr	r1, [pc, #56]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ad2:	f000 f821 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	091b      	lsrs	r3, r3, #4
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	490a      	ldr	r1, [pc, #40]	@ (8002b0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ae4:	5ccb      	ldrb	r3, [r1, r3]
 8002ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aea:	4a09      	ldr	r2, [pc, #36]	@ (8002b10 <HAL_RCC_ClockConfig+0x1cc>)
 8002aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aee:	4b09      	ldr	r3, [pc, #36]	@ (8002b14 <HAL_RCC_ClockConfig+0x1d0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe fde0 	bl	80016b8 <HAL_InitTick>

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40022000 	.word	0x40022000
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	08006b1c 	.word	0x08006b1c
 8002b10:	20000000 	.word	0x20000000
 8002b14:	20000004 	.word	0x20000004

08002b18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b32:	4b1e      	ldr	r3, [pc, #120]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x94>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d002      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0x30>
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d003      	beq.n	8002b4e <HAL_RCC_GetSysClockFreq+0x36>
 8002b46:	e027      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b48:	4b19      	ldr	r3, [pc, #100]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b4a:	613b      	str	r3, [r7, #16]
      break;
 8002b4c:	e027      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	0c9b      	lsrs	r3, r3, #18
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	4a17      	ldr	r2, [pc, #92]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b58:	5cd3      	ldrb	r3, [r2, r3]
 8002b5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d010      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b66:	4b11      	ldr	r3, [pc, #68]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x94>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	0c5b      	lsrs	r3, r3, #17
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	4a11      	ldr	r2, [pc, #68]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b72:	5cd3      	ldrb	r3, [r2, r3]
 8002b74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b7a:	fb03 f202 	mul.w	r2, r3, r2
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e004      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b8c:	fb02 f303 	mul.w	r3, r2, r3
 8002b90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	613b      	str	r3, [r7, #16]
      break;
 8002b96:	e002      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b98:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b9a:	613b      	str	r3, [r7, #16]
      break;
 8002b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9e:	693b      	ldr	r3, [r7, #16]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	371c      	adds	r7, #28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	007a1200 	.word	0x007a1200
 8002bb4:	08006b34 	.word	0x08006b34
 8002bb8:	08006b44 	.word	0x08006b44
 8002bbc:	003d0900 	.word	0x003d0900

08002bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc4:	4b02      	ldr	r3, [pc, #8]	@ (8002bd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	20000000 	.word	0x20000000

08002bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bd8:	f7ff fff2 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	4b05      	ldr	r3, [pc, #20]	@ (8002bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	4903      	ldr	r1, [pc, #12]	@ (8002bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bea:	5ccb      	ldrb	r3, [r1, r3]
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	08006b2c 	.word	0x08006b2c

08002bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c00:	f7ff ffde 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	0adb      	lsrs	r3, r3, #11
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	4903      	ldr	r1, [pc, #12]	@ (8002c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c12:	5ccb      	ldrb	r3, [r1, r3]
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	08006b2c 	.word	0x08006b2c

08002c24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c58 <RCC_Delay+0x34>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0a      	ldr	r2, [pc, #40]	@ (8002c5c <RCC_Delay+0x38>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0a5b      	lsrs	r3, r3, #9
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	fb02 f303 	mul.w	r3, r2, r3
 8002c3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c40:	bf00      	nop
  }
  while (Delay --);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1e5a      	subs	r2, r3, #1
 8002c46:	60fa      	str	r2, [r7, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f9      	bne.n	8002c40 <RCC_Delay+0x1c>
}
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	10624dd3 	.word	0x10624dd3

08002c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d07d      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c80:	4b4f      	ldr	r3, [pc, #316]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10d      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8c:	4b4c      	ldr	r3, [pc, #304]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	4a4b      	ldr	r2, [pc, #300]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c96:	61d3      	str	r3, [r2, #28]
 8002c98:	4b49      	ldr	r3, [pc, #292]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	4b46      	ldr	r3, [pc, #280]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d118      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cb4:	4b43      	ldr	r3, [pc, #268]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a42      	ldr	r2, [pc, #264]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc0:	f7fe fd3c 	bl	800173c <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc6:	e008      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc8:	f7fe fd38 	bl	800173c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	@ 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e06d      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cda:	4b3a      	ldr	r3, [pc, #232]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ce6:	4b36      	ldr	r3, [pc, #216]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d02e      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d027      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d04:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d0e:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d14:	4b2c      	ldr	r3, [pc, #176]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d1a:	4a29      	ldr	r2, [pc, #164]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d014      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2a:	f7fe fd07 	bl	800173c <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d30:	e00a      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7fe fd03 	bl	800173c <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e036      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d48:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0ee      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d54:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4917      	ldr	r1, [pc, #92]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d66:	7dfb      	ldrb	r3, [r7, #23]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d105      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6c:	4b14      	ldr	r3, [pc, #80]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	4a13      	ldr	r2, [pc, #76]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d84:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	490b      	ldr	r1, [pc, #44]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d008      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002da2:	4b07      	ldr	r3, [pc, #28]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	4904      	ldr	r1, [pc, #16]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40007000 	.word	0x40007000
 8002dc8:	42420440 	.word	0x42420440

08002dcc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	2300      	movs	r3, #0
 8002dde:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	2300      	movs	r3, #0
 8002de6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b10      	cmp	r3, #16
 8002dec:	d00a      	beq.n	8002e04 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b10      	cmp	r3, #16
 8002df2:	f200 808a 	bhi.w	8002f0a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d045      	beq.n	8002e88 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d075      	beq.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002e02:	e082      	b.n	8002f0a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002e04:	4b46      	ldr	r3, [pc, #280]	@ (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e0a:	4b45      	ldr	r3, [pc, #276]	@ (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d07b      	beq.n	8002f0e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	0c9b      	lsrs	r3, r3, #18
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	4a41      	ldr	r2, [pc, #260]	@ (8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002e20:	5cd3      	ldrb	r3, [r2, r3]
 8002e22:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d015      	beq.n	8002e5a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e2e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	0c5b      	lsrs	r3, r3, #17
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	4a3b      	ldr	r2, [pc, #236]	@ (8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002e3a:	5cd3      	ldrb	r3, [r2, r3]
 8002e3c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00d      	beq.n	8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e48:	4a38      	ldr	r2, [pc, #224]	@ (8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	fb02 f303 	mul.w	r3, r2, r3
 8002e56:	61fb      	str	r3, [r7, #28]
 8002e58:	e004      	b.n	8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4a34      	ldr	r2, [pc, #208]	@ (8002f30 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002e5e:	fb02 f303 	mul.w	r3, r2, r3
 8002e62:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e64:	4b2e      	ldr	r3, [pc, #184]	@ (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e70:	d102      	bne.n	8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	61bb      	str	r3, [r7, #24]
      break;
 8002e76:	e04a      	b.n	8002f0e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4a2d      	ldr	r2, [pc, #180]	@ (8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	085b      	lsrs	r3, r3, #1
 8002e84:	61bb      	str	r3, [r7, #24]
      break;
 8002e86:	e042      	b.n	8002f0e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002e88:	4b25      	ldr	r3, [pc, #148]	@ (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e98:	d108      	bne.n	8002eac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002ea4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	e01f      	b.n	8002eec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eb6:	d109      	bne.n	8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002eb8:	4b19      	ldr	r3, [pc, #100]	@ (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002ec4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	e00f      	b.n	8002eec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ed2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ed6:	d11c      	bne.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002ed8:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d016      	beq.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002ee4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002ee8:	61bb      	str	r3, [r7, #24]
      break;
 8002eea:	e012      	b.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002eec:	e011      	b.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002eee:	f7ff fe85 	bl	8002bfc <HAL_RCC_GetPCLK2Freq>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	0b9b      	lsrs	r3, r3, #14
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	3301      	adds	r3, #1
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f06:	61bb      	str	r3, [r7, #24]
      break;
 8002f08:	e004      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e002      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f0e:	bf00      	nop
 8002f10:	e000      	b.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f12:	bf00      	nop
    }
  }
  return (frequency);
 8002f14:	69bb      	ldr	r3, [r7, #24]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
 8002f24:	08006b48 	.word	0x08006b48
 8002f28:	08006b58 	.word	0x08006b58
 8002f2c:	007a1200 	.word	0x007a1200
 8002f30:	003d0900 	.word	0x003d0900
 8002f34:	aaaaaaab 	.word	0xaaaaaaab

08002f38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e042      	b.n	8002fd0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7fe fb24 	bl	80015ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2224      	movs	r2, #36	@ 0x24
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f971 	bl	8003264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	@ 0x28
 8002fdc:	af02      	add	r7, sp, #8
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d175      	bne.n	80030e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <HAL_UART_Transmit+0x2c>
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e06e      	b.n	80030e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2221      	movs	r2, #33	@ 0x21
 8003012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003016:	f7fe fb91 	bl	800173c <HAL_GetTick>
 800301a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	88fa      	ldrh	r2, [r7, #6]
 8003020:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	88fa      	ldrh	r2, [r7, #6]
 8003026:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003030:	d108      	bne.n	8003044 <HAL_UART_Transmit+0x6c>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	e003      	b.n	800304c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003048:	2300      	movs	r3, #0
 800304a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800304c:	e02e      	b.n	80030ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2200      	movs	r2, #0
 8003056:	2180      	movs	r1, #128	@ 0x80
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f848 	bl	80030ee <UART_WaitOnFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e03a      	b.n	80030e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10b      	bne.n	800308e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003084:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	3302      	adds	r3, #2
 800308a:	61bb      	str	r3, [r7, #24]
 800308c:	e007      	b.n	800309e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	781a      	ldrb	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	3301      	adds	r3, #1
 800309c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1cb      	bne.n	800304e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2200      	movs	r2, #0
 80030be:	2140      	movs	r1, #64	@ 0x40
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f814 	bl	80030ee <UART_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e006      	b.n	80030e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	e000      	b.n	80030e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030e4:	2302      	movs	r3, #2
  }
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b086      	sub	sp, #24
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	603b      	str	r3, [r7, #0]
 80030fa:	4613      	mov	r3, r2
 80030fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030fe:	e03b      	b.n	8003178 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003106:	d037      	beq.n	8003178 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003108:	f7fe fb18 	bl	800173c <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	6a3a      	ldr	r2, [r7, #32]
 8003114:	429a      	cmp	r2, r3
 8003116:	d302      	bcc.n	800311e <UART_WaitOnFlagUntilTimeout+0x30>
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e03a      	b.n	8003198 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d023      	beq.n	8003178 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b80      	cmp	r3, #128	@ 0x80
 8003134:	d020      	beq.n	8003178 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b40      	cmp	r3, #64	@ 0x40
 800313a:	d01d      	beq.n	8003178 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b08      	cmp	r3, #8
 8003148:	d116      	bne.n	8003178 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f81d 	bl	80031a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2208      	movs	r2, #8
 800316a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e00f      	b.n	8003198 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	4013      	ands	r3, r2
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	429a      	cmp	r2, r3
 8003186:	bf0c      	ite	eq
 8003188:	2301      	moveq	r3, #1
 800318a:	2300      	movne	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	429a      	cmp	r2, r3
 8003194:	d0b4      	beq.n	8003100 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b095      	sub	sp, #84	@ 0x54
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	330c      	adds	r3, #12
 80031ae:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b2:	e853 3f00 	ldrex	r3, [r3]
 80031b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	330c      	adds	r3, #12
 80031c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80031ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031d0:	e841 2300 	strex	r3, r2, [r1]
 80031d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e5      	bne.n	80031a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3314      	adds	r3, #20
 80031e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	e853 3f00 	ldrex	r3, [r3]
 80031ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3314      	adds	r3, #20
 80031fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003200:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003204:	e841 2300 	strex	r3, r2, [r1]
 8003208:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e5      	bne.n	80031dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003214:	2b01      	cmp	r3, #1
 8003216:	d119      	bne.n	800324c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	330c      	adds	r3, #12
 800321e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	e853 3f00 	ldrex	r3, [r3]
 8003226:	60bb      	str	r3, [r7, #8]
   return(result);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f023 0310 	bic.w	r3, r3, #16
 800322e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	330c      	adds	r3, #12
 8003236:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003238:	61ba      	str	r2, [r7, #24]
 800323a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323c:	6979      	ldr	r1, [r7, #20]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	e841 2300 	strex	r3, r2, [r1]
 8003244:	613b      	str	r3, [r7, #16]
   return(result);
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1e5      	bne.n	8003218 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800325a:	bf00      	nop
 800325c:	3754      	adds	r7, #84	@ 0x54
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr

08003264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800329e:	f023 030c 	bic.w	r3, r3, #12
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6812      	ldr	r2, [r2, #0]
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	430b      	orrs	r3, r1
 80032aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003378 <UART_SetConfig+0x114>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d103      	bne.n	80032d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032cc:	f7ff fc96 	bl	8002bfc <HAL_RCC_GetPCLK2Freq>
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	e002      	b.n	80032da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032d4:	f7ff fc7e 	bl	8002bd4 <HAL_RCC_GetPCLK1Freq>
 80032d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	009a      	lsls	r2, r3, #2
 80032e4:	441a      	add	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f0:	4a22      	ldr	r2, [pc, #136]	@ (800337c <UART_SetConfig+0x118>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	0119      	lsls	r1, r3, #4
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	009a      	lsls	r2, r3, #2
 8003304:	441a      	add	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003310:	4b1a      	ldr	r3, [pc, #104]	@ (800337c <UART_SetConfig+0x118>)
 8003312:	fba3 0302 	umull	r0, r3, r3, r2
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	2064      	movs	r0, #100	@ 0x64
 800331a:	fb00 f303 	mul.w	r3, r0, r3
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	3332      	adds	r3, #50	@ 0x32
 8003324:	4a15      	ldr	r2, [pc, #84]	@ (800337c <UART_SetConfig+0x118>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003330:	4419      	add	r1, r3
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	009a      	lsls	r2, r3, #2
 800333c:	441a      	add	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	fbb2 f2f3 	udiv	r2, r2, r3
 8003348:	4b0c      	ldr	r3, [pc, #48]	@ (800337c <UART_SetConfig+0x118>)
 800334a:	fba3 0302 	umull	r0, r3, r3, r2
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	2064      	movs	r0, #100	@ 0x64
 8003352:	fb00 f303 	mul.w	r3, r0, r3
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	3332      	adds	r3, #50	@ 0x32
 800335c:	4a07      	ldr	r2, [pc, #28]	@ (800337c <UART_SetConfig+0x118>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	f003 020f 	and.w	r2, r3, #15
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	440a      	add	r2, r1
 800336e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40013800 	.word	0x40013800
 800337c:	51eb851f 	.word	0x51eb851f

08003380 <__cvt>:
 8003380:	2b00      	cmp	r3, #0
 8003382:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003386:	461d      	mov	r5, r3
 8003388:	bfbb      	ittet	lt
 800338a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800338e:	461d      	movlt	r5, r3
 8003390:	2300      	movge	r3, #0
 8003392:	232d      	movlt	r3, #45	@ 0x2d
 8003394:	b088      	sub	sp, #32
 8003396:	4614      	mov	r4, r2
 8003398:	bfb8      	it	lt
 800339a:	4614      	movlt	r4, r2
 800339c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800339e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80033a0:	7013      	strb	r3, [r2, #0]
 80033a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80033a4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80033a8:	f023 0820 	bic.w	r8, r3, #32
 80033ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80033b0:	d005      	beq.n	80033be <__cvt+0x3e>
 80033b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80033b6:	d100      	bne.n	80033ba <__cvt+0x3a>
 80033b8:	3601      	adds	r6, #1
 80033ba:	2302      	movs	r3, #2
 80033bc:	e000      	b.n	80033c0 <__cvt+0x40>
 80033be:	2303      	movs	r3, #3
 80033c0:	aa07      	add	r2, sp, #28
 80033c2:	9204      	str	r2, [sp, #16]
 80033c4:	aa06      	add	r2, sp, #24
 80033c6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80033ca:	e9cd 3600 	strd	r3, r6, [sp]
 80033ce:	4622      	mov	r2, r4
 80033d0:	462b      	mov	r3, r5
 80033d2:	f000 fe61 	bl	8004098 <_dtoa_r>
 80033d6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80033da:	4607      	mov	r7, r0
 80033dc:	d119      	bne.n	8003412 <__cvt+0x92>
 80033de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80033e0:	07db      	lsls	r3, r3, #31
 80033e2:	d50e      	bpl.n	8003402 <__cvt+0x82>
 80033e4:	eb00 0906 	add.w	r9, r0, r6
 80033e8:	2200      	movs	r2, #0
 80033ea:	2300      	movs	r3, #0
 80033ec:	4620      	mov	r0, r4
 80033ee:	4629      	mov	r1, r5
 80033f0:	f7fd fada 	bl	80009a8 <__aeabi_dcmpeq>
 80033f4:	b108      	cbz	r0, 80033fa <__cvt+0x7a>
 80033f6:	f8cd 901c 	str.w	r9, [sp, #28]
 80033fa:	2230      	movs	r2, #48	@ 0x30
 80033fc:	9b07      	ldr	r3, [sp, #28]
 80033fe:	454b      	cmp	r3, r9
 8003400:	d31e      	bcc.n	8003440 <__cvt+0xc0>
 8003402:	4638      	mov	r0, r7
 8003404:	9b07      	ldr	r3, [sp, #28]
 8003406:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003408:	1bdb      	subs	r3, r3, r7
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	b008      	add	sp, #32
 800340e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003412:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003416:	eb00 0906 	add.w	r9, r0, r6
 800341a:	d1e5      	bne.n	80033e8 <__cvt+0x68>
 800341c:	7803      	ldrb	r3, [r0, #0]
 800341e:	2b30      	cmp	r3, #48	@ 0x30
 8003420:	d10a      	bne.n	8003438 <__cvt+0xb8>
 8003422:	2200      	movs	r2, #0
 8003424:	2300      	movs	r3, #0
 8003426:	4620      	mov	r0, r4
 8003428:	4629      	mov	r1, r5
 800342a:	f7fd fabd 	bl	80009a8 <__aeabi_dcmpeq>
 800342e:	b918      	cbnz	r0, 8003438 <__cvt+0xb8>
 8003430:	f1c6 0601 	rsb	r6, r6, #1
 8003434:	f8ca 6000 	str.w	r6, [sl]
 8003438:	f8da 3000 	ldr.w	r3, [sl]
 800343c:	4499      	add	r9, r3
 800343e:	e7d3      	b.n	80033e8 <__cvt+0x68>
 8003440:	1c59      	adds	r1, r3, #1
 8003442:	9107      	str	r1, [sp, #28]
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	e7d9      	b.n	80033fc <__cvt+0x7c>

08003448 <__exponent>:
 8003448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800344a:	2900      	cmp	r1, #0
 800344c:	bfb6      	itet	lt
 800344e:	232d      	movlt	r3, #45	@ 0x2d
 8003450:	232b      	movge	r3, #43	@ 0x2b
 8003452:	4249      	neglt	r1, r1
 8003454:	2909      	cmp	r1, #9
 8003456:	7002      	strb	r2, [r0, #0]
 8003458:	7043      	strb	r3, [r0, #1]
 800345a:	dd29      	ble.n	80034b0 <__exponent+0x68>
 800345c:	f10d 0307 	add.w	r3, sp, #7
 8003460:	461d      	mov	r5, r3
 8003462:	270a      	movs	r7, #10
 8003464:	fbb1 f6f7 	udiv	r6, r1, r7
 8003468:	461a      	mov	r2, r3
 800346a:	fb07 1416 	mls	r4, r7, r6, r1
 800346e:	3430      	adds	r4, #48	@ 0x30
 8003470:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003474:	460c      	mov	r4, r1
 8003476:	2c63      	cmp	r4, #99	@ 0x63
 8003478:	4631      	mov	r1, r6
 800347a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800347e:	dcf1      	bgt.n	8003464 <__exponent+0x1c>
 8003480:	3130      	adds	r1, #48	@ 0x30
 8003482:	1e94      	subs	r4, r2, #2
 8003484:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003488:	4623      	mov	r3, r4
 800348a:	1c41      	adds	r1, r0, #1
 800348c:	42ab      	cmp	r3, r5
 800348e:	d30a      	bcc.n	80034a6 <__exponent+0x5e>
 8003490:	f10d 0309 	add.w	r3, sp, #9
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	42ac      	cmp	r4, r5
 8003498:	bf88      	it	hi
 800349a:	2300      	movhi	r3, #0
 800349c:	3302      	adds	r3, #2
 800349e:	4403      	add	r3, r0
 80034a0:	1a18      	subs	r0, r3, r0
 80034a2:	b003      	add	sp, #12
 80034a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034a6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80034aa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80034ae:	e7ed      	b.n	800348c <__exponent+0x44>
 80034b0:	2330      	movs	r3, #48	@ 0x30
 80034b2:	3130      	adds	r1, #48	@ 0x30
 80034b4:	7083      	strb	r3, [r0, #2]
 80034b6:	70c1      	strb	r1, [r0, #3]
 80034b8:	1d03      	adds	r3, r0, #4
 80034ba:	e7f1      	b.n	80034a0 <__exponent+0x58>

080034bc <_printf_float>:
 80034bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c0:	b091      	sub	sp, #68	@ 0x44
 80034c2:	460c      	mov	r4, r1
 80034c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80034c8:	4616      	mov	r6, r2
 80034ca:	461f      	mov	r7, r3
 80034cc:	4605      	mov	r5, r0
 80034ce:	f000 fcd3 	bl	8003e78 <_localeconv_r>
 80034d2:	6803      	ldr	r3, [r0, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	9308      	str	r3, [sp, #32]
 80034d8:	f7fc fe3a 	bl	8000150 <strlen>
 80034dc:	2300      	movs	r3, #0
 80034de:	930e      	str	r3, [sp, #56]	@ 0x38
 80034e0:	f8d8 3000 	ldr.w	r3, [r8]
 80034e4:	9009      	str	r0, [sp, #36]	@ 0x24
 80034e6:	3307      	adds	r3, #7
 80034e8:	f023 0307 	bic.w	r3, r3, #7
 80034ec:	f103 0208 	add.w	r2, r3, #8
 80034f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80034f4:	f8d4 b000 	ldr.w	fp, [r4]
 80034f8:	f8c8 2000 	str.w	r2, [r8]
 80034fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003500:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003504:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003506:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800350a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800350e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003512:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003516:	4b9c      	ldr	r3, [pc, #624]	@ (8003788 <_printf_float+0x2cc>)
 8003518:	f7fd fa78 	bl	8000a0c <__aeabi_dcmpun>
 800351c:	bb70      	cbnz	r0, 800357c <_printf_float+0xc0>
 800351e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003522:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003526:	4b98      	ldr	r3, [pc, #608]	@ (8003788 <_printf_float+0x2cc>)
 8003528:	f7fd fa52 	bl	80009d0 <__aeabi_dcmple>
 800352c:	bb30      	cbnz	r0, 800357c <_printf_float+0xc0>
 800352e:	2200      	movs	r2, #0
 8003530:	2300      	movs	r3, #0
 8003532:	4640      	mov	r0, r8
 8003534:	4649      	mov	r1, r9
 8003536:	f7fd fa41 	bl	80009bc <__aeabi_dcmplt>
 800353a:	b110      	cbz	r0, 8003542 <_printf_float+0x86>
 800353c:	232d      	movs	r3, #45	@ 0x2d
 800353e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003542:	4a92      	ldr	r2, [pc, #584]	@ (800378c <_printf_float+0x2d0>)
 8003544:	4b92      	ldr	r3, [pc, #584]	@ (8003790 <_printf_float+0x2d4>)
 8003546:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800354a:	bf94      	ite	ls
 800354c:	4690      	movls	r8, r2
 800354e:	4698      	movhi	r8, r3
 8003550:	2303      	movs	r3, #3
 8003552:	f04f 0900 	mov.w	r9, #0
 8003556:	6123      	str	r3, [r4, #16]
 8003558:	f02b 0304 	bic.w	r3, fp, #4
 800355c:	6023      	str	r3, [r4, #0]
 800355e:	4633      	mov	r3, r6
 8003560:	4621      	mov	r1, r4
 8003562:	4628      	mov	r0, r5
 8003564:	9700      	str	r7, [sp, #0]
 8003566:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003568:	f000 f9d4 	bl	8003914 <_printf_common>
 800356c:	3001      	adds	r0, #1
 800356e:	f040 8090 	bne.w	8003692 <_printf_float+0x1d6>
 8003572:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003576:	b011      	add	sp, #68	@ 0x44
 8003578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800357c:	4642      	mov	r2, r8
 800357e:	464b      	mov	r3, r9
 8003580:	4640      	mov	r0, r8
 8003582:	4649      	mov	r1, r9
 8003584:	f7fd fa42 	bl	8000a0c <__aeabi_dcmpun>
 8003588:	b148      	cbz	r0, 800359e <_printf_float+0xe2>
 800358a:	464b      	mov	r3, r9
 800358c:	2b00      	cmp	r3, #0
 800358e:	bfb8      	it	lt
 8003590:	232d      	movlt	r3, #45	@ 0x2d
 8003592:	4a80      	ldr	r2, [pc, #512]	@ (8003794 <_printf_float+0x2d8>)
 8003594:	bfb8      	it	lt
 8003596:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800359a:	4b7f      	ldr	r3, [pc, #508]	@ (8003798 <_printf_float+0x2dc>)
 800359c:	e7d3      	b.n	8003546 <_printf_float+0x8a>
 800359e:	6863      	ldr	r3, [r4, #4]
 80035a0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	d13f      	bne.n	8003628 <_printf_float+0x16c>
 80035a8:	2306      	movs	r3, #6
 80035aa:	6063      	str	r3, [r4, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80035b2:	6023      	str	r3, [r4, #0]
 80035b4:	9206      	str	r2, [sp, #24]
 80035b6:	aa0e      	add	r2, sp, #56	@ 0x38
 80035b8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80035bc:	aa0d      	add	r2, sp, #52	@ 0x34
 80035be:	9203      	str	r2, [sp, #12]
 80035c0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80035c4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80035c8:	6863      	ldr	r3, [r4, #4]
 80035ca:	4642      	mov	r2, r8
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	4628      	mov	r0, r5
 80035d0:	464b      	mov	r3, r9
 80035d2:	910a      	str	r1, [sp, #40]	@ 0x28
 80035d4:	f7ff fed4 	bl	8003380 <__cvt>
 80035d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80035da:	4680      	mov	r8, r0
 80035dc:	2947      	cmp	r1, #71	@ 0x47
 80035de:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80035e0:	d128      	bne.n	8003634 <_printf_float+0x178>
 80035e2:	1cc8      	adds	r0, r1, #3
 80035e4:	db02      	blt.n	80035ec <_printf_float+0x130>
 80035e6:	6863      	ldr	r3, [r4, #4]
 80035e8:	4299      	cmp	r1, r3
 80035ea:	dd40      	ble.n	800366e <_printf_float+0x1b2>
 80035ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80035f0:	fa5f fa8a 	uxtb.w	sl, sl
 80035f4:	4652      	mov	r2, sl
 80035f6:	3901      	subs	r1, #1
 80035f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80035fc:	910d      	str	r1, [sp, #52]	@ 0x34
 80035fe:	f7ff ff23 	bl	8003448 <__exponent>
 8003602:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003604:	4681      	mov	r9, r0
 8003606:	1813      	adds	r3, r2, r0
 8003608:	2a01      	cmp	r2, #1
 800360a:	6123      	str	r3, [r4, #16]
 800360c:	dc02      	bgt.n	8003614 <_printf_float+0x158>
 800360e:	6822      	ldr	r2, [r4, #0]
 8003610:	07d2      	lsls	r2, r2, #31
 8003612:	d501      	bpl.n	8003618 <_printf_float+0x15c>
 8003614:	3301      	adds	r3, #1
 8003616:	6123      	str	r3, [r4, #16]
 8003618:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800361c:	2b00      	cmp	r3, #0
 800361e:	d09e      	beq.n	800355e <_printf_float+0xa2>
 8003620:	232d      	movs	r3, #45	@ 0x2d
 8003622:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003626:	e79a      	b.n	800355e <_printf_float+0xa2>
 8003628:	2947      	cmp	r1, #71	@ 0x47
 800362a:	d1bf      	bne.n	80035ac <_printf_float+0xf0>
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1bd      	bne.n	80035ac <_printf_float+0xf0>
 8003630:	2301      	movs	r3, #1
 8003632:	e7ba      	b.n	80035aa <_printf_float+0xee>
 8003634:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003638:	d9dc      	bls.n	80035f4 <_printf_float+0x138>
 800363a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800363e:	d118      	bne.n	8003672 <_printf_float+0x1b6>
 8003640:	2900      	cmp	r1, #0
 8003642:	6863      	ldr	r3, [r4, #4]
 8003644:	dd0b      	ble.n	800365e <_printf_float+0x1a2>
 8003646:	6121      	str	r1, [r4, #16]
 8003648:	b913      	cbnz	r3, 8003650 <_printf_float+0x194>
 800364a:	6822      	ldr	r2, [r4, #0]
 800364c:	07d0      	lsls	r0, r2, #31
 800364e:	d502      	bpl.n	8003656 <_printf_float+0x19a>
 8003650:	3301      	adds	r3, #1
 8003652:	440b      	add	r3, r1
 8003654:	6123      	str	r3, [r4, #16]
 8003656:	f04f 0900 	mov.w	r9, #0
 800365a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800365c:	e7dc      	b.n	8003618 <_printf_float+0x15c>
 800365e:	b913      	cbnz	r3, 8003666 <_printf_float+0x1aa>
 8003660:	6822      	ldr	r2, [r4, #0]
 8003662:	07d2      	lsls	r2, r2, #31
 8003664:	d501      	bpl.n	800366a <_printf_float+0x1ae>
 8003666:	3302      	adds	r3, #2
 8003668:	e7f4      	b.n	8003654 <_printf_float+0x198>
 800366a:	2301      	movs	r3, #1
 800366c:	e7f2      	b.n	8003654 <_printf_float+0x198>
 800366e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003672:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003674:	4299      	cmp	r1, r3
 8003676:	db05      	blt.n	8003684 <_printf_float+0x1c8>
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	6121      	str	r1, [r4, #16]
 800367c:	07d8      	lsls	r0, r3, #31
 800367e:	d5ea      	bpl.n	8003656 <_printf_float+0x19a>
 8003680:	1c4b      	adds	r3, r1, #1
 8003682:	e7e7      	b.n	8003654 <_printf_float+0x198>
 8003684:	2900      	cmp	r1, #0
 8003686:	bfcc      	ite	gt
 8003688:	2201      	movgt	r2, #1
 800368a:	f1c1 0202 	rsble	r2, r1, #2
 800368e:	4413      	add	r3, r2
 8003690:	e7e0      	b.n	8003654 <_printf_float+0x198>
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	055a      	lsls	r2, r3, #21
 8003696:	d407      	bmi.n	80036a8 <_printf_float+0x1ec>
 8003698:	6923      	ldr	r3, [r4, #16]
 800369a:	4642      	mov	r2, r8
 800369c:	4631      	mov	r1, r6
 800369e:	4628      	mov	r0, r5
 80036a0:	47b8      	blx	r7
 80036a2:	3001      	adds	r0, #1
 80036a4:	d12b      	bne.n	80036fe <_printf_float+0x242>
 80036a6:	e764      	b.n	8003572 <_printf_float+0xb6>
 80036a8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80036ac:	f240 80dc 	bls.w	8003868 <_printf_float+0x3ac>
 80036b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80036b4:	2200      	movs	r2, #0
 80036b6:	2300      	movs	r3, #0
 80036b8:	f7fd f976 	bl	80009a8 <__aeabi_dcmpeq>
 80036bc:	2800      	cmp	r0, #0
 80036be:	d033      	beq.n	8003728 <_printf_float+0x26c>
 80036c0:	2301      	movs	r3, #1
 80036c2:	4631      	mov	r1, r6
 80036c4:	4628      	mov	r0, r5
 80036c6:	4a35      	ldr	r2, [pc, #212]	@ (800379c <_printf_float+0x2e0>)
 80036c8:	47b8      	blx	r7
 80036ca:	3001      	adds	r0, #1
 80036cc:	f43f af51 	beq.w	8003572 <_printf_float+0xb6>
 80036d0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80036d4:	4543      	cmp	r3, r8
 80036d6:	db02      	blt.n	80036de <_printf_float+0x222>
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	07d8      	lsls	r0, r3, #31
 80036dc:	d50f      	bpl.n	80036fe <_printf_float+0x242>
 80036de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80036e2:	4631      	mov	r1, r6
 80036e4:	4628      	mov	r0, r5
 80036e6:	47b8      	blx	r7
 80036e8:	3001      	adds	r0, #1
 80036ea:	f43f af42 	beq.w	8003572 <_printf_float+0xb6>
 80036ee:	f04f 0900 	mov.w	r9, #0
 80036f2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80036f6:	f104 0a1a 	add.w	sl, r4, #26
 80036fa:	45c8      	cmp	r8, r9
 80036fc:	dc09      	bgt.n	8003712 <_printf_float+0x256>
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	079b      	lsls	r3, r3, #30
 8003702:	f100 8102 	bmi.w	800390a <_printf_float+0x44e>
 8003706:	68e0      	ldr	r0, [r4, #12]
 8003708:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800370a:	4298      	cmp	r0, r3
 800370c:	bfb8      	it	lt
 800370e:	4618      	movlt	r0, r3
 8003710:	e731      	b.n	8003576 <_printf_float+0xba>
 8003712:	2301      	movs	r3, #1
 8003714:	4652      	mov	r2, sl
 8003716:	4631      	mov	r1, r6
 8003718:	4628      	mov	r0, r5
 800371a:	47b8      	blx	r7
 800371c:	3001      	adds	r0, #1
 800371e:	f43f af28 	beq.w	8003572 <_printf_float+0xb6>
 8003722:	f109 0901 	add.w	r9, r9, #1
 8003726:	e7e8      	b.n	80036fa <_printf_float+0x23e>
 8003728:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800372a:	2b00      	cmp	r3, #0
 800372c:	dc38      	bgt.n	80037a0 <_printf_float+0x2e4>
 800372e:	2301      	movs	r3, #1
 8003730:	4631      	mov	r1, r6
 8003732:	4628      	mov	r0, r5
 8003734:	4a19      	ldr	r2, [pc, #100]	@ (800379c <_printf_float+0x2e0>)
 8003736:	47b8      	blx	r7
 8003738:	3001      	adds	r0, #1
 800373a:	f43f af1a 	beq.w	8003572 <_printf_float+0xb6>
 800373e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003742:	ea59 0303 	orrs.w	r3, r9, r3
 8003746:	d102      	bne.n	800374e <_printf_float+0x292>
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	07d9      	lsls	r1, r3, #31
 800374c:	d5d7      	bpl.n	80036fe <_printf_float+0x242>
 800374e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003752:	4631      	mov	r1, r6
 8003754:	4628      	mov	r0, r5
 8003756:	47b8      	blx	r7
 8003758:	3001      	adds	r0, #1
 800375a:	f43f af0a 	beq.w	8003572 <_printf_float+0xb6>
 800375e:	f04f 0a00 	mov.w	sl, #0
 8003762:	f104 0b1a 	add.w	fp, r4, #26
 8003766:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003768:	425b      	negs	r3, r3
 800376a:	4553      	cmp	r3, sl
 800376c:	dc01      	bgt.n	8003772 <_printf_float+0x2b6>
 800376e:	464b      	mov	r3, r9
 8003770:	e793      	b.n	800369a <_printf_float+0x1de>
 8003772:	2301      	movs	r3, #1
 8003774:	465a      	mov	r2, fp
 8003776:	4631      	mov	r1, r6
 8003778:	4628      	mov	r0, r5
 800377a:	47b8      	blx	r7
 800377c:	3001      	adds	r0, #1
 800377e:	f43f aef8 	beq.w	8003572 <_printf_float+0xb6>
 8003782:	f10a 0a01 	add.w	sl, sl, #1
 8003786:	e7ee      	b.n	8003766 <_printf_float+0x2aa>
 8003788:	7fefffff 	.word	0x7fefffff
 800378c:	08006b5a 	.word	0x08006b5a
 8003790:	08006b5e 	.word	0x08006b5e
 8003794:	08006b62 	.word	0x08006b62
 8003798:	08006b66 	.word	0x08006b66
 800379c:	08006b6a 	.word	0x08006b6a
 80037a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80037a2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80037a6:	4553      	cmp	r3, sl
 80037a8:	bfa8      	it	ge
 80037aa:	4653      	movge	r3, sl
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	4699      	mov	r9, r3
 80037b0:	dc36      	bgt.n	8003820 <_printf_float+0x364>
 80037b2:	f04f 0b00 	mov.w	fp, #0
 80037b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037ba:	f104 021a 	add.w	r2, r4, #26
 80037be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80037c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80037c2:	eba3 0309 	sub.w	r3, r3, r9
 80037c6:	455b      	cmp	r3, fp
 80037c8:	dc31      	bgt.n	800382e <_printf_float+0x372>
 80037ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80037cc:	459a      	cmp	sl, r3
 80037ce:	dc3a      	bgt.n	8003846 <_printf_float+0x38a>
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	07da      	lsls	r2, r3, #31
 80037d4:	d437      	bmi.n	8003846 <_printf_float+0x38a>
 80037d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80037d8:	ebaa 0903 	sub.w	r9, sl, r3
 80037dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80037de:	ebaa 0303 	sub.w	r3, sl, r3
 80037e2:	4599      	cmp	r9, r3
 80037e4:	bfa8      	it	ge
 80037e6:	4699      	movge	r9, r3
 80037e8:	f1b9 0f00 	cmp.w	r9, #0
 80037ec:	dc33      	bgt.n	8003856 <_printf_float+0x39a>
 80037ee:	f04f 0800 	mov.w	r8, #0
 80037f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037f6:	f104 0b1a 	add.w	fp, r4, #26
 80037fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80037fc:	ebaa 0303 	sub.w	r3, sl, r3
 8003800:	eba3 0309 	sub.w	r3, r3, r9
 8003804:	4543      	cmp	r3, r8
 8003806:	f77f af7a 	ble.w	80036fe <_printf_float+0x242>
 800380a:	2301      	movs	r3, #1
 800380c:	465a      	mov	r2, fp
 800380e:	4631      	mov	r1, r6
 8003810:	4628      	mov	r0, r5
 8003812:	47b8      	blx	r7
 8003814:	3001      	adds	r0, #1
 8003816:	f43f aeac 	beq.w	8003572 <_printf_float+0xb6>
 800381a:	f108 0801 	add.w	r8, r8, #1
 800381e:	e7ec      	b.n	80037fa <_printf_float+0x33e>
 8003820:	4642      	mov	r2, r8
 8003822:	4631      	mov	r1, r6
 8003824:	4628      	mov	r0, r5
 8003826:	47b8      	blx	r7
 8003828:	3001      	adds	r0, #1
 800382a:	d1c2      	bne.n	80037b2 <_printf_float+0x2f6>
 800382c:	e6a1      	b.n	8003572 <_printf_float+0xb6>
 800382e:	2301      	movs	r3, #1
 8003830:	4631      	mov	r1, r6
 8003832:	4628      	mov	r0, r5
 8003834:	920a      	str	r2, [sp, #40]	@ 0x28
 8003836:	47b8      	blx	r7
 8003838:	3001      	adds	r0, #1
 800383a:	f43f ae9a 	beq.w	8003572 <_printf_float+0xb6>
 800383e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003840:	f10b 0b01 	add.w	fp, fp, #1
 8003844:	e7bb      	b.n	80037be <_printf_float+0x302>
 8003846:	4631      	mov	r1, r6
 8003848:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800384c:	4628      	mov	r0, r5
 800384e:	47b8      	blx	r7
 8003850:	3001      	adds	r0, #1
 8003852:	d1c0      	bne.n	80037d6 <_printf_float+0x31a>
 8003854:	e68d      	b.n	8003572 <_printf_float+0xb6>
 8003856:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003858:	464b      	mov	r3, r9
 800385a:	4631      	mov	r1, r6
 800385c:	4628      	mov	r0, r5
 800385e:	4442      	add	r2, r8
 8003860:	47b8      	blx	r7
 8003862:	3001      	adds	r0, #1
 8003864:	d1c3      	bne.n	80037ee <_printf_float+0x332>
 8003866:	e684      	b.n	8003572 <_printf_float+0xb6>
 8003868:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800386c:	f1ba 0f01 	cmp.w	sl, #1
 8003870:	dc01      	bgt.n	8003876 <_printf_float+0x3ba>
 8003872:	07db      	lsls	r3, r3, #31
 8003874:	d536      	bpl.n	80038e4 <_printf_float+0x428>
 8003876:	2301      	movs	r3, #1
 8003878:	4642      	mov	r2, r8
 800387a:	4631      	mov	r1, r6
 800387c:	4628      	mov	r0, r5
 800387e:	47b8      	blx	r7
 8003880:	3001      	adds	r0, #1
 8003882:	f43f ae76 	beq.w	8003572 <_printf_float+0xb6>
 8003886:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800388a:	4631      	mov	r1, r6
 800388c:	4628      	mov	r0, r5
 800388e:	47b8      	blx	r7
 8003890:	3001      	adds	r0, #1
 8003892:	f43f ae6e 	beq.w	8003572 <_printf_float+0xb6>
 8003896:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800389a:	2200      	movs	r2, #0
 800389c:	2300      	movs	r3, #0
 800389e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80038a2:	f7fd f881 	bl	80009a8 <__aeabi_dcmpeq>
 80038a6:	b9c0      	cbnz	r0, 80038da <_printf_float+0x41e>
 80038a8:	4653      	mov	r3, sl
 80038aa:	f108 0201 	add.w	r2, r8, #1
 80038ae:	4631      	mov	r1, r6
 80038b0:	4628      	mov	r0, r5
 80038b2:	47b8      	blx	r7
 80038b4:	3001      	adds	r0, #1
 80038b6:	d10c      	bne.n	80038d2 <_printf_float+0x416>
 80038b8:	e65b      	b.n	8003572 <_printf_float+0xb6>
 80038ba:	2301      	movs	r3, #1
 80038bc:	465a      	mov	r2, fp
 80038be:	4631      	mov	r1, r6
 80038c0:	4628      	mov	r0, r5
 80038c2:	47b8      	blx	r7
 80038c4:	3001      	adds	r0, #1
 80038c6:	f43f ae54 	beq.w	8003572 <_printf_float+0xb6>
 80038ca:	f108 0801 	add.w	r8, r8, #1
 80038ce:	45d0      	cmp	r8, sl
 80038d0:	dbf3      	blt.n	80038ba <_printf_float+0x3fe>
 80038d2:	464b      	mov	r3, r9
 80038d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80038d8:	e6e0      	b.n	800369c <_printf_float+0x1e0>
 80038da:	f04f 0800 	mov.w	r8, #0
 80038de:	f104 0b1a 	add.w	fp, r4, #26
 80038e2:	e7f4      	b.n	80038ce <_printf_float+0x412>
 80038e4:	2301      	movs	r3, #1
 80038e6:	4642      	mov	r2, r8
 80038e8:	e7e1      	b.n	80038ae <_printf_float+0x3f2>
 80038ea:	2301      	movs	r3, #1
 80038ec:	464a      	mov	r2, r9
 80038ee:	4631      	mov	r1, r6
 80038f0:	4628      	mov	r0, r5
 80038f2:	47b8      	blx	r7
 80038f4:	3001      	adds	r0, #1
 80038f6:	f43f ae3c 	beq.w	8003572 <_printf_float+0xb6>
 80038fa:	f108 0801 	add.w	r8, r8, #1
 80038fe:	68e3      	ldr	r3, [r4, #12]
 8003900:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003902:	1a5b      	subs	r3, r3, r1
 8003904:	4543      	cmp	r3, r8
 8003906:	dcf0      	bgt.n	80038ea <_printf_float+0x42e>
 8003908:	e6fd      	b.n	8003706 <_printf_float+0x24a>
 800390a:	f04f 0800 	mov.w	r8, #0
 800390e:	f104 0919 	add.w	r9, r4, #25
 8003912:	e7f4      	b.n	80038fe <_printf_float+0x442>

08003914 <_printf_common>:
 8003914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003918:	4616      	mov	r6, r2
 800391a:	4698      	mov	r8, r3
 800391c:	688a      	ldr	r2, [r1, #8]
 800391e:	690b      	ldr	r3, [r1, #16]
 8003920:	4607      	mov	r7, r0
 8003922:	4293      	cmp	r3, r2
 8003924:	bfb8      	it	lt
 8003926:	4613      	movlt	r3, r2
 8003928:	6033      	str	r3, [r6, #0]
 800392a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800392e:	460c      	mov	r4, r1
 8003930:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003934:	b10a      	cbz	r2, 800393a <_printf_common+0x26>
 8003936:	3301      	adds	r3, #1
 8003938:	6033      	str	r3, [r6, #0]
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	0699      	lsls	r1, r3, #26
 800393e:	bf42      	ittt	mi
 8003940:	6833      	ldrmi	r3, [r6, #0]
 8003942:	3302      	addmi	r3, #2
 8003944:	6033      	strmi	r3, [r6, #0]
 8003946:	6825      	ldr	r5, [r4, #0]
 8003948:	f015 0506 	ands.w	r5, r5, #6
 800394c:	d106      	bne.n	800395c <_printf_common+0x48>
 800394e:	f104 0a19 	add.w	sl, r4, #25
 8003952:	68e3      	ldr	r3, [r4, #12]
 8003954:	6832      	ldr	r2, [r6, #0]
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	42ab      	cmp	r3, r5
 800395a:	dc2b      	bgt.n	80039b4 <_printf_common+0xa0>
 800395c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003960:	6822      	ldr	r2, [r4, #0]
 8003962:	3b00      	subs	r3, #0
 8003964:	bf18      	it	ne
 8003966:	2301      	movne	r3, #1
 8003968:	0692      	lsls	r2, r2, #26
 800396a:	d430      	bmi.n	80039ce <_printf_common+0xba>
 800396c:	4641      	mov	r1, r8
 800396e:	4638      	mov	r0, r7
 8003970:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003974:	47c8      	blx	r9
 8003976:	3001      	adds	r0, #1
 8003978:	d023      	beq.n	80039c2 <_printf_common+0xae>
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	6922      	ldr	r2, [r4, #16]
 800397e:	f003 0306 	and.w	r3, r3, #6
 8003982:	2b04      	cmp	r3, #4
 8003984:	bf14      	ite	ne
 8003986:	2500      	movne	r5, #0
 8003988:	6833      	ldreq	r3, [r6, #0]
 800398a:	f04f 0600 	mov.w	r6, #0
 800398e:	bf08      	it	eq
 8003990:	68e5      	ldreq	r5, [r4, #12]
 8003992:	f104 041a 	add.w	r4, r4, #26
 8003996:	bf08      	it	eq
 8003998:	1aed      	subeq	r5, r5, r3
 800399a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800399e:	bf08      	it	eq
 80039a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039a4:	4293      	cmp	r3, r2
 80039a6:	bfc4      	itt	gt
 80039a8:	1a9b      	subgt	r3, r3, r2
 80039aa:	18ed      	addgt	r5, r5, r3
 80039ac:	42b5      	cmp	r5, r6
 80039ae:	d11a      	bne.n	80039e6 <_printf_common+0xd2>
 80039b0:	2000      	movs	r0, #0
 80039b2:	e008      	b.n	80039c6 <_printf_common+0xb2>
 80039b4:	2301      	movs	r3, #1
 80039b6:	4652      	mov	r2, sl
 80039b8:	4641      	mov	r1, r8
 80039ba:	4638      	mov	r0, r7
 80039bc:	47c8      	blx	r9
 80039be:	3001      	adds	r0, #1
 80039c0:	d103      	bne.n	80039ca <_printf_common+0xb6>
 80039c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ca:	3501      	adds	r5, #1
 80039cc:	e7c1      	b.n	8003952 <_printf_common+0x3e>
 80039ce:	2030      	movs	r0, #48	@ 0x30
 80039d0:	18e1      	adds	r1, r4, r3
 80039d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80039dc:	4422      	add	r2, r4
 80039de:	3302      	adds	r3, #2
 80039e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80039e4:	e7c2      	b.n	800396c <_printf_common+0x58>
 80039e6:	2301      	movs	r3, #1
 80039e8:	4622      	mov	r2, r4
 80039ea:	4641      	mov	r1, r8
 80039ec:	4638      	mov	r0, r7
 80039ee:	47c8      	blx	r9
 80039f0:	3001      	adds	r0, #1
 80039f2:	d0e6      	beq.n	80039c2 <_printf_common+0xae>
 80039f4:	3601      	adds	r6, #1
 80039f6:	e7d9      	b.n	80039ac <_printf_common+0x98>

080039f8 <_printf_i>:
 80039f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039fc:	7e0f      	ldrb	r7, [r1, #24]
 80039fe:	4691      	mov	r9, r2
 8003a00:	2f78      	cmp	r7, #120	@ 0x78
 8003a02:	4680      	mov	r8, r0
 8003a04:	460c      	mov	r4, r1
 8003a06:	469a      	mov	sl, r3
 8003a08:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a0e:	d807      	bhi.n	8003a20 <_printf_i+0x28>
 8003a10:	2f62      	cmp	r7, #98	@ 0x62
 8003a12:	d80a      	bhi.n	8003a2a <_printf_i+0x32>
 8003a14:	2f00      	cmp	r7, #0
 8003a16:	f000 80d3 	beq.w	8003bc0 <_printf_i+0x1c8>
 8003a1a:	2f58      	cmp	r7, #88	@ 0x58
 8003a1c:	f000 80ba 	beq.w	8003b94 <_printf_i+0x19c>
 8003a20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003a28:	e03a      	b.n	8003aa0 <_printf_i+0xa8>
 8003a2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a2e:	2b15      	cmp	r3, #21
 8003a30:	d8f6      	bhi.n	8003a20 <_printf_i+0x28>
 8003a32:	a101      	add	r1, pc, #4	@ (adr r1, 8003a38 <_printf_i+0x40>)
 8003a34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a38:	08003a91 	.word	0x08003a91
 8003a3c:	08003aa5 	.word	0x08003aa5
 8003a40:	08003a21 	.word	0x08003a21
 8003a44:	08003a21 	.word	0x08003a21
 8003a48:	08003a21 	.word	0x08003a21
 8003a4c:	08003a21 	.word	0x08003a21
 8003a50:	08003aa5 	.word	0x08003aa5
 8003a54:	08003a21 	.word	0x08003a21
 8003a58:	08003a21 	.word	0x08003a21
 8003a5c:	08003a21 	.word	0x08003a21
 8003a60:	08003a21 	.word	0x08003a21
 8003a64:	08003ba7 	.word	0x08003ba7
 8003a68:	08003acf 	.word	0x08003acf
 8003a6c:	08003b61 	.word	0x08003b61
 8003a70:	08003a21 	.word	0x08003a21
 8003a74:	08003a21 	.word	0x08003a21
 8003a78:	08003bc9 	.word	0x08003bc9
 8003a7c:	08003a21 	.word	0x08003a21
 8003a80:	08003acf 	.word	0x08003acf
 8003a84:	08003a21 	.word	0x08003a21
 8003a88:	08003a21 	.word	0x08003a21
 8003a8c:	08003b69 	.word	0x08003b69
 8003a90:	6833      	ldr	r3, [r6, #0]
 8003a92:	1d1a      	adds	r2, r3, #4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6032      	str	r2, [r6, #0]
 8003a98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e09e      	b.n	8003be2 <_printf_i+0x1ea>
 8003aa4:	6833      	ldr	r3, [r6, #0]
 8003aa6:	6820      	ldr	r0, [r4, #0]
 8003aa8:	1d19      	adds	r1, r3, #4
 8003aaa:	6031      	str	r1, [r6, #0]
 8003aac:	0606      	lsls	r6, r0, #24
 8003aae:	d501      	bpl.n	8003ab4 <_printf_i+0xbc>
 8003ab0:	681d      	ldr	r5, [r3, #0]
 8003ab2:	e003      	b.n	8003abc <_printf_i+0xc4>
 8003ab4:	0645      	lsls	r5, r0, #25
 8003ab6:	d5fb      	bpl.n	8003ab0 <_printf_i+0xb8>
 8003ab8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003abc:	2d00      	cmp	r5, #0
 8003abe:	da03      	bge.n	8003ac8 <_printf_i+0xd0>
 8003ac0:	232d      	movs	r3, #45	@ 0x2d
 8003ac2:	426d      	negs	r5, r5
 8003ac4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ac8:	230a      	movs	r3, #10
 8003aca:	4859      	ldr	r0, [pc, #356]	@ (8003c30 <_printf_i+0x238>)
 8003acc:	e011      	b.n	8003af2 <_printf_i+0xfa>
 8003ace:	6821      	ldr	r1, [r4, #0]
 8003ad0:	6833      	ldr	r3, [r6, #0]
 8003ad2:	0608      	lsls	r0, r1, #24
 8003ad4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ad8:	d402      	bmi.n	8003ae0 <_printf_i+0xe8>
 8003ada:	0649      	lsls	r1, r1, #25
 8003adc:	bf48      	it	mi
 8003ade:	b2ad      	uxthmi	r5, r5
 8003ae0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ae2:	6033      	str	r3, [r6, #0]
 8003ae4:	bf14      	ite	ne
 8003ae6:	230a      	movne	r3, #10
 8003ae8:	2308      	moveq	r3, #8
 8003aea:	4851      	ldr	r0, [pc, #324]	@ (8003c30 <_printf_i+0x238>)
 8003aec:	2100      	movs	r1, #0
 8003aee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003af2:	6866      	ldr	r6, [r4, #4]
 8003af4:	2e00      	cmp	r6, #0
 8003af6:	bfa8      	it	ge
 8003af8:	6821      	ldrge	r1, [r4, #0]
 8003afa:	60a6      	str	r6, [r4, #8]
 8003afc:	bfa4      	itt	ge
 8003afe:	f021 0104 	bicge.w	r1, r1, #4
 8003b02:	6021      	strge	r1, [r4, #0]
 8003b04:	b90d      	cbnz	r5, 8003b0a <_printf_i+0x112>
 8003b06:	2e00      	cmp	r6, #0
 8003b08:	d04b      	beq.n	8003ba2 <_printf_i+0x1aa>
 8003b0a:	4616      	mov	r6, r2
 8003b0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b10:	fb03 5711 	mls	r7, r3, r1, r5
 8003b14:	5dc7      	ldrb	r7, [r0, r7]
 8003b16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b1a:	462f      	mov	r7, r5
 8003b1c:	42bb      	cmp	r3, r7
 8003b1e:	460d      	mov	r5, r1
 8003b20:	d9f4      	bls.n	8003b0c <_printf_i+0x114>
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d10b      	bne.n	8003b3e <_printf_i+0x146>
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	07df      	lsls	r7, r3, #31
 8003b2a:	d508      	bpl.n	8003b3e <_printf_i+0x146>
 8003b2c:	6923      	ldr	r3, [r4, #16]
 8003b2e:	6861      	ldr	r1, [r4, #4]
 8003b30:	4299      	cmp	r1, r3
 8003b32:	bfde      	ittt	le
 8003b34:	2330      	movle	r3, #48	@ 0x30
 8003b36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b3a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003b3e:	1b92      	subs	r2, r2, r6
 8003b40:	6122      	str	r2, [r4, #16]
 8003b42:	464b      	mov	r3, r9
 8003b44:	4621      	mov	r1, r4
 8003b46:	4640      	mov	r0, r8
 8003b48:	f8cd a000 	str.w	sl, [sp]
 8003b4c:	aa03      	add	r2, sp, #12
 8003b4e:	f7ff fee1 	bl	8003914 <_printf_common>
 8003b52:	3001      	adds	r0, #1
 8003b54:	d14a      	bne.n	8003bec <_printf_i+0x1f4>
 8003b56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b5a:	b004      	add	sp, #16
 8003b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	f043 0320 	orr.w	r3, r3, #32
 8003b66:	6023      	str	r3, [r4, #0]
 8003b68:	2778      	movs	r7, #120	@ 0x78
 8003b6a:	4832      	ldr	r0, [pc, #200]	@ (8003c34 <_printf_i+0x23c>)
 8003b6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	6831      	ldr	r1, [r6, #0]
 8003b74:	061f      	lsls	r7, r3, #24
 8003b76:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b7a:	d402      	bmi.n	8003b82 <_printf_i+0x18a>
 8003b7c:	065f      	lsls	r7, r3, #25
 8003b7e:	bf48      	it	mi
 8003b80:	b2ad      	uxthmi	r5, r5
 8003b82:	6031      	str	r1, [r6, #0]
 8003b84:	07d9      	lsls	r1, r3, #31
 8003b86:	bf44      	itt	mi
 8003b88:	f043 0320 	orrmi.w	r3, r3, #32
 8003b8c:	6023      	strmi	r3, [r4, #0]
 8003b8e:	b11d      	cbz	r5, 8003b98 <_printf_i+0x1a0>
 8003b90:	2310      	movs	r3, #16
 8003b92:	e7ab      	b.n	8003aec <_printf_i+0xf4>
 8003b94:	4826      	ldr	r0, [pc, #152]	@ (8003c30 <_printf_i+0x238>)
 8003b96:	e7e9      	b.n	8003b6c <_printf_i+0x174>
 8003b98:	6823      	ldr	r3, [r4, #0]
 8003b9a:	f023 0320 	bic.w	r3, r3, #32
 8003b9e:	6023      	str	r3, [r4, #0]
 8003ba0:	e7f6      	b.n	8003b90 <_printf_i+0x198>
 8003ba2:	4616      	mov	r6, r2
 8003ba4:	e7bd      	b.n	8003b22 <_printf_i+0x12a>
 8003ba6:	6833      	ldr	r3, [r6, #0]
 8003ba8:	6825      	ldr	r5, [r4, #0]
 8003baa:	1d18      	adds	r0, r3, #4
 8003bac:	6961      	ldr	r1, [r4, #20]
 8003bae:	6030      	str	r0, [r6, #0]
 8003bb0:	062e      	lsls	r6, r5, #24
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	d501      	bpl.n	8003bba <_printf_i+0x1c2>
 8003bb6:	6019      	str	r1, [r3, #0]
 8003bb8:	e002      	b.n	8003bc0 <_printf_i+0x1c8>
 8003bba:	0668      	lsls	r0, r5, #25
 8003bbc:	d5fb      	bpl.n	8003bb6 <_printf_i+0x1be>
 8003bbe:	8019      	strh	r1, [r3, #0]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	4616      	mov	r6, r2
 8003bc4:	6123      	str	r3, [r4, #16]
 8003bc6:	e7bc      	b.n	8003b42 <_printf_i+0x14a>
 8003bc8:	6833      	ldr	r3, [r6, #0]
 8003bca:	2100      	movs	r1, #0
 8003bcc:	1d1a      	adds	r2, r3, #4
 8003bce:	6032      	str	r2, [r6, #0]
 8003bd0:	681e      	ldr	r6, [r3, #0]
 8003bd2:	6862      	ldr	r2, [r4, #4]
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	f000 f9c6 	bl	8003f66 <memchr>
 8003bda:	b108      	cbz	r0, 8003be0 <_printf_i+0x1e8>
 8003bdc:	1b80      	subs	r0, r0, r6
 8003bde:	6060      	str	r0, [r4, #4]
 8003be0:	6863      	ldr	r3, [r4, #4]
 8003be2:	6123      	str	r3, [r4, #16]
 8003be4:	2300      	movs	r3, #0
 8003be6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bea:	e7aa      	b.n	8003b42 <_printf_i+0x14a>
 8003bec:	4632      	mov	r2, r6
 8003bee:	4649      	mov	r1, r9
 8003bf0:	4640      	mov	r0, r8
 8003bf2:	6923      	ldr	r3, [r4, #16]
 8003bf4:	47d0      	blx	sl
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	d0ad      	beq.n	8003b56 <_printf_i+0x15e>
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	079b      	lsls	r3, r3, #30
 8003bfe:	d413      	bmi.n	8003c28 <_printf_i+0x230>
 8003c00:	68e0      	ldr	r0, [r4, #12]
 8003c02:	9b03      	ldr	r3, [sp, #12]
 8003c04:	4298      	cmp	r0, r3
 8003c06:	bfb8      	it	lt
 8003c08:	4618      	movlt	r0, r3
 8003c0a:	e7a6      	b.n	8003b5a <_printf_i+0x162>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	4632      	mov	r2, r6
 8003c10:	4649      	mov	r1, r9
 8003c12:	4640      	mov	r0, r8
 8003c14:	47d0      	blx	sl
 8003c16:	3001      	adds	r0, #1
 8003c18:	d09d      	beq.n	8003b56 <_printf_i+0x15e>
 8003c1a:	3501      	adds	r5, #1
 8003c1c:	68e3      	ldr	r3, [r4, #12]
 8003c1e:	9903      	ldr	r1, [sp, #12]
 8003c20:	1a5b      	subs	r3, r3, r1
 8003c22:	42ab      	cmp	r3, r5
 8003c24:	dcf2      	bgt.n	8003c0c <_printf_i+0x214>
 8003c26:	e7eb      	b.n	8003c00 <_printf_i+0x208>
 8003c28:	2500      	movs	r5, #0
 8003c2a:	f104 0619 	add.w	r6, r4, #25
 8003c2e:	e7f5      	b.n	8003c1c <_printf_i+0x224>
 8003c30:	08006b6c 	.word	0x08006b6c
 8003c34:	08006b7d 	.word	0x08006b7d

08003c38 <std>:
 8003c38:	2300      	movs	r3, #0
 8003c3a:	b510      	push	{r4, lr}
 8003c3c:	4604      	mov	r4, r0
 8003c3e:	e9c0 3300 	strd	r3, r3, [r0]
 8003c42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c46:	6083      	str	r3, [r0, #8]
 8003c48:	8181      	strh	r1, [r0, #12]
 8003c4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c4c:	81c2      	strh	r2, [r0, #14]
 8003c4e:	6183      	str	r3, [r0, #24]
 8003c50:	4619      	mov	r1, r3
 8003c52:	2208      	movs	r2, #8
 8003c54:	305c      	adds	r0, #92	@ 0x5c
 8003c56:	f000 f906 	bl	8003e66 <memset>
 8003c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c90 <std+0x58>)
 8003c5c:	6224      	str	r4, [r4, #32]
 8003c5e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c60:	4b0c      	ldr	r3, [pc, #48]	@ (8003c94 <std+0x5c>)
 8003c62:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c64:	4b0c      	ldr	r3, [pc, #48]	@ (8003c98 <std+0x60>)
 8003c66:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c68:	4b0c      	ldr	r3, [pc, #48]	@ (8003c9c <std+0x64>)
 8003c6a:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca0 <std+0x68>)
 8003c6e:	429c      	cmp	r4, r3
 8003c70:	d006      	beq.n	8003c80 <std+0x48>
 8003c72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c76:	4294      	cmp	r4, r2
 8003c78:	d002      	beq.n	8003c80 <std+0x48>
 8003c7a:	33d0      	adds	r3, #208	@ 0xd0
 8003c7c:	429c      	cmp	r4, r3
 8003c7e:	d105      	bne.n	8003c8c <std+0x54>
 8003c80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c88:	f000 b96a 	b.w	8003f60 <__retarget_lock_init_recursive>
 8003c8c:	bd10      	pop	{r4, pc}
 8003c8e:	bf00      	nop
 8003c90:	08003de1 	.word	0x08003de1
 8003c94:	08003e03 	.word	0x08003e03
 8003c98:	08003e3b 	.word	0x08003e3b
 8003c9c:	08003e5f 	.word	0x08003e5f
 8003ca0:	20000284 	.word	0x20000284

08003ca4 <stdio_exit_handler>:
 8003ca4:	4a02      	ldr	r2, [pc, #8]	@ (8003cb0 <stdio_exit_handler+0xc>)
 8003ca6:	4903      	ldr	r1, [pc, #12]	@ (8003cb4 <stdio_exit_handler+0x10>)
 8003ca8:	4803      	ldr	r0, [pc, #12]	@ (8003cb8 <stdio_exit_handler+0x14>)
 8003caa:	f000 b869 	b.w	8003d80 <_fwalk_sglue>
 8003cae:	bf00      	nop
 8003cb0:	2000000c 	.word	0x2000000c
 8003cb4:	080058a5 	.word	0x080058a5
 8003cb8:	2000001c 	.word	0x2000001c

08003cbc <cleanup_stdio>:
 8003cbc:	6841      	ldr	r1, [r0, #4]
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf0 <cleanup_stdio+0x34>)
 8003cc0:	b510      	push	{r4, lr}
 8003cc2:	4299      	cmp	r1, r3
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	d001      	beq.n	8003ccc <cleanup_stdio+0x10>
 8003cc8:	f001 fdec 	bl	80058a4 <_fflush_r>
 8003ccc:	68a1      	ldr	r1, [r4, #8]
 8003cce:	4b09      	ldr	r3, [pc, #36]	@ (8003cf4 <cleanup_stdio+0x38>)
 8003cd0:	4299      	cmp	r1, r3
 8003cd2:	d002      	beq.n	8003cda <cleanup_stdio+0x1e>
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	f001 fde5 	bl	80058a4 <_fflush_r>
 8003cda:	68e1      	ldr	r1, [r4, #12]
 8003cdc:	4b06      	ldr	r3, [pc, #24]	@ (8003cf8 <cleanup_stdio+0x3c>)
 8003cde:	4299      	cmp	r1, r3
 8003ce0:	d004      	beq.n	8003cec <cleanup_stdio+0x30>
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ce8:	f001 bddc 	b.w	80058a4 <_fflush_r>
 8003cec:	bd10      	pop	{r4, pc}
 8003cee:	bf00      	nop
 8003cf0:	20000284 	.word	0x20000284
 8003cf4:	200002ec 	.word	0x200002ec
 8003cf8:	20000354 	.word	0x20000354

08003cfc <global_stdio_init.part.0>:
 8003cfc:	b510      	push	{r4, lr}
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8003d2c <global_stdio_init.part.0+0x30>)
 8003d00:	4c0b      	ldr	r4, [pc, #44]	@ (8003d30 <global_stdio_init.part.0+0x34>)
 8003d02:	4a0c      	ldr	r2, [pc, #48]	@ (8003d34 <global_stdio_init.part.0+0x38>)
 8003d04:	4620      	mov	r0, r4
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	2104      	movs	r1, #4
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f7ff ff94 	bl	8003c38 <std>
 8003d10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d14:	2201      	movs	r2, #1
 8003d16:	2109      	movs	r1, #9
 8003d18:	f7ff ff8e 	bl	8003c38 <std>
 8003d1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d20:	2202      	movs	r2, #2
 8003d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d26:	2112      	movs	r1, #18
 8003d28:	f7ff bf86 	b.w	8003c38 <std>
 8003d2c:	200003bc 	.word	0x200003bc
 8003d30:	20000284 	.word	0x20000284
 8003d34:	08003ca5 	.word	0x08003ca5

08003d38 <__sfp_lock_acquire>:
 8003d38:	4801      	ldr	r0, [pc, #4]	@ (8003d40 <__sfp_lock_acquire+0x8>)
 8003d3a:	f000 b912 	b.w	8003f62 <__retarget_lock_acquire_recursive>
 8003d3e:	bf00      	nop
 8003d40:	200003c5 	.word	0x200003c5

08003d44 <__sfp_lock_release>:
 8003d44:	4801      	ldr	r0, [pc, #4]	@ (8003d4c <__sfp_lock_release+0x8>)
 8003d46:	f000 b90d 	b.w	8003f64 <__retarget_lock_release_recursive>
 8003d4a:	bf00      	nop
 8003d4c:	200003c5 	.word	0x200003c5

08003d50 <__sinit>:
 8003d50:	b510      	push	{r4, lr}
 8003d52:	4604      	mov	r4, r0
 8003d54:	f7ff fff0 	bl	8003d38 <__sfp_lock_acquire>
 8003d58:	6a23      	ldr	r3, [r4, #32]
 8003d5a:	b11b      	cbz	r3, 8003d64 <__sinit+0x14>
 8003d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d60:	f7ff bff0 	b.w	8003d44 <__sfp_lock_release>
 8003d64:	4b04      	ldr	r3, [pc, #16]	@ (8003d78 <__sinit+0x28>)
 8003d66:	6223      	str	r3, [r4, #32]
 8003d68:	4b04      	ldr	r3, [pc, #16]	@ (8003d7c <__sinit+0x2c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f5      	bne.n	8003d5c <__sinit+0xc>
 8003d70:	f7ff ffc4 	bl	8003cfc <global_stdio_init.part.0>
 8003d74:	e7f2      	b.n	8003d5c <__sinit+0xc>
 8003d76:	bf00      	nop
 8003d78:	08003cbd 	.word	0x08003cbd
 8003d7c:	200003bc 	.word	0x200003bc

08003d80 <_fwalk_sglue>:
 8003d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d84:	4607      	mov	r7, r0
 8003d86:	4688      	mov	r8, r1
 8003d88:	4614      	mov	r4, r2
 8003d8a:	2600      	movs	r6, #0
 8003d8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d90:	f1b9 0901 	subs.w	r9, r9, #1
 8003d94:	d505      	bpl.n	8003da2 <_fwalk_sglue+0x22>
 8003d96:	6824      	ldr	r4, [r4, #0]
 8003d98:	2c00      	cmp	r4, #0
 8003d9a:	d1f7      	bne.n	8003d8c <_fwalk_sglue+0xc>
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003da2:	89ab      	ldrh	r3, [r5, #12]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d907      	bls.n	8003db8 <_fwalk_sglue+0x38>
 8003da8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003dac:	3301      	adds	r3, #1
 8003dae:	d003      	beq.n	8003db8 <_fwalk_sglue+0x38>
 8003db0:	4629      	mov	r1, r5
 8003db2:	4638      	mov	r0, r7
 8003db4:	47c0      	blx	r8
 8003db6:	4306      	orrs	r6, r0
 8003db8:	3568      	adds	r5, #104	@ 0x68
 8003dba:	e7e9      	b.n	8003d90 <_fwalk_sglue+0x10>

08003dbc <iprintf>:
 8003dbc:	b40f      	push	{r0, r1, r2, r3}
 8003dbe:	b507      	push	{r0, r1, r2, lr}
 8003dc0:	4906      	ldr	r1, [pc, #24]	@ (8003ddc <iprintf+0x20>)
 8003dc2:	ab04      	add	r3, sp, #16
 8003dc4:	6808      	ldr	r0, [r1, #0]
 8003dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dca:	6881      	ldr	r1, [r0, #8]
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	f001 fbd1 	bl	8005574 <_vfiprintf_r>
 8003dd2:	b003      	add	sp, #12
 8003dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dd8:	b004      	add	sp, #16
 8003dda:	4770      	bx	lr
 8003ddc:	20000018 	.word	0x20000018

08003de0 <__sread>:
 8003de0:	b510      	push	{r4, lr}
 8003de2:	460c      	mov	r4, r1
 8003de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de8:	f000 f86c 	bl	8003ec4 <_read_r>
 8003dec:	2800      	cmp	r0, #0
 8003dee:	bfab      	itete	ge
 8003df0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003df2:	89a3      	ldrhlt	r3, [r4, #12]
 8003df4:	181b      	addge	r3, r3, r0
 8003df6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003dfa:	bfac      	ite	ge
 8003dfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003dfe:	81a3      	strhlt	r3, [r4, #12]
 8003e00:	bd10      	pop	{r4, pc}

08003e02 <__swrite>:
 8003e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e06:	461f      	mov	r7, r3
 8003e08:	898b      	ldrh	r3, [r1, #12]
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	05db      	lsls	r3, r3, #23
 8003e0e:	460c      	mov	r4, r1
 8003e10:	4616      	mov	r6, r2
 8003e12:	d505      	bpl.n	8003e20 <__swrite+0x1e>
 8003e14:	2302      	movs	r3, #2
 8003e16:	2200      	movs	r2, #0
 8003e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e1c:	f000 f840 	bl	8003ea0 <_lseek_r>
 8003e20:	89a3      	ldrh	r3, [r4, #12]
 8003e22:	4632      	mov	r2, r6
 8003e24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e28:	81a3      	strh	r3, [r4, #12]
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	463b      	mov	r3, r7
 8003e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e36:	f000 b857 	b.w	8003ee8 <_write_r>

08003e3a <__sseek>:
 8003e3a:	b510      	push	{r4, lr}
 8003e3c:	460c      	mov	r4, r1
 8003e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e42:	f000 f82d 	bl	8003ea0 <_lseek_r>
 8003e46:	1c43      	adds	r3, r0, #1
 8003e48:	89a3      	ldrh	r3, [r4, #12]
 8003e4a:	bf15      	itete	ne
 8003e4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e56:	81a3      	strheq	r3, [r4, #12]
 8003e58:	bf18      	it	ne
 8003e5a:	81a3      	strhne	r3, [r4, #12]
 8003e5c:	bd10      	pop	{r4, pc}

08003e5e <__sclose>:
 8003e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e62:	f000 b80d 	b.w	8003e80 <_close_r>

08003e66 <memset>:
 8003e66:	4603      	mov	r3, r0
 8003e68:	4402      	add	r2, r0
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d100      	bne.n	8003e70 <memset+0xa>
 8003e6e:	4770      	bx	lr
 8003e70:	f803 1b01 	strb.w	r1, [r3], #1
 8003e74:	e7f9      	b.n	8003e6a <memset+0x4>
	...

08003e78 <_localeconv_r>:
 8003e78:	4800      	ldr	r0, [pc, #0]	@ (8003e7c <_localeconv_r+0x4>)
 8003e7a:	4770      	bx	lr
 8003e7c:	20000158 	.word	0x20000158

08003e80 <_close_r>:
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	2300      	movs	r3, #0
 8003e84:	4d05      	ldr	r5, [pc, #20]	@ (8003e9c <_close_r+0x1c>)
 8003e86:	4604      	mov	r4, r0
 8003e88:	4608      	mov	r0, r1
 8003e8a:	602b      	str	r3, [r5, #0]
 8003e8c:	f7fd faf7 	bl	800147e <_close>
 8003e90:	1c43      	adds	r3, r0, #1
 8003e92:	d102      	bne.n	8003e9a <_close_r+0x1a>
 8003e94:	682b      	ldr	r3, [r5, #0]
 8003e96:	b103      	cbz	r3, 8003e9a <_close_r+0x1a>
 8003e98:	6023      	str	r3, [r4, #0]
 8003e9a:	bd38      	pop	{r3, r4, r5, pc}
 8003e9c:	200003c0 	.word	0x200003c0

08003ea0 <_lseek_r>:
 8003ea0:	b538      	push	{r3, r4, r5, lr}
 8003ea2:	4604      	mov	r4, r0
 8003ea4:	4608      	mov	r0, r1
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	4d05      	ldr	r5, [pc, #20]	@ (8003ec0 <_lseek_r+0x20>)
 8003eac:	602a      	str	r2, [r5, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	f7fd fb09 	bl	80014c6 <_lseek>
 8003eb4:	1c43      	adds	r3, r0, #1
 8003eb6:	d102      	bne.n	8003ebe <_lseek_r+0x1e>
 8003eb8:	682b      	ldr	r3, [r5, #0]
 8003eba:	b103      	cbz	r3, 8003ebe <_lseek_r+0x1e>
 8003ebc:	6023      	str	r3, [r4, #0]
 8003ebe:	bd38      	pop	{r3, r4, r5, pc}
 8003ec0:	200003c0 	.word	0x200003c0

08003ec4 <_read_r>:
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	4608      	mov	r0, r1
 8003eca:	4611      	mov	r1, r2
 8003ecc:	2200      	movs	r2, #0
 8003ece:	4d05      	ldr	r5, [pc, #20]	@ (8003ee4 <_read_r+0x20>)
 8003ed0:	602a      	str	r2, [r5, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f7fd fa9a 	bl	800140c <_read>
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	d102      	bne.n	8003ee2 <_read_r+0x1e>
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	b103      	cbz	r3, 8003ee2 <_read_r+0x1e>
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	200003c0 	.word	0x200003c0

08003ee8 <_write_r>:
 8003ee8:	b538      	push	{r3, r4, r5, lr}
 8003eea:	4604      	mov	r4, r0
 8003eec:	4608      	mov	r0, r1
 8003eee:	4611      	mov	r1, r2
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	4d05      	ldr	r5, [pc, #20]	@ (8003f08 <_write_r+0x20>)
 8003ef4:	602a      	str	r2, [r5, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f7fd faa5 	bl	8001446 <_write>
 8003efc:	1c43      	adds	r3, r0, #1
 8003efe:	d102      	bne.n	8003f06 <_write_r+0x1e>
 8003f00:	682b      	ldr	r3, [r5, #0]
 8003f02:	b103      	cbz	r3, 8003f06 <_write_r+0x1e>
 8003f04:	6023      	str	r3, [r4, #0]
 8003f06:	bd38      	pop	{r3, r4, r5, pc}
 8003f08:	200003c0 	.word	0x200003c0

08003f0c <__errno>:
 8003f0c:	4b01      	ldr	r3, [pc, #4]	@ (8003f14 <__errno+0x8>)
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	20000018 	.word	0x20000018

08003f18 <__libc_init_array>:
 8003f18:	b570      	push	{r4, r5, r6, lr}
 8003f1a:	2600      	movs	r6, #0
 8003f1c:	4d0c      	ldr	r5, [pc, #48]	@ (8003f50 <__libc_init_array+0x38>)
 8003f1e:	4c0d      	ldr	r4, [pc, #52]	@ (8003f54 <__libc_init_array+0x3c>)
 8003f20:	1b64      	subs	r4, r4, r5
 8003f22:	10a4      	asrs	r4, r4, #2
 8003f24:	42a6      	cmp	r6, r4
 8003f26:	d109      	bne.n	8003f3c <__libc_init_array+0x24>
 8003f28:	f002 fdda 	bl	8006ae0 <_init>
 8003f2c:	2600      	movs	r6, #0
 8003f2e:	4d0a      	ldr	r5, [pc, #40]	@ (8003f58 <__libc_init_array+0x40>)
 8003f30:	4c0a      	ldr	r4, [pc, #40]	@ (8003f5c <__libc_init_array+0x44>)
 8003f32:	1b64      	subs	r4, r4, r5
 8003f34:	10a4      	asrs	r4, r4, #2
 8003f36:	42a6      	cmp	r6, r4
 8003f38:	d105      	bne.n	8003f46 <__libc_init_array+0x2e>
 8003f3a:	bd70      	pop	{r4, r5, r6, pc}
 8003f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f40:	4798      	blx	r3
 8003f42:	3601      	adds	r6, #1
 8003f44:	e7ee      	b.n	8003f24 <__libc_init_array+0xc>
 8003f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f4a:	4798      	blx	r3
 8003f4c:	3601      	adds	r6, #1
 8003f4e:	e7f2      	b.n	8003f36 <__libc_init_array+0x1e>
 8003f50:	08006f00 	.word	0x08006f00
 8003f54:	08006f00 	.word	0x08006f00
 8003f58:	08006f00 	.word	0x08006f00
 8003f5c:	08006f04 	.word	0x08006f04

08003f60 <__retarget_lock_init_recursive>:
 8003f60:	4770      	bx	lr

08003f62 <__retarget_lock_acquire_recursive>:
 8003f62:	4770      	bx	lr

08003f64 <__retarget_lock_release_recursive>:
 8003f64:	4770      	bx	lr

08003f66 <memchr>:
 8003f66:	4603      	mov	r3, r0
 8003f68:	b510      	push	{r4, lr}
 8003f6a:	b2c9      	uxtb	r1, r1
 8003f6c:	4402      	add	r2, r0
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	4618      	mov	r0, r3
 8003f72:	d101      	bne.n	8003f78 <memchr+0x12>
 8003f74:	2000      	movs	r0, #0
 8003f76:	e003      	b.n	8003f80 <memchr+0x1a>
 8003f78:	7804      	ldrb	r4, [r0, #0]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	428c      	cmp	r4, r1
 8003f7e:	d1f6      	bne.n	8003f6e <memchr+0x8>
 8003f80:	bd10      	pop	{r4, pc}

08003f82 <quorem>:
 8003f82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f86:	6903      	ldr	r3, [r0, #16]
 8003f88:	690c      	ldr	r4, [r1, #16]
 8003f8a:	4607      	mov	r7, r0
 8003f8c:	42a3      	cmp	r3, r4
 8003f8e:	db7e      	blt.n	800408e <quorem+0x10c>
 8003f90:	3c01      	subs	r4, #1
 8003f92:	00a3      	lsls	r3, r4, #2
 8003f94:	f100 0514 	add.w	r5, r0, #20
 8003f98:	f101 0814 	add.w	r8, r1, #20
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003fa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003fac:	3301      	adds	r3, #1
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003fb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003fb8:	d32e      	bcc.n	8004018 <quorem+0x96>
 8003fba:	f04f 0a00 	mov.w	sl, #0
 8003fbe:	46c4      	mov	ip, r8
 8003fc0:	46ae      	mov	lr, r5
 8003fc2:	46d3      	mov	fp, sl
 8003fc4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003fc8:	b298      	uxth	r0, r3
 8003fca:	fb06 a000 	mla	r0, r6, r0, sl
 8003fce:	0c1b      	lsrs	r3, r3, #16
 8003fd0:	0c02      	lsrs	r2, r0, #16
 8003fd2:	fb06 2303 	mla	r3, r6, r3, r2
 8003fd6:	f8de 2000 	ldr.w	r2, [lr]
 8003fda:	b280      	uxth	r0, r0
 8003fdc:	b292      	uxth	r2, r2
 8003fde:	1a12      	subs	r2, r2, r0
 8003fe0:	445a      	add	r2, fp
 8003fe2:	f8de 0000 	ldr.w	r0, [lr]
 8003fe6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003ff0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003ff4:	b292      	uxth	r2, r2
 8003ff6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003ffa:	45e1      	cmp	r9, ip
 8003ffc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004000:	f84e 2b04 	str.w	r2, [lr], #4
 8004004:	d2de      	bcs.n	8003fc4 <quorem+0x42>
 8004006:	9b00      	ldr	r3, [sp, #0]
 8004008:	58eb      	ldr	r3, [r5, r3]
 800400a:	b92b      	cbnz	r3, 8004018 <quorem+0x96>
 800400c:	9b01      	ldr	r3, [sp, #4]
 800400e:	3b04      	subs	r3, #4
 8004010:	429d      	cmp	r5, r3
 8004012:	461a      	mov	r2, r3
 8004014:	d32f      	bcc.n	8004076 <quorem+0xf4>
 8004016:	613c      	str	r4, [r7, #16]
 8004018:	4638      	mov	r0, r7
 800401a:	f001 f97b 	bl	8005314 <__mcmp>
 800401e:	2800      	cmp	r0, #0
 8004020:	db25      	blt.n	800406e <quorem+0xec>
 8004022:	4629      	mov	r1, r5
 8004024:	2000      	movs	r0, #0
 8004026:	f858 2b04 	ldr.w	r2, [r8], #4
 800402a:	f8d1 c000 	ldr.w	ip, [r1]
 800402e:	fa1f fe82 	uxth.w	lr, r2
 8004032:	fa1f f38c 	uxth.w	r3, ip
 8004036:	eba3 030e 	sub.w	r3, r3, lr
 800403a:	4403      	add	r3, r0
 800403c:	0c12      	lsrs	r2, r2, #16
 800403e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004042:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004046:	b29b      	uxth	r3, r3
 8004048:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800404c:	45c1      	cmp	r9, r8
 800404e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004052:	f841 3b04 	str.w	r3, [r1], #4
 8004056:	d2e6      	bcs.n	8004026 <quorem+0xa4>
 8004058:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800405c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004060:	b922      	cbnz	r2, 800406c <quorem+0xea>
 8004062:	3b04      	subs	r3, #4
 8004064:	429d      	cmp	r5, r3
 8004066:	461a      	mov	r2, r3
 8004068:	d30b      	bcc.n	8004082 <quorem+0x100>
 800406a:	613c      	str	r4, [r7, #16]
 800406c:	3601      	adds	r6, #1
 800406e:	4630      	mov	r0, r6
 8004070:	b003      	add	sp, #12
 8004072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004076:	6812      	ldr	r2, [r2, #0]
 8004078:	3b04      	subs	r3, #4
 800407a:	2a00      	cmp	r2, #0
 800407c:	d1cb      	bne.n	8004016 <quorem+0x94>
 800407e:	3c01      	subs	r4, #1
 8004080:	e7c6      	b.n	8004010 <quorem+0x8e>
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	3b04      	subs	r3, #4
 8004086:	2a00      	cmp	r2, #0
 8004088:	d1ef      	bne.n	800406a <quorem+0xe8>
 800408a:	3c01      	subs	r4, #1
 800408c:	e7ea      	b.n	8004064 <quorem+0xe2>
 800408e:	2000      	movs	r0, #0
 8004090:	e7ee      	b.n	8004070 <quorem+0xee>
 8004092:	0000      	movs	r0, r0
 8004094:	0000      	movs	r0, r0
	...

08004098 <_dtoa_r>:
 8004098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409c:	4614      	mov	r4, r2
 800409e:	461d      	mov	r5, r3
 80040a0:	69c7      	ldr	r7, [r0, #28]
 80040a2:	b097      	sub	sp, #92	@ 0x5c
 80040a4:	4683      	mov	fp, r0
 80040a6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80040aa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80040ac:	b97f      	cbnz	r7, 80040ce <_dtoa_r+0x36>
 80040ae:	2010      	movs	r0, #16
 80040b0:	f000 fe02 	bl	8004cb8 <malloc>
 80040b4:	4602      	mov	r2, r0
 80040b6:	f8cb 001c 	str.w	r0, [fp, #28]
 80040ba:	b920      	cbnz	r0, 80040c6 <_dtoa_r+0x2e>
 80040bc:	21ef      	movs	r1, #239	@ 0xef
 80040be:	4ba8      	ldr	r3, [pc, #672]	@ (8004360 <_dtoa_r+0x2c8>)
 80040c0:	48a8      	ldr	r0, [pc, #672]	@ (8004364 <_dtoa_r+0x2cc>)
 80040c2:	f001 fcc9 	bl	8005a58 <__assert_func>
 80040c6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80040ca:	6007      	str	r7, [r0, #0]
 80040cc:	60c7      	str	r7, [r0, #12]
 80040ce:	f8db 301c 	ldr.w	r3, [fp, #28]
 80040d2:	6819      	ldr	r1, [r3, #0]
 80040d4:	b159      	cbz	r1, 80040ee <_dtoa_r+0x56>
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	2301      	movs	r3, #1
 80040da:	4093      	lsls	r3, r2
 80040dc:	604a      	str	r2, [r1, #4]
 80040de:	608b      	str	r3, [r1, #8]
 80040e0:	4658      	mov	r0, fp
 80040e2:	f000 fedf 	bl	8004ea4 <_Bfree>
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	1e2b      	subs	r3, r5, #0
 80040f0:	bfaf      	iteee	ge
 80040f2:	2300      	movge	r3, #0
 80040f4:	2201      	movlt	r2, #1
 80040f6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80040fa:	9303      	strlt	r3, [sp, #12]
 80040fc:	bfa8      	it	ge
 80040fe:	6033      	strge	r3, [r6, #0]
 8004100:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004104:	4b98      	ldr	r3, [pc, #608]	@ (8004368 <_dtoa_r+0x2d0>)
 8004106:	bfb8      	it	lt
 8004108:	6032      	strlt	r2, [r6, #0]
 800410a:	ea33 0308 	bics.w	r3, r3, r8
 800410e:	d112      	bne.n	8004136 <_dtoa_r+0x9e>
 8004110:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004114:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800411c:	4323      	orrs	r3, r4
 800411e:	f000 8550 	beq.w	8004bc2 <_dtoa_r+0xb2a>
 8004122:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004124:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800436c <_dtoa_r+0x2d4>
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 8552 	beq.w	8004bd2 <_dtoa_r+0xb3a>
 800412e:	f10a 0303 	add.w	r3, sl, #3
 8004132:	f000 bd4c 	b.w	8004bce <_dtoa_r+0xb36>
 8004136:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800413a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800413e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004142:	2200      	movs	r2, #0
 8004144:	2300      	movs	r3, #0
 8004146:	f7fc fc2f 	bl	80009a8 <__aeabi_dcmpeq>
 800414a:	4607      	mov	r7, r0
 800414c:	b158      	cbz	r0, 8004166 <_dtoa_r+0xce>
 800414e:	2301      	movs	r3, #1
 8004150:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004156:	b113      	cbz	r3, 800415e <_dtoa_r+0xc6>
 8004158:	4b85      	ldr	r3, [pc, #532]	@ (8004370 <_dtoa_r+0x2d8>)
 800415a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004374 <_dtoa_r+0x2dc>
 8004162:	f000 bd36 	b.w	8004bd2 <_dtoa_r+0xb3a>
 8004166:	ab14      	add	r3, sp, #80	@ 0x50
 8004168:	9301      	str	r3, [sp, #4]
 800416a:	ab15      	add	r3, sp, #84	@ 0x54
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	4658      	mov	r0, fp
 8004170:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004174:	f001 f97e 	bl	8005474 <__d2b>
 8004178:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800417c:	4681      	mov	r9, r0
 800417e:	2e00      	cmp	r6, #0
 8004180:	d077      	beq.n	8004272 <_dtoa_r+0x1da>
 8004182:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004188:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800418c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004190:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004194:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004198:	9712      	str	r7, [sp, #72]	@ 0x48
 800419a:	4619      	mov	r1, r3
 800419c:	2200      	movs	r2, #0
 800419e:	4b76      	ldr	r3, [pc, #472]	@ (8004378 <_dtoa_r+0x2e0>)
 80041a0:	f7fb ffe2 	bl	8000168 <__aeabi_dsub>
 80041a4:	a368      	add	r3, pc, #416	@ (adr r3, 8004348 <_dtoa_r+0x2b0>)
 80041a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041aa:	f7fc f995 	bl	80004d8 <__aeabi_dmul>
 80041ae:	a368      	add	r3, pc, #416	@ (adr r3, 8004350 <_dtoa_r+0x2b8>)
 80041b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b4:	f7fb ffda 	bl	800016c <__adddf3>
 80041b8:	4604      	mov	r4, r0
 80041ba:	4630      	mov	r0, r6
 80041bc:	460d      	mov	r5, r1
 80041be:	f7fc f921 	bl	8000404 <__aeabi_i2d>
 80041c2:	a365      	add	r3, pc, #404	@ (adr r3, 8004358 <_dtoa_r+0x2c0>)
 80041c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c8:	f7fc f986 	bl	80004d8 <__aeabi_dmul>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4620      	mov	r0, r4
 80041d2:	4629      	mov	r1, r5
 80041d4:	f7fb ffca 	bl	800016c <__adddf3>
 80041d8:	4604      	mov	r4, r0
 80041da:	460d      	mov	r5, r1
 80041dc:	f7fc fc2c 	bl	8000a38 <__aeabi_d2iz>
 80041e0:	2200      	movs	r2, #0
 80041e2:	4607      	mov	r7, r0
 80041e4:	2300      	movs	r3, #0
 80041e6:	4620      	mov	r0, r4
 80041e8:	4629      	mov	r1, r5
 80041ea:	f7fc fbe7 	bl	80009bc <__aeabi_dcmplt>
 80041ee:	b140      	cbz	r0, 8004202 <_dtoa_r+0x16a>
 80041f0:	4638      	mov	r0, r7
 80041f2:	f7fc f907 	bl	8000404 <__aeabi_i2d>
 80041f6:	4622      	mov	r2, r4
 80041f8:	462b      	mov	r3, r5
 80041fa:	f7fc fbd5 	bl	80009a8 <__aeabi_dcmpeq>
 80041fe:	b900      	cbnz	r0, 8004202 <_dtoa_r+0x16a>
 8004200:	3f01      	subs	r7, #1
 8004202:	2f16      	cmp	r7, #22
 8004204:	d853      	bhi.n	80042ae <_dtoa_r+0x216>
 8004206:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800420a:	4b5c      	ldr	r3, [pc, #368]	@ (800437c <_dtoa_r+0x2e4>)
 800420c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004214:	f7fc fbd2 	bl	80009bc <__aeabi_dcmplt>
 8004218:	2800      	cmp	r0, #0
 800421a:	d04a      	beq.n	80042b2 <_dtoa_r+0x21a>
 800421c:	2300      	movs	r3, #0
 800421e:	3f01      	subs	r7, #1
 8004220:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004222:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004224:	1b9b      	subs	r3, r3, r6
 8004226:	1e5a      	subs	r2, r3, #1
 8004228:	bf46      	itte	mi
 800422a:	f1c3 0801 	rsbmi	r8, r3, #1
 800422e:	2300      	movmi	r3, #0
 8004230:	f04f 0800 	movpl.w	r8, #0
 8004234:	9209      	str	r2, [sp, #36]	@ 0x24
 8004236:	bf48      	it	mi
 8004238:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800423a:	2f00      	cmp	r7, #0
 800423c:	db3b      	blt.n	80042b6 <_dtoa_r+0x21e>
 800423e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004240:	970e      	str	r7, [sp, #56]	@ 0x38
 8004242:	443b      	add	r3, r7
 8004244:	9309      	str	r3, [sp, #36]	@ 0x24
 8004246:	2300      	movs	r3, #0
 8004248:	930a      	str	r3, [sp, #40]	@ 0x28
 800424a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800424c:	2b09      	cmp	r3, #9
 800424e:	d866      	bhi.n	800431e <_dtoa_r+0x286>
 8004250:	2b05      	cmp	r3, #5
 8004252:	bfc4      	itt	gt
 8004254:	3b04      	subgt	r3, #4
 8004256:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004258:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800425a:	bfc8      	it	gt
 800425c:	2400      	movgt	r4, #0
 800425e:	f1a3 0302 	sub.w	r3, r3, #2
 8004262:	bfd8      	it	le
 8004264:	2401      	movle	r4, #1
 8004266:	2b03      	cmp	r3, #3
 8004268:	d864      	bhi.n	8004334 <_dtoa_r+0x29c>
 800426a:	e8df f003 	tbb	[pc, r3]
 800426e:	382b      	.short	0x382b
 8004270:	5636      	.short	0x5636
 8004272:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004276:	441e      	add	r6, r3
 8004278:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800427c:	2b20      	cmp	r3, #32
 800427e:	bfc1      	itttt	gt
 8004280:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004284:	fa08 f803 	lslgt.w	r8, r8, r3
 8004288:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800428c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004290:	bfd6      	itet	le
 8004292:	f1c3 0320 	rsble	r3, r3, #32
 8004296:	ea48 0003 	orrgt.w	r0, r8, r3
 800429a:	fa04 f003 	lslle.w	r0, r4, r3
 800429e:	f7fc f8a1 	bl	80003e4 <__aeabi_ui2d>
 80042a2:	2201      	movs	r2, #1
 80042a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80042a8:	3e01      	subs	r6, #1
 80042aa:	9212      	str	r2, [sp, #72]	@ 0x48
 80042ac:	e775      	b.n	800419a <_dtoa_r+0x102>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e7b6      	b.n	8004220 <_dtoa_r+0x188>
 80042b2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80042b4:	e7b5      	b.n	8004222 <_dtoa_r+0x18a>
 80042b6:	427b      	negs	r3, r7
 80042b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80042ba:	2300      	movs	r3, #0
 80042bc:	eba8 0807 	sub.w	r8, r8, r7
 80042c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80042c2:	e7c2      	b.n	800424a <_dtoa_r+0x1b2>
 80042c4:	2300      	movs	r3, #0
 80042c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	dc35      	bgt.n	800433a <_dtoa_r+0x2a2>
 80042ce:	2301      	movs	r3, #1
 80042d0:	461a      	mov	r2, r3
 80042d2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80042d6:	9221      	str	r2, [sp, #132]	@ 0x84
 80042d8:	e00b      	b.n	80042f2 <_dtoa_r+0x25a>
 80042da:	2301      	movs	r3, #1
 80042dc:	e7f3      	b.n	80042c6 <_dtoa_r+0x22e>
 80042de:	2300      	movs	r3, #0
 80042e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80042e4:	18fb      	adds	r3, r7, r3
 80042e6:	9308      	str	r3, [sp, #32]
 80042e8:	3301      	adds	r3, #1
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	9307      	str	r3, [sp, #28]
 80042ee:	bfb8      	it	lt
 80042f0:	2301      	movlt	r3, #1
 80042f2:	2100      	movs	r1, #0
 80042f4:	2204      	movs	r2, #4
 80042f6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80042fa:	f102 0514 	add.w	r5, r2, #20
 80042fe:	429d      	cmp	r5, r3
 8004300:	d91f      	bls.n	8004342 <_dtoa_r+0x2aa>
 8004302:	6041      	str	r1, [r0, #4]
 8004304:	4658      	mov	r0, fp
 8004306:	f000 fd8d 	bl	8004e24 <_Balloc>
 800430a:	4682      	mov	sl, r0
 800430c:	2800      	cmp	r0, #0
 800430e:	d139      	bne.n	8004384 <_dtoa_r+0x2ec>
 8004310:	4602      	mov	r2, r0
 8004312:	f240 11af 	movw	r1, #431	@ 0x1af
 8004316:	4b1a      	ldr	r3, [pc, #104]	@ (8004380 <_dtoa_r+0x2e8>)
 8004318:	e6d2      	b.n	80040c0 <_dtoa_r+0x28>
 800431a:	2301      	movs	r3, #1
 800431c:	e7e0      	b.n	80042e0 <_dtoa_r+0x248>
 800431e:	2401      	movs	r4, #1
 8004320:	2300      	movs	r3, #0
 8004322:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004324:	9320      	str	r3, [sp, #128]	@ 0x80
 8004326:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800432a:	2200      	movs	r2, #0
 800432c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004330:	2312      	movs	r3, #18
 8004332:	e7d0      	b.n	80042d6 <_dtoa_r+0x23e>
 8004334:	2301      	movs	r3, #1
 8004336:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004338:	e7f5      	b.n	8004326 <_dtoa_r+0x28e>
 800433a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800433c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004340:	e7d7      	b.n	80042f2 <_dtoa_r+0x25a>
 8004342:	3101      	adds	r1, #1
 8004344:	0052      	lsls	r2, r2, #1
 8004346:	e7d8      	b.n	80042fa <_dtoa_r+0x262>
 8004348:	636f4361 	.word	0x636f4361
 800434c:	3fd287a7 	.word	0x3fd287a7
 8004350:	8b60c8b3 	.word	0x8b60c8b3
 8004354:	3fc68a28 	.word	0x3fc68a28
 8004358:	509f79fb 	.word	0x509f79fb
 800435c:	3fd34413 	.word	0x3fd34413
 8004360:	08006b9b 	.word	0x08006b9b
 8004364:	08006bb2 	.word	0x08006bb2
 8004368:	7ff00000 	.word	0x7ff00000
 800436c:	08006b97 	.word	0x08006b97
 8004370:	08006b6b 	.word	0x08006b6b
 8004374:	08006b6a 	.word	0x08006b6a
 8004378:	3ff80000 	.word	0x3ff80000
 800437c:	08006ca8 	.word	0x08006ca8
 8004380:	08006c0a 	.word	0x08006c0a
 8004384:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004388:	6018      	str	r0, [r3, #0]
 800438a:	9b07      	ldr	r3, [sp, #28]
 800438c:	2b0e      	cmp	r3, #14
 800438e:	f200 80a4 	bhi.w	80044da <_dtoa_r+0x442>
 8004392:	2c00      	cmp	r4, #0
 8004394:	f000 80a1 	beq.w	80044da <_dtoa_r+0x442>
 8004398:	2f00      	cmp	r7, #0
 800439a:	dd33      	ble.n	8004404 <_dtoa_r+0x36c>
 800439c:	4b86      	ldr	r3, [pc, #536]	@ (80045b8 <_dtoa_r+0x520>)
 800439e:	f007 020f 	and.w	r2, r7, #15
 80043a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80043a6:	05f8      	lsls	r0, r7, #23
 80043a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80043ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80043b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80043b4:	d516      	bpl.n	80043e4 <_dtoa_r+0x34c>
 80043b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80043ba:	4b80      	ldr	r3, [pc, #512]	@ (80045bc <_dtoa_r+0x524>)
 80043bc:	2603      	movs	r6, #3
 80043be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80043c2:	f7fc f9b3 	bl	800072c <__aeabi_ddiv>
 80043c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043ca:	f004 040f 	and.w	r4, r4, #15
 80043ce:	4d7b      	ldr	r5, [pc, #492]	@ (80045bc <_dtoa_r+0x524>)
 80043d0:	b954      	cbnz	r4, 80043e8 <_dtoa_r+0x350>
 80043d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043da:	f7fc f9a7 	bl	800072c <__aeabi_ddiv>
 80043de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043e2:	e028      	b.n	8004436 <_dtoa_r+0x39e>
 80043e4:	2602      	movs	r6, #2
 80043e6:	e7f2      	b.n	80043ce <_dtoa_r+0x336>
 80043e8:	07e1      	lsls	r1, r4, #31
 80043ea:	d508      	bpl.n	80043fe <_dtoa_r+0x366>
 80043ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80043f4:	f7fc f870 	bl	80004d8 <__aeabi_dmul>
 80043f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043fc:	3601      	adds	r6, #1
 80043fe:	1064      	asrs	r4, r4, #1
 8004400:	3508      	adds	r5, #8
 8004402:	e7e5      	b.n	80043d0 <_dtoa_r+0x338>
 8004404:	f000 80d2 	beq.w	80045ac <_dtoa_r+0x514>
 8004408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800440c:	427c      	negs	r4, r7
 800440e:	4b6a      	ldr	r3, [pc, #424]	@ (80045b8 <_dtoa_r+0x520>)
 8004410:	f004 020f 	and.w	r2, r4, #15
 8004414:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f7fc f85c 	bl	80004d8 <__aeabi_dmul>
 8004420:	2602      	movs	r6, #2
 8004422:	2300      	movs	r3, #0
 8004424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004428:	4d64      	ldr	r5, [pc, #400]	@ (80045bc <_dtoa_r+0x524>)
 800442a:	1124      	asrs	r4, r4, #4
 800442c:	2c00      	cmp	r4, #0
 800442e:	f040 80b2 	bne.w	8004596 <_dtoa_r+0x4fe>
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1d3      	bne.n	80043de <_dtoa_r+0x346>
 8004436:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800443a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80b7 	beq.w	80045b0 <_dtoa_r+0x518>
 8004442:	2200      	movs	r2, #0
 8004444:	4620      	mov	r0, r4
 8004446:	4629      	mov	r1, r5
 8004448:	4b5d      	ldr	r3, [pc, #372]	@ (80045c0 <_dtoa_r+0x528>)
 800444a:	f7fc fab7 	bl	80009bc <__aeabi_dcmplt>
 800444e:	2800      	cmp	r0, #0
 8004450:	f000 80ae 	beq.w	80045b0 <_dtoa_r+0x518>
 8004454:	9b07      	ldr	r3, [sp, #28]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 80aa 	beq.w	80045b0 <_dtoa_r+0x518>
 800445c:	9b08      	ldr	r3, [sp, #32]
 800445e:	2b00      	cmp	r3, #0
 8004460:	dd37      	ble.n	80044d2 <_dtoa_r+0x43a>
 8004462:	1e7b      	subs	r3, r7, #1
 8004464:	4620      	mov	r0, r4
 8004466:	9304      	str	r3, [sp, #16]
 8004468:	2200      	movs	r2, #0
 800446a:	4629      	mov	r1, r5
 800446c:	4b55      	ldr	r3, [pc, #340]	@ (80045c4 <_dtoa_r+0x52c>)
 800446e:	f7fc f833 	bl	80004d8 <__aeabi_dmul>
 8004472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004476:	9c08      	ldr	r4, [sp, #32]
 8004478:	3601      	adds	r6, #1
 800447a:	4630      	mov	r0, r6
 800447c:	f7fb ffc2 	bl	8000404 <__aeabi_i2d>
 8004480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004484:	f7fc f828 	bl	80004d8 <__aeabi_dmul>
 8004488:	2200      	movs	r2, #0
 800448a:	4b4f      	ldr	r3, [pc, #316]	@ (80045c8 <_dtoa_r+0x530>)
 800448c:	f7fb fe6e 	bl	800016c <__adddf3>
 8004490:	4605      	mov	r5, r0
 8004492:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004496:	2c00      	cmp	r4, #0
 8004498:	f040 809a 	bne.w	80045d0 <_dtoa_r+0x538>
 800449c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044a0:	2200      	movs	r2, #0
 80044a2:	4b4a      	ldr	r3, [pc, #296]	@ (80045cc <_dtoa_r+0x534>)
 80044a4:	f7fb fe60 	bl	8000168 <__aeabi_dsub>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044b0:	462a      	mov	r2, r5
 80044b2:	4633      	mov	r3, r6
 80044b4:	f7fc faa0 	bl	80009f8 <__aeabi_dcmpgt>
 80044b8:	2800      	cmp	r0, #0
 80044ba:	f040 828e 	bne.w	80049da <_dtoa_r+0x942>
 80044be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044c2:	462a      	mov	r2, r5
 80044c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80044c8:	f7fc fa78 	bl	80009bc <__aeabi_dcmplt>
 80044cc:	2800      	cmp	r0, #0
 80044ce:	f040 8127 	bne.w	8004720 <_dtoa_r+0x688>
 80044d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80044d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80044da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f2c0 8163 	blt.w	80047a8 <_dtoa_r+0x710>
 80044e2:	2f0e      	cmp	r7, #14
 80044e4:	f300 8160 	bgt.w	80047a8 <_dtoa_r+0x710>
 80044e8:	4b33      	ldr	r3, [pc, #204]	@ (80045b8 <_dtoa_r+0x520>)
 80044ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80044ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80044f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	da03      	bge.n	8004504 <_dtoa_r+0x46c>
 80044fc:	9b07      	ldr	r3, [sp, #28]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f340 8100 	ble.w	8004704 <_dtoa_r+0x66c>
 8004504:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004508:	4656      	mov	r6, sl
 800450a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800450e:	4620      	mov	r0, r4
 8004510:	4629      	mov	r1, r5
 8004512:	f7fc f90b 	bl	800072c <__aeabi_ddiv>
 8004516:	f7fc fa8f 	bl	8000a38 <__aeabi_d2iz>
 800451a:	4680      	mov	r8, r0
 800451c:	f7fb ff72 	bl	8000404 <__aeabi_i2d>
 8004520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004524:	f7fb ffd8 	bl	80004d8 <__aeabi_dmul>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4620      	mov	r0, r4
 800452e:	4629      	mov	r1, r5
 8004530:	f7fb fe1a 	bl	8000168 <__aeabi_dsub>
 8004534:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004538:	9d07      	ldr	r5, [sp, #28]
 800453a:	f806 4b01 	strb.w	r4, [r6], #1
 800453e:	eba6 040a 	sub.w	r4, r6, sl
 8004542:	42a5      	cmp	r5, r4
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	f040 8116 	bne.w	8004778 <_dtoa_r+0x6e0>
 800454c:	f7fb fe0e 	bl	800016c <__adddf3>
 8004550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004554:	4604      	mov	r4, r0
 8004556:	460d      	mov	r5, r1
 8004558:	f7fc fa4e 	bl	80009f8 <__aeabi_dcmpgt>
 800455c:	2800      	cmp	r0, #0
 800455e:	f040 80f8 	bne.w	8004752 <_dtoa_r+0x6ba>
 8004562:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004566:	4620      	mov	r0, r4
 8004568:	4629      	mov	r1, r5
 800456a:	f7fc fa1d 	bl	80009a8 <__aeabi_dcmpeq>
 800456e:	b118      	cbz	r0, 8004578 <_dtoa_r+0x4e0>
 8004570:	f018 0f01 	tst.w	r8, #1
 8004574:	f040 80ed 	bne.w	8004752 <_dtoa_r+0x6ba>
 8004578:	4649      	mov	r1, r9
 800457a:	4658      	mov	r0, fp
 800457c:	f000 fc92 	bl	8004ea4 <_Bfree>
 8004580:	2300      	movs	r3, #0
 8004582:	7033      	strb	r3, [r6, #0]
 8004584:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004586:	3701      	adds	r7, #1
 8004588:	601f      	str	r7, [r3, #0]
 800458a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8320 	beq.w	8004bd2 <_dtoa_r+0xb3a>
 8004592:	601e      	str	r6, [r3, #0]
 8004594:	e31d      	b.n	8004bd2 <_dtoa_r+0xb3a>
 8004596:	07e2      	lsls	r2, r4, #31
 8004598:	d505      	bpl.n	80045a6 <_dtoa_r+0x50e>
 800459a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800459e:	f7fb ff9b 	bl	80004d8 <__aeabi_dmul>
 80045a2:	2301      	movs	r3, #1
 80045a4:	3601      	adds	r6, #1
 80045a6:	1064      	asrs	r4, r4, #1
 80045a8:	3508      	adds	r5, #8
 80045aa:	e73f      	b.n	800442c <_dtoa_r+0x394>
 80045ac:	2602      	movs	r6, #2
 80045ae:	e742      	b.n	8004436 <_dtoa_r+0x39e>
 80045b0:	9c07      	ldr	r4, [sp, #28]
 80045b2:	9704      	str	r7, [sp, #16]
 80045b4:	e761      	b.n	800447a <_dtoa_r+0x3e2>
 80045b6:	bf00      	nop
 80045b8:	08006ca8 	.word	0x08006ca8
 80045bc:	08006c80 	.word	0x08006c80
 80045c0:	3ff00000 	.word	0x3ff00000
 80045c4:	40240000 	.word	0x40240000
 80045c8:	401c0000 	.word	0x401c0000
 80045cc:	40140000 	.word	0x40140000
 80045d0:	4b70      	ldr	r3, [pc, #448]	@ (8004794 <_dtoa_r+0x6fc>)
 80045d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80045d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80045d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80045dc:	4454      	add	r4, sl
 80045de:	2900      	cmp	r1, #0
 80045e0:	d045      	beq.n	800466e <_dtoa_r+0x5d6>
 80045e2:	2000      	movs	r0, #0
 80045e4:	496c      	ldr	r1, [pc, #432]	@ (8004798 <_dtoa_r+0x700>)
 80045e6:	f7fc f8a1 	bl	800072c <__aeabi_ddiv>
 80045ea:	4633      	mov	r3, r6
 80045ec:	462a      	mov	r2, r5
 80045ee:	f7fb fdbb 	bl	8000168 <__aeabi_dsub>
 80045f2:	4656      	mov	r6, sl
 80045f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80045f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045fc:	f7fc fa1c 	bl	8000a38 <__aeabi_d2iz>
 8004600:	4605      	mov	r5, r0
 8004602:	f7fb feff 	bl	8000404 <__aeabi_i2d>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800460e:	f7fb fdab 	bl	8000168 <__aeabi_dsub>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	3530      	adds	r5, #48	@ 0x30
 8004618:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800461c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004620:	f806 5b01 	strb.w	r5, [r6], #1
 8004624:	f7fc f9ca 	bl	80009bc <__aeabi_dcmplt>
 8004628:	2800      	cmp	r0, #0
 800462a:	d163      	bne.n	80046f4 <_dtoa_r+0x65c>
 800462c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004630:	2000      	movs	r0, #0
 8004632:	495a      	ldr	r1, [pc, #360]	@ (800479c <_dtoa_r+0x704>)
 8004634:	f7fb fd98 	bl	8000168 <__aeabi_dsub>
 8004638:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800463c:	f7fc f9be 	bl	80009bc <__aeabi_dcmplt>
 8004640:	2800      	cmp	r0, #0
 8004642:	f040 8087 	bne.w	8004754 <_dtoa_r+0x6bc>
 8004646:	42a6      	cmp	r6, r4
 8004648:	f43f af43 	beq.w	80044d2 <_dtoa_r+0x43a>
 800464c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004650:	2200      	movs	r2, #0
 8004652:	4b53      	ldr	r3, [pc, #332]	@ (80047a0 <_dtoa_r+0x708>)
 8004654:	f7fb ff40 	bl	80004d8 <__aeabi_dmul>
 8004658:	2200      	movs	r2, #0
 800465a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800465e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004662:	4b4f      	ldr	r3, [pc, #316]	@ (80047a0 <_dtoa_r+0x708>)
 8004664:	f7fb ff38 	bl	80004d8 <__aeabi_dmul>
 8004668:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800466c:	e7c4      	b.n	80045f8 <_dtoa_r+0x560>
 800466e:	4631      	mov	r1, r6
 8004670:	4628      	mov	r0, r5
 8004672:	f7fb ff31 	bl	80004d8 <__aeabi_dmul>
 8004676:	4656      	mov	r6, sl
 8004678:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800467c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800467e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004682:	f7fc f9d9 	bl	8000a38 <__aeabi_d2iz>
 8004686:	4605      	mov	r5, r0
 8004688:	f7fb febc 	bl	8000404 <__aeabi_i2d>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004694:	f7fb fd68 	bl	8000168 <__aeabi_dsub>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	3530      	adds	r5, #48	@ 0x30
 800469e:	f806 5b01 	strb.w	r5, [r6], #1
 80046a2:	42a6      	cmp	r6, r4
 80046a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	d124      	bne.n	80046f8 <_dtoa_r+0x660>
 80046ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80046b2:	4b39      	ldr	r3, [pc, #228]	@ (8004798 <_dtoa_r+0x700>)
 80046b4:	f7fb fd5a 	bl	800016c <__adddf3>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046c0:	f7fc f99a 	bl	80009f8 <__aeabi_dcmpgt>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d145      	bne.n	8004754 <_dtoa_r+0x6bc>
 80046c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80046cc:	2000      	movs	r0, #0
 80046ce:	4932      	ldr	r1, [pc, #200]	@ (8004798 <_dtoa_r+0x700>)
 80046d0:	f7fb fd4a 	bl	8000168 <__aeabi_dsub>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046dc:	f7fc f96e 	bl	80009bc <__aeabi_dcmplt>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	f43f aef6 	beq.w	80044d2 <_dtoa_r+0x43a>
 80046e6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80046e8:	1e73      	subs	r3, r6, #1
 80046ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80046ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80046f0:	2b30      	cmp	r3, #48	@ 0x30
 80046f2:	d0f8      	beq.n	80046e6 <_dtoa_r+0x64e>
 80046f4:	9f04      	ldr	r7, [sp, #16]
 80046f6:	e73f      	b.n	8004578 <_dtoa_r+0x4e0>
 80046f8:	4b29      	ldr	r3, [pc, #164]	@ (80047a0 <_dtoa_r+0x708>)
 80046fa:	f7fb feed 	bl	80004d8 <__aeabi_dmul>
 80046fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004702:	e7bc      	b.n	800467e <_dtoa_r+0x5e6>
 8004704:	d10c      	bne.n	8004720 <_dtoa_r+0x688>
 8004706:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800470a:	2200      	movs	r2, #0
 800470c:	4b25      	ldr	r3, [pc, #148]	@ (80047a4 <_dtoa_r+0x70c>)
 800470e:	f7fb fee3 	bl	80004d8 <__aeabi_dmul>
 8004712:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004716:	f7fc f965 	bl	80009e4 <__aeabi_dcmpge>
 800471a:	2800      	cmp	r0, #0
 800471c:	f000 815b 	beq.w	80049d6 <_dtoa_r+0x93e>
 8004720:	2400      	movs	r4, #0
 8004722:	4625      	mov	r5, r4
 8004724:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004726:	4656      	mov	r6, sl
 8004728:	43db      	mvns	r3, r3
 800472a:	9304      	str	r3, [sp, #16]
 800472c:	2700      	movs	r7, #0
 800472e:	4621      	mov	r1, r4
 8004730:	4658      	mov	r0, fp
 8004732:	f000 fbb7 	bl	8004ea4 <_Bfree>
 8004736:	2d00      	cmp	r5, #0
 8004738:	d0dc      	beq.n	80046f4 <_dtoa_r+0x65c>
 800473a:	b12f      	cbz	r7, 8004748 <_dtoa_r+0x6b0>
 800473c:	42af      	cmp	r7, r5
 800473e:	d003      	beq.n	8004748 <_dtoa_r+0x6b0>
 8004740:	4639      	mov	r1, r7
 8004742:	4658      	mov	r0, fp
 8004744:	f000 fbae 	bl	8004ea4 <_Bfree>
 8004748:	4629      	mov	r1, r5
 800474a:	4658      	mov	r0, fp
 800474c:	f000 fbaa 	bl	8004ea4 <_Bfree>
 8004750:	e7d0      	b.n	80046f4 <_dtoa_r+0x65c>
 8004752:	9704      	str	r7, [sp, #16]
 8004754:	4633      	mov	r3, r6
 8004756:	461e      	mov	r6, r3
 8004758:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800475c:	2a39      	cmp	r2, #57	@ 0x39
 800475e:	d107      	bne.n	8004770 <_dtoa_r+0x6d8>
 8004760:	459a      	cmp	sl, r3
 8004762:	d1f8      	bne.n	8004756 <_dtoa_r+0x6be>
 8004764:	9a04      	ldr	r2, [sp, #16]
 8004766:	3201      	adds	r2, #1
 8004768:	9204      	str	r2, [sp, #16]
 800476a:	2230      	movs	r2, #48	@ 0x30
 800476c:	f88a 2000 	strb.w	r2, [sl]
 8004770:	781a      	ldrb	r2, [r3, #0]
 8004772:	3201      	adds	r2, #1
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	e7bd      	b.n	80046f4 <_dtoa_r+0x65c>
 8004778:	2200      	movs	r2, #0
 800477a:	4b09      	ldr	r3, [pc, #36]	@ (80047a0 <_dtoa_r+0x708>)
 800477c:	f7fb feac 	bl	80004d8 <__aeabi_dmul>
 8004780:	2200      	movs	r2, #0
 8004782:	2300      	movs	r3, #0
 8004784:	4604      	mov	r4, r0
 8004786:	460d      	mov	r5, r1
 8004788:	f7fc f90e 	bl	80009a8 <__aeabi_dcmpeq>
 800478c:	2800      	cmp	r0, #0
 800478e:	f43f aebc 	beq.w	800450a <_dtoa_r+0x472>
 8004792:	e6f1      	b.n	8004578 <_dtoa_r+0x4e0>
 8004794:	08006ca8 	.word	0x08006ca8
 8004798:	3fe00000 	.word	0x3fe00000
 800479c:	3ff00000 	.word	0x3ff00000
 80047a0:	40240000 	.word	0x40240000
 80047a4:	40140000 	.word	0x40140000
 80047a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80047aa:	2a00      	cmp	r2, #0
 80047ac:	f000 80db 	beq.w	8004966 <_dtoa_r+0x8ce>
 80047b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80047b2:	2a01      	cmp	r2, #1
 80047b4:	f300 80bf 	bgt.w	8004936 <_dtoa_r+0x89e>
 80047b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80047ba:	2a00      	cmp	r2, #0
 80047bc:	f000 80b7 	beq.w	800492e <_dtoa_r+0x896>
 80047c0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80047c4:	4646      	mov	r6, r8
 80047c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80047c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047ca:	2101      	movs	r1, #1
 80047cc:	441a      	add	r2, r3
 80047ce:	4658      	mov	r0, fp
 80047d0:	4498      	add	r8, r3
 80047d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80047d4:	f000 fc1a 	bl	800500c <__i2b>
 80047d8:	4605      	mov	r5, r0
 80047da:	b15e      	cbz	r6, 80047f4 <_dtoa_r+0x75c>
 80047dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047de:	2b00      	cmp	r3, #0
 80047e0:	dd08      	ble.n	80047f4 <_dtoa_r+0x75c>
 80047e2:	42b3      	cmp	r3, r6
 80047e4:	bfa8      	it	ge
 80047e6:	4633      	movge	r3, r6
 80047e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047ea:	eba8 0803 	sub.w	r8, r8, r3
 80047ee:	1af6      	subs	r6, r6, r3
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80047f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80047f6:	b1f3      	cbz	r3, 8004836 <_dtoa_r+0x79e>
 80047f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 80b7 	beq.w	800496e <_dtoa_r+0x8d6>
 8004800:	b18c      	cbz	r4, 8004826 <_dtoa_r+0x78e>
 8004802:	4629      	mov	r1, r5
 8004804:	4622      	mov	r2, r4
 8004806:	4658      	mov	r0, fp
 8004808:	f000 fcbe 	bl	8005188 <__pow5mult>
 800480c:	464a      	mov	r2, r9
 800480e:	4601      	mov	r1, r0
 8004810:	4605      	mov	r5, r0
 8004812:	4658      	mov	r0, fp
 8004814:	f000 fc10 	bl	8005038 <__multiply>
 8004818:	4649      	mov	r1, r9
 800481a:	9004      	str	r0, [sp, #16]
 800481c:	4658      	mov	r0, fp
 800481e:	f000 fb41 	bl	8004ea4 <_Bfree>
 8004822:	9b04      	ldr	r3, [sp, #16]
 8004824:	4699      	mov	r9, r3
 8004826:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004828:	1b1a      	subs	r2, r3, r4
 800482a:	d004      	beq.n	8004836 <_dtoa_r+0x79e>
 800482c:	4649      	mov	r1, r9
 800482e:	4658      	mov	r0, fp
 8004830:	f000 fcaa 	bl	8005188 <__pow5mult>
 8004834:	4681      	mov	r9, r0
 8004836:	2101      	movs	r1, #1
 8004838:	4658      	mov	r0, fp
 800483a:	f000 fbe7 	bl	800500c <__i2b>
 800483e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004840:	4604      	mov	r4, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 81c9 	beq.w	8004bda <_dtoa_r+0xb42>
 8004848:	461a      	mov	r2, r3
 800484a:	4601      	mov	r1, r0
 800484c:	4658      	mov	r0, fp
 800484e:	f000 fc9b 	bl	8005188 <__pow5mult>
 8004852:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004854:	4604      	mov	r4, r0
 8004856:	2b01      	cmp	r3, #1
 8004858:	f300 808f 	bgt.w	800497a <_dtoa_r+0x8e2>
 800485c:	9b02      	ldr	r3, [sp, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	f040 8087 	bne.w	8004972 <_dtoa_r+0x8da>
 8004864:	9b03      	ldr	r3, [sp, #12]
 8004866:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800486a:	2b00      	cmp	r3, #0
 800486c:	f040 8083 	bne.w	8004976 <_dtoa_r+0x8de>
 8004870:	9b03      	ldr	r3, [sp, #12]
 8004872:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004876:	0d1b      	lsrs	r3, r3, #20
 8004878:	051b      	lsls	r3, r3, #20
 800487a:	b12b      	cbz	r3, 8004888 <_dtoa_r+0x7f0>
 800487c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800487e:	f108 0801 	add.w	r8, r8, #1
 8004882:	3301      	adds	r3, #1
 8004884:	9309      	str	r3, [sp, #36]	@ 0x24
 8004886:	2301      	movs	r3, #1
 8004888:	930a      	str	r3, [sp, #40]	@ 0x28
 800488a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 81aa 	beq.w	8004be6 <_dtoa_r+0xb4e>
 8004892:	6923      	ldr	r3, [r4, #16]
 8004894:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004898:	6918      	ldr	r0, [r3, #16]
 800489a:	f000 fb6b 	bl	8004f74 <__hi0bits>
 800489e:	f1c0 0020 	rsb	r0, r0, #32
 80048a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048a4:	4418      	add	r0, r3
 80048a6:	f010 001f 	ands.w	r0, r0, #31
 80048aa:	d071      	beq.n	8004990 <_dtoa_r+0x8f8>
 80048ac:	f1c0 0320 	rsb	r3, r0, #32
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	dd65      	ble.n	8004980 <_dtoa_r+0x8e8>
 80048b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048b6:	f1c0 001c 	rsb	r0, r0, #28
 80048ba:	4403      	add	r3, r0
 80048bc:	4480      	add	r8, r0
 80048be:	4406      	add	r6, r0
 80048c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80048c2:	f1b8 0f00 	cmp.w	r8, #0
 80048c6:	dd05      	ble.n	80048d4 <_dtoa_r+0x83c>
 80048c8:	4649      	mov	r1, r9
 80048ca:	4642      	mov	r2, r8
 80048cc:	4658      	mov	r0, fp
 80048ce:	f000 fcb5 	bl	800523c <__lshift>
 80048d2:	4681      	mov	r9, r0
 80048d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	dd05      	ble.n	80048e6 <_dtoa_r+0x84e>
 80048da:	4621      	mov	r1, r4
 80048dc:	461a      	mov	r2, r3
 80048de:	4658      	mov	r0, fp
 80048e0:	f000 fcac 	bl	800523c <__lshift>
 80048e4:	4604      	mov	r4, r0
 80048e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d053      	beq.n	8004994 <_dtoa_r+0x8fc>
 80048ec:	4621      	mov	r1, r4
 80048ee:	4648      	mov	r0, r9
 80048f0:	f000 fd10 	bl	8005314 <__mcmp>
 80048f4:	2800      	cmp	r0, #0
 80048f6:	da4d      	bge.n	8004994 <_dtoa_r+0x8fc>
 80048f8:	1e7b      	subs	r3, r7, #1
 80048fa:	4649      	mov	r1, r9
 80048fc:	9304      	str	r3, [sp, #16]
 80048fe:	220a      	movs	r2, #10
 8004900:	2300      	movs	r3, #0
 8004902:	4658      	mov	r0, fp
 8004904:	f000 faf0 	bl	8004ee8 <__multadd>
 8004908:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800490a:	4681      	mov	r9, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 816c 	beq.w	8004bea <_dtoa_r+0xb52>
 8004912:	2300      	movs	r3, #0
 8004914:	4629      	mov	r1, r5
 8004916:	220a      	movs	r2, #10
 8004918:	4658      	mov	r0, fp
 800491a:	f000 fae5 	bl	8004ee8 <__multadd>
 800491e:	9b08      	ldr	r3, [sp, #32]
 8004920:	4605      	mov	r5, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	dc61      	bgt.n	80049ea <_dtoa_r+0x952>
 8004926:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004928:	2b02      	cmp	r3, #2
 800492a:	dc3b      	bgt.n	80049a4 <_dtoa_r+0x90c>
 800492c:	e05d      	b.n	80049ea <_dtoa_r+0x952>
 800492e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004930:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004934:	e746      	b.n	80047c4 <_dtoa_r+0x72c>
 8004936:	9b07      	ldr	r3, [sp, #28]
 8004938:	1e5c      	subs	r4, r3, #1
 800493a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800493c:	42a3      	cmp	r3, r4
 800493e:	bfbf      	itttt	lt
 8004940:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004942:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004944:	1ae3      	sublt	r3, r4, r3
 8004946:	18d2      	addlt	r2, r2, r3
 8004948:	bfa8      	it	ge
 800494a:	1b1c      	subge	r4, r3, r4
 800494c:	9b07      	ldr	r3, [sp, #28]
 800494e:	bfbe      	ittt	lt
 8004950:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004952:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004954:	2400      	movlt	r4, #0
 8004956:	2b00      	cmp	r3, #0
 8004958:	bfb5      	itete	lt
 800495a:	eba8 0603 	sublt.w	r6, r8, r3
 800495e:	4646      	movge	r6, r8
 8004960:	2300      	movlt	r3, #0
 8004962:	9b07      	ldrge	r3, [sp, #28]
 8004964:	e730      	b.n	80047c8 <_dtoa_r+0x730>
 8004966:	4646      	mov	r6, r8
 8004968:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800496a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800496c:	e735      	b.n	80047da <_dtoa_r+0x742>
 800496e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004970:	e75c      	b.n	800482c <_dtoa_r+0x794>
 8004972:	2300      	movs	r3, #0
 8004974:	e788      	b.n	8004888 <_dtoa_r+0x7f0>
 8004976:	9b02      	ldr	r3, [sp, #8]
 8004978:	e786      	b.n	8004888 <_dtoa_r+0x7f0>
 800497a:	2300      	movs	r3, #0
 800497c:	930a      	str	r3, [sp, #40]	@ 0x28
 800497e:	e788      	b.n	8004892 <_dtoa_r+0x7fa>
 8004980:	d09f      	beq.n	80048c2 <_dtoa_r+0x82a>
 8004982:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004984:	331c      	adds	r3, #28
 8004986:	441a      	add	r2, r3
 8004988:	4498      	add	r8, r3
 800498a:	441e      	add	r6, r3
 800498c:	9209      	str	r2, [sp, #36]	@ 0x24
 800498e:	e798      	b.n	80048c2 <_dtoa_r+0x82a>
 8004990:	4603      	mov	r3, r0
 8004992:	e7f6      	b.n	8004982 <_dtoa_r+0x8ea>
 8004994:	9b07      	ldr	r3, [sp, #28]
 8004996:	9704      	str	r7, [sp, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	dc20      	bgt.n	80049de <_dtoa_r+0x946>
 800499c:	9308      	str	r3, [sp, #32]
 800499e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	dd1e      	ble.n	80049e2 <_dtoa_r+0x94a>
 80049a4:	9b08      	ldr	r3, [sp, #32]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f47f aebc 	bne.w	8004724 <_dtoa_r+0x68c>
 80049ac:	4621      	mov	r1, r4
 80049ae:	2205      	movs	r2, #5
 80049b0:	4658      	mov	r0, fp
 80049b2:	f000 fa99 	bl	8004ee8 <__multadd>
 80049b6:	4601      	mov	r1, r0
 80049b8:	4604      	mov	r4, r0
 80049ba:	4648      	mov	r0, r9
 80049bc:	f000 fcaa 	bl	8005314 <__mcmp>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	f77f aeaf 	ble.w	8004724 <_dtoa_r+0x68c>
 80049c6:	2331      	movs	r3, #49	@ 0x31
 80049c8:	4656      	mov	r6, sl
 80049ca:	f806 3b01 	strb.w	r3, [r6], #1
 80049ce:	9b04      	ldr	r3, [sp, #16]
 80049d0:	3301      	adds	r3, #1
 80049d2:	9304      	str	r3, [sp, #16]
 80049d4:	e6aa      	b.n	800472c <_dtoa_r+0x694>
 80049d6:	9c07      	ldr	r4, [sp, #28]
 80049d8:	9704      	str	r7, [sp, #16]
 80049da:	4625      	mov	r5, r4
 80049dc:	e7f3      	b.n	80049c6 <_dtoa_r+0x92e>
 80049de:	9b07      	ldr	r3, [sp, #28]
 80049e0:	9308      	str	r3, [sp, #32]
 80049e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8104 	beq.w	8004bf2 <_dtoa_r+0xb5a>
 80049ea:	2e00      	cmp	r6, #0
 80049ec:	dd05      	ble.n	80049fa <_dtoa_r+0x962>
 80049ee:	4629      	mov	r1, r5
 80049f0:	4632      	mov	r2, r6
 80049f2:	4658      	mov	r0, fp
 80049f4:	f000 fc22 	bl	800523c <__lshift>
 80049f8:	4605      	mov	r5, r0
 80049fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d05a      	beq.n	8004ab6 <_dtoa_r+0xa1e>
 8004a00:	4658      	mov	r0, fp
 8004a02:	6869      	ldr	r1, [r5, #4]
 8004a04:	f000 fa0e 	bl	8004e24 <_Balloc>
 8004a08:	4606      	mov	r6, r0
 8004a0a:	b928      	cbnz	r0, 8004a18 <_dtoa_r+0x980>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004a12:	4b83      	ldr	r3, [pc, #524]	@ (8004c20 <_dtoa_r+0xb88>)
 8004a14:	f7ff bb54 	b.w	80040c0 <_dtoa_r+0x28>
 8004a18:	692a      	ldr	r2, [r5, #16]
 8004a1a:	f105 010c 	add.w	r1, r5, #12
 8004a1e:	3202      	adds	r2, #2
 8004a20:	0092      	lsls	r2, r2, #2
 8004a22:	300c      	adds	r0, #12
 8004a24:	f001 f80a 	bl	8005a3c <memcpy>
 8004a28:	2201      	movs	r2, #1
 8004a2a:	4631      	mov	r1, r6
 8004a2c:	4658      	mov	r0, fp
 8004a2e:	f000 fc05 	bl	800523c <__lshift>
 8004a32:	462f      	mov	r7, r5
 8004a34:	4605      	mov	r5, r0
 8004a36:	f10a 0301 	add.w	r3, sl, #1
 8004a3a:	9307      	str	r3, [sp, #28]
 8004a3c:	9b08      	ldr	r3, [sp, #32]
 8004a3e:	4453      	add	r3, sl
 8004a40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a42:	9b02      	ldr	r3, [sp, #8]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a4a:	9b07      	ldr	r3, [sp, #28]
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	4648      	mov	r0, r9
 8004a52:	9302      	str	r3, [sp, #8]
 8004a54:	f7ff fa95 	bl	8003f82 <quorem>
 8004a58:	4639      	mov	r1, r7
 8004a5a:	9008      	str	r0, [sp, #32]
 8004a5c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004a60:	4648      	mov	r0, r9
 8004a62:	f000 fc57 	bl	8005314 <__mcmp>
 8004a66:	462a      	mov	r2, r5
 8004a68:	9009      	str	r0, [sp, #36]	@ 0x24
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	4658      	mov	r0, fp
 8004a6e:	f000 fc6d 	bl	800534c <__mdiff>
 8004a72:	68c2      	ldr	r2, [r0, #12]
 8004a74:	4606      	mov	r6, r0
 8004a76:	bb02      	cbnz	r2, 8004aba <_dtoa_r+0xa22>
 8004a78:	4601      	mov	r1, r0
 8004a7a:	4648      	mov	r0, r9
 8004a7c:	f000 fc4a 	bl	8005314 <__mcmp>
 8004a80:	4602      	mov	r2, r0
 8004a82:	4631      	mov	r1, r6
 8004a84:	4658      	mov	r0, fp
 8004a86:	920c      	str	r2, [sp, #48]	@ 0x30
 8004a88:	f000 fa0c 	bl	8004ea4 <_Bfree>
 8004a8c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004a8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004a90:	9e07      	ldr	r6, [sp, #28]
 8004a92:	ea43 0102 	orr.w	r1, r3, r2
 8004a96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a98:	4319      	orrs	r1, r3
 8004a9a:	d110      	bne.n	8004abe <_dtoa_r+0xa26>
 8004a9c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004aa0:	d029      	beq.n	8004af6 <_dtoa_r+0xa5e>
 8004aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	dd02      	ble.n	8004aae <_dtoa_r+0xa16>
 8004aa8:	9b08      	ldr	r3, [sp, #32]
 8004aaa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004aae:	9b02      	ldr	r3, [sp, #8]
 8004ab0:	f883 8000 	strb.w	r8, [r3]
 8004ab4:	e63b      	b.n	800472e <_dtoa_r+0x696>
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	e7bb      	b.n	8004a32 <_dtoa_r+0x99a>
 8004aba:	2201      	movs	r2, #1
 8004abc:	e7e1      	b.n	8004a82 <_dtoa_r+0x9ea>
 8004abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	db04      	blt.n	8004ace <_dtoa_r+0xa36>
 8004ac4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004ac6:	430b      	orrs	r3, r1
 8004ac8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004aca:	430b      	orrs	r3, r1
 8004acc:	d120      	bne.n	8004b10 <_dtoa_r+0xa78>
 8004ace:	2a00      	cmp	r2, #0
 8004ad0:	dded      	ble.n	8004aae <_dtoa_r+0xa16>
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	4658      	mov	r0, fp
 8004ad8:	f000 fbb0 	bl	800523c <__lshift>
 8004adc:	4621      	mov	r1, r4
 8004ade:	4681      	mov	r9, r0
 8004ae0:	f000 fc18 	bl	8005314 <__mcmp>
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	dc03      	bgt.n	8004af0 <_dtoa_r+0xa58>
 8004ae8:	d1e1      	bne.n	8004aae <_dtoa_r+0xa16>
 8004aea:	f018 0f01 	tst.w	r8, #1
 8004aee:	d0de      	beq.n	8004aae <_dtoa_r+0xa16>
 8004af0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004af4:	d1d8      	bne.n	8004aa8 <_dtoa_r+0xa10>
 8004af6:	2339      	movs	r3, #57	@ 0x39
 8004af8:	9a02      	ldr	r2, [sp, #8]
 8004afa:	7013      	strb	r3, [r2, #0]
 8004afc:	4633      	mov	r3, r6
 8004afe:	461e      	mov	r6, r3
 8004b00:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	2a39      	cmp	r2, #57	@ 0x39
 8004b08:	d052      	beq.n	8004bb0 <_dtoa_r+0xb18>
 8004b0a:	3201      	adds	r2, #1
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	e60e      	b.n	800472e <_dtoa_r+0x696>
 8004b10:	2a00      	cmp	r2, #0
 8004b12:	dd07      	ble.n	8004b24 <_dtoa_r+0xa8c>
 8004b14:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004b18:	d0ed      	beq.n	8004af6 <_dtoa_r+0xa5e>
 8004b1a:	9a02      	ldr	r2, [sp, #8]
 8004b1c:	f108 0301 	add.w	r3, r8, #1
 8004b20:	7013      	strb	r3, [r2, #0]
 8004b22:	e604      	b.n	800472e <_dtoa_r+0x696>
 8004b24:	9b07      	ldr	r3, [sp, #28]
 8004b26:	9a07      	ldr	r2, [sp, #28]
 8004b28:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004b2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d028      	beq.n	8004b84 <_dtoa_r+0xaec>
 8004b32:	4649      	mov	r1, r9
 8004b34:	2300      	movs	r3, #0
 8004b36:	220a      	movs	r2, #10
 8004b38:	4658      	mov	r0, fp
 8004b3a:	f000 f9d5 	bl	8004ee8 <__multadd>
 8004b3e:	42af      	cmp	r7, r5
 8004b40:	4681      	mov	r9, r0
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	f04f 020a 	mov.w	r2, #10
 8004b4a:	4639      	mov	r1, r7
 8004b4c:	4658      	mov	r0, fp
 8004b4e:	d107      	bne.n	8004b60 <_dtoa_r+0xac8>
 8004b50:	f000 f9ca 	bl	8004ee8 <__multadd>
 8004b54:	4607      	mov	r7, r0
 8004b56:	4605      	mov	r5, r0
 8004b58:	9b07      	ldr	r3, [sp, #28]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	9307      	str	r3, [sp, #28]
 8004b5e:	e774      	b.n	8004a4a <_dtoa_r+0x9b2>
 8004b60:	f000 f9c2 	bl	8004ee8 <__multadd>
 8004b64:	4629      	mov	r1, r5
 8004b66:	4607      	mov	r7, r0
 8004b68:	2300      	movs	r3, #0
 8004b6a:	220a      	movs	r2, #10
 8004b6c:	4658      	mov	r0, fp
 8004b6e:	f000 f9bb 	bl	8004ee8 <__multadd>
 8004b72:	4605      	mov	r5, r0
 8004b74:	e7f0      	b.n	8004b58 <_dtoa_r+0xac0>
 8004b76:	9b08      	ldr	r3, [sp, #32]
 8004b78:	2700      	movs	r7, #0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	bfcc      	ite	gt
 8004b7e:	461e      	movgt	r6, r3
 8004b80:	2601      	movle	r6, #1
 8004b82:	4456      	add	r6, sl
 8004b84:	4649      	mov	r1, r9
 8004b86:	2201      	movs	r2, #1
 8004b88:	4658      	mov	r0, fp
 8004b8a:	f000 fb57 	bl	800523c <__lshift>
 8004b8e:	4621      	mov	r1, r4
 8004b90:	4681      	mov	r9, r0
 8004b92:	f000 fbbf 	bl	8005314 <__mcmp>
 8004b96:	2800      	cmp	r0, #0
 8004b98:	dcb0      	bgt.n	8004afc <_dtoa_r+0xa64>
 8004b9a:	d102      	bne.n	8004ba2 <_dtoa_r+0xb0a>
 8004b9c:	f018 0f01 	tst.w	r8, #1
 8004ba0:	d1ac      	bne.n	8004afc <_dtoa_r+0xa64>
 8004ba2:	4633      	mov	r3, r6
 8004ba4:	461e      	mov	r6, r3
 8004ba6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004baa:	2a30      	cmp	r2, #48	@ 0x30
 8004bac:	d0fa      	beq.n	8004ba4 <_dtoa_r+0xb0c>
 8004bae:	e5be      	b.n	800472e <_dtoa_r+0x696>
 8004bb0:	459a      	cmp	sl, r3
 8004bb2:	d1a4      	bne.n	8004afe <_dtoa_r+0xa66>
 8004bb4:	9b04      	ldr	r3, [sp, #16]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	9304      	str	r3, [sp, #16]
 8004bba:	2331      	movs	r3, #49	@ 0x31
 8004bbc:	f88a 3000 	strb.w	r3, [sl]
 8004bc0:	e5b5      	b.n	800472e <_dtoa_r+0x696>
 8004bc2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004bc4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004c24 <_dtoa_r+0xb8c>
 8004bc8:	b11b      	cbz	r3, 8004bd2 <_dtoa_r+0xb3a>
 8004bca:	f10a 0308 	add.w	r3, sl, #8
 8004bce:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	4650      	mov	r0, sl
 8004bd4:	b017      	add	sp, #92	@ 0x5c
 8004bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bda:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	f77f ae3d 	ble.w	800485c <_dtoa_r+0x7c4>
 8004be2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004be4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004be6:	2001      	movs	r0, #1
 8004be8:	e65b      	b.n	80048a2 <_dtoa_r+0x80a>
 8004bea:	9b08      	ldr	r3, [sp, #32]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f77f aed6 	ble.w	800499e <_dtoa_r+0x906>
 8004bf2:	4656      	mov	r6, sl
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	4648      	mov	r0, r9
 8004bf8:	f7ff f9c3 	bl	8003f82 <quorem>
 8004bfc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004c00:	9b08      	ldr	r3, [sp, #32]
 8004c02:	f806 8b01 	strb.w	r8, [r6], #1
 8004c06:	eba6 020a 	sub.w	r2, r6, sl
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	ddb3      	ble.n	8004b76 <_dtoa_r+0xade>
 8004c0e:	4649      	mov	r1, r9
 8004c10:	2300      	movs	r3, #0
 8004c12:	220a      	movs	r2, #10
 8004c14:	4658      	mov	r0, fp
 8004c16:	f000 f967 	bl	8004ee8 <__multadd>
 8004c1a:	4681      	mov	r9, r0
 8004c1c:	e7ea      	b.n	8004bf4 <_dtoa_r+0xb5c>
 8004c1e:	bf00      	nop
 8004c20:	08006c0a 	.word	0x08006c0a
 8004c24:	08006b8e 	.word	0x08006b8e

08004c28 <_free_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	4605      	mov	r5, r0
 8004c2c:	2900      	cmp	r1, #0
 8004c2e:	d040      	beq.n	8004cb2 <_free_r+0x8a>
 8004c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c34:	1f0c      	subs	r4, r1, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bfb8      	it	lt
 8004c3a:	18e4      	addlt	r4, r4, r3
 8004c3c:	f000 f8e6 	bl	8004e0c <__malloc_lock>
 8004c40:	4a1c      	ldr	r2, [pc, #112]	@ (8004cb4 <_free_r+0x8c>)
 8004c42:	6813      	ldr	r3, [r2, #0]
 8004c44:	b933      	cbnz	r3, 8004c54 <_free_r+0x2c>
 8004c46:	6063      	str	r3, [r4, #4]
 8004c48:	6014      	str	r4, [r2, #0]
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c50:	f000 b8e2 	b.w	8004e18 <__malloc_unlock>
 8004c54:	42a3      	cmp	r3, r4
 8004c56:	d908      	bls.n	8004c6a <_free_r+0x42>
 8004c58:	6820      	ldr	r0, [r4, #0]
 8004c5a:	1821      	adds	r1, r4, r0
 8004c5c:	428b      	cmp	r3, r1
 8004c5e:	bf01      	itttt	eq
 8004c60:	6819      	ldreq	r1, [r3, #0]
 8004c62:	685b      	ldreq	r3, [r3, #4]
 8004c64:	1809      	addeq	r1, r1, r0
 8004c66:	6021      	streq	r1, [r4, #0]
 8004c68:	e7ed      	b.n	8004c46 <_free_r+0x1e>
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	b10b      	cbz	r3, 8004c74 <_free_r+0x4c>
 8004c70:	42a3      	cmp	r3, r4
 8004c72:	d9fa      	bls.n	8004c6a <_free_r+0x42>
 8004c74:	6811      	ldr	r1, [r2, #0]
 8004c76:	1850      	adds	r0, r2, r1
 8004c78:	42a0      	cmp	r0, r4
 8004c7a:	d10b      	bne.n	8004c94 <_free_r+0x6c>
 8004c7c:	6820      	ldr	r0, [r4, #0]
 8004c7e:	4401      	add	r1, r0
 8004c80:	1850      	adds	r0, r2, r1
 8004c82:	4283      	cmp	r3, r0
 8004c84:	6011      	str	r1, [r2, #0]
 8004c86:	d1e0      	bne.n	8004c4a <_free_r+0x22>
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4408      	add	r0, r1
 8004c8e:	6010      	str	r0, [r2, #0]
 8004c90:	6053      	str	r3, [r2, #4]
 8004c92:	e7da      	b.n	8004c4a <_free_r+0x22>
 8004c94:	d902      	bls.n	8004c9c <_free_r+0x74>
 8004c96:	230c      	movs	r3, #12
 8004c98:	602b      	str	r3, [r5, #0]
 8004c9a:	e7d6      	b.n	8004c4a <_free_r+0x22>
 8004c9c:	6820      	ldr	r0, [r4, #0]
 8004c9e:	1821      	adds	r1, r4, r0
 8004ca0:	428b      	cmp	r3, r1
 8004ca2:	bf01      	itttt	eq
 8004ca4:	6819      	ldreq	r1, [r3, #0]
 8004ca6:	685b      	ldreq	r3, [r3, #4]
 8004ca8:	1809      	addeq	r1, r1, r0
 8004caa:	6021      	streq	r1, [r4, #0]
 8004cac:	6063      	str	r3, [r4, #4]
 8004cae:	6054      	str	r4, [r2, #4]
 8004cb0:	e7cb      	b.n	8004c4a <_free_r+0x22>
 8004cb2:	bd38      	pop	{r3, r4, r5, pc}
 8004cb4:	200003cc 	.word	0x200003cc

08004cb8 <malloc>:
 8004cb8:	4b02      	ldr	r3, [pc, #8]	@ (8004cc4 <malloc+0xc>)
 8004cba:	4601      	mov	r1, r0
 8004cbc:	6818      	ldr	r0, [r3, #0]
 8004cbe:	f000 b825 	b.w	8004d0c <_malloc_r>
 8004cc2:	bf00      	nop
 8004cc4:	20000018 	.word	0x20000018

08004cc8 <sbrk_aligned>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	4e0f      	ldr	r6, [pc, #60]	@ (8004d08 <sbrk_aligned+0x40>)
 8004ccc:	460c      	mov	r4, r1
 8004cce:	6831      	ldr	r1, [r6, #0]
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	b911      	cbnz	r1, 8004cda <sbrk_aligned+0x12>
 8004cd4:	f000 fea2 	bl	8005a1c <_sbrk_r>
 8004cd8:	6030      	str	r0, [r6, #0]
 8004cda:	4621      	mov	r1, r4
 8004cdc:	4628      	mov	r0, r5
 8004cde:	f000 fe9d 	bl	8005a1c <_sbrk_r>
 8004ce2:	1c43      	adds	r3, r0, #1
 8004ce4:	d103      	bne.n	8004cee <sbrk_aligned+0x26>
 8004ce6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004cea:	4620      	mov	r0, r4
 8004cec:	bd70      	pop	{r4, r5, r6, pc}
 8004cee:	1cc4      	adds	r4, r0, #3
 8004cf0:	f024 0403 	bic.w	r4, r4, #3
 8004cf4:	42a0      	cmp	r0, r4
 8004cf6:	d0f8      	beq.n	8004cea <sbrk_aligned+0x22>
 8004cf8:	1a21      	subs	r1, r4, r0
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	f000 fe8e 	bl	8005a1c <_sbrk_r>
 8004d00:	3001      	adds	r0, #1
 8004d02:	d1f2      	bne.n	8004cea <sbrk_aligned+0x22>
 8004d04:	e7ef      	b.n	8004ce6 <sbrk_aligned+0x1e>
 8004d06:	bf00      	nop
 8004d08:	200003c8 	.word	0x200003c8

08004d0c <_malloc_r>:
 8004d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d10:	1ccd      	adds	r5, r1, #3
 8004d12:	f025 0503 	bic.w	r5, r5, #3
 8004d16:	3508      	adds	r5, #8
 8004d18:	2d0c      	cmp	r5, #12
 8004d1a:	bf38      	it	cc
 8004d1c:	250c      	movcc	r5, #12
 8004d1e:	2d00      	cmp	r5, #0
 8004d20:	4606      	mov	r6, r0
 8004d22:	db01      	blt.n	8004d28 <_malloc_r+0x1c>
 8004d24:	42a9      	cmp	r1, r5
 8004d26:	d904      	bls.n	8004d32 <_malloc_r+0x26>
 8004d28:	230c      	movs	r3, #12
 8004d2a:	6033      	str	r3, [r6, #0]
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e08 <_malloc_r+0xfc>
 8004d36:	f000 f869 	bl	8004e0c <__malloc_lock>
 8004d3a:	f8d8 3000 	ldr.w	r3, [r8]
 8004d3e:	461c      	mov	r4, r3
 8004d40:	bb44      	cbnz	r4, 8004d94 <_malloc_r+0x88>
 8004d42:	4629      	mov	r1, r5
 8004d44:	4630      	mov	r0, r6
 8004d46:	f7ff ffbf 	bl	8004cc8 <sbrk_aligned>
 8004d4a:	1c43      	adds	r3, r0, #1
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	d158      	bne.n	8004e02 <_malloc_r+0xf6>
 8004d50:	f8d8 4000 	ldr.w	r4, [r8]
 8004d54:	4627      	mov	r7, r4
 8004d56:	2f00      	cmp	r7, #0
 8004d58:	d143      	bne.n	8004de2 <_malloc_r+0xd6>
 8004d5a:	2c00      	cmp	r4, #0
 8004d5c:	d04b      	beq.n	8004df6 <_malloc_r+0xea>
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	4639      	mov	r1, r7
 8004d62:	4630      	mov	r0, r6
 8004d64:	eb04 0903 	add.w	r9, r4, r3
 8004d68:	f000 fe58 	bl	8005a1c <_sbrk_r>
 8004d6c:	4581      	cmp	r9, r0
 8004d6e:	d142      	bne.n	8004df6 <_malloc_r+0xea>
 8004d70:	6821      	ldr	r1, [r4, #0]
 8004d72:	4630      	mov	r0, r6
 8004d74:	1a6d      	subs	r5, r5, r1
 8004d76:	4629      	mov	r1, r5
 8004d78:	f7ff ffa6 	bl	8004cc8 <sbrk_aligned>
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d03a      	beq.n	8004df6 <_malloc_r+0xea>
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	442b      	add	r3, r5
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	f8d8 3000 	ldr.w	r3, [r8]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	bb62      	cbnz	r2, 8004de8 <_malloc_r+0xdc>
 8004d8e:	f8c8 7000 	str.w	r7, [r8]
 8004d92:	e00f      	b.n	8004db4 <_malloc_r+0xa8>
 8004d94:	6822      	ldr	r2, [r4, #0]
 8004d96:	1b52      	subs	r2, r2, r5
 8004d98:	d420      	bmi.n	8004ddc <_malloc_r+0xd0>
 8004d9a:	2a0b      	cmp	r2, #11
 8004d9c:	d917      	bls.n	8004dce <_malloc_r+0xc2>
 8004d9e:	1961      	adds	r1, r4, r5
 8004da0:	42a3      	cmp	r3, r4
 8004da2:	6025      	str	r5, [r4, #0]
 8004da4:	bf18      	it	ne
 8004da6:	6059      	strne	r1, [r3, #4]
 8004da8:	6863      	ldr	r3, [r4, #4]
 8004daa:	bf08      	it	eq
 8004dac:	f8c8 1000 	streq.w	r1, [r8]
 8004db0:	5162      	str	r2, [r4, r5]
 8004db2:	604b      	str	r3, [r1, #4]
 8004db4:	4630      	mov	r0, r6
 8004db6:	f000 f82f 	bl	8004e18 <__malloc_unlock>
 8004dba:	f104 000b 	add.w	r0, r4, #11
 8004dbe:	1d23      	adds	r3, r4, #4
 8004dc0:	f020 0007 	bic.w	r0, r0, #7
 8004dc4:	1ac2      	subs	r2, r0, r3
 8004dc6:	bf1c      	itt	ne
 8004dc8:	1a1b      	subne	r3, r3, r0
 8004dca:	50a3      	strne	r3, [r4, r2]
 8004dcc:	e7af      	b.n	8004d2e <_malloc_r+0x22>
 8004dce:	6862      	ldr	r2, [r4, #4]
 8004dd0:	42a3      	cmp	r3, r4
 8004dd2:	bf0c      	ite	eq
 8004dd4:	f8c8 2000 	streq.w	r2, [r8]
 8004dd8:	605a      	strne	r2, [r3, #4]
 8004dda:	e7eb      	b.n	8004db4 <_malloc_r+0xa8>
 8004ddc:	4623      	mov	r3, r4
 8004dde:	6864      	ldr	r4, [r4, #4]
 8004de0:	e7ae      	b.n	8004d40 <_malloc_r+0x34>
 8004de2:	463c      	mov	r4, r7
 8004de4:	687f      	ldr	r7, [r7, #4]
 8004de6:	e7b6      	b.n	8004d56 <_malloc_r+0x4a>
 8004de8:	461a      	mov	r2, r3
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	42a3      	cmp	r3, r4
 8004dee:	d1fb      	bne.n	8004de8 <_malloc_r+0xdc>
 8004df0:	2300      	movs	r3, #0
 8004df2:	6053      	str	r3, [r2, #4]
 8004df4:	e7de      	b.n	8004db4 <_malloc_r+0xa8>
 8004df6:	230c      	movs	r3, #12
 8004df8:	4630      	mov	r0, r6
 8004dfa:	6033      	str	r3, [r6, #0]
 8004dfc:	f000 f80c 	bl	8004e18 <__malloc_unlock>
 8004e00:	e794      	b.n	8004d2c <_malloc_r+0x20>
 8004e02:	6005      	str	r5, [r0, #0]
 8004e04:	e7d6      	b.n	8004db4 <_malloc_r+0xa8>
 8004e06:	bf00      	nop
 8004e08:	200003cc 	.word	0x200003cc

08004e0c <__malloc_lock>:
 8004e0c:	4801      	ldr	r0, [pc, #4]	@ (8004e14 <__malloc_lock+0x8>)
 8004e0e:	f7ff b8a8 	b.w	8003f62 <__retarget_lock_acquire_recursive>
 8004e12:	bf00      	nop
 8004e14:	200003c4 	.word	0x200003c4

08004e18 <__malloc_unlock>:
 8004e18:	4801      	ldr	r0, [pc, #4]	@ (8004e20 <__malloc_unlock+0x8>)
 8004e1a:	f7ff b8a3 	b.w	8003f64 <__retarget_lock_release_recursive>
 8004e1e:	bf00      	nop
 8004e20:	200003c4 	.word	0x200003c4

08004e24 <_Balloc>:
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	69c6      	ldr	r6, [r0, #28]
 8004e28:	4604      	mov	r4, r0
 8004e2a:	460d      	mov	r5, r1
 8004e2c:	b976      	cbnz	r6, 8004e4c <_Balloc+0x28>
 8004e2e:	2010      	movs	r0, #16
 8004e30:	f7ff ff42 	bl	8004cb8 <malloc>
 8004e34:	4602      	mov	r2, r0
 8004e36:	61e0      	str	r0, [r4, #28]
 8004e38:	b920      	cbnz	r0, 8004e44 <_Balloc+0x20>
 8004e3a:	216b      	movs	r1, #107	@ 0x6b
 8004e3c:	4b17      	ldr	r3, [pc, #92]	@ (8004e9c <_Balloc+0x78>)
 8004e3e:	4818      	ldr	r0, [pc, #96]	@ (8004ea0 <_Balloc+0x7c>)
 8004e40:	f000 fe0a 	bl	8005a58 <__assert_func>
 8004e44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e48:	6006      	str	r6, [r0, #0]
 8004e4a:	60c6      	str	r6, [r0, #12]
 8004e4c:	69e6      	ldr	r6, [r4, #28]
 8004e4e:	68f3      	ldr	r3, [r6, #12]
 8004e50:	b183      	cbz	r3, 8004e74 <_Balloc+0x50>
 8004e52:	69e3      	ldr	r3, [r4, #28]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004e5a:	b9b8      	cbnz	r0, 8004e8c <_Balloc+0x68>
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	fa01 f605 	lsl.w	r6, r1, r5
 8004e62:	1d72      	adds	r2, r6, #5
 8004e64:	4620      	mov	r0, r4
 8004e66:	0092      	lsls	r2, r2, #2
 8004e68:	f000 fe14 	bl	8005a94 <_calloc_r>
 8004e6c:	b160      	cbz	r0, 8004e88 <_Balloc+0x64>
 8004e6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004e72:	e00e      	b.n	8004e92 <_Balloc+0x6e>
 8004e74:	2221      	movs	r2, #33	@ 0x21
 8004e76:	2104      	movs	r1, #4
 8004e78:	4620      	mov	r0, r4
 8004e7a:	f000 fe0b 	bl	8005a94 <_calloc_r>
 8004e7e:	69e3      	ldr	r3, [r4, #28]
 8004e80:	60f0      	str	r0, [r6, #12]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e4      	bne.n	8004e52 <_Balloc+0x2e>
 8004e88:	2000      	movs	r0, #0
 8004e8a:	bd70      	pop	{r4, r5, r6, pc}
 8004e8c:	6802      	ldr	r2, [r0, #0]
 8004e8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004e92:	2300      	movs	r3, #0
 8004e94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e98:	e7f7      	b.n	8004e8a <_Balloc+0x66>
 8004e9a:	bf00      	nop
 8004e9c:	08006b9b 	.word	0x08006b9b
 8004ea0:	08006c1b 	.word	0x08006c1b

08004ea4 <_Bfree>:
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	69c6      	ldr	r6, [r0, #28]
 8004ea8:	4605      	mov	r5, r0
 8004eaa:	460c      	mov	r4, r1
 8004eac:	b976      	cbnz	r6, 8004ecc <_Bfree+0x28>
 8004eae:	2010      	movs	r0, #16
 8004eb0:	f7ff ff02 	bl	8004cb8 <malloc>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	61e8      	str	r0, [r5, #28]
 8004eb8:	b920      	cbnz	r0, 8004ec4 <_Bfree+0x20>
 8004eba:	218f      	movs	r1, #143	@ 0x8f
 8004ebc:	4b08      	ldr	r3, [pc, #32]	@ (8004ee0 <_Bfree+0x3c>)
 8004ebe:	4809      	ldr	r0, [pc, #36]	@ (8004ee4 <_Bfree+0x40>)
 8004ec0:	f000 fdca 	bl	8005a58 <__assert_func>
 8004ec4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ec8:	6006      	str	r6, [r0, #0]
 8004eca:	60c6      	str	r6, [r0, #12]
 8004ecc:	b13c      	cbz	r4, 8004ede <_Bfree+0x3a>
 8004ece:	69eb      	ldr	r3, [r5, #28]
 8004ed0:	6862      	ldr	r2, [r4, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ed8:	6021      	str	r1, [r4, #0]
 8004eda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004ede:	bd70      	pop	{r4, r5, r6, pc}
 8004ee0:	08006b9b 	.word	0x08006b9b
 8004ee4:	08006c1b 	.word	0x08006c1b

08004ee8 <__multadd>:
 8004ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eec:	4607      	mov	r7, r0
 8004eee:	460c      	mov	r4, r1
 8004ef0:	461e      	mov	r6, r3
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	690d      	ldr	r5, [r1, #16]
 8004ef6:	f101 0c14 	add.w	ip, r1, #20
 8004efa:	f8dc 3000 	ldr.w	r3, [ip]
 8004efe:	3001      	adds	r0, #1
 8004f00:	b299      	uxth	r1, r3
 8004f02:	fb02 6101 	mla	r1, r2, r1, r6
 8004f06:	0c1e      	lsrs	r6, r3, #16
 8004f08:	0c0b      	lsrs	r3, r1, #16
 8004f0a:	fb02 3306 	mla	r3, r2, r6, r3
 8004f0e:	b289      	uxth	r1, r1
 8004f10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004f14:	4285      	cmp	r5, r0
 8004f16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004f1a:	f84c 1b04 	str.w	r1, [ip], #4
 8004f1e:	dcec      	bgt.n	8004efa <__multadd+0x12>
 8004f20:	b30e      	cbz	r6, 8004f66 <__multadd+0x7e>
 8004f22:	68a3      	ldr	r3, [r4, #8]
 8004f24:	42ab      	cmp	r3, r5
 8004f26:	dc19      	bgt.n	8004f5c <__multadd+0x74>
 8004f28:	6861      	ldr	r1, [r4, #4]
 8004f2a:	4638      	mov	r0, r7
 8004f2c:	3101      	adds	r1, #1
 8004f2e:	f7ff ff79 	bl	8004e24 <_Balloc>
 8004f32:	4680      	mov	r8, r0
 8004f34:	b928      	cbnz	r0, 8004f42 <__multadd+0x5a>
 8004f36:	4602      	mov	r2, r0
 8004f38:	21ba      	movs	r1, #186	@ 0xba
 8004f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f6c <__multadd+0x84>)
 8004f3c:	480c      	ldr	r0, [pc, #48]	@ (8004f70 <__multadd+0x88>)
 8004f3e:	f000 fd8b 	bl	8005a58 <__assert_func>
 8004f42:	6922      	ldr	r2, [r4, #16]
 8004f44:	f104 010c 	add.w	r1, r4, #12
 8004f48:	3202      	adds	r2, #2
 8004f4a:	0092      	lsls	r2, r2, #2
 8004f4c:	300c      	adds	r0, #12
 8004f4e:	f000 fd75 	bl	8005a3c <memcpy>
 8004f52:	4621      	mov	r1, r4
 8004f54:	4638      	mov	r0, r7
 8004f56:	f7ff ffa5 	bl	8004ea4 <_Bfree>
 8004f5a:	4644      	mov	r4, r8
 8004f5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004f60:	3501      	adds	r5, #1
 8004f62:	615e      	str	r6, [r3, #20]
 8004f64:	6125      	str	r5, [r4, #16]
 8004f66:	4620      	mov	r0, r4
 8004f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f6c:	08006c0a 	.word	0x08006c0a
 8004f70:	08006c1b 	.word	0x08006c1b

08004f74 <__hi0bits>:
 8004f74:	4603      	mov	r3, r0
 8004f76:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004f7a:	bf3a      	itte	cc
 8004f7c:	0403      	lslcc	r3, r0, #16
 8004f7e:	2010      	movcc	r0, #16
 8004f80:	2000      	movcs	r0, #0
 8004f82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f86:	bf3c      	itt	cc
 8004f88:	021b      	lslcc	r3, r3, #8
 8004f8a:	3008      	addcc	r0, #8
 8004f8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f90:	bf3c      	itt	cc
 8004f92:	011b      	lslcc	r3, r3, #4
 8004f94:	3004      	addcc	r0, #4
 8004f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f9a:	bf3c      	itt	cc
 8004f9c:	009b      	lslcc	r3, r3, #2
 8004f9e:	3002      	addcc	r0, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	db05      	blt.n	8004fb0 <__hi0bits+0x3c>
 8004fa4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004fa8:	f100 0001 	add.w	r0, r0, #1
 8004fac:	bf08      	it	eq
 8004fae:	2020      	moveq	r0, #32
 8004fb0:	4770      	bx	lr

08004fb2 <__lo0bits>:
 8004fb2:	6803      	ldr	r3, [r0, #0]
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	f013 0007 	ands.w	r0, r3, #7
 8004fba:	d00b      	beq.n	8004fd4 <__lo0bits+0x22>
 8004fbc:	07d9      	lsls	r1, r3, #31
 8004fbe:	d421      	bmi.n	8005004 <__lo0bits+0x52>
 8004fc0:	0798      	lsls	r0, r3, #30
 8004fc2:	bf49      	itett	mi
 8004fc4:	085b      	lsrmi	r3, r3, #1
 8004fc6:	089b      	lsrpl	r3, r3, #2
 8004fc8:	2001      	movmi	r0, #1
 8004fca:	6013      	strmi	r3, [r2, #0]
 8004fcc:	bf5c      	itt	pl
 8004fce:	2002      	movpl	r0, #2
 8004fd0:	6013      	strpl	r3, [r2, #0]
 8004fd2:	4770      	bx	lr
 8004fd4:	b299      	uxth	r1, r3
 8004fd6:	b909      	cbnz	r1, 8004fdc <__lo0bits+0x2a>
 8004fd8:	2010      	movs	r0, #16
 8004fda:	0c1b      	lsrs	r3, r3, #16
 8004fdc:	b2d9      	uxtb	r1, r3
 8004fde:	b909      	cbnz	r1, 8004fe4 <__lo0bits+0x32>
 8004fe0:	3008      	adds	r0, #8
 8004fe2:	0a1b      	lsrs	r3, r3, #8
 8004fe4:	0719      	lsls	r1, r3, #28
 8004fe6:	bf04      	itt	eq
 8004fe8:	091b      	lsreq	r3, r3, #4
 8004fea:	3004      	addeq	r0, #4
 8004fec:	0799      	lsls	r1, r3, #30
 8004fee:	bf04      	itt	eq
 8004ff0:	089b      	lsreq	r3, r3, #2
 8004ff2:	3002      	addeq	r0, #2
 8004ff4:	07d9      	lsls	r1, r3, #31
 8004ff6:	d403      	bmi.n	8005000 <__lo0bits+0x4e>
 8004ff8:	085b      	lsrs	r3, r3, #1
 8004ffa:	f100 0001 	add.w	r0, r0, #1
 8004ffe:	d003      	beq.n	8005008 <__lo0bits+0x56>
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	4770      	bx	lr
 8005004:	2000      	movs	r0, #0
 8005006:	4770      	bx	lr
 8005008:	2020      	movs	r0, #32
 800500a:	4770      	bx	lr

0800500c <__i2b>:
 800500c:	b510      	push	{r4, lr}
 800500e:	460c      	mov	r4, r1
 8005010:	2101      	movs	r1, #1
 8005012:	f7ff ff07 	bl	8004e24 <_Balloc>
 8005016:	4602      	mov	r2, r0
 8005018:	b928      	cbnz	r0, 8005026 <__i2b+0x1a>
 800501a:	f240 1145 	movw	r1, #325	@ 0x145
 800501e:	4b04      	ldr	r3, [pc, #16]	@ (8005030 <__i2b+0x24>)
 8005020:	4804      	ldr	r0, [pc, #16]	@ (8005034 <__i2b+0x28>)
 8005022:	f000 fd19 	bl	8005a58 <__assert_func>
 8005026:	2301      	movs	r3, #1
 8005028:	6144      	str	r4, [r0, #20]
 800502a:	6103      	str	r3, [r0, #16]
 800502c:	bd10      	pop	{r4, pc}
 800502e:	bf00      	nop
 8005030:	08006c0a 	.word	0x08006c0a
 8005034:	08006c1b 	.word	0x08006c1b

08005038 <__multiply>:
 8005038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503c:	4614      	mov	r4, r2
 800503e:	690a      	ldr	r2, [r1, #16]
 8005040:	6923      	ldr	r3, [r4, #16]
 8005042:	460f      	mov	r7, r1
 8005044:	429a      	cmp	r2, r3
 8005046:	bfa2      	ittt	ge
 8005048:	4623      	movge	r3, r4
 800504a:	460c      	movge	r4, r1
 800504c:	461f      	movge	r7, r3
 800504e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005052:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005056:	68a3      	ldr	r3, [r4, #8]
 8005058:	6861      	ldr	r1, [r4, #4]
 800505a:	eb0a 0609 	add.w	r6, sl, r9
 800505e:	42b3      	cmp	r3, r6
 8005060:	b085      	sub	sp, #20
 8005062:	bfb8      	it	lt
 8005064:	3101      	addlt	r1, #1
 8005066:	f7ff fedd 	bl	8004e24 <_Balloc>
 800506a:	b930      	cbnz	r0, 800507a <__multiply+0x42>
 800506c:	4602      	mov	r2, r0
 800506e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005072:	4b43      	ldr	r3, [pc, #268]	@ (8005180 <__multiply+0x148>)
 8005074:	4843      	ldr	r0, [pc, #268]	@ (8005184 <__multiply+0x14c>)
 8005076:	f000 fcef 	bl	8005a58 <__assert_func>
 800507a:	f100 0514 	add.w	r5, r0, #20
 800507e:	462b      	mov	r3, r5
 8005080:	2200      	movs	r2, #0
 8005082:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005086:	4543      	cmp	r3, r8
 8005088:	d321      	bcc.n	80050ce <__multiply+0x96>
 800508a:	f107 0114 	add.w	r1, r7, #20
 800508e:	f104 0214 	add.w	r2, r4, #20
 8005092:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005096:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800509a:	9302      	str	r3, [sp, #8]
 800509c:	1b13      	subs	r3, r2, r4
 800509e:	3b15      	subs	r3, #21
 80050a0:	f023 0303 	bic.w	r3, r3, #3
 80050a4:	3304      	adds	r3, #4
 80050a6:	f104 0715 	add.w	r7, r4, #21
 80050aa:	42ba      	cmp	r2, r7
 80050ac:	bf38      	it	cc
 80050ae:	2304      	movcc	r3, #4
 80050b0:	9301      	str	r3, [sp, #4]
 80050b2:	9b02      	ldr	r3, [sp, #8]
 80050b4:	9103      	str	r1, [sp, #12]
 80050b6:	428b      	cmp	r3, r1
 80050b8:	d80c      	bhi.n	80050d4 <__multiply+0x9c>
 80050ba:	2e00      	cmp	r6, #0
 80050bc:	dd03      	ble.n	80050c6 <__multiply+0x8e>
 80050be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d05a      	beq.n	800517c <__multiply+0x144>
 80050c6:	6106      	str	r6, [r0, #16]
 80050c8:	b005      	add	sp, #20
 80050ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ce:	f843 2b04 	str.w	r2, [r3], #4
 80050d2:	e7d8      	b.n	8005086 <__multiply+0x4e>
 80050d4:	f8b1 a000 	ldrh.w	sl, [r1]
 80050d8:	f1ba 0f00 	cmp.w	sl, #0
 80050dc:	d023      	beq.n	8005126 <__multiply+0xee>
 80050de:	46a9      	mov	r9, r5
 80050e0:	f04f 0c00 	mov.w	ip, #0
 80050e4:	f104 0e14 	add.w	lr, r4, #20
 80050e8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80050ec:	f8d9 3000 	ldr.w	r3, [r9]
 80050f0:	fa1f fb87 	uxth.w	fp, r7
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	fb0a 330b 	mla	r3, sl, fp, r3
 80050fa:	4463      	add	r3, ip
 80050fc:	f8d9 c000 	ldr.w	ip, [r9]
 8005100:	0c3f      	lsrs	r7, r7, #16
 8005102:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005106:	fb0a c707 	mla	r7, sl, r7, ip
 800510a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800510e:	b29b      	uxth	r3, r3
 8005110:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005114:	4572      	cmp	r2, lr
 8005116:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800511a:	f849 3b04 	str.w	r3, [r9], #4
 800511e:	d8e3      	bhi.n	80050e8 <__multiply+0xb0>
 8005120:	9b01      	ldr	r3, [sp, #4]
 8005122:	f845 c003 	str.w	ip, [r5, r3]
 8005126:	9b03      	ldr	r3, [sp, #12]
 8005128:	3104      	adds	r1, #4
 800512a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800512e:	f1b9 0f00 	cmp.w	r9, #0
 8005132:	d021      	beq.n	8005178 <__multiply+0x140>
 8005134:	46ae      	mov	lr, r5
 8005136:	f04f 0a00 	mov.w	sl, #0
 800513a:	682b      	ldr	r3, [r5, #0]
 800513c:	f104 0c14 	add.w	ip, r4, #20
 8005140:	f8bc b000 	ldrh.w	fp, [ip]
 8005144:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005148:	b29b      	uxth	r3, r3
 800514a:	fb09 770b 	mla	r7, r9, fp, r7
 800514e:	4457      	add	r7, sl
 8005150:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005154:	f84e 3b04 	str.w	r3, [lr], #4
 8005158:	f85c 3b04 	ldr.w	r3, [ip], #4
 800515c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005160:	f8be 3000 	ldrh.w	r3, [lr]
 8005164:	4562      	cmp	r2, ip
 8005166:	fb09 330a 	mla	r3, r9, sl, r3
 800516a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800516e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005172:	d8e5      	bhi.n	8005140 <__multiply+0x108>
 8005174:	9f01      	ldr	r7, [sp, #4]
 8005176:	51eb      	str	r3, [r5, r7]
 8005178:	3504      	adds	r5, #4
 800517a:	e79a      	b.n	80050b2 <__multiply+0x7a>
 800517c:	3e01      	subs	r6, #1
 800517e:	e79c      	b.n	80050ba <__multiply+0x82>
 8005180:	08006c0a 	.word	0x08006c0a
 8005184:	08006c1b 	.word	0x08006c1b

08005188 <__pow5mult>:
 8005188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800518c:	4615      	mov	r5, r2
 800518e:	f012 0203 	ands.w	r2, r2, #3
 8005192:	4607      	mov	r7, r0
 8005194:	460e      	mov	r6, r1
 8005196:	d007      	beq.n	80051a8 <__pow5mult+0x20>
 8005198:	4c25      	ldr	r4, [pc, #148]	@ (8005230 <__pow5mult+0xa8>)
 800519a:	3a01      	subs	r2, #1
 800519c:	2300      	movs	r3, #0
 800519e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80051a2:	f7ff fea1 	bl	8004ee8 <__multadd>
 80051a6:	4606      	mov	r6, r0
 80051a8:	10ad      	asrs	r5, r5, #2
 80051aa:	d03d      	beq.n	8005228 <__pow5mult+0xa0>
 80051ac:	69fc      	ldr	r4, [r7, #28]
 80051ae:	b97c      	cbnz	r4, 80051d0 <__pow5mult+0x48>
 80051b0:	2010      	movs	r0, #16
 80051b2:	f7ff fd81 	bl	8004cb8 <malloc>
 80051b6:	4602      	mov	r2, r0
 80051b8:	61f8      	str	r0, [r7, #28]
 80051ba:	b928      	cbnz	r0, 80051c8 <__pow5mult+0x40>
 80051bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80051c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005234 <__pow5mult+0xac>)
 80051c2:	481d      	ldr	r0, [pc, #116]	@ (8005238 <__pow5mult+0xb0>)
 80051c4:	f000 fc48 	bl	8005a58 <__assert_func>
 80051c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80051cc:	6004      	str	r4, [r0, #0]
 80051ce:	60c4      	str	r4, [r0, #12]
 80051d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80051d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80051d8:	b94c      	cbnz	r4, 80051ee <__pow5mult+0x66>
 80051da:	f240 2171 	movw	r1, #625	@ 0x271
 80051de:	4638      	mov	r0, r7
 80051e0:	f7ff ff14 	bl	800500c <__i2b>
 80051e4:	2300      	movs	r3, #0
 80051e6:	4604      	mov	r4, r0
 80051e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80051ec:	6003      	str	r3, [r0, #0]
 80051ee:	f04f 0900 	mov.w	r9, #0
 80051f2:	07eb      	lsls	r3, r5, #31
 80051f4:	d50a      	bpl.n	800520c <__pow5mult+0x84>
 80051f6:	4631      	mov	r1, r6
 80051f8:	4622      	mov	r2, r4
 80051fa:	4638      	mov	r0, r7
 80051fc:	f7ff ff1c 	bl	8005038 <__multiply>
 8005200:	4680      	mov	r8, r0
 8005202:	4631      	mov	r1, r6
 8005204:	4638      	mov	r0, r7
 8005206:	f7ff fe4d 	bl	8004ea4 <_Bfree>
 800520a:	4646      	mov	r6, r8
 800520c:	106d      	asrs	r5, r5, #1
 800520e:	d00b      	beq.n	8005228 <__pow5mult+0xa0>
 8005210:	6820      	ldr	r0, [r4, #0]
 8005212:	b938      	cbnz	r0, 8005224 <__pow5mult+0x9c>
 8005214:	4622      	mov	r2, r4
 8005216:	4621      	mov	r1, r4
 8005218:	4638      	mov	r0, r7
 800521a:	f7ff ff0d 	bl	8005038 <__multiply>
 800521e:	6020      	str	r0, [r4, #0]
 8005220:	f8c0 9000 	str.w	r9, [r0]
 8005224:	4604      	mov	r4, r0
 8005226:	e7e4      	b.n	80051f2 <__pow5mult+0x6a>
 8005228:	4630      	mov	r0, r6
 800522a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800522e:	bf00      	nop
 8005230:	08006c74 	.word	0x08006c74
 8005234:	08006b9b 	.word	0x08006b9b
 8005238:	08006c1b 	.word	0x08006c1b

0800523c <__lshift>:
 800523c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005240:	460c      	mov	r4, r1
 8005242:	4607      	mov	r7, r0
 8005244:	4691      	mov	r9, r2
 8005246:	6923      	ldr	r3, [r4, #16]
 8005248:	6849      	ldr	r1, [r1, #4]
 800524a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800524e:	68a3      	ldr	r3, [r4, #8]
 8005250:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005254:	f108 0601 	add.w	r6, r8, #1
 8005258:	42b3      	cmp	r3, r6
 800525a:	db0b      	blt.n	8005274 <__lshift+0x38>
 800525c:	4638      	mov	r0, r7
 800525e:	f7ff fde1 	bl	8004e24 <_Balloc>
 8005262:	4605      	mov	r5, r0
 8005264:	b948      	cbnz	r0, 800527a <__lshift+0x3e>
 8005266:	4602      	mov	r2, r0
 8005268:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800526c:	4b27      	ldr	r3, [pc, #156]	@ (800530c <__lshift+0xd0>)
 800526e:	4828      	ldr	r0, [pc, #160]	@ (8005310 <__lshift+0xd4>)
 8005270:	f000 fbf2 	bl	8005a58 <__assert_func>
 8005274:	3101      	adds	r1, #1
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	e7ee      	b.n	8005258 <__lshift+0x1c>
 800527a:	2300      	movs	r3, #0
 800527c:	f100 0114 	add.w	r1, r0, #20
 8005280:	f100 0210 	add.w	r2, r0, #16
 8005284:	4618      	mov	r0, r3
 8005286:	4553      	cmp	r3, sl
 8005288:	db33      	blt.n	80052f2 <__lshift+0xb6>
 800528a:	6920      	ldr	r0, [r4, #16]
 800528c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005290:	f104 0314 	add.w	r3, r4, #20
 8005294:	f019 091f 	ands.w	r9, r9, #31
 8005298:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800529c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80052a0:	d02b      	beq.n	80052fa <__lshift+0xbe>
 80052a2:	468a      	mov	sl, r1
 80052a4:	2200      	movs	r2, #0
 80052a6:	f1c9 0e20 	rsb	lr, r9, #32
 80052aa:	6818      	ldr	r0, [r3, #0]
 80052ac:	fa00 f009 	lsl.w	r0, r0, r9
 80052b0:	4310      	orrs	r0, r2
 80052b2:	f84a 0b04 	str.w	r0, [sl], #4
 80052b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80052ba:	459c      	cmp	ip, r3
 80052bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80052c0:	d8f3      	bhi.n	80052aa <__lshift+0x6e>
 80052c2:	ebac 0304 	sub.w	r3, ip, r4
 80052c6:	3b15      	subs	r3, #21
 80052c8:	f023 0303 	bic.w	r3, r3, #3
 80052cc:	3304      	adds	r3, #4
 80052ce:	f104 0015 	add.w	r0, r4, #21
 80052d2:	4584      	cmp	ip, r0
 80052d4:	bf38      	it	cc
 80052d6:	2304      	movcc	r3, #4
 80052d8:	50ca      	str	r2, [r1, r3]
 80052da:	b10a      	cbz	r2, 80052e0 <__lshift+0xa4>
 80052dc:	f108 0602 	add.w	r6, r8, #2
 80052e0:	3e01      	subs	r6, #1
 80052e2:	4638      	mov	r0, r7
 80052e4:	4621      	mov	r1, r4
 80052e6:	612e      	str	r6, [r5, #16]
 80052e8:	f7ff fddc 	bl	8004ea4 <_Bfree>
 80052ec:	4628      	mov	r0, r5
 80052ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80052f6:	3301      	adds	r3, #1
 80052f8:	e7c5      	b.n	8005286 <__lshift+0x4a>
 80052fa:	3904      	subs	r1, #4
 80052fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005300:	459c      	cmp	ip, r3
 8005302:	f841 2f04 	str.w	r2, [r1, #4]!
 8005306:	d8f9      	bhi.n	80052fc <__lshift+0xc0>
 8005308:	e7ea      	b.n	80052e0 <__lshift+0xa4>
 800530a:	bf00      	nop
 800530c:	08006c0a 	.word	0x08006c0a
 8005310:	08006c1b 	.word	0x08006c1b

08005314 <__mcmp>:
 8005314:	4603      	mov	r3, r0
 8005316:	690a      	ldr	r2, [r1, #16]
 8005318:	6900      	ldr	r0, [r0, #16]
 800531a:	b530      	push	{r4, r5, lr}
 800531c:	1a80      	subs	r0, r0, r2
 800531e:	d10e      	bne.n	800533e <__mcmp+0x2a>
 8005320:	3314      	adds	r3, #20
 8005322:	3114      	adds	r1, #20
 8005324:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005328:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800532c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005330:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005334:	4295      	cmp	r5, r2
 8005336:	d003      	beq.n	8005340 <__mcmp+0x2c>
 8005338:	d205      	bcs.n	8005346 <__mcmp+0x32>
 800533a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800533e:	bd30      	pop	{r4, r5, pc}
 8005340:	42a3      	cmp	r3, r4
 8005342:	d3f3      	bcc.n	800532c <__mcmp+0x18>
 8005344:	e7fb      	b.n	800533e <__mcmp+0x2a>
 8005346:	2001      	movs	r0, #1
 8005348:	e7f9      	b.n	800533e <__mcmp+0x2a>
	...

0800534c <__mdiff>:
 800534c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005350:	4689      	mov	r9, r1
 8005352:	4606      	mov	r6, r0
 8005354:	4611      	mov	r1, r2
 8005356:	4648      	mov	r0, r9
 8005358:	4614      	mov	r4, r2
 800535a:	f7ff ffdb 	bl	8005314 <__mcmp>
 800535e:	1e05      	subs	r5, r0, #0
 8005360:	d112      	bne.n	8005388 <__mdiff+0x3c>
 8005362:	4629      	mov	r1, r5
 8005364:	4630      	mov	r0, r6
 8005366:	f7ff fd5d 	bl	8004e24 <_Balloc>
 800536a:	4602      	mov	r2, r0
 800536c:	b928      	cbnz	r0, 800537a <__mdiff+0x2e>
 800536e:	f240 2137 	movw	r1, #567	@ 0x237
 8005372:	4b3e      	ldr	r3, [pc, #248]	@ (800546c <__mdiff+0x120>)
 8005374:	483e      	ldr	r0, [pc, #248]	@ (8005470 <__mdiff+0x124>)
 8005376:	f000 fb6f 	bl	8005a58 <__assert_func>
 800537a:	2301      	movs	r3, #1
 800537c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005380:	4610      	mov	r0, r2
 8005382:	b003      	add	sp, #12
 8005384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005388:	bfbc      	itt	lt
 800538a:	464b      	movlt	r3, r9
 800538c:	46a1      	movlt	r9, r4
 800538e:	4630      	mov	r0, r6
 8005390:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005394:	bfba      	itte	lt
 8005396:	461c      	movlt	r4, r3
 8005398:	2501      	movlt	r5, #1
 800539a:	2500      	movge	r5, #0
 800539c:	f7ff fd42 	bl	8004e24 <_Balloc>
 80053a0:	4602      	mov	r2, r0
 80053a2:	b918      	cbnz	r0, 80053ac <__mdiff+0x60>
 80053a4:	f240 2145 	movw	r1, #581	@ 0x245
 80053a8:	4b30      	ldr	r3, [pc, #192]	@ (800546c <__mdiff+0x120>)
 80053aa:	e7e3      	b.n	8005374 <__mdiff+0x28>
 80053ac:	f100 0b14 	add.w	fp, r0, #20
 80053b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80053b4:	f109 0310 	add.w	r3, r9, #16
 80053b8:	60c5      	str	r5, [r0, #12]
 80053ba:	f04f 0c00 	mov.w	ip, #0
 80053be:	f109 0514 	add.w	r5, r9, #20
 80053c2:	46d9      	mov	r9, fp
 80053c4:	6926      	ldr	r6, [r4, #16]
 80053c6:	f104 0e14 	add.w	lr, r4, #20
 80053ca:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80053ce:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80053d2:	9301      	str	r3, [sp, #4]
 80053d4:	9b01      	ldr	r3, [sp, #4]
 80053d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80053da:	f853 af04 	ldr.w	sl, [r3, #4]!
 80053de:	b281      	uxth	r1, r0
 80053e0:	9301      	str	r3, [sp, #4]
 80053e2:	fa1f f38a 	uxth.w	r3, sl
 80053e6:	1a5b      	subs	r3, r3, r1
 80053e8:	0c00      	lsrs	r0, r0, #16
 80053ea:	4463      	add	r3, ip
 80053ec:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80053f0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80053fa:	4576      	cmp	r6, lr
 80053fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005400:	f849 3b04 	str.w	r3, [r9], #4
 8005404:	d8e6      	bhi.n	80053d4 <__mdiff+0x88>
 8005406:	1b33      	subs	r3, r6, r4
 8005408:	3b15      	subs	r3, #21
 800540a:	f023 0303 	bic.w	r3, r3, #3
 800540e:	3415      	adds	r4, #21
 8005410:	3304      	adds	r3, #4
 8005412:	42a6      	cmp	r6, r4
 8005414:	bf38      	it	cc
 8005416:	2304      	movcc	r3, #4
 8005418:	441d      	add	r5, r3
 800541a:	445b      	add	r3, fp
 800541c:	461e      	mov	r6, r3
 800541e:	462c      	mov	r4, r5
 8005420:	4544      	cmp	r4, r8
 8005422:	d30e      	bcc.n	8005442 <__mdiff+0xf6>
 8005424:	f108 0103 	add.w	r1, r8, #3
 8005428:	1b49      	subs	r1, r1, r5
 800542a:	f021 0103 	bic.w	r1, r1, #3
 800542e:	3d03      	subs	r5, #3
 8005430:	45a8      	cmp	r8, r5
 8005432:	bf38      	it	cc
 8005434:	2100      	movcc	r1, #0
 8005436:	440b      	add	r3, r1
 8005438:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800543c:	b199      	cbz	r1, 8005466 <__mdiff+0x11a>
 800543e:	6117      	str	r7, [r2, #16]
 8005440:	e79e      	b.n	8005380 <__mdiff+0x34>
 8005442:	46e6      	mov	lr, ip
 8005444:	f854 1b04 	ldr.w	r1, [r4], #4
 8005448:	fa1f fc81 	uxth.w	ip, r1
 800544c:	44f4      	add	ip, lr
 800544e:	0c08      	lsrs	r0, r1, #16
 8005450:	4471      	add	r1, lr
 8005452:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005456:	b289      	uxth	r1, r1
 8005458:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800545c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005460:	f846 1b04 	str.w	r1, [r6], #4
 8005464:	e7dc      	b.n	8005420 <__mdiff+0xd4>
 8005466:	3f01      	subs	r7, #1
 8005468:	e7e6      	b.n	8005438 <__mdiff+0xec>
 800546a:	bf00      	nop
 800546c:	08006c0a 	.word	0x08006c0a
 8005470:	08006c1b 	.word	0x08006c1b

08005474 <__d2b>:
 8005474:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005478:	2101      	movs	r1, #1
 800547a:	4690      	mov	r8, r2
 800547c:	4699      	mov	r9, r3
 800547e:	9e08      	ldr	r6, [sp, #32]
 8005480:	f7ff fcd0 	bl	8004e24 <_Balloc>
 8005484:	4604      	mov	r4, r0
 8005486:	b930      	cbnz	r0, 8005496 <__d2b+0x22>
 8005488:	4602      	mov	r2, r0
 800548a:	f240 310f 	movw	r1, #783	@ 0x30f
 800548e:	4b23      	ldr	r3, [pc, #140]	@ (800551c <__d2b+0xa8>)
 8005490:	4823      	ldr	r0, [pc, #140]	@ (8005520 <__d2b+0xac>)
 8005492:	f000 fae1 	bl	8005a58 <__assert_func>
 8005496:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800549a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800549e:	b10d      	cbz	r5, 80054a4 <__d2b+0x30>
 80054a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054a4:	9301      	str	r3, [sp, #4]
 80054a6:	f1b8 0300 	subs.w	r3, r8, #0
 80054aa:	d024      	beq.n	80054f6 <__d2b+0x82>
 80054ac:	4668      	mov	r0, sp
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	f7ff fd7f 	bl	8004fb2 <__lo0bits>
 80054b4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80054b8:	b1d8      	cbz	r0, 80054f2 <__d2b+0x7e>
 80054ba:	f1c0 0320 	rsb	r3, r0, #32
 80054be:	fa02 f303 	lsl.w	r3, r2, r3
 80054c2:	430b      	orrs	r3, r1
 80054c4:	40c2      	lsrs	r2, r0
 80054c6:	6163      	str	r3, [r4, #20]
 80054c8:	9201      	str	r2, [sp, #4]
 80054ca:	9b01      	ldr	r3, [sp, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	bf0c      	ite	eq
 80054d0:	2201      	moveq	r2, #1
 80054d2:	2202      	movne	r2, #2
 80054d4:	61a3      	str	r3, [r4, #24]
 80054d6:	6122      	str	r2, [r4, #16]
 80054d8:	b1ad      	cbz	r5, 8005506 <__d2b+0x92>
 80054da:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80054de:	4405      	add	r5, r0
 80054e0:	6035      	str	r5, [r6, #0]
 80054e2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80054e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054e8:	6018      	str	r0, [r3, #0]
 80054ea:	4620      	mov	r0, r4
 80054ec:	b002      	add	sp, #8
 80054ee:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80054f2:	6161      	str	r1, [r4, #20]
 80054f4:	e7e9      	b.n	80054ca <__d2b+0x56>
 80054f6:	a801      	add	r0, sp, #4
 80054f8:	f7ff fd5b 	bl	8004fb2 <__lo0bits>
 80054fc:	9b01      	ldr	r3, [sp, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	6163      	str	r3, [r4, #20]
 8005502:	3020      	adds	r0, #32
 8005504:	e7e7      	b.n	80054d6 <__d2b+0x62>
 8005506:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800550a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800550e:	6030      	str	r0, [r6, #0]
 8005510:	6918      	ldr	r0, [r3, #16]
 8005512:	f7ff fd2f 	bl	8004f74 <__hi0bits>
 8005516:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800551a:	e7e4      	b.n	80054e6 <__d2b+0x72>
 800551c:	08006c0a 	.word	0x08006c0a
 8005520:	08006c1b 	.word	0x08006c1b

08005524 <__sfputc_r>:
 8005524:	6893      	ldr	r3, [r2, #8]
 8005526:	b410      	push	{r4}
 8005528:	3b01      	subs	r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	6093      	str	r3, [r2, #8]
 800552e:	da07      	bge.n	8005540 <__sfputc_r+0x1c>
 8005530:	6994      	ldr	r4, [r2, #24]
 8005532:	42a3      	cmp	r3, r4
 8005534:	db01      	blt.n	800553a <__sfputc_r+0x16>
 8005536:	290a      	cmp	r1, #10
 8005538:	d102      	bne.n	8005540 <__sfputc_r+0x1c>
 800553a:	bc10      	pop	{r4}
 800553c:	f000 b9da 	b.w	80058f4 <__swbuf_r>
 8005540:	6813      	ldr	r3, [r2, #0]
 8005542:	1c58      	adds	r0, r3, #1
 8005544:	6010      	str	r0, [r2, #0]
 8005546:	7019      	strb	r1, [r3, #0]
 8005548:	4608      	mov	r0, r1
 800554a:	bc10      	pop	{r4}
 800554c:	4770      	bx	lr

0800554e <__sfputs_r>:
 800554e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005550:	4606      	mov	r6, r0
 8005552:	460f      	mov	r7, r1
 8005554:	4614      	mov	r4, r2
 8005556:	18d5      	adds	r5, r2, r3
 8005558:	42ac      	cmp	r4, r5
 800555a:	d101      	bne.n	8005560 <__sfputs_r+0x12>
 800555c:	2000      	movs	r0, #0
 800555e:	e007      	b.n	8005570 <__sfputs_r+0x22>
 8005560:	463a      	mov	r2, r7
 8005562:	4630      	mov	r0, r6
 8005564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005568:	f7ff ffdc 	bl	8005524 <__sfputc_r>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d1f3      	bne.n	8005558 <__sfputs_r+0xa>
 8005570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005574 <_vfiprintf_r>:
 8005574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005578:	460d      	mov	r5, r1
 800557a:	4614      	mov	r4, r2
 800557c:	4698      	mov	r8, r3
 800557e:	4606      	mov	r6, r0
 8005580:	b09d      	sub	sp, #116	@ 0x74
 8005582:	b118      	cbz	r0, 800558c <_vfiprintf_r+0x18>
 8005584:	6a03      	ldr	r3, [r0, #32]
 8005586:	b90b      	cbnz	r3, 800558c <_vfiprintf_r+0x18>
 8005588:	f7fe fbe2 	bl	8003d50 <__sinit>
 800558c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800558e:	07d9      	lsls	r1, r3, #31
 8005590:	d405      	bmi.n	800559e <_vfiprintf_r+0x2a>
 8005592:	89ab      	ldrh	r3, [r5, #12]
 8005594:	059a      	lsls	r2, r3, #22
 8005596:	d402      	bmi.n	800559e <_vfiprintf_r+0x2a>
 8005598:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800559a:	f7fe fce2 	bl	8003f62 <__retarget_lock_acquire_recursive>
 800559e:	89ab      	ldrh	r3, [r5, #12]
 80055a0:	071b      	lsls	r3, r3, #28
 80055a2:	d501      	bpl.n	80055a8 <_vfiprintf_r+0x34>
 80055a4:	692b      	ldr	r3, [r5, #16]
 80055a6:	b99b      	cbnz	r3, 80055d0 <_vfiprintf_r+0x5c>
 80055a8:	4629      	mov	r1, r5
 80055aa:	4630      	mov	r0, r6
 80055ac:	f000 f9e0 	bl	8005970 <__swsetup_r>
 80055b0:	b170      	cbz	r0, 80055d0 <_vfiprintf_r+0x5c>
 80055b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80055b4:	07dc      	lsls	r4, r3, #31
 80055b6:	d504      	bpl.n	80055c2 <_vfiprintf_r+0x4e>
 80055b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055bc:	b01d      	add	sp, #116	@ 0x74
 80055be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c2:	89ab      	ldrh	r3, [r5, #12]
 80055c4:	0598      	lsls	r0, r3, #22
 80055c6:	d4f7      	bmi.n	80055b8 <_vfiprintf_r+0x44>
 80055c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80055ca:	f7fe fccb 	bl	8003f64 <__retarget_lock_release_recursive>
 80055ce:	e7f3      	b.n	80055b8 <_vfiprintf_r+0x44>
 80055d0:	2300      	movs	r3, #0
 80055d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80055d4:	2320      	movs	r3, #32
 80055d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055da:	2330      	movs	r3, #48	@ 0x30
 80055dc:	f04f 0901 	mov.w	r9, #1
 80055e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80055e4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005790 <_vfiprintf_r+0x21c>
 80055e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055ec:	4623      	mov	r3, r4
 80055ee:	469a      	mov	sl, r3
 80055f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055f4:	b10a      	cbz	r2, 80055fa <_vfiprintf_r+0x86>
 80055f6:	2a25      	cmp	r2, #37	@ 0x25
 80055f8:	d1f9      	bne.n	80055ee <_vfiprintf_r+0x7a>
 80055fa:	ebba 0b04 	subs.w	fp, sl, r4
 80055fe:	d00b      	beq.n	8005618 <_vfiprintf_r+0xa4>
 8005600:	465b      	mov	r3, fp
 8005602:	4622      	mov	r2, r4
 8005604:	4629      	mov	r1, r5
 8005606:	4630      	mov	r0, r6
 8005608:	f7ff ffa1 	bl	800554e <__sfputs_r>
 800560c:	3001      	adds	r0, #1
 800560e:	f000 80a7 	beq.w	8005760 <_vfiprintf_r+0x1ec>
 8005612:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005614:	445a      	add	r2, fp
 8005616:	9209      	str	r2, [sp, #36]	@ 0x24
 8005618:	f89a 3000 	ldrb.w	r3, [sl]
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 809f 	beq.w	8005760 <_vfiprintf_r+0x1ec>
 8005622:	2300      	movs	r3, #0
 8005624:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800562c:	f10a 0a01 	add.w	sl, sl, #1
 8005630:	9304      	str	r3, [sp, #16]
 8005632:	9307      	str	r3, [sp, #28]
 8005634:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005638:	931a      	str	r3, [sp, #104]	@ 0x68
 800563a:	4654      	mov	r4, sl
 800563c:	2205      	movs	r2, #5
 800563e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005642:	4853      	ldr	r0, [pc, #332]	@ (8005790 <_vfiprintf_r+0x21c>)
 8005644:	f7fe fc8f 	bl	8003f66 <memchr>
 8005648:	9a04      	ldr	r2, [sp, #16]
 800564a:	b9d8      	cbnz	r0, 8005684 <_vfiprintf_r+0x110>
 800564c:	06d1      	lsls	r1, r2, #27
 800564e:	bf44      	itt	mi
 8005650:	2320      	movmi	r3, #32
 8005652:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005656:	0713      	lsls	r3, r2, #28
 8005658:	bf44      	itt	mi
 800565a:	232b      	movmi	r3, #43	@ 0x2b
 800565c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005660:	f89a 3000 	ldrb.w	r3, [sl]
 8005664:	2b2a      	cmp	r3, #42	@ 0x2a
 8005666:	d015      	beq.n	8005694 <_vfiprintf_r+0x120>
 8005668:	4654      	mov	r4, sl
 800566a:	2000      	movs	r0, #0
 800566c:	f04f 0c0a 	mov.w	ip, #10
 8005670:	9a07      	ldr	r2, [sp, #28]
 8005672:	4621      	mov	r1, r4
 8005674:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005678:	3b30      	subs	r3, #48	@ 0x30
 800567a:	2b09      	cmp	r3, #9
 800567c:	d94b      	bls.n	8005716 <_vfiprintf_r+0x1a2>
 800567e:	b1b0      	cbz	r0, 80056ae <_vfiprintf_r+0x13a>
 8005680:	9207      	str	r2, [sp, #28]
 8005682:	e014      	b.n	80056ae <_vfiprintf_r+0x13a>
 8005684:	eba0 0308 	sub.w	r3, r0, r8
 8005688:	fa09 f303 	lsl.w	r3, r9, r3
 800568c:	4313      	orrs	r3, r2
 800568e:	46a2      	mov	sl, r4
 8005690:	9304      	str	r3, [sp, #16]
 8005692:	e7d2      	b.n	800563a <_vfiprintf_r+0xc6>
 8005694:	9b03      	ldr	r3, [sp, #12]
 8005696:	1d19      	adds	r1, r3, #4
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	9103      	str	r1, [sp, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	bfbb      	ittet	lt
 80056a0:	425b      	neglt	r3, r3
 80056a2:	f042 0202 	orrlt.w	r2, r2, #2
 80056a6:	9307      	strge	r3, [sp, #28]
 80056a8:	9307      	strlt	r3, [sp, #28]
 80056aa:	bfb8      	it	lt
 80056ac:	9204      	strlt	r2, [sp, #16]
 80056ae:	7823      	ldrb	r3, [r4, #0]
 80056b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80056b2:	d10a      	bne.n	80056ca <_vfiprintf_r+0x156>
 80056b4:	7863      	ldrb	r3, [r4, #1]
 80056b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80056b8:	d132      	bne.n	8005720 <_vfiprintf_r+0x1ac>
 80056ba:	9b03      	ldr	r3, [sp, #12]
 80056bc:	3402      	adds	r4, #2
 80056be:	1d1a      	adds	r2, r3, #4
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	9203      	str	r2, [sp, #12]
 80056c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80056c8:	9305      	str	r3, [sp, #20]
 80056ca:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005794 <_vfiprintf_r+0x220>
 80056ce:	2203      	movs	r2, #3
 80056d0:	4650      	mov	r0, sl
 80056d2:	7821      	ldrb	r1, [r4, #0]
 80056d4:	f7fe fc47 	bl	8003f66 <memchr>
 80056d8:	b138      	cbz	r0, 80056ea <_vfiprintf_r+0x176>
 80056da:	2240      	movs	r2, #64	@ 0x40
 80056dc:	9b04      	ldr	r3, [sp, #16]
 80056de:	eba0 000a 	sub.w	r0, r0, sl
 80056e2:	4082      	lsls	r2, r0
 80056e4:	4313      	orrs	r3, r2
 80056e6:	3401      	adds	r4, #1
 80056e8:	9304      	str	r3, [sp, #16]
 80056ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ee:	2206      	movs	r2, #6
 80056f0:	4829      	ldr	r0, [pc, #164]	@ (8005798 <_vfiprintf_r+0x224>)
 80056f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056f6:	f7fe fc36 	bl	8003f66 <memchr>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d03f      	beq.n	800577e <_vfiprintf_r+0x20a>
 80056fe:	4b27      	ldr	r3, [pc, #156]	@ (800579c <_vfiprintf_r+0x228>)
 8005700:	bb1b      	cbnz	r3, 800574a <_vfiprintf_r+0x1d6>
 8005702:	9b03      	ldr	r3, [sp, #12]
 8005704:	3307      	adds	r3, #7
 8005706:	f023 0307 	bic.w	r3, r3, #7
 800570a:	3308      	adds	r3, #8
 800570c:	9303      	str	r3, [sp, #12]
 800570e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005710:	443b      	add	r3, r7
 8005712:	9309      	str	r3, [sp, #36]	@ 0x24
 8005714:	e76a      	b.n	80055ec <_vfiprintf_r+0x78>
 8005716:	460c      	mov	r4, r1
 8005718:	2001      	movs	r0, #1
 800571a:	fb0c 3202 	mla	r2, ip, r2, r3
 800571e:	e7a8      	b.n	8005672 <_vfiprintf_r+0xfe>
 8005720:	2300      	movs	r3, #0
 8005722:	f04f 0c0a 	mov.w	ip, #10
 8005726:	4619      	mov	r1, r3
 8005728:	3401      	adds	r4, #1
 800572a:	9305      	str	r3, [sp, #20]
 800572c:	4620      	mov	r0, r4
 800572e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005732:	3a30      	subs	r2, #48	@ 0x30
 8005734:	2a09      	cmp	r2, #9
 8005736:	d903      	bls.n	8005740 <_vfiprintf_r+0x1cc>
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0c6      	beq.n	80056ca <_vfiprintf_r+0x156>
 800573c:	9105      	str	r1, [sp, #20]
 800573e:	e7c4      	b.n	80056ca <_vfiprintf_r+0x156>
 8005740:	4604      	mov	r4, r0
 8005742:	2301      	movs	r3, #1
 8005744:	fb0c 2101 	mla	r1, ip, r1, r2
 8005748:	e7f0      	b.n	800572c <_vfiprintf_r+0x1b8>
 800574a:	ab03      	add	r3, sp, #12
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	462a      	mov	r2, r5
 8005750:	4630      	mov	r0, r6
 8005752:	4b13      	ldr	r3, [pc, #76]	@ (80057a0 <_vfiprintf_r+0x22c>)
 8005754:	a904      	add	r1, sp, #16
 8005756:	f7fd feb1 	bl	80034bc <_printf_float>
 800575a:	4607      	mov	r7, r0
 800575c:	1c78      	adds	r0, r7, #1
 800575e:	d1d6      	bne.n	800570e <_vfiprintf_r+0x19a>
 8005760:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005762:	07d9      	lsls	r1, r3, #31
 8005764:	d405      	bmi.n	8005772 <_vfiprintf_r+0x1fe>
 8005766:	89ab      	ldrh	r3, [r5, #12]
 8005768:	059a      	lsls	r2, r3, #22
 800576a:	d402      	bmi.n	8005772 <_vfiprintf_r+0x1fe>
 800576c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800576e:	f7fe fbf9 	bl	8003f64 <__retarget_lock_release_recursive>
 8005772:	89ab      	ldrh	r3, [r5, #12]
 8005774:	065b      	lsls	r3, r3, #25
 8005776:	f53f af1f 	bmi.w	80055b8 <_vfiprintf_r+0x44>
 800577a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800577c:	e71e      	b.n	80055bc <_vfiprintf_r+0x48>
 800577e:	ab03      	add	r3, sp, #12
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	462a      	mov	r2, r5
 8005784:	4630      	mov	r0, r6
 8005786:	4b06      	ldr	r3, [pc, #24]	@ (80057a0 <_vfiprintf_r+0x22c>)
 8005788:	a904      	add	r1, sp, #16
 800578a:	f7fe f935 	bl	80039f8 <_printf_i>
 800578e:	e7e4      	b.n	800575a <_vfiprintf_r+0x1e6>
 8005790:	08006d70 	.word	0x08006d70
 8005794:	08006d76 	.word	0x08006d76
 8005798:	08006d7a 	.word	0x08006d7a
 800579c:	080034bd 	.word	0x080034bd
 80057a0:	0800554f 	.word	0x0800554f

080057a4 <__sflush_r>:
 80057a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057aa:	0716      	lsls	r6, r2, #28
 80057ac:	4605      	mov	r5, r0
 80057ae:	460c      	mov	r4, r1
 80057b0:	d454      	bmi.n	800585c <__sflush_r+0xb8>
 80057b2:	684b      	ldr	r3, [r1, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	dc02      	bgt.n	80057be <__sflush_r+0x1a>
 80057b8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	dd48      	ble.n	8005850 <__sflush_r+0xac>
 80057be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80057c0:	2e00      	cmp	r6, #0
 80057c2:	d045      	beq.n	8005850 <__sflush_r+0xac>
 80057c4:	2300      	movs	r3, #0
 80057c6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80057ca:	682f      	ldr	r7, [r5, #0]
 80057cc:	6a21      	ldr	r1, [r4, #32]
 80057ce:	602b      	str	r3, [r5, #0]
 80057d0:	d030      	beq.n	8005834 <__sflush_r+0x90>
 80057d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80057d4:	89a3      	ldrh	r3, [r4, #12]
 80057d6:	0759      	lsls	r1, r3, #29
 80057d8:	d505      	bpl.n	80057e6 <__sflush_r+0x42>
 80057da:	6863      	ldr	r3, [r4, #4]
 80057dc:	1ad2      	subs	r2, r2, r3
 80057de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80057e0:	b10b      	cbz	r3, 80057e6 <__sflush_r+0x42>
 80057e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80057e4:	1ad2      	subs	r2, r2, r3
 80057e6:	2300      	movs	r3, #0
 80057e8:	4628      	mov	r0, r5
 80057ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80057ec:	6a21      	ldr	r1, [r4, #32]
 80057ee:	47b0      	blx	r6
 80057f0:	1c43      	adds	r3, r0, #1
 80057f2:	89a3      	ldrh	r3, [r4, #12]
 80057f4:	d106      	bne.n	8005804 <__sflush_r+0x60>
 80057f6:	6829      	ldr	r1, [r5, #0]
 80057f8:	291d      	cmp	r1, #29
 80057fa:	d82b      	bhi.n	8005854 <__sflush_r+0xb0>
 80057fc:	4a28      	ldr	r2, [pc, #160]	@ (80058a0 <__sflush_r+0xfc>)
 80057fe:	410a      	asrs	r2, r1
 8005800:	07d6      	lsls	r6, r2, #31
 8005802:	d427      	bmi.n	8005854 <__sflush_r+0xb0>
 8005804:	2200      	movs	r2, #0
 8005806:	6062      	str	r2, [r4, #4]
 8005808:	6922      	ldr	r2, [r4, #16]
 800580a:	04d9      	lsls	r1, r3, #19
 800580c:	6022      	str	r2, [r4, #0]
 800580e:	d504      	bpl.n	800581a <__sflush_r+0x76>
 8005810:	1c42      	adds	r2, r0, #1
 8005812:	d101      	bne.n	8005818 <__sflush_r+0x74>
 8005814:	682b      	ldr	r3, [r5, #0]
 8005816:	b903      	cbnz	r3, 800581a <__sflush_r+0x76>
 8005818:	6560      	str	r0, [r4, #84]	@ 0x54
 800581a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800581c:	602f      	str	r7, [r5, #0]
 800581e:	b1b9      	cbz	r1, 8005850 <__sflush_r+0xac>
 8005820:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005824:	4299      	cmp	r1, r3
 8005826:	d002      	beq.n	800582e <__sflush_r+0x8a>
 8005828:	4628      	mov	r0, r5
 800582a:	f7ff f9fd 	bl	8004c28 <_free_r>
 800582e:	2300      	movs	r3, #0
 8005830:	6363      	str	r3, [r4, #52]	@ 0x34
 8005832:	e00d      	b.n	8005850 <__sflush_r+0xac>
 8005834:	2301      	movs	r3, #1
 8005836:	4628      	mov	r0, r5
 8005838:	47b0      	blx	r6
 800583a:	4602      	mov	r2, r0
 800583c:	1c50      	adds	r0, r2, #1
 800583e:	d1c9      	bne.n	80057d4 <__sflush_r+0x30>
 8005840:	682b      	ldr	r3, [r5, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0c6      	beq.n	80057d4 <__sflush_r+0x30>
 8005846:	2b1d      	cmp	r3, #29
 8005848:	d001      	beq.n	800584e <__sflush_r+0xaa>
 800584a:	2b16      	cmp	r3, #22
 800584c:	d11d      	bne.n	800588a <__sflush_r+0xe6>
 800584e:	602f      	str	r7, [r5, #0]
 8005850:	2000      	movs	r0, #0
 8005852:	e021      	b.n	8005898 <__sflush_r+0xf4>
 8005854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005858:	b21b      	sxth	r3, r3
 800585a:	e01a      	b.n	8005892 <__sflush_r+0xee>
 800585c:	690f      	ldr	r7, [r1, #16]
 800585e:	2f00      	cmp	r7, #0
 8005860:	d0f6      	beq.n	8005850 <__sflush_r+0xac>
 8005862:	0793      	lsls	r3, r2, #30
 8005864:	bf18      	it	ne
 8005866:	2300      	movne	r3, #0
 8005868:	680e      	ldr	r6, [r1, #0]
 800586a:	bf08      	it	eq
 800586c:	694b      	ldreq	r3, [r1, #20]
 800586e:	1bf6      	subs	r6, r6, r7
 8005870:	600f      	str	r7, [r1, #0]
 8005872:	608b      	str	r3, [r1, #8]
 8005874:	2e00      	cmp	r6, #0
 8005876:	ddeb      	ble.n	8005850 <__sflush_r+0xac>
 8005878:	4633      	mov	r3, r6
 800587a:	463a      	mov	r2, r7
 800587c:	4628      	mov	r0, r5
 800587e:	6a21      	ldr	r1, [r4, #32]
 8005880:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005884:	47e0      	blx	ip
 8005886:	2800      	cmp	r0, #0
 8005888:	dc07      	bgt.n	800589a <__sflush_r+0xf6>
 800588a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800588e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005892:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005896:	81a3      	strh	r3, [r4, #12]
 8005898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800589a:	4407      	add	r7, r0
 800589c:	1a36      	subs	r6, r6, r0
 800589e:	e7e9      	b.n	8005874 <__sflush_r+0xd0>
 80058a0:	dfbffffe 	.word	0xdfbffffe

080058a4 <_fflush_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	690b      	ldr	r3, [r1, #16]
 80058a8:	4605      	mov	r5, r0
 80058aa:	460c      	mov	r4, r1
 80058ac:	b913      	cbnz	r3, 80058b4 <_fflush_r+0x10>
 80058ae:	2500      	movs	r5, #0
 80058b0:	4628      	mov	r0, r5
 80058b2:	bd38      	pop	{r3, r4, r5, pc}
 80058b4:	b118      	cbz	r0, 80058be <_fflush_r+0x1a>
 80058b6:	6a03      	ldr	r3, [r0, #32]
 80058b8:	b90b      	cbnz	r3, 80058be <_fflush_r+0x1a>
 80058ba:	f7fe fa49 	bl	8003d50 <__sinit>
 80058be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0f3      	beq.n	80058ae <_fflush_r+0xa>
 80058c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80058c8:	07d0      	lsls	r0, r2, #31
 80058ca:	d404      	bmi.n	80058d6 <_fflush_r+0x32>
 80058cc:	0599      	lsls	r1, r3, #22
 80058ce:	d402      	bmi.n	80058d6 <_fflush_r+0x32>
 80058d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058d2:	f7fe fb46 	bl	8003f62 <__retarget_lock_acquire_recursive>
 80058d6:	4628      	mov	r0, r5
 80058d8:	4621      	mov	r1, r4
 80058da:	f7ff ff63 	bl	80057a4 <__sflush_r>
 80058de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058e0:	4605      	mov	r5, r0
 80058e2:	07da      	lsls	r2, r3, #31
 80058e4:	d4e4      	bmi.n	80058b0 <_fflush_r+0xc>
 80058e6:	89a3      	ldrh	r3, [r4, #12]
 80058e8:	059b      	lsls	r3, r3, #22
 80058ea:	d4e1      	bmi.n	80058b0 <_fflush_r+0xc>
 80058ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058ee:	f7fe fb39 	bl	8003f64 <__retarget_lock_release_recursive>
 80058f2:	e7dd      	b.n	80058b0 <_fflush_r+0xc>

080058f4 <__swbuf_r>:
 80058f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f6:	460e      	mov	r6, r1
 80058f8:	4614      	mov	r4, r2
 80058fa:	4605      	mov	r5, r0
 80058fc:	b118      	cbz	r0, 8005906 <__swbuf_r+0x12>
 80058fe:	6a03      	ldr	r3, [r0, #32]
 8005900:	b90b      	cbnz	r3, 8005906 <__swbuf_r+0x12>
 8005902:	f7fe fa25 	bl	8003d50 <__sinit>
 8005906:	69a3      	ldr	r3, [r4, #24]
 8005908:	60a3      	str	r3, [r4, #8]
 800590a:	89a3      	ldrh	r3, [r4, #12]
 800590c:	071a      	lsls	r2, r3, #28
 800590e:	d501      	bpl.n	8005914 <__swbuf_r+0x20>
 8005910:	6923      	ldr	r3, [r4, #16]
 8005912:	b943      	cbnz	r3, 8005926 <__swbuf_r+0x32>
 8005914:	4621      	mov	r1, r4
 8005916:	4628      	mov	r0, r5
 8005918:	f000 f82a 	bl	8005970 <__swsetup_r>
 800591c:	b118      	cbz	r0, 8005926 <__swbuf_r+0x32>
 800591e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005922:	4638      	mov	r0, r7
 8005924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	6922      	ldr	r2, [r4, #16]
 800592a:	b2f6      	uxtb	r6, r6
 800592c:	1a98      	subs	r0, r3, r2
 800592e:	6963      	ldr	r3, [r4, #20]
 8005930:	4637      	mov	r7, r6
 8005932:	4283      	cmp	r3, r0
 8005934:	dc05      	bgt.n	8005942 <__swbuf_r+0x4e>
 8005936:	4621      	mov	r1, r4
 8005938:	4628      	mov	r0, r5
 800593a:	f7ff ffb3 	bl	80058a4 <_fflush_r>
 800593e:	2800      	cmp	r0, #0
 8005940:	d1ed      	bne.n	800591e <__swbuf_r+0x2a>
 8005942:	68a3      	ldr	r3, [r4, #8]
 8005944:	3b01      	subs	r3, #1
 8005946:	60a3      	str	r3, [r4, #8]
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	6022      	str	r2, [r4, #0]
 800594e:	701e      	strb	r6, [r3, #0]
 8005950:	6962      	ldr	r2, [r4, #20]
 8005952:	1c43      	adds	r3, r0, #1
 8005954:	429a      	cmp	r2, r3
 8005956:	d004      	beq.n	8005962 <__swbuf_r+0x6e>
 8005958:	89a3      	ldrh	r3, [r4, #12]
 800595a:	07db      	lsls	r3, r3, #31
 800595c:	d5e1      	bpl.n	8005922 <__swbuf_r+0x2e>
 800595e:	2e0a      	cmp	r6, #10
 8005960:	d1df      	bne.n	8005922 <__swbuf_r+0x2e>
 8005962:	4621      	mov	r1, r4
 8005964:	4628      	mov	r0, r5
 8005966:	f7ff ff9d 	bl	80058a4 <_fflush_r>
 800596a:	2800      	cmp	r0, #0
 800596c:	d0d9      	beq.n	8005922 <__swbuf_r+0x2e>
 800596e:	e7d6      	b.n	800591e <__swbuf_r+0x2a>

08005970 <__swsetup_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4b29      	ldr	r3, [pc, #164]	@ (8005a18 <__swsetup_r+0xa8>)
 8005974:	4605      	mov	r5, r0
 8005976:	6818      	ldr	r0, [r3, #0]
 8005978:	460c      	mov	r4, r1
 800597a:	b118      	cbz	r0, 8005984 <__swsetup_r+0x14>
 800597c:	6a03      	ldr	r3, [r0, #32]
 800597e:	b90b      	cbnz	r3, 8005984 <__swsetup_r+0x14>
 8005980:	f7fe f9e6 	bl	8003d50 <__sinit>
 8005984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005988:	0719      	lsls	r1, r3, #28
 800598a:	d422      	bmi.n	80059d2 <__swsetup_r+0x62>
 800598c:	06da      	lsls	r2, r3, #27
 800598e:	d407      	bmi.n	80059a0 <__swsetup_r+0x30>
 8005990:	2209      	movs	r2, #9
 8005992:	602a      	str	r2, [r5, #0]
 8005994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800599c:	81a3      	strh	r3, [r4, #12]
 800599e:	e033      	b.n	8005a08 <__swsetup_r+0x98>
 80059a0:	0758      	lsls	r0, r3, #29
 80059a2:	d512      	bpl.n	80059ca <__swsetup_r+0x5a>
 80059a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059a6:	b141      	cbz	r1, 80059ba <__swsetup_r+0x4a>
 80059a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059ac:	4299      	cmp	r1, r3
 80059ae:	d002      	beq.n	80059b6 <__swsetup_r+0x46>
 80059b0:	4628      	mov	r0, r5
 80059b2:	f7ff f939 	bl	8004c28 <_free_r>
 80059b6:	2300      	movs	r3, #0
 80059b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80059c0:	81a3      	strh	r3, [r4, #12]
 80059c2:	2300      	movs	r3, #0
 80059c4:	6063      	str	r3, [r4, #4]
 80059c6:	6923      	ldr	r3, [r4, #16]
 80059c8:	6023      	str	r3, [r4, #0]
 80059ca:	89a3      	ldrh	r3, [r4, #12]
 80059cc:	f043 0308 	orr.w	r3, r3, #8
 80059d0:	81a3      	strh	r3, [r4, #12]
 80059d2:	6923      	ldr	r3, [r4, #16]
 80059d4:	b94b      	cbnz	r3, 80059ea <__swsetup_r+0x7a>
 80059d6:	89a3      	ldrh	r3, [r4, #12]
 80059d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80059dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059e0:	d003      	beq.n	80059ea <__swsetup_r+0x7a>
 80059e2:	4621      	mov	r1, r4
 80059e4:	4628      	mov	r0, r5
 80059e6:	f000 f8c0 	bl	8005b6a <__smakebuf_r>
 80059ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ee:	f013 0201 	ands.w	r2, r3, #1
 80059f2:	d00a      	beq.n	8005a0a <__swsetup_r+0x9a>
 80059f4:	2200      	movs	r2, #0
 80059f6:	60a2      	str	r2, [r4, #8]
 80059f8:	6962      	ldr	r2, [r4, #20]
 80059fa:	4252      	negs	r2, r2
 80059fc:	61a2      	str	r2, [r4, #24]
 80059fe:	6922      	ldr	r2, [r4, #16]
 8005a00:	b942      	cbnz	r2, 8005a14 <__swsetup_r+0xa4>
 8005a02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a06:	d1c5      	bne.n	8005994 <__swsetup_r+0x24>
 8005a08:	bd38      	pop	{r3, r4, r5, pc}
 8005a0a:	0799      	lsls	r1, r3, #30
 8005a0c:	bf58      	it	pl
 8005a0e:	6962      	ldrpl	r2, [r4, #20]
 8005a10:	60a2      	str	r2, [r4, #8]
 8005a12:	e7f4      	b.n	80059fe <__swsetup_r+0x8e>
 8005a14:	2000      	movs	r0, #0
 8005a16:	e7f7      	b.n	8005a08 <__swsetup_r+0x98>
 8005a18:	20000018 	.word	0x20000018

08005a1c <_sbrk_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	2300      	movs	r3, #0
 8005a20:	4d05      	ldr	r5, [pc, #20]	@ (8005a38 <_sbrk_r+0x1c>)
 8005a22:	4604      	mov	r4, r0
 8005a24:	4608      	mov	r0, r1
 8005a26:	602b      	str	r3, [r5, #0]
 8005a28:	f7fb fd5a 	bl	80014e0 <_sbrk>
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	d102      	bne.n	8005a36 <_sbrk_r+0x1a>
 8005a30:	682b      	ldr	r3, [r5, #0]
 8005a32:	b103      	cbz	r3, 8005a36 <_sbrk_r+0x1a>
 8005a34:	6023      	str	r3, [r4, #0]
 8005a36:	bd38      	pop	{r3, r4, r5, pc}
 8005a38:	200003c0 	.word	0x200003c0

08005a3c <memcpy>:
 8005a3c:	440a      	add	r2, r1
 8005a3e:	4291      	cmp	r1, r2
 8005a40:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005a44:	d100      	bne.n	8005a48 <memcpy+0xc>
 8005a46:	4770      	bx	lr
 8005a48:	b510      	push	{r4, lr}
 8005a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a4e:	4291      	cmp	r1, r2
 8005a50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a54:	d1f9      	bne.n	8005a4a <memcpy+0xe>
 8005a56:	bd10      	pop	{r4, pc}

08005a58 <__assert_func>:
 8005a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a5a:	4614      	mov	r4, r2
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	4b09      	ldr	r3, [pc, #36]	@ (8005a84 <__assert_func+0x2c>)
 8005a60:	4605      	mov	r5, r0
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68d8      	ldr	r0, [r3, #12]
 8005a66:	b954      	cbnz	r4, 8005a7e <__assert_func+0x26>
 8005a68:	4b07      	ldr	r3, [pc, #28]	@ (8005a88 <__assert_func+0x30>)
 8005a6a:	461c      	mov	r4, r3
 8005a6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a70:	9100      	str	r1, [sp, #0]
 8005a72:	462b      	mov	r3, r5
 8005a74:	4905      	ldr	r1, [pc, #20]	@ (8005a8c <__assert_func+0x34>)
 8005a76:	f000 f841 	bl	8005afc <fiprintf>
 8005a7a:	f000 f8d5 	bl	8005c28 <abort>
 8005a7e:	4b04      	ldr	r3, [pc, #16]	@ (8005a90 <__assert_func+0x38>)
 8005a80:	e7f4      	b.n	8005a6c <__assert_func+0x14>
 8005a82:	bf00      	nop
 8005a84:	20000018 	.word	0x20000018
 8005a88:	08006dc6 	.word	0x08006dc6
 8005a8c:	08006d98 	.word	0x08006d98
 8005a90:	08006d8b 	.word	0x08006d8b

08005a94 <_calloc_r>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	fba1 5402 	umull	r5, r4, r1, r2
 8005a9a:	b93c      	cbnz	r4, 8005aac <_calloc_r+0x18>
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	f7ff f935 	bl	8004d0c <_malloc_r>
 8005aa2:	4606      	mov	r6, r0
 8005aa4:	b928      	cbnz	r0, 8005ab2 <_calloc_r+0x1e>
 8005aa6:	2600      	movs	r6, #0
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	bd70      	pop	{r4, r5, r6, pc}
 8005aac:	220c      	movs	r2, #12
 8005aae:	6002      	str	r2, [r0, #0]
 8005ab0:	e7f9      	b.n	8005aa6 <_calloc_r+0x12>
 8005ab2:	462a      	mov	r2, r5
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	f7fe f9d6 	bl	8003e66 <memset>
 8005aba:	e7f5      	b.n	8005aa8 <_calloc_r+0x14>

08005abc <__ascii_mbtowc>:
 8005abc:	b082      	sub	sp, #8
 8005abe:	b901      	cbnz	r1, 8005ac2 <__ascii_mbtowc+0x6>
 8005ac0:	a901      	add	r1, sp, #4
 8005ac2:	b142      	cbz	r2, 8005ad6 <__ascii_mbtowc+0x1a>
 8005ac4:	b14b      	cbz	r3, 8005ada <__ascii_mbtowc+0x1e>
 8005ac6:	7813      	ldrb	r3, [r2, #0]
 8005ac8:	600b      	str	r3, [r1, #0]
 8005aca:	7812      	ldrb	r2, [r2, #0]
 8005acc:	1e10      	subs	r0, r2, #0
 8005ace:	bf18      	it	ne
 8005ad0:	2001      	movne	r0, #1
 8005ad2:	b002      	add	sp, #8
 8005ad4:	4770      	bx	lr
 8005ad6:	4610      	mov	r0, r2
 8005ad8:	e7fb      	b.n	8005ad2 <__ascii_mbtowc+0x16>
 8005ada:	f06f 0001 	mvn.w	r0, #1
 8005ade:	e7f8      	b.n	8005ad2 <__ascii_mbtowc+0x16>

08005ae0 <__ascii_wctomb>:
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	4608      	mov	r0, r1
 8005ae4:	b141      	cbz	r1, 8005af8 <__ascii_wctomb+0x18>
 8005ae6:	2aff      	cmp	r2, #255	@ 0xff
 8005ae8:	d904      	bls.n	8005af4 <__ascii_wctomb+0x14>
 8005aea:	228a      	movs	r2, #138	@ 0x8a
 8005aec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	4770      	bx	lr
 8005af4:	2001      	movs	r0, #1
 8005af6:	700a      	strb	r2, [r1, #0]
 8005af8:	4770      	bx	lr
	...

08005afc <fiprintf>:
 8005afc:	b40e      	push	{r1, r2, r3}
 8005afe:	b503      	push	{r0, r1, lr}
 8005b00:	4601      	mov	r1, r0
 8005b02:	ab03      	add	r3, sp, #12
 8005b04:	4805      	ldr	r0, [pc, #20]	@ (8005b1c <fiprintf+0x20>)
 8005b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b0a:	6800      	ldr	r0, [r0, #0]
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	f7ff fd31 	bl	8005574 <_vfiprintf_r>
 8005b12:	b002      	add	sp, #8
 8005b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b18:	b003      	add	sp, #12
 8005b1a:	4770      	bx	lr
 8005b1c:	20000018 	.word	0x20000018

08005b20 <__swhatbuf_r>:
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	460c      	mov	r4, r1
 8005b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b28:	4615      	mov	r5, r2
 8005b2a:	2900      	cmp	r1, #0
 8005b2c:	461e      	mov	r6, r3
 8005b2e:	b096      	sub	sp, #88	@ 0x58
 8005b30:	da0c      	bge.n	8005b4c <__swhatbuf_r+0x2c>
 8005b32:	89a3      	ldrh	r3, [r4, #12]
 8005b34:	2100      	movs	r1, #0
 8005b36:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005b3a:	bf14      	ite	ne
 8005b3c:	2340      	movne	r3, #64	@ 0x40
 8005b3e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005b42:	2000      	movs	r0, #0
 8005b44:	6031      	str	r1, [r6, #0]
 8005b46:	602b      	str	r3, [r5, #0]
 8005b48:	b016      	add	sp, #88	@ 0x58
 8005b4a:	bd70      	pop	{r4, r5, r6, pc}
 8005b4c:	466a      	mov	r2, sp
 8005b4e:	f000 f849 	bl	8005be4 <_fstat_r>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	dbed      	blt.n	8005b32 <__swhatbuf_r+0x12>
 8005b56:	9901      	ldr	r1, [sp, #4]
 8005b58:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b5c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b60:	4259      	negs	r1, r3
 8005b62:	4159      	adcs	r1, r3
 8005b64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b68:	e7eb      	b.n	8005b42 <__swhatbuf_r+0x22>

08005b6a <__smakebuf_r>:
 8005b6a:	898b      	ldrh	r3, [r1, #12]
 8005b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b6e:	079d      	lsls	r5, r3, #30
 8005b70:	4606      	mov	r6, r0
 8005b72:	460c      	mov	r4, r1
 8005b74:	d507      	bpl.n	8005b86 <__smakebuf_r+0x1c>
 8005b76:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b7a:	6023      	str	r3, [r4, #0]
 8005b7c:	6123      	str	r3, [r4, #16]
 8005b7e:	2301      	movs	r3, #1
 8005b80:	6163      	str	r3, [r4, #20]
 8005b82:	b003      	add	sp, #12
 8005b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b86:	466a      	mov	r2, sp
 8005b88:	ab01      	add	r3, sp, #4
 8005b8a:	f7ff ffc9 	bl	8005b20 <__swhatbuf_r>
 8005b8e:	9f00      	ldr	r7, [sp, #0]
 8005b90:	4605      	mov	r5, r0
 8005b92:	4639      	mov	r1, r7
 8005b94:	4630      	mov	r0, r6
 8005b96:	f7ff f8b9 	bl	8004d0c <_malloc_r>
 8005b9a:	b948      	cbnz	r0, 8005bb0 <__smakebuf_r+0x46>
 8005b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ba0:	059a      	lsls	r2, r3, #22
 8005ba2:	d4ee      	bmi.n	8005b82 <__smakebuf_r+0x18>
 8005ba4:	f023 0303 	bic.w	r3, r3, #3
 8005ba8:	f043 0302 	orr.w	r3, r3, #2
 8005bac:	81a3      	strh	r3, [r4, #12]
 8005bae:	e7e2      	b.n	8005b76 <__smakebuf_r+0xc>
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bba:	81a3      	strh	r3, [r4, #12]
 8005bbc:	9b01      	ldr	r3, [sp, #4]
 8005bbe:	6020      	str	r0, [r4, #0]
 8005bc0:	b15b      	cbz	r3, 8005bda <__smakebuf_r+0x70>
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bc8:	f000 f81e 	bl	8005c08 <_isatty_r>
 8005bcc:	b128      	cbz	r0, 8005bda <__smakebuf_r+0x70>
 8005bce:	89a3      	ldrh	r3, [r4, #12]
 8005bd0:	f023 0303 	bic.w	r3, r3, #3
 8005bd4:	f043 0301 	orr.w	r3, r3, #1
 8005bd8:	81a3      	strh	r3, [r4, #12]
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	431d      	orrs	r5, r3
 8005bde:	81a5      	strh	r5, [r4, #12]
 8005be0:	e7cf      	b.n	8005b82 <__smakebuf_r+0x18>
	...

08005be4 <_fstat_r>:
 8005be4:	b538      	push	{r3, r4, r5, lr}
 8005be6:	2300      	movs	r3, #0
 8005be8:	4d06      	ldr	r5, [pc, #24]	@ (8005c04 <_fstat_r+0x20>)
 8005bea:	4604      	mov	r4, r0
 8005bec:	4608      	mov	r0, r1
 8005bee:	4611      	mov	r1, r2
 8005bf0:	602b      	str	r3, [r5, #0]
 8005bf2:	f7fb fc4f 	bl	8001494 <_fstat>
 8005bf6:	1c43      	adds	r3, r0, #1
 8005bf8:	d102      	bne.n	8005c00 <_fstat_r+0x1c>
 8005bfa:	682b      	ldr	r3, [r5, #0]
 8005bfc:	b103      	cbz	r3, 8005c00 <_fstat_r+0x1c>
 8005bfe:	6023      	str	r3, [r4, #0]
 8005c00:	bd38      	pop	{r3, r4, r5, pc}
 8005c02:	bf00      	nop
 8005c04:	200003c0 	.word	0x200003c0

08005c08 <_isatty_r>:
 8005c08:	b538      	push	{r3, r4, r5, lr}
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	4d05      	ldr	r5, [pc, #20]	@ (8005c24 <_isatty_r+0x1c>)
 8005c0e:	4604      	mov	r4, r0
 8005c10:	4608      	mov	r0, r1
 8005c12:	602b      	str	r3, [r5, #0]
 8005c14:	f7fb fc4d 	bl	80014b2 <_isatty>
 8005c18:	1c43      	adds	r3, r0, #1
 8005c1a:	d102      	bne.n	8005c22 <_isatty_r+0x1a>
 8005c1c:	682b      	ldr	r3, [r5, #0]
 8005c1e:	b103      	cbz	r3, 8005c22 <_isatty_r+0x1a>
 8005c20:	6023      	str	r3, [r4, #0]
 8005c22:	bd38      	pop	{r3, r4, r5, pc}
 8005c24:	200003c0 	.word	0x200003c0

08005c28 <abort>:
 8005c28:	2006      	movs	r0, #6
 8005c2a:	b508      	push	{r3, lr}
 8005c2c:	f000 f82c 	bl	8005c88 <raise>
 8005c30:	2001      	movs	r0, #1
 8005c32:	f7fb fbe0 	bl	80013f6 <_exit>

08005c36 <_raise_r>:
 8005c36:	291f      	cmp	r1, #31
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	4605      	mov	r5, r0
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	d904      	bls.n	8005c4a <_raise_r+0x14>
 8005c40:	2316      	movs	r3, #22
 8005c42:	6003      	str	r3, [r0, #0]
 8005c44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c48:	bd38      	pop	{r3, r4, r5, pc}
 8005c4a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005c4c:	b112      	cbz	r2, 8005c54 <_raise_r+0x1e>
 8005c4e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c52:	b94b      	cbnz	r3, 8005c68 <_raise_r+0x32>
 8005c54:	4628      	mov	r0, r5
 8005c56:	f000 f831 	bl	8005cbc <_getpid_r>
 8005c5a:	4622      	mov	r2, r4
 8005c5c:	4601      	mov	r1, r0
 8005c5e:	4628      	mov	r0, r5
 8005c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c64:	f000 b818 	b.w	8005c98 <_kill_r>
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d00a      	beq.n	8005c82 <_raise_r+0x4c>
 8005c6c:	1c59      	adds	r1, r3, #1
 8005c6e:	d103      	bne.n	8005c78 <_raise_r+0x42>
 8005c70:	2316      	movs	r3, #22
 8005c72:	6003      	str	r3, [r0, #0]
 8005c74:	2001      	movs	r0, #1
 8005c76:	e7e7      	b.n	8005c48 <_raise_r+0x12>
 8005c78:	2100      	movs	r1, #0
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005c80:	4798      	blx	r3
 8005c82:	2000      	movs	r0, #0
 8005c84:	e7e0      	b.n	8005c48 <_raise_r+0x12>
	...

08005c88 <raise>:
 8005c88:	4b02      	ldr	r3, [pc, #8]	@ (8005c94 <raise+0xc>)
 8005c8a:	4601      	mov	r1, r0
 8005c8c:	6818      	ldr	r0, [r3, #0]
 8005c8e:	f7ff bfd2 	b.w	8005c36 <_raise_r>
 8005c92:	bf00      	nop
 8005c94:	20000018 	.word	0x20000018

08005c98 <_kill_r>:
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	4d06      	ldr	r5, [pc, #24]	@ (8005cb8 <_kill_r+0x20>)
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	4608      	mov	r0, r1
 8005ca2:	4611      	mov	r1, r2
 8005ca4:	602b      	str	r3, [r5, #0]
 8005ca6:	f7fb fb96 	bl	80013d6 <_kill>
 8005caa:	1c43      	adds	r3, r0, #1
 8005cac:	d102      	bne.n	8005cb4 <_kill_r+0x1c>
 8005cae:	682b      	ldr	r3, [r5, #0]
 8005cb0:	b103      	cbz	r3, 8005cb4 <_kill_r+0x1c>
 8005cb2:	6023      	str	r3, [r4, #0]
 8005cb4:	bd38      	pop	{r3, r4, r5, pc}
 8005cb6:	bf00      	nop
 8005cb8:	200003c0 	.word	0x200003c0

08005cbc <_getpid_r>:
 8005cbc:	f7fb bb84 	b.w	80013c8 <_getpid>

08005cc0 <pow>:
 8005cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	461d      	mov	r5, r3
 8005cc8:	4680      	mov	r8, r0
 8005cca:	4689      	mov	r9, r1
 8005ccc:	f000 f868 	bl	8005da0 <__ieee754_pow>
 8005cd0:	4622      	mov	r2, r4
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	460f      	mov	r7, r1
 8005cd6:	462b      	mov	r3, r5
 8005cd8:	4620      	mov	r0, r4
 8005cda:	4629      	mov	r1, r5
 8005cdc:	f7fa fe96 	bl	8000a0c <__aeabi_dcmpun>
 8005ce0:	bbc8      	cbnz	r0, 8005d56 <pow+0x96>
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	4640      	mov	r0, r8
 8005ce8:	4649      	mov	r1, r9
 8005cea:	f7fa fe5d 	bl	80009a8 <__aeabi_dcmpeq>
 8005cee:	b1b8      	cbz	r0, 8005d20 <pow+0x60>
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	f7fa fe56 	bl	80009a8 <__aeabi_dcmpeq>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	d141      	bne.n	8005d84 <pow+0xc4>
 8005d00:	4620      	mov	r0, r4
 8005d02:	4629      	mov	r1, r5
 8005d04:	f000 f844 	bl	8005d90 <finite>
 8005d08:	b328      	cbz	r0, 8005d56 <pow+0x96>
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	4620      	mov	r0, r4
 8005d10:	4629      	mov	r1, r5
 8005d12:	f7fa fe53 	bl	80009bc <__aeabi_dcmplt>
 8005d16:	b1f0      	cbz	r0, 8005d56 <pow+0x96>
 8005d18:	f7fe f8f8 	bl	8003f0c <__errno>
 8005d1c:	2322      	movs	r3, #34	@ 0x22
 8005d1e:	e019      	b.n	8005d54 <pow+0x94>
 8005d20:	4630      	mov	r0, r6
 8005d22:	4639      	mov	r1, r7
 8005d24:	f000 f834 	bl	8005d90 <finite>
 8005d28:	b9c8      	cbnz	r0, 8005d5e <pow+0x9e>
 8005d2a:	4640      	mov	r0, r8
 8005d2c:	4649      	mov	r1, r9
 8005d2e:	f000 f82f 	bl	8005d90 <finite>
 8005d32:	b1a0      	cbz	r0, 8005d5e <pow+0x9e>
 8005d34:	4620      	mov	r0, r4
 8005d36:	4629      	mov	r1, r5
 8005d38:	f000 f82a 	bl	8005d90 <finite>
 8005d3c:	b178      	cbz	r0, 8005d5e <pow+0x9e>
 8005d3e:	4632      	mov	r2, r6
 8005d40:	463b      	mov	r3, r7
 8005d42:	4630      	mov	r0, r6
 8005d44:	4639      	mov	r1, r7
 8005d46:	f7fa fe61 	bl	8000a0c <__aeabi_dcmpun>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d0e4      	beq.n	8005d18 <pow+0x58>
 8005d4e:	f7fe f8dd 	bl	8003f0c <__errno>
 8005d52:	2321      	movs	r3, #33	@ 0x21
 8005d54:	6003      	str	r3, [r0, #0]
 8005d56:	4630      	mov	r0, r6
 8005d58:	4639      	mov	r1, r7
 8005d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d5e:	2200      	movs	r2, #0
 8005d60:	2300      	movs	r3, #0
 8005d62:	4630      	mov	r0, r6
 8005d64:	4639      	mov	r1, r7
 8005d66:	f7fa fe1f 	bl	80009a8 <__aeabi_dcmpeq>
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	d0f3      	beq.n	8005d56 <pow+0x96>
 8005d6e:	4640      	mov	r0, r8
 8005d70:	4649      	mov	r1, r9
 8005d72:	f000 f80d 	bl	8005d90 <finite>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	d0ed      	beq.n	8005d56 <pow+0x96>
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	f000 f807 	bl	8005d90 <finite>
 8005d82:	e7c8      	b.n	8005d16 <pow+0x56>
 8005d84:	2600      	movs	r6, #0
 8005d86:	4f01      	ldr	r7, [pc, #4]	@ (8005d8c <pow+0xcc>)
 8005d88:	e7e5      	b.n	8005d56 <pow+0x96>
 8005d8a:	bf00      	nop
 8005d8c:	3ff00000 	.word	0x3ff00000

08005d90 <finite>:
 8005d90:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8005d94:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8005d98:	0fc0      	lsrs	r0, r0, #31
 8005d9a:	4770      	bx	lr
 8005d9c:	0000      	movs	r0, r0
	...

08005da0 <__ieee754_pow>:
 8005da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da4:	b091      	sub	sp, #68	@ 0x44
 8005da6:	e9cd 2300 	strd	r2, r3, [sp]
 8005daa:	468b      	mov	fp, r1
 8005dac:	e9dd 1800 	ldrd	r1, r8, [sp]
 8005db0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8005db4:	4682      	mov	sl, r0
 8005db6:	ea57 0001 	orrs.w	r0, r7, r1
 8005dba:	d112      	bne.n	8005de2 <__ieee754_pow+0x42>
 8005dbc:	4653      	mov	r3, sl
 8005dbe:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8005dc2:	18db      	adds	r3, r3, r3
 8005dc4:	4152      	adcs	r2, r2
 8005dc6:	4298      	cmp	r0, r3
 8005dc8:	4b91      	ldr	r3, [pc, #580]	@ (8006010 <__ieee754_pow+0x270>)
 8005dca:	4193      	sbcs	r3, r2
 8005dcc:	f080 84ce 	bcs.w	800676c <__ieee754_pow+0x9cc>
 8005dd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dd4:	4650      	mov	r0, sl
 8005dd6:	4659      	mov	r1, fp
 8005dd8:	f7fa f9c8 	bl	800016c <__adddf3>
 8005ddc:	b011      	add	sp, #68	@ 0x44
 8005dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de2:	4b8c      	ldr	r3, [pc, #560]	@ (8006014 <__ieee754_pow+0x274>)
 8005de4:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8005de8:	429e      	cmp	r6, r3
 8005dea:	465d      	mov	r5, fp
 8005dec:	46d1      	mov	r9, sl
 8005dee:	d807      	bhi.n	8005e00 <__ieee754_pow+0x60>
 8005df0:	d102      	bne.n	8005df8 <__ieee754_pow+0x58>
 8005df2:	f1ba 0f00 	cmp.w	sl, #0
 8005df6:	d1eb      	bne.n	8005dd0 <__ieee754_pow+0x30>
 8005df8:	429f      	cmp	r7, r3
 8005dfa:	d801      	bhi.n	8005e00 <__ieee754_pow+0x60>
 8005dfc:	d10f      	bne.n	8005e1e <__ieee754_pow+0x7e>
 8005dfe:	b171      	cbz	r1, 8005e1e <__ieee754_pow+0x7e>
 8005e00:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8005e04:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8005e08:	ea55 0509 	orrs.w	r5, r5, r9
 8005e0c:	d1e0      	bne.n	8005dd0 <__ieee754_pow+0x30>
 8005e0e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005e12:	18db      	adds	r3, r3, r3
 8005e14:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8005e18:	4152      	adcs	r2, r2
 8005e1a:	429d      	cmp	r5, r3
 8005e1c:	e7d4      	b.n	8005dc8 <__ieee754_pow+0x28>
 8005e1e:	2d00      	cmp	r5, #0
 8005e20:	4633      	mov	r3, r6
 8005e22:	da39      	bge.n	8005e98 <__ieee754_pow+0xf8>
 8005e24:	4a7c      	ldr	r2, [pc, #496]	@ (8006018 <__ieee754_pow+0x278>)
 8005e26:	4297      	cmp	r7, r2
 8005e28:	d84e      	bhi.n	8005ec8 <__ieee754_pow+0x128>
 8005e2a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8005e2e:	4297      	cmp	r7, r2
 8005e30:	f240 84ab 	bls.w	800678a <__ieee754_pow+0x9ea>
 8005e34:	153a      	asrs	r2, r7, #20
 8005e36:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005e3a:	2a14      	cmp	r2, #20
 8005e3c:	dd0f      	ble.n	8005e5e <__ieee754_pow+0xbe>
 8005e3e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8005e42:	fa21 f402 	lsr.w	r4, r1, r2
 8005e46:	fa04 f202 	lsl.w	r2, r4, r2
 8005e4a:	428a      	cmp	r2, r1
 8005e4c:	f040 849d 	bne.w	800678a <__ieee754_pow+0x9ea>
 8005e50:	f004 0401 	and.w	r4, r4, #1
 8005e54:	f1c4 0402 	rsb	r4, r4, #2
 8005e58:	2900      	cmp	r1, #0
 8005e5a:	d15a      	bne.n	8005f12 <__ieee754_pow+0x172>
 8005e5c:	e00e      	b.n	8005e7c <__ieee754_pow+0xdc>
 8005e5e:	2900      	cmp	r1, #0
 8005e60:	d156      	bne.n	8005f10 <__ieee754_pow+0x170>
 8005e62:	f1c2 0214 	rsb	r2, r2, #20
 8005e66:	fa47 f402 	asr.w	r4, r7, r2
 8005e6a:	fa04 f202 	lsl.w	r2, r4, r2
 8005e6e:	42ba      	cmp	r2, r7
 8005e70:	f040 8488 	bne.w	8006784 <__ieee754_pow+0x9e4>
 8005e74:	f004 0401 	and.w	r4, r4, #1
 8005e78:	f1c4 0402 	rsb	r4, r4, #2
 8005e7c:	4a67      	ldr	r2, [pc, #412]	@ (800601c <__ieee754_pow+0x27c>)
 8005e7e:	4297      	cmp	r7, r2
 8005e80:	d130      	bne.n	8005ee4 <__ieee754_pow+0x144>
 8005e82:	f1b8 0f00 	cmp.w	r8, #0
 8005e86:	f280 8479 	bge.w	800677c <__ieee754_pow+0x9dc>
 8005e8a:	4652      	mov	r2, sl
 8005e8c:	465b      	mov	r3, fp
 8005e8e:	2000      	movs	r0, #0
 8005e90:	4962      	ldr	r1, [pc, #392]	@ (800601c <__ieee754_pow+0x27c>)
 8005e92:	f7fa fc4b 	bl	800072c <__aeabi_ddiv>
 8005e96:	e7a1      	b.n	8005ddc <__ieee754_pow+0x3c>
 8005e98:	2400      	movs	r4, #0
 8005e9a:	2900      	cmp	r1, #0
 8005e9c:	d139      	bne.n	8005f12 <__ieee754_pow+0x172>
 8005e9e:	4a5d      	ldr	r2, [pc, #372]	@ (8006014 <__ieee754_pow+0x274>)
 8005ea0:	4297      	cmp	r7, r2
 8005ea2:	d1eb      	bne.n	8005e7c <__ieee754_pow+0xdc>
 8005ea4:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8005ea8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8005eac:	ea53 0309 	orrs.w	r3, r3, r9
 8005eb0:	f000 845c 	beq.w	800676c <__ieee754_pow+0x9cc>
 8005eb4:	4b5a      	ldr	r3, [pc, #360]	@ (8006020 <__ieee754_pow+0x280>)
 8005eb6:	429e      	cmp	r6, r3
 8005eb8:	d908      	bls.n	8005ecc <__ieee754_pow+0x12c>
 8005eba:	f1b8 0f00 	cmp.w	r8, #0
 8005ebe:	f2c0 8459 	blt.w	8006774 <__ieee754_pow+0x9d4>
 8005ec2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ec6:	e789      	b.n	8005ddc <__ieee754_pow+0x3c>
 8005ec8:	2402      	movs	r4, #2
 8005eca:	e7e6      	b.n	8005e9a <__ieee754_pow+0xfa>
 8005ecc:	f1b8 0f00 	cmp.w	r8, #0
 8005ed0:	f04f 0000 	mov.w	r0, #0
 8005ed4:	f04f 0100 	mov.w	r1, #0
 8005ed8:	da80      	bge.n	8005ddc <__ieee754_pow+0x3c>
 8005eda:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005ede:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005ee2:	e77b      	b.n	8005ddc <__ieee754_pow+0x3c>
 8005ee4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8005ee8:	d106      	bne.n	8005ef8 <__ieee754_pow+0x158>
 8005eea:	4652      	mov	r2, sl
 8005eec:	465b      	mov	r3, fp
 8005eee:	4650      	mov	r0, sl
 8005ef0:	4659      	mov	r1, fp
 8005ef2:	f7fa faf1 	bl	80004d8 <__aeabi_dmul>
 8005ef6:	e771      	b.n	8005ddc <__ieee754_pow+0x3c>
 8005ef8:	4a4a      	ldr	r2, [pc, #296]	@ (8006024 <__ieee754_pow+0x284>)
 8005efa:	4590      	cmp	r8, r2
 8005efc:	d109      	bne.n	8005f12 <__ieee754_pow+0x172>
 8005efe:	2d00      	cmp	r5, #0
 8005f00:	db07      	blt.n	8005f12 <__ieee754_pow+0x172>
 8005f02:	4650      	mov	r0, sl
 8005f04:	4659      	mov	r1, fp
 8005f06:	b011      	add	sp, #68	@ 0x44
 8005f08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0c:	f000 bd12 	b.w	8006934 <__ieee754_sqrt>
 8005f10:	2400      	movs	r4, #0
 8005f12:	4650      	mov	r0, sl
 8005f14:	4659      	mov	r1, fp
 8005f16:	9302      	str	r3, [sp, #8]
 8005f18:	f000 fc6a 	bl	80067f0 <fabs>
 8005f1c:	9b02      	ldr	r3, [sp, #8]
 8005f1e:	f1b9 0f00 	cmp.w	r9, #0
 8005f22:	d127      	bne.n	8005f74 <__ieee754_pow+0x1d4>
 8005f24:	4a3d      	ldr	r2, [pc, #244]	@ (800601c <__ieee754_pow+0x27c>)
 8005f26:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8005f2a:	4594      	cmp	ip, r2
 8005f2c:	d000      	beq.n	8005f30 <__ieee754_pow+0x190>
 8005f2e:	bb0e      	cbnz	r6, 8005f74 <__ieee754_pow+0x1d4>
 8005f30:	f1b8 0f00 	cmp.w	r8, #0
 8005f34:	da05      	bge.n	8005f42 <__ieee754_pow+0x1a2>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	4937      	ldr	r1, [pc, #220]	@ (800601c <__ieee754_pow+0x27c>)
 8005f3e:	f7fa fbf5 	bl	800072c <__aeabi_ddiv>
 8005f42:	2d00      	cmp	r5, #0
 8005f44:	f6bf af4a 	bge.w	8005ddc <__ieee754_pow+0x3c>
 8005f48:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8005f4c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8005f50:	4326      	orrs	r6, r4
 8005f52:	d108      	bne.n	8005f66 <__ieee754_pow+0x1c6>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4610      	mov	r0, r2
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	f7fa f904 	bl	8000168 <__aeabi_dsub>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	e795      	b.n	8005e92 <__ieee754_pow+0xf2>
 8005f66:	2c01      	cmp	r4, #1
 8005f68:	f47f af38 	bne.w	8005ddc <__ieee754_pow+0x3c>
 8005f6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005f70:	4619      	mov	r1, r3
 8005f72:	e733      	b.n	8005ddc <__ieee754_pow+0x3c>
 8005f74:	0fea      	lsrs	r2, r5, #31
 8005f76:	3a01      	subs	r2, #1
 8005f78:	ea52 0c04 	orrs.w	ip, r2, r4
 8005f7c:	d102      	bne.n	8005f84 <__ieee754_pow+0x1e4>
 8005f7e:	4652      	mov	r2, sl
 8005f80:	465b      	mov	r3, fp
 8005f82:	e7e9      	b.n	8005f58 <__ieee754_pow+0x1b8>
 8005f84:	f04f 0900 	mov.w	r9, #0
 8005f88:	3c01      	subs	r4, #1
 8005f8a:	4314      	orrs	r4, r2
 8005f8c:	bf14      	ite	ne
 8005f8e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800601c <__ieee754_pow+0x27c>
 8005f92:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8006028 <__ieee754_pow+0x288>
 8005f96:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8005f9a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8005f9e:	f240 8107 	bls.w	80061b0 <__ieee754_pow+0x410>
 8005fa2:	4b22      	ldr	r3, [pc, #136]	@ (800602c <__ieee754_pow+0x28c>)
 8005fa4:	429f      	cmp	r7, r3
 8005fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8006020 <__ieee754_pow+0x280>)
 8005fa8:	d913      	bls.n	8005fd2 <__ieee754_pow+0x232>
 8005faa:	429e      	cmp	r6, r3
 8005fac:	d808      	bhi.n	8005fc0 <__ieee754_pow+0x220>
 8005fae:	f1b8 0f00 	cmp.w	r8, #0
 8005fb2:	da08      	bge.n	8005fc6 <__ieee754_pow+0x226>
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	b011      	add	sp, #68	@ 0x44
 8005fb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fbc:	f000 bcb4 	b.w	8006928 <__math_oflow>
 8005fc0:	f1b8 0f00 	cmp.w	r8, #0
 8005fc4:	dcf6      	bgt.n	8005fb4 <__ieee754_pow+0x214>
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	b011      	add	sp, #68	@ 0x44
 8005fca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fce:	f000 bca6 	b.w	800691e <__math_uflow>
 8005fd2:	429e      	cmp	r6, r3
 8005fd4:	d20c      	bcs.n	8005ff0 <__ieee754_pow+0x250>
 8005fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f7fa fced 	bl	80009bc <__aeabi_dcmplt>
 8005fe2:	3800      	subs	r0, #0
 8005fe4:	bf18      	it	ne
 8005fe6:	2001      	movne	r0, #1
 8005fe8:	f1b8 0f00 	cmp.w	r8, #0
 8005fec:	daec      	bge.n	8005fc8 <__ieee754_pow+0x228>
 8005fee:	e7e2      	b.n	8005fb6 <__ieee754_pow+0x216>
 8005ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800601c <__ieee754_pow+0x27c>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	429e      	cmp	r6, r3
 8005ff6:	d91b      	bls.n	8006030 <__ieee754_pow+0x290>
 8005ff8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f7fa fcdd 	bl	80009bc <__aeabi_dcmplt>
 8006002:	3800      	subs	r0, #0
 8006004:	bf18      	it	ne
 8006006:	2001      	movne	r0, #1
 8006008:	f1b8 0f00 	cmp.w	r8, #0
 800600c:	dcd3      	bgt.n	8005fb6 <__ieee754_pow+0x216>
 800600e:	e7db      	b.n	8005fc8 <__ieee754_pow+0x228>
 8006010:	fff00000 	.word	0xfff00000
 8006014:	7ff00000 	.word	0x7ff00000
 8006018:	433fffff 	.word	0x433fffff
 800601c:	3ff00000 	.word	0x3ff00000
 8006020:	3fefffff 	.word	0x3fefffff
 8006024:	3fe00000 	.word	0x3fe00000
 8006028:	bff00000 	.word	0xbff00000
 800602c:	43f00000 	.word	0x43f00000
 8006030:	4b5b      	ldr	r3, [pc, #364]	@ (80061a0 <__ieee754_pow+0x400>)
 8006032:	f7fa f899 	bl	8000168 <__aeabi_dsub>
 8006036:	a352      	add	r3, pc, #328	@ (adr r3, 8006180 <__ieee754_pow+0x3e0>)
 8006038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603c:	4604      	mov	r4, r0
 800603e:	460d      	mov	r5, r1
 8006040:	f7fa fa4a 	bl	80004d8 <__aeabi_dmul>
 8006044:	a350      	add	r3, pc, #320	@ (adr r3, 8006188 <__ieee754_pow+0x3e8>)
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	4606      	mov	r6, r0
 800604c:	460f      	mov	r7, r1
 800604e:	4620      	mov	r0, r4
 8006050:	4629      	mov	r1, r5
 8006052:	f7fa fa41 	bl	80004d8 <__aeabi_dmul>
 8006056:	2200      	movs	r2, #0
 8006058:	4682      	mov	sl, r0
 800605a:	468b      	mov	fp, r1
 800605c:	4620      	mov	r0, r4
 800605e:	4629      	mov	r1, r5
 8006060:	4b50      	ldr	r3, [pc, #320]	@ (80061a4 <__ieee754_pow+0x404>)
 8006062:	f7fa fa39 	bl	80004d8 <__aeabi_dmul>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	a149      	add	r1, pc, #292	@ (adr r1, 8006190 <__ieee754_pow+0x3f0>)
 800606c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006070:	f7fa f87a 	bl	8000168 <__aeabi_dsub>
 8006074:	4622      	mov	r2, r4
 8006076:	462b      	mov	r3, r5
 8006078:	f7fa fa2e 	bl	80004d8 <__aeabi_dmul>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	2000      	movs	r0, #0
 8006082:	4949      	ldr	r1, [pc, #292]	@ (80061a8 <__ieee754_pow+0x408>)
 8006084:	f7fa f870 	bl	8000168 <__aeabi_dsub>
 8006088:	4622      	mov	r2, r4
 800608a:	4680      	mov	r8, r0
 800608c:	4689      	mov	r9, r1
 800608e:	462b      	mov	r3, r5
 8006090:	4620      	mov	r0, r4
 8006092:	4629      	mov	r1, r5
 8006094:	f7fa fa20 	bl	80004d8 <__aeabi_dmul>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4640      	mov	r0, r8
 800609e:	4649      	mov	r1, r9
 80060a0:	f7fa fa1a 	bl	80004d8 <__aeabi_dmul>
 80060a4:	a33c      	add	r3, pc, #240	@ (adr r3, 8006198 <__ieee754_pow+0x3f8>)
 80060a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060aa:	f7fa fa15 	bl	80004d8 <__aeabi_dmul>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	4650      	mov	r0, sl
 80060b4:	4659      	mov	r1, fp
 80060b6:	f7fa f857 	bl	8000168 <__aeabi_dsub>
 80060ba:	2400      	movs	r4, #0
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4680      	mov	r8, r0
 80060c2:	4689      	mov	r9, r1
 80060c4:	4630      	mov	r0, r6
 80060c6:	4639      	mov	r1, r7
 80060c8:	f7fa f850 	bl	800016c <__adddf3>
 80060cc:	4632      	mov	r2, r6
 80060ce:	463b      	mov	r3, r7
 80060d0:	4620      	mov	r0, r4
 80060d2:	460d      	mov	r5, r1
 80060d4:	f7fa f848 	bl	8000168 <__aeabi_dsub>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	4640      	mov	r0, r8
 80060de:	4649      	mov	r1, r9
 80060e0:	f7fa f842 	bl	8000168 <__aeabi_dsub>
 80060e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060ec:	2300      	movs	r3, #0
 80060ee:	9304      	str	r3, [sp, #16]
 80060f0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80060f4:	4606      	mov	r6, r0
 80060f6:	460f      	mov	r7, r1
 80060f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060fc:	4652      	mov	r2, sl
 80060fe:	465b      	mov	r3, fp
 8006100:	f7fa f832 	bl	8000168 <__aeabi_dsub>
 8006104:	4622      	mov	r2, r4
 8006106:	462b      	mov	r3, r5
 8006108:	f7fa f9e6 	bl	80004d8 <__aeabi_dmul>
 800610c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006110:	4680      	mov	r8, r0
 8006112:	4689      	mov	r9, r1
 8006114:	4630      	mov	r0, r6
 8006116:	4639      	mov	r1, r7
 8006118:	f7fa f9de 	bl	80004d8 <__aeabi_dmul>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4640      	mov	r0, r8
 8006122:	4649      	mov	r1, r9
 8006124:	f7fa f822 	bl	800016c <__adddf3>
 8006128:	4652      	mov	r2, sl
 800612a:	465b      	mov	r3, fp
 800612c:	4606      	mov	r6, r0
 800612e:	460f      	mov	r7, r1
 8006130:	4620      	mov	r0, r4
 8006132:	4629      	mov	r1, r5
 8006134:	f7fa f9d0 	bl	80004d8 <__aeabi_dmul>
 8006138:	460b      	mov	r3, r1
 800613a:	4602      	mov	r2, r0
 800613c:	4680      	mov	r8, r0
 800613e:	4689      	mov	r9, r1
 8006140:	4630      	mov	r0, r6
 8006142:	4639      	mov	r1, r7
 8006144:	f7fa f812 	bl	800016c <__adddf3>
 8006148:	4b18      	ldr	r3, [pc, #96]	@ (80061ac <__ieee754_pow+0x40c>)
 800614a:	4604      	mov	r4, r0
 800614c:	4299      	cmp	r1, r3
 800614e:	460d      	mov	r5, r1
 8006150:	468a      	mov	sl, r1
 8006152:	468b      	mov	fp, r1
 8006154:	f340 82e0 	ble.w	8006718 <__ieee754_pow+0x978>
 8006158:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800615c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8006160:	4303      	orrs	r3, r0
 8006162:	f000 81df 	beq.w	8006524 <__ieee754_pow+0x784>
 8006166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800616a:	2200      	movs	r2, #0
 800616c:	2300      	movs	r3, #0
 800616e:	f7fa fc25 	bl	80009bc <__aeabi_dcmplt>
 8006172:	3800      	subs	r0, #0
 8006174:	bf18      	it	ne
 8006176:	2001      	movne	r0, #1
 8006178:	e71d      	b.n	8005fb6 <__ieee754_pow+0x216>
 800617a:	bf00      	nop
 800617c:	f3af 8000 	nop.w
 8006180:	60000000 	.word	0x60000000
 8006184:	3ff71547 	.word	0x3ff71547
 8006188:	f85ddf44 	.word	0xf85ddf44
 800618c:	3e54ae0b 	.word	0x3e54ae0b
 8006190:	55555555 	.word	0x55555555
 8006194:	3fd55555 	.word	0x3fd55555
 8006198:	652b82fe 	.word	0x652b82fe
 800619c:	3ff71547 	.word	0x3ff71547
 80061a0:	3ff00000 	.word	0x3ff00000
 80061a4:	3fd00000 	.word	0x3fd00000
 80061a8:	3fe00000 	.word	0x3fe00000
 80061ac:	408fffff 	.word	0x408fffff
 80061b0:	4ad3      	ldr	r2, [pc, #844]	@ (8006500 <__ieee754_pow+0x760>)
 80061b2:	402a      	ands	r2, r5
 80061b4:	2a00      	cmp	r2, #0
 80061b6:	f040 817a 	bne.w	80064ae <__ieee754_pow+0x70e>
 80061ba:	4bd2      	ldr	r3, [pc, #840]	@ (8006504 <__ieee754_pow+0x764>)
 80061bc:	2200      	movs	r2, #0
 80061be:	f7fa f98b 	bl	80004d8 <__aeabi_dmul>
 80061c2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 80061c6:	460b      	mov	r3, r1
 80061c8:	151a      	asrs	r2, r3, #20
 80061ca:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80061ce:	4422      	add	r2, r4
 80061d0:	920a      	str	r2, [sp, #40]	@ 0x28
 80061d2:	4acd      	ldr	r2, [pc, #820]	@ (8006508 <__ieee754_pow+0x768>)
 80061d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061d8:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 80061dc:	4293      	cmp	r3, r2
 80061de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80061e2:	dd08      	ble.n	80061f6 <__ieee754_pow+0x456>
 80061e4:	4ac9      	ldr	r2, [pc, #804]	@ (800650c <__ieee754_pow+0x76c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	f340 8163 	ble.w	80064b2 <__ieee754_pow+0x712>
 80061ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061ee:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80061f2:	3301      	adds	r3, #1
 80061f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80061f6:	2600      	movs	r6, #0
 80061f8:	00f3      	lsls	r3, r6, #3
 80061fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061fc:	4bc4      	ldr	r3, [pc, #784]	@ (8006510 <__ieee754_pow+0x770>)
 80061fe:	4629      	mov	r1, r5
 8006200:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006204:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006208:	461a      	mov	r2, r3
 800620a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800620e:	4623      	mov	r3, r4
 8006210:	4682      	mov	sl, r0
 8006212:	f7f9 ffa9 	bl	8000168 <__aeabi_dsub>
 8006216:	4652      	mov	r2, sl
 8006218:	462b      	mov	r3, r5
 800621a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800621e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006222:	f7f9 ffa3 	bl	800016c <__adddf3>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	2000      	movs	r0, #0
 800622c:	49b9      	ldr	r1, [pc, #740]	@ (8006514 <__ieee754_pow+0x774>)
 800622e:	f7fa fa7d 	bl	800072c <__aeabi_ddiv>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800623a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800623e:	f7fa f94b 	bl	80004d8 <__aeabi_dmul>
 8006242:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006246:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800624a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800624e:	2300      	movs	r3, #0
 8006250:	2200      	movs	r2, #0
 8006252:	46ab      	mov	fp, r5
 8006254:	106d      	asrs	r5, r5, #1
 8006256:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800625a:	9304      	str	r3, [sp, #16]
 800625c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8006260:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006264:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006268:	4640      	mov	r0, r8
 800626a:	4649      	mov	r1, r9
 800626c:	4614      	mov	r4, r2
 800626e:	461d      	mov	r5, r3
 8006270:	f7fa f932 	bl	80004d8 <__aeabi_dmul>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800627c:	f7f9 ff74 	bl	8000168 <__aeabi_dsub>
 8006280:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006284:	4606      	mov	r6, r0
 8006286:	460f      	mov	r7, r1
 8006288:	4620      	mov	r0, r4
 800628a:	4629      	mov	r1, r5
 800628c:	f7f9 ff6c 	bl	8000168 <__aeabi_dsub>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	4650      	mov	r0, sl
 8006296:	4659      	mov	r1, fp
 8006298:	f7f9 ff66 	bl	8000168 <__aeabi_dsub>
 800629c:	4642      	mov	r2, r8
 800629e:	464b      	mov	r3, r9
 80062a0:	f7fa f91a 	bl	80004d8 <__aeabi_dmul>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4630      	mov	r0, r6
 80062aa:	4639      	mov	r1, r7
 80062ac:	f7f9 ff5c 	bl	8000168 <__aeabi_dsub>
 80062b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80062b4:	f7fa f910 	bl	80004d8 <__aeabi_dmul>
 80062b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062bc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80062c0:	4610      	mov	r0, r2
 80062c2:	4619      	mov	r1, r3
 80062c4:	f7fa f908 	bl	80004d8 <__aeabi_dmul>
 80062c8:	a37b      	add	r3, pc, #492	@ (adr r3, 80064b8 <__ieee754_pow+0x718>)
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	4604      	mov	r4, r0
 80062d0:	460d      	mov	r5, r1
 80062d2:	f7fa f901 	bl	80004d8 <__aeabi_dmul>
 80062d6:	a37a      	add	r3, pc, #488	@ (adr r3, 80064c0 <__ieee754_pow+0x720>)
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	f7f9 ff46 	bl	800016c <__adddf3>
 80062e0:	4622      	mov	r2, r4
 80062e2:	462b      	mov	r3, r5
 80062e4:	f7fa f8f8 	bl	80004d8 <__aeabi_dmul>
 80062e8:	a377      	add	r3, pc, #476	@ (adr r3, 80064c8 <__ieee754_pow+0x728>)
 80062ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ee:	f7f9 ff3d 	bl	800016c <__adddf3>
 80062f2:	4622      	mov	r2, r4
 80062f4:	462b      	mov	r3, r5
 80062f6:	f7fa f8ef 	bl	80004d8 <__aeabi_dmul>
 80062fa:	a375      	add	r3, pc, #468	@ (adr r3, 80064d0 <__ieee754_pow+0x730>)
 80062fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006300:	f7f9 ff34 	bl	800016c <__adddf3>
 8006304:	4622      	mov	r2, r4
 8006306:	462b      	mov	r3, r5
 8006308:	f7fa f8e6 	bl	80004d8 <__aeabi_dmul>
 800630c:	a372      	add	r3, pc, #456	@ (adr r3, 80064d8 <__ieee754_pow+0x738>)
 800630e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006312:	f7f9 ff2b 	bl	800016c <__adddf3>
 8006316:	4622      	mov	r2, r4
 8006318:	462b      	mov	r3, r5
 800631a:	f7fa f8dd 	bl	80004d8 <__aeabi_dmul>
 800631e:	a370      	add	r3, pc, #448	@ (adr r3, 80064e0 <__ieee754_pow+0x740>)
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	f7f9 ff22 	bl	800016c <__adddf3>
 8006328:	4622      	mov	r2, r4
 800632a:	4606      	mov	r6, r0
 800632c:	460f      	mov	r7, r1
 800632e:	462b      	mov	r3, r5
 8006330:	4620      	mov	r0, r4
 8006332:	4629      	mov	r1, r5
 8006334:	f7fa f8d0 	bl	80004d8 <__aeabi_dmul>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	4630      	mov	r0, r6
 800633e:	4639      	mov	r1, r7
 8006340:	f7fa f8ca 	bl	80004d8 <__aeabi_dmul>
 8006344:	4604      	mov	r4, r0
 8006346:	460d      	mov	r5, r1
 8006348:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800634c:	4642      	mov	r2, r8
 800634e:	464b      	mov	r3, r9
 8006350:	f7f9 ff0c 	bl	800016c <__adddf3>
 8006354:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006358:	f7fa f8be 	bl	80004d8 <__aeabi_dmul>
 800635c:	4622      	mov	r2, r4
 800635e:	462b      	mov	r3, r5
 8006360:	f7f9 ff04 	bl	800016c <__adddf3>
 8006364:	4642      	mov	r2, r8
 8006366:	4682      	mov	sl, r0
 8006368:	468b      	mov	fp, r1
 800636a:	464b      	mov	r3, r9
 800636c:	4640      	mov	r0, r8
 800636e:	4649      	mov	r1, r9
 8006370:	f7fa f8b2 	bl	80004d8 <__aeabi_dmul>
 8006374:	2200      	movs	r2, #0
 8006376:	4b68      	ldr	r3, [pc, #416]	@ (8006518 <__ieee754_pow+0x778>)
 8006378:	4606      	mov	r6, r0
 800637a:	460f      	mov	r7, r1
 800637c:	f7f9 fef6 	bl	800016c <__adddf3>
 8006380:	4652      	mov	r2, sl
 8006382:	465b      	mov	r3, fp
 8006384:	f7f9 fef2 	bl	800016c <__adddf3>
 8006388:	2400      	movs	r4, #0
 800638a:	460d      	mov	r5, r1
 800638c:	4622      	mov	r2, r4
 800638e:	460b      	mov	r3, r1
 8006390:	4640      	mov	r0, r8
 8006392:	4649      	mov	r1, r9
 8006394:	f7fa f8a0 	bl	80004d8 <__aeabi_dmul>
 8006398:	2200      	movs	r2, #0
 800639a:	4680      	mov	r8, r0
 800639c:	4689      	mov	r9, r1
 800639e:	4620      	mov	r0, r4
 80063a0:	4629      	mov	r1, r5
 80063a2:	4b5d      	ldr	r3, [pc, #372]	@ (8006518 <__ieee754_pow+0x778>)
 80063a4:	f7f9 fee0 	bl	8000168 <__aeabi_dsub>
 80063a8:	4632      	mov	r2, r6
 80063aa:	463b      	mov	r3, r7
 80063ac:	f7f9 fedc 	bl	8000168 <__aeabi_dsub>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4650      	mov	r0, sl
 80063b6:	4659      	mov	r1, fp
 80063b8:	f7f9 fed6 	bl	8000168 <__aeabi_dsub>
 80063bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063c0:	f7fa f88a 	bl	80004d8 <__aeabi_dmul>
 80063c4:	4622      	mov	r2, r4
 80063c6:	4606      	mov	r6, r0
 80063c8:	460f      	mov	r7, r1
 80063ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80063ce:	462b      	mov	r3, r5
 80063d0:	f7fa f882 	bl	80004d8 <__aeabi_dmul>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	4630      	mov	r0, r6
 80063da:	4639      	mov	r1, r7
 80063dc:	f7f9 fec6 	bl	800016c <__adddf3>
 80063e0:	2400      	movs	r4, #0
 80063e2:	4606      	mov	r6, r0
 80063e4:	460f      	mov	r7, r1
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4640      	mov	r0, r8
 80063ec:	4649      	mov	r1, r9
 80063ee:	f7f9 febd 	bl	800016c <__adddf3>
 80063f2:	a33d      	add	r3, pc, #244	@ (adr r3, 80064e8 <__ieee754_pow+0x748>)
 80063f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f8:	4620      	mov	r0, r4
 80063fa:	460d      	mov	r5, r1
 80063fc:	f7fa f86c 	bl	80004d8 <__aeabi_dmul>
 8006400:	4642      	mov	r2, r8
 8006402:	464b      	mov	r3, r9
 8006404:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006408:	4620      	mov	r0, r4
 800640a:	4629      	mov	r1, r5
 800640c:	f7f9 feac 	bl	8000168 <__aeabi_dsub>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	4630      	mov	r0, r6
 8006416:	4639      	mov	r1, r7
 8006418:	f7f9 fea6 	bl	8000168 <__aeabi_dsub>
 800641c:	a334      	add	r3, pc, #208	@ (adr r3, 80064f0 <__ieee754_pow+0x750>)
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	f7fa f859 	bl	80004d8 <__aeabi_dmul>
 8006426:	a334      	add	r3, pc, #208	@ (adr r3, 80064f8 <__ieee754_pow+0x758>)
 8006428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642c:	4606      	mov	r6, r0
 800642e:	460f      	mov	r7, r1
 8006430:	4620      	mov	r0, r4
 8006432:	4629      	mov	r1, r5
 8006434:	f7fa f850 	bl	80004d8 <__aeabi_dmul>
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	4630      	mov	r0, r6
 800643e:	4639      	mov	r1, r7
 8006440:	f7f9 fe94 	bl	800016c <__adddf3>
 8006444:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006446:	4b35      	ldr	r3, [pc, #212]	@ (800651c <__ieee754_pow+0x77c>)
 8006448:	2400      	movs	r4, #0
 800644a:	4413      	add	r3, r2
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	f7f9 fe8c 	bl	800016c <__adddf3>
 8006454:	4682      	mov	sl, r0
 8006456:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006458:	468b      	mov	fp, r1
 800645a:	f7f9 ffd3 	bl	8000404 <__aeabi_i2d>
 800645e:	4606      	mov	r6, r0
 8006460:	460f      	mov	r7, r1
 8006462:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006464:	4b2e      	ldr	r3, [pc, #184]	@ (8006520 <__ieee754_pow+0x780>)
 8006466:	4413      	add	r3, r2
 8006468:	e9d3 8900 	ldrd	r8, r9, [r3]
 800646c:	4652      	mov	r2, sl
 800646e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006472:	465b      	mov	r3, fp
 8006474:	f7f9 fe7a 	bl	800016c <__adddf3>
 8006478:	4642      	mov	r2, r8
 800647a:	464b      	mov	r3, r9
 800647c:	f7f9 fe76 	bl	800016c <__adddf3>
 8006480:	4632      	mov	r2, r6
 8006482:	463b      	mov	r3, r7
 8006484:	f7f9 fe72 	bl	800016c <__adddf3>
 8006488:	4632      	mov	r2, r6
 800648a:	463b      	mov	r3, r7
 800648c:	4620      	mov	r0, r4
 800648e:	460d      	mov	r5, r1
 8006490:	f7f9 fe6a 	bl	8000168 <__aeabi_dsub>
 8006494:	4642      	mov	r2, r8
 8006496:	464b      	mov	r3, r9
 8006498:	f7f9 fe66 	bl	8000168 <__aeabi_dsub>
 800649c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064a0:	f7f9 fe62 	bl	8000168 <__aeabi_dsub>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	4650      	mov	r0, sl
 80064aa:	4659      	mov	r1, fp
 80064ac:	e618      	b.n	80060e0 <__ieee754_pow+0x340>
 80064ae:	2400      	movs	r4, #0
 80064b0:	e68a      	b.n	80061c8 <__ieee754_pow+0x428>
 80064b2:	2601      	movs	r6, #1
 80064b4:	e6a0      	b.n	80061f8 <__ieee754_pow+0x458>
 80064b6:	bf00      	nop
 80064b8:	4a454eef 	.word	0x4a454eef
 80064bc:	3fca7e28 	.word	0x3fca7e28
 80064c0:	93c9db65 	.word	0x93c9db65
 80064c4:	3fcd864a 	.word	0x3fcd864a
 80064c8:	a91d4101 	.word	0xa91d4101
 80064cc:	3fd17460 	.word	0x3fd17460
 80064d0:	518f264d 	.word	0x518f264d
 80064d4:	3fd55555 	.word	0x3fd55555
 80064d8:	db6fabff 	.word	0xdb6fabff
 80064dc:	3fdb6db6 	.word	0x3fdb6db6
 80064e0:	33333303 	.word	0x33333303
 80064e4:	3fe33333 	.word	0x3fe33333
 80064e8:	e0000000 	.word	0xe0000000
 80064ec:	3feec709 	.word	0x3feec709
 80064f0:	dc3a03fd 	.word	0xdc3a03fd
 80064f4:	3feec709 	.word	0x3feec709
 80064f8:	145b01f5 	.word	0x145b01f5
 80064fc:	be3e2fe0 	.word	0xbe3e2fe0
 8006500:	7ff00000 	.word	0x7ff00000
 8006504:	43400000 	.word	0x43400000
 8006508:	0003988e 	.word	0x0003988e
 800650c:	000bb679 	.word	0x000bb679
 8006510:	08006ee8 	.word	0x08006ee8
 8006514:	3ff00000 	.word	0x3ff00000
 8006518:	40080000 	.word	0x40080000
 800651c:	08006ec8 	.word	0x08006ec8
 8006520:	08006ed8 	.word	0x08006ed8
 8006524:	a39a      	add	r3, pc, #616	@ (adr r3, 8006790 <__ieee754_pow+0x9f0>)
 8006526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652a:	4630      	mov	r0, r6
 800652c:	4639      	mov	r1, r7
 800652e:	f7f9 fe1d 	bl	800016c <__adddf3>
 8006532:	4642      	mov	r2, r8
 8006534:	e9cd 0100 	strd	r0, r1, [sp]
 8006538:	464b      	mov	r3, r9
 800653a:	4620      	mov	r0, r4
 800653c:	4629      	mov	r1, r5
 800653e:	f7f9 fe13 	bl	8000168 <__aeabi_dsub>
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	e9dd 0100 	ldrd	r0, r1, [sp]
 800654a:	f7fa fa55 	bl	80009f8 <__aeabi_dcmpgt>
 800654e:	2800      	cmp	r0, #0
 8006550:	f47f ae09 	bne.w	8006166 <__ieee754_pow+0x3c6>
 8006554:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006558:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800655c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8006560:	fa43 fa0a 	asr.w	sl, r3, sl
 8006564:	44da      	add	sl, fp
 8006566:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800656a:	489b      	ldr	r0, [pc, #620]	@ (80067d8 <__ieee754_pow+0xa38>)
 800656c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006570:	4108      	asrs	r0, r1
 8006572:	ea00 030a 	and.w	r3, r0, sl
 8006576:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800657a:	f1c1 0114 	rsb	r1, r1, #20
 800657e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006582:	4640      	mov	r0, r8
 8006584:	fa4a fa01 	asr.w	sl, sl, r1
 8006588:	f1bb 0f00 	cmp.w	fp, #0
 800658c:	4649      	mov	r1, r9
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	bfb8      	it	lt
 8006594:	f1ca 0a00 	rsblt	sl, sl, #0
 8006598:	f7f9 fde6 	bl	8000168 <__aeabi_dsub>
 800659c:	4680      	mov	r8, r0
 800659e:	4689      	mov	r9, r1
 80065a0:	2400      	movs	r4, #0
 80065a2:	4632      	mov	r2, r6
 80065a4:	463b      	mov	r3, r7
 80065a6:	4640      	mov	r0, r8
 80065a8:	4649      	mov	r1, r9
 80065aa:	f7f9 fddf 	bl	800016c <__adddf3>
 80065ae:	a37a      	add	r3, pc, #488	@ (adr r3, 8006798 <__ieee754_pow+0x9f8>)
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	4620      	mov	r0, r4
 80065b6:	460d      	mov	r5, r1
 80065b8:	f7f9 ff8e 	bl	80004d8 <__aeabi_dmul>
 80065bc:	4642      	mov	r2, r8
 80065be:	464b      	mov	r3, r9
 80065c0:	e9cd 0100 	strd	r0, r1, [sp]
 80065c4:	4620      	mov	r0, r4
 80065c6:	4629      	mov	r1, r5
 80065c8:	f7f9 fdce 	bl	8000168 <__aeabi_dsub>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4630      	mov	r0, r6
 80065d2:	4639      	mov	r1, r7
 80065d4:	f7f9 fdc8 	bl	8000168 <__aeabi_dsub>
 80065d8:	a371      	add	r3, pc, #452	@ (adr r3, 80067a0 <__ieee754_pow+0xa00>)
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	f7f9 ff7b 	bl	80004d8 <__aeabi_dmul>
 80065e2:	a371      	add	r3, pc, #452	@ (adr r3, 80067a8 <__ieee754_pow+0xa08>)
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	4680      	mov	r8, r0
 80065ea:	4689      	mov	r9, r1
 80065ec:	4620      	mov	r0, r4
 80065ee:	4629      	mov	r1, r5
 80065f0:	f7f9 ff72 	bl	80004d8 <__aeabi_dmul>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4640      	mov	r0, r8
 80065fa:	4649      	mov	r1, r9
 80065fc:	f7f9 fdb6 	bl	800016c <__adddf3>
 8006600:	4604      	mov	r4, r0
 8006602:	460d      	mov	r5, r1
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	e9dd 0100 	ldrd	r0, r1, [sp]
 800660c:	f7f9 fdae 	bl	800016c <__adddf3>
 8006610:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006614:	4680      	mov	r8, r0
 8006616:	4689      	mov	r9, r1
 8006618:	f7f9 fda6 	bl	8000168 <__aeabi_dsub>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4620      	mov	r0, r4
 8006622:	4629      	mov	r1, r5
 8006624:	f7f9 fda0 	bl	8000168 <__aeabi_dsub>
 8006628:	4642      	mov	r2, r8
 800662a:	4606      	mov	r6, r0
 800662c:	460f      	mov	r7, r1
 800662e:	464b      	mov	r3, r9
 8006630:	4640      	mov	r0, r8
 8006632:	4649      	mov	r1, r9
 8006634:	f7f9 ff50 	bl	80004d8 <__aeabi_dmul>
 8006638:	a35d      	add	r3, pc, #372	@ (adr r3, 80067b0 <__ieee754_pow+0xa10>)
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	4604      	mov	r4, r0
 8006640:	460d      	mov	r5, r1
 8006642:	f7f9 ff49 	bl	80004d8 <__aeabi_dmul>
 8006646:	a35c      	add	r3, pc, #368	@ (adr r3, 80067b8 <__ieee754_pow+0xa18>)
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	f7f9 fd8c 	bl	8000168 <__aeabi_dsub>
 8006650:	4622      	mov	r2, r4
 8006652:	462b      	mov	r3, r5
 8006654:	f7f9 ff40 	bl	80004d8 <__aeabi_dmul>
 8006658:	a359      	add	r3, pc, #356	@ (adr r3, 80067c0 <__ieee754_pow+0xa20>)
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	f7f9 fd85 	bl	800016c <__adddf3>
 8006662:	4622      	mov	r2, r4
 8006664:	462b      	mov	r3, r5
 8006666:	f7f9 ff37 	bl	80004d8 <__aeabi_dmul>
 800666a:	a357      	add	r3, pc, #348	@ (adr r3, 80067c8 <__ieee754_pow+0xa28>)
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	f7f9 fd7a 	bl	8000168 <__aeabi_dsub>
 8006674:	4622      	mov	r2, r4
 8006676:	462b      	mov	r3, r5
 8006678:	f7f9 ff2e 	bl	80004d8 <__aeabi_dmul>
 800667c:	a354      	add	r3, pc, #336	@ (adr r3, 80067d0 <__ieee754_pow+0xa30>)
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	f7f9 fd73 	bl	800016c <__adddf3>
 8006686:	4622      	mov	r2, r4
 8006688:	462b      	mov	r3, r5
 800668a:	f7f9 ff25 	bl	80004d8 <__aeabi_dmul>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	4640      	mov	r0, r8
 8006694:	4649      	mov	r1, r9
 8006696:	f7f9 fd67 	bl	8000168 <__aeabi_dsub>
 800669a:	4604      	mov	r4, r0
 800669c:	460d      	mov	r5, r1
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	4640      	mov	r0, r8
 80066a4:	4649      	mov	r1, r9
 80066a6:	f7f9 ff17 	bl	80004d8 <__aeabi_dmul>
 80066aa:	2200      	movs	r2, #0
 80066ac:	e9cd 0100 	strd	r0, r1, [sp]
 80066b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80066b4:	4620      	mov	r0, r4
 80066b6:	4629      	mov	r1, r5
 80066b8:	f7f9 fd56 	bl	8000168 <__aeabi_dsub>
 80066bc:	4602      	mov	r2, r0
 80066be:	460b      	mov	r3, r1
 80066c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066c4:	f7fa f832 	bl	800072c <__aeabi_ddiv>
 80066c8:	4632      	mov	r2, r6
 80066ca:	4604      	mov	r4, r0
 80066cc:	460d      	mov	r5, r1
 80066ce:	463b      	mov	r3, r7
 80066d0:	4640      	mov	r0, r8
 80066d2:	4649      	mov	r1, r9
 80066d4:	f7f9 ff00 	bl	80004d8 <__aeabi_dmul>
 80066d8:	4632      	mov	r2, r6
 80066da:	463b      	mov	r3, r7
 80066dc:	f7f9 fd46 	bl	800016c <__adddf3>
 80066e0:	4602      	mov	r2, r0
 80066e2:	460b      	mov	r3, r1
 80066e4:	4620      	mov	r0, r4
 80066e6:	4629      	mov	r1, r5
 80066e8:	f7f9 fd3e 	bl	8000168 <__aeabi_dsub>
 80066ec:	4642      	mov	r2, r8
 80066ee:	464b      	mov	r3, r9
 80066f0:	f7f9 fd3a 	bl	8000168 <__aeabi_dsub>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	2000      	movs	r0, #0
 80066fa:	4938      	ldr	r1, [pc, #224]	@ (80067dc <__ieee754_pow+0xa3c>)
 80066fc:	f7f9 fd34 	bl	8000168 <__aeabi_dsub>
 8006700:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006704:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8006708:	da2e      	bge.n	8006768 <__ieee754_pow+0x9c8>
 800670a:	4652      	mov	r2, sl
 800670c:	f000 f874 	bl	80067f8 <scalbn>
 8006710:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006714:	f7ff bbed 	b.w	8005ef2 <__ieee754_pow+0x152>
 8006718:	4c31      	ldr	r4, [pc, #196]	@ (80067e0 <__ieee754_pow+0xa40>)
 800671a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800671e:	42a3      	cmp	r3, r4
 8006720:	d91a      	bls.n	8006758 <__ieee754_pow+0x9b8>
 8006722:	4b30      	ldr	r3, [pc, #192]	@ (80067e4 <__ieee754_pow+0xa44>)
 8006724:	440b      	add	r3, r1
 8006726:	4303      	orrs	r3, r0
 8006728:	d009      	beq.n	800673e <__ieee754_pow+0x99e>
 800672a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800672e:	2200      	movs	r2, #0
 8006730:	2300      	movs	r3, #0
 8006732:	f7fa f943 	bl	80009bc <__aeabi_dcmplt>
 8006736:	3800      	subs	r0, #0
 8006738:	bf18      	it	ne
 800673a:	2001      	movne	r0, #1
 800673c:	e444      	b.n	8005fc8 <__ieee754_pow+0x228>
 800673e:	4642      	mov	r2, r8
 8006740:	464b      	mov	r3, r9
 8006742:	f7f9 fd11 	bl	8000168 <__aeabi_dsub>
 8006746:	4632      	mov	r2, r6
 8006748:	463b      	mov	r3, r7
 800674a:	f7fa f94b 	bl	80009e4 <__aeabi_dcmpge>
 800674e:	2800      	cmp	r0, #0
 8006750:	d1eb      	bne.n	800672a <__ieee754_pow+0x98a>
 8006752:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80067e8 <__ieee754_pow+0xa48>
 8006756:	e6fd      	b.n	8006554 <__ieee754_pow+0x7b4>
 8006758:	469a      	mov	sl, r3
 800675a:	4b24      	ldr	r3, [pc, #144]	@ (80067ec <__ieee754_pow+0xa4c>)
 800675c:	459a      	cmp	sl, r3
 800675e:	f63f aef9 	bhi.w	8006554 <__ieee754_pow+0x7b4>
 8006762:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006766:	e71b      	b.n	80065a0 <__ieee754_pow+0x800>
 8006768:	4621      	mov	r1, r4
 800676a:	e7d1      	b.n	8006710 <__ieee754_pow+0x970>
 800676c:	2000      	movs	r0, #0
 800676e:	491b      	ldr	r1, [pc, #108]	@ (80067dc <__ieee754_pow+0xa3c>)
 8006770:	f7ff bb34 	b.w	8005ddc <__ieee754_pow+0x3c>
 8006774:	2000      	movs	r0, #0
 8006776:	2100      	movs	r1, #0
 8006778:	f7ff bb30 	b.w	8005ddc <__ieee754_pow+0x3c>
 800677c:	4650      	mov	r0, sl
 800677e:	4659      	mov	r1, fp
 8006780:	f7ff bb2c 	b.w	8005ddc <__ieee754_pow+0x3c>
 8006784:	460c      	mov	r4, r1
 8006786:	f7ff bb79 	b.w	8005e7c <__ieee754_pow+0xdc>
 800678a:	2400      	movs	r4, #0
 800678c:	f7ff bb64 	b.w	8005e58 <__ieee754_pow+0xb8>
 8006790:	652b82fe 	.word	0x652b82fe
 8006794:	3c971547 	.word	0x3c971547
 8006798:	00000000 	.word	0x00000000
 800679c:	3fe62e43 	.word	0x3fe62e43
 80067a0:	fefa39ef 	.word	0xfefa39ef
 80067a4:	3fe62e42 	.word	0x3fe62e42
 80067a8:	0ca86c39 	.word	0x0ca86c39
 80067ac:	be205c61 	.word	0xbe205c61
 80067b0:	72bea4d0 	.word	0x72bea4d0
 80067b4:	3e663769 	.word	0x3e663769
 80067b8:	c5d26bf1 	.word	0xc5d26bf1
 80067bc:	3ebbbd41 	.word	0x3ebbbd41
 80067c0:	af25de2c 	.word	0xaf25de2c
 80067c4:	3f11566a 	.word	0x3f11566a
 80067c8:	16bebd93 	.word	0x16bebd93
 80067cc:	3f66c16c 	.word	0x3f66c16c
 80067d0:	5555553e 	.word	0x5555553e
 80067d4:	3fc55555 	.word	0x3fc55555
 80067d8:	fff00000 	.word	0xfff00000
 80067dc:	3ff00000 	.word	0x3ff00000
 80067e0:	4090cbff 	.word	0x4090cbff
 80067e4:	3f6f3400 	.word	0x3f6f3400
 80067e8:	4090cc00 	.word	0x4090cc00
 80067ec:	3fe00000 	.word	0x3fe00000

080067f0 <fabs>:
 80067f0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80067f4:	4619      	mov	r1, r3
 80067f6:	4770      	bx	lr

080067f8 <scalbn>:
 80067f8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80067fc:	4616      	mov	r6, r2
 80067fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006802:	4683      	mov	fp, r0
 8006804:	468c      	mov	ip, r1
 8006806:	460b      	mov	r3, r1
 8006808:	b982      	cbnz	r2, 800682c <scalbn+0x34>
 800680a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800680e:	4303      	orrs	r3, r0
 8006810:	d039      	beq.n	8006886 <scalbn+0x8e>
 8006812:	4b2f      	ldr	r3, [pc, #188]	@ (80068d0 <scalbn+0xd8>)
 8006814:	2200      	movs	r2, #0
 8006816:	f7f9 fe5f 	bl	80004d8 <__aeabi_dmul>
 800681a:	4b2e      	ldr	r3, [pc, #184]	@ (80068d4 <scalbn+0xdc>)
 800681c:	4683      	mov	fp, r0
 800681e:	429e      	cmp	r6, r3
 8006820:	468c      	mov	ip, r1
 8006822:	da0d      	bge.n	8006840 <scalbn+0x48>
 8006824:	a326      	add	r3, pc, #152	@ (adr r3, 80068c0 <scalbn+0xc8>)
 8006826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682a:	e01b      	b.n	8006864 <scalbn+0x6c>
 800682c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8006830:	42ba      	cmp	r2, r7
 8006832:	d109      	bne.n	8006848 <scalbn+0x50>
 8006834:	4602      	mov	r2, r0
 8006836:	f7f9 fc99 	bl	800016c <__adddf3>
 800683a:	4683      	mov	fp, r0
 800683c:	468c      	mov	ip, r1
 800683e:	e022      	b.n	8006886 <scalbn+0x8e>
 8006840:	460b      	mov	r3, r1
 8006842:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006846:	3a36      	subs	r2, #54	@ 0x36
 8006848:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800684c:	428e      	cmp	r6, r1
 800684e:	dd0c      	ble.n	800686a <scalbn+0x72>
 8006850:	a31d      	add	r3, pc, #116	@ (adr r3, 80068c8 <scalbn+0xd0>)
 8006852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006856:	461c      	mov	r4, r3
 8006858:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800685c:	f361 74df 	bfi	r4, r1, #31, #1
 8006860:	4621      	mov	r1, r4
 8006862:	481d      	ldr	r0, [pc, #116]	@ (80068d8 <scalbn+0xe0>)
 8006864:	f7f9 fe38 	bl	80004d8 <__aeabi_dmul>
 8006868:	e7e7      	b.n	800683a <scalbn+0x42>
 800686a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800686e:	4432      	add	r2, r6
 8006870:	428a      	cmp	r2, r1
 8006872:	dced      	bgt.n	8006850 <scalbn+0x58>
 8006874:	2a00      	cmp	r2, #0
 8006876:	dd0a      	ble.n	800688e <scalbn+0x96>
 8006878:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800687c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006880:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006884:	46ac      	mov	ip, r5
 8006886:	4658      	mov	r0, fp
 8006888:	4661      	mov	r1, ip
 800688a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800688e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006892:	da09      	bge.n	80068a8 <scalbn+0xb0>
 8006894:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8006898:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800689c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80068a0:	480e      	ldr	r0, [pc, #56]	@ (80068dc <scalbn+0xe4>)
 80068a2:	f041 011f 	orr.w	r1, r1, #31
 80068a6:	e7bd      	b.n	8006824 <scalbn+0x2c>
 80068a8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80068ac:	3236      	adds	r2, #54	@ 0x36
 80068ae:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80068b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80068b6:	4658      	mov	r0, fp
 80068b8:	4629      	mov	r1, r5
 80068ba:	2200      	movs	r2, #0
 80068bc:	4b08      	ldr	r3, [pc, #32]	@ (80068e0 <scalbn+0xe8>)
 80068be:	e7d1      	b.n	8006864 <scalbn+0x6c>
 80068c0:	c2f8f359 	.word	0xc2f8f359
 80068c4:	01a56e1f 	.word	0x01a56e1f
 80068c8:	8800759c 	.word	0x8800759c
 80068cc:	7e37e43c 	.word	0x7e37e43c
 80068d0:	43500000 	.word	0x43500000
 80068d4:	ffff3cb0 	.word	0xffff3cb0
 80068d8:	8800759c 	.word	0x8800759c
 80068dc:	c2f8f359 	.word	0xc2f8f359
 80068e0:	3c900000 	.word	0x3c900000

080068e4 <with_errno>:
 80068e4:	b570      	push	{r4, r5, r6, lr}
 80068e6:	4604      	mov	r4, r0
 80068e8:	460d      	mov	r5, r1
 80068ea:	4616      	mov	r6, r2
 80068ec:	f7fd fb0e 	bl	8003f0c <__errno>
 80068f0:	4629      	mov	r1, r5
 80068f2:	6006      	str	r6, [r0, #0]
 80068f4:	4620      	mov	r0, r4
 80068f6:	bd70      	pop	{r4, r5, r6, pc}

080068f8 <xflow>:
 80068f8:	b513      	push	{r0, r1, r4, lr}
 80068fa:	4604      	mov	r4, r0
 80068fc:	4619      	mov	r1, r3
 80068fe:	4610      	mov	r0, r2
 8006900:	b10c      	cbz	r4, 8006906 <xflow+0xe>
 8006902:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006906:	e9cd 2300 	strd	r2, r3, [sp]
 800690a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800690e:	f7f9 fde3 	bl	80004d8 <__aeabi_dmul>
 8006912:	2222      	movs	r2, #34	@ 0x22
 8006914:	b002      	add	sp, #8
 8006916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800691a:	f7ff bfe3 	b.w	80068e4 <with_errno>

0800691e <__math_uflow>:
 800691e:	2200      	movs	r2, #0
 8006920:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006924:	f7ff bfe8 	b.w	80068f8 <xflow>

08006928 <__math_oflow>:
 8006928:	2200      	movs	r2, #0
 800692a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800692e:	f7ff bfe3 	b.w	80068f8 <xflow>
	...

08006934 <__ieee754_sqrt>:
 8006934:	4a67      	ldr	r2, [pc, #412]	@ (8006ad4 <__ieee754_sqrt+0x1a0>)
 8006936:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693a:	438a      	bics	r2, r1
 800693c:	4606      	mov	r6, r0
 800693e:	460f      	mov	r7, r1
 8006940:	460b      	mov	r3, r1
 8006942:	4604      	mov	r4, r0
 8006944:	d10e      	bne.n	8006964 <__ieee754_sqrt+0x30>
 8006946:	4602      	mov	r2, r0
 8006948:	f7f9 fdc6 	bl	80004d8 <__aeabi_dmul>
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4630      	mov	r0, r6
 8006952:	4639      	mov	r1, r7
 8006954:	f7f9 fc0a 	bl	800016c <__adddf3>
 8006958:	4606      	mov	r6, r0
 800695a:	460f      	mov	r7, r1
 800695c:	4630      	mov	r0, r6
 800695e:	4639      	mov	r1, r7
 8006960:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006964:	2900      	cmp	r1, #0
 8006966:	dc0c      	bgt.n	8006982 <__ieee754_sqrt+0x4e>
 8006968:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800696c:	4302      	orrs	r2, r0
 800696e:	d0f5      	beq.n	800695c <__ieee754_sqrt+0x28>
 8006970:	b189      	cbz	r1, 8006996 <__ieee754_sqrt+0x62>
 8006972:	4602      	mov	r2, r0
 8006974:	f7f9 fbf8 	bl	8000168 <__aeabi_dsub>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	f7f9 fed6 	bl	800072c <__aeabi_ddiv>
 8006980:	e7ea      	b.n	8006958 <__ieee754_sqrt+0x24>
 8006982:	150a      	asrs	r2, r1, #20
 8006984:	d115      	bne.n	80069b2 <__ieee754_sqrt+0x7e>
 8006986:	2100      	movs	r1, #0
 8006988:	e009      	b.n	800699e <__ieee754_sqrt+0x6a>
 800698a:	0ae3      	lsrs	r3, r4, #11
 800698c:	3a15      	subs	r2, #21
 800698e:	0564      	lsls	r4, r4, #21
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0fa      	beq.n	800698a <__ieee754_sqrt+0x56>
 8006994:	e7f7      	b.n	8006986 <__ieee754_sqrt+0x52>
 8006996:	460a      	mov	r2, r1
 8006998:	e7fa      	b.n	8006990 <__ieee754_sqrt+0x5c>
 800699a:	005b      	lsls	r3, r3, #1
 800699c:	3101      	adds	r1, #1
 800699e:	02d8      	lsls	r0, r3, #11
 80069a0:	d5fb      	bpl.n	800699a <__ieee754_sqrt+0x66>
 80069a2:	1e48      	subs	r0, r1, #1
 80069a4:	1a12      	subs	r2, r2, r0
 80069a6:	f1c1 0020 	rsb	r0, r1, #32
 80069aa:	fa24 f000 	lsr.w	r0, r4, r0
 80069ae:	4303      	orrs	r3, r0
 80069b0:	408c      	lsls	r4, r1
 80069b2:	2600      	movs	r6, #0
 80069b4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80069b8:	2116      	movs	r1, #22
 80069ba:	07d2      	lsls	r2, r2, #31
 80069bc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80069c0:	4632      	mov	r2, r6
 80069c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069ca:	bf5c      	itt	pl
 80069cc:	005b      	lslpl	r3, r3, #1
 80069ce:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80069d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80069d6:	bf58      	it	pl
 80069d8:	0064      	lslpl	r4, r4, #1
 80069da:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80069de:	107f      	asrs	r7, r7, #1
 80069e0:	0064      	lsls	r4, r4, #1
 80069e2:	1815      	adds	r5, r2, r0
 80069e4:	429d      	cmp	r5, r3
 80069e6:	bfde      	ittt	le
 80069e8:	182a      	addle	r2, r5, r0
 80069ea:	1b5b      	suble	r3, r3, r5
 80069ec:	1836      	addle	r6, r6, r0
 80069ee:	0fe5      	lsrs	r5, r4, #31
 80069f0:	3901      	subs	r1, #1
 80069f2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80069f6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80069fa:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80069fe:	d1f0      	bne.n	80069e2 <__ieee754_sqrt+0xae>
 8006a00:	460d      	mov	r5, r1
 8006a02:	f04f 0a20 	mov.w	sl, #32
 8006a06:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	eb01 0c00 	add.w	ip, r1, r0
 8006a10:	db02      	blt.n	8006a18 <__ieee754_sqrt+0xe4>
 8006a12:	d113      	bne.n	8006a3c <__ieee754_sqrt+0x108>
 8006a14:	45a4      	cmp	ip, r4
 8006a16:	d811      	bhi.n	8006a3c <__ieee754_sqrt+0x108>
 8006a18:	f1bc 0f00 	cmp.w	ip, #0
 8006a1c:	eb0c 0100 	add.w	r1, ip, r0
 8006a20:	da42      	bge.n	8006aa8 <__ieee754_sqrt+0x174>
 8006a22:	2900      	cmp	r1, #0
 8006a24:	db40      	blt.n	8006aa8 <__ieee754_sqrt+0x174>
 8006a26:	f102 0e01 	add.w	lr, r2, #1
 8006a2a:	1a9b      	subs	r3, r3, r2
 8006a2c:	4672      	mov	r2, lr
 8006a2e:	45a4      	cmp	ip, r4
 8006a30:	bf88      	it	hi
 8006a32:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8006a36:	eba4 040c 	sub.w	r4, r4, ip
 8006a3a:	4405      	add	r5, r0
 8006a3c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8006a40:	f1ba 0a01 	subs.w	sl, sl, #1
 8006a44:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8006a48:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006a4c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006a50:	d1db      	bne.n	8006a0a <__ieee754_sqrt+0xd6>
 8006a52:	431c      	orrs	r4, r3
 8006a54:	d01a      	beq.n	8006a8c <__ieee754_sqrt+0x158>
 8006a56:	4c20      	ldr	r4, [pc, #128]	@ (8006ad8 <__ieee754_sqrt+0x1a4>)
 8006a58:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8006adc <__ieee754_sqrt+0x1a8>
 8006a5c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006a60:	e9db 2300 	ldrd	r2, r3, [fp]
 8006a64:	f7f9 fb80 	bl	8000168 <__aeabi_dsub>
 8006a68:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4640      	mov	r0, r8
 8006a72:	4649      	mov	r1, r9
 8006a74:	f7f9 ffac 	bl	80009d0 <__aeabi_dcmple>
 8006a78:	b140      	cbz	r0, 8006a8c <__ieee754_sqrt+0x158>
 8006a7a:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006a7e:	e9db 2300 	ldrd	r2, r3, [fp]
 8006a82:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8006a86:	d111      	bne.n	8006aac <__ieee754_sqrt+0x178>
 8006a88:	4655      	mov	r5, sl
 8006a8a:	3601      	adds	r6, #1
 8006a8c:	1072      	asrs	r2, r6, #1
 8006a8e:	086b      	lsrs	r3, r5, #1
 8006a90:	07f1      	lsls	r1, r6, #31
 8006a92:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006a96:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006a9a:	bf48      	it	mi
 8006a9c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8006aa6:	e757      	b.n	8006958 <__ieee754_sqrt+0x24>
 8006aa8:	4696      	mov	lr, r2
 8006aaa:	e7be      	b.n	8006a2a <__ieee754_sqrt+0xf6>
 8006aac:	f7f9 fb5e 	bl	800016c <__adddf3>
 8006ab0:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4640      	mov	r0, r8
 8006aba:	4649      	mov	r1, r9
 8006abc:	f7f9 ff7e 	bl	80009bc <__aeabi_dcmplt>
 8006ac0:	b120      	cbz	r0, 8006acc <__ieee754_sqrt+0x198>
 8006ac2:	1ca8      	adds	r0, r5, #2
 8006ac4:	bf08      	it	eq
 8006ac6:	3601      	addeq	r6, #1
 8006ac8:	3502      	adds	r5, #2
 8006aca:	e7df      	b.n	8006a8c <__ieee754_sqrt+0x158>
 8006acc:	1c6b      	adds	r3, r5, #1
 8006ace:	f023 0501 	bic.w	r5, r3, #1
 8006ad2:	e7db      	b.n	8006a8c <__ieee754_sqrt+0x158>
 8006ad4:	7ff00000 	.word	0x7ff00000
 8006ad8:	200001e0 	.word	0x200001e0
 8006adc:	200001d8 	.word	0x200001d8

08006ae0 <_init>:
 8006ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae2:	bf00      	nop
 8006ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ae6:	bc08      	pop	{r3}
 8006ae8:	469e      	mov	lr, r3
 8006aea:	4770      	bx	lr

08006aec <_fini>:
 8006aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aee:	bf00      	nop
 8006af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af2:	bc08      	pop	{r3}
 8006af4:	469e      	mov	lr, r3
 8006af6:	4770      	bx	lr
