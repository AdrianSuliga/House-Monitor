
House_Monitor_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e70  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08008f80  08008f80  00009f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093e0  080093e0  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  080093e0  080093e0  0000a3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093e8  080093e8  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093e8  080093e8  0000a3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093ec  080093ec  0000a3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  080093f0  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  200001e8  080095d8  0000b1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  080095d8  0000b480  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001305f  00000000  00000000  0000b211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003498  00000000  00000000  0001e270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  00021708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f02  00000000  00000000  00022a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1b0  00000000  00000000  0002395a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184cd  00000000  00000000  0003eb0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000967a2  00000000  00000000  00056fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed779  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006334  00000000  00000000  000ed7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000f3af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008f68 	.word	0x08008f68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008f68 	.word	0x08008f68

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <MX_ADC1_Init+0x74>)
 8000ff6:	4a19      	ldr	r2, [pc, #100]	@ (800105c <MX_ADC1_Init+0x78>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <MX_ADC1_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001000:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <MX_ADC1_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001006:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <MX_ADC1_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <MX_ADC1_Init+0x74>)
 800100e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001012:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001014:	4b10      	ldr	r3, [pc, #64]	@ (8001058 <MX_ADC1_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <MX_ADC1_Init+0x74>)
 800101c:	2201      	movs	r2, #1
 800101e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001020:	480d      	ldr	r0, [pc, #52]	@ (8001058 <MX_ADC1_Init+0x74>)
 8001022:	f000 fef7 	bl	8001e14 <HAL_ADC_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800102c:	f000 fbfd 	bl	800182a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001034:	2301      	movs	r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	@ (8001058 <MX_ADC1_Init+0x74>)
 8001042:	f001 f97f 	bl	8002344 <HAL_ADC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800104c:	f000 fbed 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000204 	.word	0x20000204
 800105c:	40012400 	.word	0x40012400

08001060 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a14      	ldr	r2, [pc, #80]	@ (80010cc <HAL_ADC_MspInit+0x6c>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d121      	bne.n	80010c4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001080:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a0c      	ldr	r2, [pc, #48]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010b0:	2301      	movs	r3, #1
 80010b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b4:	2303      	movs	r3, #3
 80010b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4619      	mov	r1, r3
 80010be:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <HAL_ADC_MspInit+0x74>)
 80010c0:	f001 fc66 	bl	8002990 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40012400 	.word	0x40012400
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010800 	.word	0x40010800

080010d8 <US_Delay>:
#include "gpio.h"
#include "main.h"
#include "tim.h"

static void US_Delay(const uint16_t time)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80010e2:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <US_Delay+0x2c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < time);
 80010ea:	bf00      	nop
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <US_Delay+0x2c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d3f9      	bcc.n	80010ec <US_Delay+0x14>
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	200002a0 	.word	0x200002a0

08001108 <DHT11_Send_Start>:

static void DHT11_Send_Start(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2101      	movs	r1, #1
 8001110:	4808      	ldr	r0, [pc, #32]	@ (8001134 <DHT11_Send_Start+0x2c>)
 8001112:	f001 fdd8 	bl	8002cc6 <HAL_GPIO_WritePin>
	US_Delay(18000);
 8001116:	f244 6050 	movw	r0, #18000	@ 0x4650
 800111a:	f7ff ffdd 	bl	80010d8 <US_Delay>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 800111e:	2201      	movs	r2, #1
 8001120:	2101      	movs	r1, #1
 8001122:	4804      	ldr	r0, [pc, #16]	@ (8001134 <DHT11_Send_Start+0x2c>)
 8001124:	f001 fdcf 	bl	8002cc6 <HAL_GPIO_WritePin>
	US_Delay(40);
 8001128:	2028      	movs	r0, #40	@ 0x28
 800112a:	f7ff ffd5 	bl	80010d8 <US_Delay>
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40011000 	.word	0x40011000

08001138 <DHT11_Read_Byte>:

static uint8_t DHT11_Read_Byte(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
	uint8_t read_data = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	71fb      	strb	r3, [r7, #7]

	for (int i = 0; i < 8; i++) {
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	e027      	b.n	8001198 <DHT11_Read_Byte+0x60>
		while (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_RESET);
 8001148:	bf00      	nop
 800114a:	2101      	movs	r1, #1
 800114c:	4816      	ldr	r0, [pc, #88]	@ (80011a8 <DHT11_Read_Byte+0x70>)
 800114e:	f001 fda3 	bl	8002c98 <HAL_GPIO_ReadPin>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0f8      	beq.n	800114a <DHT11_Read_Byte+0x12>

		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001158:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <DHT11_Read_Byte+0x74>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	@ 0x24
		while (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_SET);
 8001160:	bf00      	nop
 8001162:	2101      	movs	r1, #1
 8001164:	4810      	ldr	r0, [pc, #64]	@ (80011a8 <DHT11_Read_Byte+0x70>)
 8001166:	f001 fd97 	bl	8002c98 <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b01      	cmp	r3, #1
 800116e:	d0f8      	beq.n	8001162 <DHT11_Read_Byte+0x2a>

		if (__HAL_TIM_GET_COUNTER(&htim2) > 50) {
 8001170:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <DHT11_Read_Byte+0x74>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001176:	2b32      	cmp	r3, #50	@ 0x32
 8001178:	d90b      	bls.n	8001192 <DHT11_Read_Byte+0x5a>
			read_data |= 1 << (7 - i);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	f1c3 0307 	rsb	r3, r3, #7
 8001180:	2201      	movs	r2, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	b25a      	sxtb	r2, r3
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	4313      	orrs	r3, r2
 800118e:	b25b      	sxtb	r3, r3
 8001190:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; i++) {
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	3301      	adds	r3, #1
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	2b07      	cmp	r3, #7
 800119c:	ddd4      	ble.n	8001148 <DHT11_Read_Byte+0x10>
		}
	}

	return read_data;
 800119e:	79fb      	ldrb	r3, [r7, #7]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40011000 	.word	0x40011000
 80011ac:	200002a0 	.word	0x200002a0

080011b0 <DHT11_Read>:

HAL_StatusTypeDef DHT11_Read(uint8_t* values)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	uint8_t check_sum = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	73fb      	strb	r3, [r7, #15]

	DHT11_Send_Start();
 80011bc:	f7ff ffa4 	bl	8001108 <DHT11_Send_Start>

	if (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_RESET) {
 80011c0:	2101      	movs	r1, #1
 80011c2:	4821      	ldr	r0, [pc, #132]	@ (8001248 <DHT11_Read+0x98>)
 80011c4:	f001 fd68 	bl	8002c98 <HAL_GPIO_ReadPin>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d121      	bne.n	8001212 <DHT11_Read+0x62>
		US_Delay(80);
 80011ce:	2050      	movs	r0, #80	@ 0x50
 80011d0:	f7ff ff82 	bl	80010d8 <US_Delay>
		if (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_SET) {
 80011d4:	2101      	movs	r1, #1
 80011d6:	481c      	ldr	r0, [pc, #112]	@ (8001248 <DHT11_Read+0x98>)
 80011d8:	f001 fd5e 	bl	8002c98 <HAL_GPIO_ReadPin>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d119      	bne.n	8001216 <DHT11_Read+0x66>
			US_Delay(80);
 80011e2:	2050      	movs	r0, #80	@ 0x50
 80011e4:	f7ff ff78 	bl	80010d8 <US_Delay>
			for (uint8_t i = 0; i < 4; i++) {
 80011e8:	2300      	movs	r3, #0
 80011ea:	73bb      	strb	r3, [r7, #14]
 80011ec:	e009      	b.n	8001202 <DHT11_Read+0x52>
				values[i] = DHT11_Read_Byte();
 80011ee:	7bbb      	ldrb	r3, [r7, #14]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	18d4      	adds	r4, r2, r3
 80011f4:	f7ff ffa0 	bl	8001138 <DHT11_Read_Byte>
 80011f8:	4603      	mov	r3, r0
 80011fa:	7023      	strb	r3, [r4, #0]
			for (uint8_t i = 0; i < 4; i++) {
 80011fc:	7bbb      	ldrb	r3, [r7, #14]
 80011fe:	3301      	adds	r3, #1
 8001200:	73bb      	strb	r3, [r7, #14]
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	2b03      	cmp	r3, #3
 8001206:	d9f2      	bls.n	80011ee <DHT11_Read+0x3e>
			}
			check_sum = DHT11_Read_Byte();
 8001208:	f7ff ff96 	bl	8001138 <DHT11_Read_Byte>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]
 8001210:	e001      	b.n	8001216 <DHT11_Read+0x66>
		}
	} else {
		return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e014      	b.n	8001240 <DHT11_Read+0x90>
	}

	if (values[0] + values[1] + values[2] + values[3] == check_sum) {
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3301      	adds	r3, #1
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	3202      	adds	r2, #2
 8001228:	7812      	ldrb	r2, [r2, #0]
 800122a:	4413      	add	r3, r2
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	3203      	adds	r2, #3
 8001230:	7812      	ldrb	r2, [r2, #0]
 8001232:	441a      	add	r2, r3
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	429a      	cmp	r2, r3
 8001238:	d101      	bne.n	800123e <DHT11_Read+0x8e>
		return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <DHT11_Read+0x90>
	} else {
		return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
	}
}
 8001240:	4618      	mov	r0, r3
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	bd90      	pop	{r4, r7, pc}
 8001248:	40011000 	.word	0x40011000

0800124c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001260:	4b2d      	ldr	r3, [pc, #180]	@ (8001318 <MX_GPIO_Init+0xcc>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a2c      	ldr	r2, [pc, #176]	@ (8001318 <MX_GPIO_Init+0xcc>)
 8001266:	f043 0310 	orr.w	r3, r3, #16
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b2a      	ldr	r3, [pc, #168]	@ (8001318 <MX_GPIO_Init+0xcc>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	4b27      	ldr	r3, [pc, #156]	@ (8001318 <MX_GPIO_Init+0xcc>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a26      	ldr	r2, [pc, #152]	@ (8001318 <MX_GPIO_Init+0xcc>)
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b24      	ldr	r3, [pc, #144]	@ (8001318 <MX_GPIO_Init+0xcc>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001290:	4b21      	ldr	r3, [pc, #132]	@ (8001318 <MX_GPIO_Init+0xcc>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a20      	ldr	r2, [pc, #128]	@ (8001318 <MX_GPIO_Init+0xcc>)
 8001296:	f043 0308 	orr.w	r3, r3, #8
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b1e      	ldr	r3, [pc, #120]	@ (8001318 <MX_GPIO_Init+0xcc>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2101      	movs	r1, #1
 80012ac:	481b      	ldr	r0, [pc, #108]	@ (800131c <MX_GPIO_Init+0xd0>)
 80012ae:	f001 fd0a 	bl	8002cc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2120      	movs	r1, #32
 80012b6:	481a      	ldr	r0, [pc, #104]	@ (8001320 <MX_GPIO_Init+0xd4>)
 80012b8:	f001 fd05 	bl	8002cc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80012bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	4619      	mov	r1, r3
 80012d0:	4812      	ldr	r0, [pc, #72]	@ (800131c <MX_GPIO_Init+0xd0>)
 80012d2:	f001 fb5d 	bl	8002990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80012d6:	2301      	movs	r3, #1
 80012d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012da:	2311      	movs	r3, #17
 80012dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2302      	movs	r3, #2
 80012e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	4619      	mov	r1, r3
 80012ec:	480b      	ldr	r0, [pc, #44]	@ (800131c <MX_GPIO_Init+0xd0>)
 80012ee:	f001 fb4f 	bl	8002990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012f2:	2320      	movs	r3, #32
 80012f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2302      	movs	r3, #2
 8001300:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	@ (8001320 <MX_GPIO_Init+0xd4>)
 800130a:	f001 fb41 	bl	8002990 <HAL_GPIO_Init>

}
 800130e:	bf00      	nop
 8001310:	3720      	adds	r7, #32
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	40011000 	.word	0x40011000
 8001320:	40010800 	.word	0x40010800

08001324 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <MX_I2C1_Init+0x50>)
 800132a:	4a13      	ldr	r2, [pc, #76]	@ (8001378 <MX_I2C1_Init+0x54>)
 800132c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800132e:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <MX_I2C1_Init+0x50>)
 8001330:	4a12      	ldr	r2, [pc, #72]	@ (800137c <MX_I2C1_Init+0x58>)
 8001332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001334:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <MX_I2C1_Init+0x50>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <MX_I2C1_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <MX_I2C1_Init+0x50>)
 8001342:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001346:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001348:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <MX_I2C1_Init+0x50>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <MX_I2C1_Init+0x50>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001354:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <MX_I2C1_Init+0x50>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <MX_I2C1_Init+0x50>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001360:	4804      	ldr	r0, [pc, #16]	@ (8001374 <MX_I2C1_Init+0x50>)
 8001362:	f001 fcc9 	bl	8002cf8 <HAL_I2C_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800136c:	f000 fa5d 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000234 	.word	0x20000234
 8001378:	40005400 	.word	0x40005400
 800137c:	000186a0 	.word	0x000186a0

08001380 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a15      	ldr	r2, [pc, #84]	@ (80013f0 <HAL_I2C_MspInit+0x70>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d123      	bne.n	80013e8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a0:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <HAL_I2C_MspInit+0x74>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a13      	ldr	r2, [pc, #76]	@ (80013f4 <HAL_I2C_MspInit+0x74>)
 80013a6:	f043 0308 	orr.w	r3, r3, #8
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <HAL_I2C_MspInit+0x74>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013b8:	23c0      	movs	r3, #192	@ 0xc0
 80013ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013bc:	2312      	movs	r3, #18
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	4619      	mov	r1, r3
 80013ca:	480b      	ldr	r0, [pc, #44]	@ (80013f8 <HAL_I2C_MspInit+0x78>)
 80013cc:	f001 fae0 	bl	8002990 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <HAL_I2C_MspInit+0x74>)
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	4a07      	ldr	r2, [pc, #28]	@ (80013f4 <HAL_I2C_MspInit+0x74>)
 80013d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013da:	61d3      	str	r3, [r2, #28]
 80013dc:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <HAL_I2C_MspInit+0x74>)
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013e8:	bf00      	nop
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40005400 	.word	0x40005400
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010c00 	.word	0x40010c00

080013fc <LPS_Read_Register>:
#define TIMEOUT 100
#define HEIGHT_OVER_SEE_LEVEL 247
#define PRESSURE_CONSTANT 0.034162608734308

static uint8_t LPS_Read_Register(uint8_t reg)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af04      	add	r7, sp, #16
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
	uint8_t val = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1, LPS_ADDR, reg, 1, &val, sizeof(val), TIMEOUT);
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	b29a      	uxth	r2, r3
 800140e:	2364      	movs	r3, #100	@ 0x64
 8001410:	9302      	str	r3, [sp, #8]
 8001412:	2301      	movs	r3, #1
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	f107 030f 	add.w	r3, r7, #15
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	21ba      	movs	r1, #186	@ 0xba
 8001420:	4803      	ldr	r0, [pc, #12]	@ (8001430 <LPS_Read_Register+0x34>)
 8001422:	f001 fea7 	bl	8003174 <HAL_I2C_Mem_Read>
	return val;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000234 	.word	0x20000234

08001434 <LPS_Write_Register>:

static void LPS_Write_Register(uint8_t reg, uint8_t value)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af04      	add	r7, sp, #16
 800143a:	4603      	mov	r3, r0
 800143c:	460a      	mov	r2, r1
 800143e:	71fb      	strb	r3, [r7, #7]
 8001440:	4613      	mov	r3, r2
 8001442:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, LPS_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	b29a      	uxth	r2, r3
 8001448:	2364      	movs	r3, #100	@ 0x64
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	2301      	movs	r3, #1
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	1dbb      	adds	r3, r7, #6
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2301      	movs	r3, #1
 8001456:	21ba      	movs	r1, #186	@ 0xba
 8001458:	4803      	ldr	r0, [pc, #12]	@ (8001468 <LPS_Write_Register+0x34>)
 800145a:	f001 fd91 	bl	8002f80 <HAL_I2C_Mem_Write>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000234 	.word	0x20000234

0800146c <LPS_Init>:

HAL_StatusTypeDef LPS_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	if (LPS_Read_Register(WHO_AM_I) != 0xBD)
 8001470:	200f      	movs	r0, #15
 8001472:	f7ff ffc3 	bl	80013fc <LPS_Read_Register>
 8001476:	4603      	mov	r3, r0
 8001478:	2bbd      	cmp	r3, #189	@ 0xbd
 800147a:	d001      	beq.n	8001480 <LPS_Init+0x14>
		return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e004      	b.n	800148a <LPS_Init+0x1e>

	LPS_Write_Register(CTRL_REG1, 0xC0);
 8001480:	21c0      	movs	r1, #192	@ 0xc0
 8001482:	2020      	movs	r0, #32
 8001484:	f7ff ffd6 	bl	8001434 <LPS_Write_Register>
	return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <LPS_Read_Temp>:
	LPS_Write_Register(RPDS_L, value);
	LPS_Write_Register(RPDS_H, value >> 8);
}

float LPS_Read_Temp(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af04      	add	r7, sp, #16
	int16_t temp = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	80fb      	strh	r3, [r7, #6]

	if (HAL_I2C_Mem_Read(&hi2c1, LPS_ADDR, TEMP_OUT_L | 0x80, 1, (uint8_t*)&temp, 2, TIMEOUT) != HAL_OK)
 800149a:	2364      	movs	r3, #100	@ 0x64
 800149c:	9302      	str	r3, [sp, #8]
 800149e:	2302      	movs	r3, #2
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	1dbb      	adds	r3, r7, #6
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2301      	movs	r3, #1
 80014a8:	22ab      	movs	r2, #171	@ 0xab
 80014aa:	21ba      	movs	r1, #186	@ 0xba
 80014ac:	480d      	ldr	r0, [pc, #52]	@ (80014e4 <LPS_Read_Temp+0x54>)
 80014ae:	f001 fe61 	bl	8003174 <HAL_I2C_Mem_Read>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <LPS_Read_Temp+0x2c>
		Error_Handler();
 80014b8:	f000 f9b7 	bl	800182a <Error_Handler>

	return 42.5f + temp / 480.0f;
 80014bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fbeb 	bl	8000c9c <__aeabi_i2f>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4907      	ldr	r1, [pc, #28]	@ (80014e8 <LPS_Read_Temp+0x58>)
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fcee 	bl	8000eac <__aeabi_fdiv>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4906      	ldr	r1, [pc, #24]	@ (80014ec <LPS_Read_Temp+0x5c>)
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fb2d 	bl	8000b34 <__addsf3>
 80014da:	4603      	mov	r3, r0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000234 	.word	0x20000234
 80014e8:	43f00000 	.word	0x43f00000
 80014ec:	422a0000 	.word	0x422a0000

080014f0 <LPS_Read_Pressure>:

float LPS_Read_Pressure(void)
{
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af04      	add	r7, sp, #16
	int32_t value = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	603b      	str	r3, [r7, #0]

	if (HAL_I2C_Mem_Read(&hi2c1, LPS_ADDR, PRESS_OUT_XL | 0x80, 1, (uint8_t*)&value, 3, TIMEOUT) != HAL_OK)
 80014fa:	2364      	movs	r3, #100	@ 0x64
 80014fc:	9302      	str	r3, [sp, #8]
 80014fe:	2303      	movs	r3, #3
 8001500:	9301      	str	r3, [sp, #4]
 8001502:	463b      	mov	r3, r7
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	2301      	movs	r3, #1
 8001508:	22a8      	movs	r2, #168	@ 0xa8
 800150a:	21ba      	movs	r1, #186	@ 0xba
 800150c:	4824      	ldr	r0, [pc, #144]	@ (80015a0 <LPS_Read_Pressure+0xb0>)
 800150e:	f001 fe31 	bl	8003174 <HAL_I2C_Mem_Read>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <LPS_Read_Pressure+0x2c>
		Error_Handler();
 8001518:	f000 f987 	bl	800182a <Error_Handler>

	float read_pressure = value / 4096.0f;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fbbc 	bl	8000c9c <__aeabi_i2f>
 8001524:	4603      	mov	r3, r0
 8001526:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fcbe 	bl	8000eac <__aeabi_fdiv>
 8001530:	4603      	mov	r3, r0
 8001532:	60fb      	str	r3, [r7, #12]
	float temp = LPS_Read_Temp() + 273.15f;
 8001534:	f7ff ffac 	bl	8001490 <LPS_Read_Temp>
 8001538:	4603      	mov	r3, r0
 800153a:	491a      	ldr	r1, [pc, #104]	@ (80015a4 <LPS_Read_Pressure+0xb4>)
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff faf9 	bl	8000b34 <__addsf3>
 8001542:	4603      	mov	r3, r0
 8001544:	60bb      	str	r3, [r7, #8]
	float actual_pressure = read_pressure * exp(PRESSURE_CONSTANT * HEIGHT_OVER_SEE_LEVEL / temp);
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f7fe ff6e 	bl	8000428 <__aeabi_f2d>
 800154c:	4604      	mov	r4, r0
 800154e:	460d      	mov	r5, r1
 8001550:	68b8      	ldr	r0, [r7, #8]
 8001552:	f7fe ff69 	bl	8000428 <__aeabi_f2d>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	a10f      	add	r1, pc, #60	@ (adr r1, 8001598 <LPS_Read_Pressure+0xa8>)
 800155c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001560:	f7ff f8e4 	bl	800072c <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f006 fc40 	bl	8007df0 <exp>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4620      	mov	r0, r4
 8001576:	4629      	mov	r1, r5
 8001578:	f7fe ffae 	bl	80004d8 <__aeabi_dmul>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f7ff fa80 	bl	8000a88 <__aeabi_d2f>
 8001588:	4603      	mov	r3, r0
 800158a:	607b      	str	r3, [r7, #4]
	return actual_pressure;
 800158c:	687b      	ldr	r3, [r7, #4]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bdb0      	pop	{r4, r5, r7, pc}
 8001596:	bf00      	nop
 8001598:	14226397 	.word	0x14226397
 800159c:	4020e057 	.word	0x4020e057
 80015a0:	20000234 	.word	0x20000234
 80015a4:	43889333 	.word	0x43889333

080015a8 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Redirecting chars in printf statements to USART2
int __io_putchar(int ch)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b0a      	cmp	r3, #10
 80015b4:	d102      	bne.n	80015bc <__io_putchar+0x14>
		__io_putchar('\r');
 80015b6:	200d      	movs	r0, #13
 80015b8:	f7ff fff6 	bl	80015a8 <__io_putchar>

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80015bc:	1d39      	adds	r1, r7, #4
 80015be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015c2:	2201      	movs	r2, #1
 80015c4:	4803      	ldr	r0, [pc, #12]	@ (80015d4 <__io_putchar+0x2c>)
 80015c6:	f003 fda1 	bl	800510c <HAL_UART_Transmit>
	return 1;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200002e8 	.word	0x200002e8

080015d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015dc:	b08e      	sub	sp, #56	@ 0x38
 80015de:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e0:	f000 fb92 	bl	8001d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e4:	f000 f8cc 	bl	8001780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e8:	f7ff fe30 	bl	800124c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015ec:	f000 faf2 	bl	8001bd4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80015f0:	f7ff fcf8 	bl	8000fe4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80015f4:	f7ff fe96 	bl	8001324 <MX_I2C1_Init>
  MX_RTC_Init();
 80015f8:	f000 f91e 	bl	8001838 <MX_RTC_Init>
  MX_TIM2_Init();
 80015fc:	f000 fa82 	bl	8001b04 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001600:	4857      	ldr	r0, [pc, #348]	@ (8001760 <main+0x188>)
 8001602:	f003 fabf 	bl	8004b84 <HAL_TIM_Base_Start>

  HAL_ADCEx_Calibration_Start(&hadc1);
 8001606:	4857      	ldr	r0, [pc, #348]	@ (8001764 <main+0x18c>)
 8001608:	f001 f830 	bl	800266c <HAL_ADCEx_Calibration_Start>

  if (LPS_Init() != HAL_OK)
 800160c:	f7ff ff2e 	bl	800146c <LPS_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <main+0x42>
	  Error_Handler();
 8001616:	f000 f908 	bl	800182a <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(100);
 800161a:	2064      	movs	r0, #100	@ 0x64
 800161c:	f000 fbd6 	bl	8001dcc <HAL_Delay>

  while (1)
  {
	  if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET)
 8001620:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001624:	4850      	ldr	r0, [pc, #320]	@ (8001768 <main+0x190>)
 8001626:	f001 fb37 	bl	8002c98 <HAL_GPIO_ReadPin>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f7      	bne.n	8001620 <main+0x48>
	  {
		  HAL_ADC_Start(&hadc1);
 8001630:	484c      	ldr	r0, [pc, #304]	@ (8001764 <main+0x18c>)
 8001632:	f000 fcc7 	bl	8001fc4 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001636:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800163a:	484a      	ldr	r0, [pc, #296]	@ (8001764 <main+0x18c>)
 800163c:	f000 fd70 	bl	8002120 <HAL_ADC_PollForConversion>

		  float photoresistor_voltage = HAL_ADC_GetValue(&hadc1) * SUPPLIED_VOLTAGE / 4096.0f;
 8001640:	4848      	ldr	r0, [pc, #288]	@ (8001764 <main+0x18c>)
 8001642:	f000 fe73 	bl	800232c <HAL_ADC_GetValue>
 8001646:	4603      	mov	r3, r0
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fb23 	bl	8000c94 <__aeabi_ui2f>
 800164e:	4603      	mov	r3, r0
 8001650:	4946      	ldr	r1, [pc, #280]	@ (800176c <main+0x194>)
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fb76 	bl	8000d44 <__aeabi_fmul>
 8001658:	4603      	mov	r3, r0
 800165a:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fc24 	bl	8000eac <__aeabi_fdiv>
 8001664:	4603      	mov	r3, r0
 8001666:	61fb      	str	r3, [r7, #28]
		  float photoresistor_resistance = FIXED_PHOTORESISTOR_RESISTANCE * (SUPPLIED_VOLTAGE / photoresistor_voltage - 1);
 8001668:	69f9      	ldr	r1, [r7, #28]
 800166a:	4840      	ldr	r0, [pc, #256]	@ (800176c <main+0x194>)
 800166c:	f7ff fc1e 	bl	8000eac <__aeabi_fdiv>
 8001670:	4603      	mov	r3, r0
 8001672:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fa5a 	bl	8000b30 <__aeabi_fsub>
 800167c:	4603      	mov	r3, r0
 800167e:	493c      	ldr	r1, [pc, #240]	@ (8001770 <main+0x198>)
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fb5f 	bl	8000d44 <__aeabi_fmul>
 8001686:	4603      	mov	r3, r0
 8001688:	61bb      	str	r3, [r7, #24]

		  float lux_level = PHOTORESISTOR_MULTIPLIER / pow(photoresistor_resistance, PHOTORESISTOR_EXPONENT);
 800168a:	69b8      	ldr	r0, [r7, #24]
 800168c:	f7fe fecc 	bl	8000428 <__aeabi_f2d>
 8001690:	a32f      	add	r3, pc, #188	@ (adr r3, 8001750 <main+0x178>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f006 fbe5 	bl	8007e64 <pow>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	a12e      	add	r1, pc, #184	@ (adr r1, 8001758 <main+0x180>)
 80016a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016a4:	f7ff f842 	bl	800072c <__aeabi_ddiv>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f7ff f9ea 	bl	8000a88 <__aeabi_d2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	617b      	str	r3, [r7, #20]
		  float light_percentage = photoresistor_voltage * 100.0f / SUPPLIED_VOLTAGE;
 80016b8:	492e      	ldr	r1, [pc, #184]	@ (8001774 <main+0x19c>)
 80016ba:	69f8      	ldr	r0, [r7, #28]
 80016bc:	f7ff fb42 	bl	8000d44 <__aeabi_fmul>
 80016c0:	4603      	mov	r3, r0
 80016c2:	492a      	ldr	r1, [pc, #168]	@ (800176c <main+0x194>)
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fbf1 	bl	8000eac <__aeabi_fdiv>
 80016ca:	4603      	mov	r3, r0
 80016cc:	613b      	str	r3, [r7, #16]

		  float temp = LPS_Read_Temp();
 80016ce:	f7ff fedf 	bl	8001490 <LPS_Read_Temp>
 80016d2:	60f8      	str	r0, [r7, #12]
		  float pressure = LPS_Read_Pressure();
 80016d4:	f7ff ff0c 	bl	80014f0 <LPS_Read_Pressure>
 80016d8:	60b8      	str	r0, [r7, #8]

		  uint8_t dht_vals[4] = {0};
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
		  if (DHT11_Read(dht_vals) != HAL_OK)
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fd65 	bl	80011b0 <DHT11_Read>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <main+0x118>
			  Error_Handler();
 80016ec:	f000 f89d 	bl	800182a <Error_Handler>

		  printf("P = %.2f %%, L = %.2f lux, T = %.1f C, p = %.1f hPa\n", light_percentage, lux_level, temp, pressure);
 80016f0:	6938      	ldr	r0, [r7, #16]
 80016f2:	f7fe fe99 	bl	8000428 <__aeabi_f2d>
 80016f6:	4682      	mov	sl, r0
 80016f8:	468b      	mov	fp, r1
 80016fa:	6978      	ldr	r0, [r7, #20]
 80016fc:	f7fe fe94 	bl	8000428 <__aeabi_f2d>
 8001700:	4604      	mov	r4, r0
 8001702:	460d      	mov	r5, r1
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f7fe fe8f 	bl	8000428 <__aeabi_f2d>
 800170a:	4680      	mov	r8, r0
 800170c:	4689      	mov	r9, r1
 800170e:	68b8      	ldr	r0, [r7, #8]
 8001710:	f7fe fe8a 	bl	8000428 <__aeabi_f2d>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800171c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001720:	e9cd 4500 	strd	r4, r5, [sp]
 8001724:	4652      	mov	r2, sl
 8001726:	465b      	mov	r3, fp
 8001728:	4813      	ldr	r0, [pc, #76]	@ (8001778 <main+0x1a0>)
 800172a:	f004 fbe1 	bl	8005ef0 <iprintf>
		  printf("H = %d.%d %%, T = %d.%d C\n\n", dht_vals[0], dht_vals[1], dht_vals[2], dht_vals[3]);
 800172e:	793b      	ldrb	r3, [r7, #4]
 8001730:	4619      	mov	r1, r3
 8001732:	797b      	ldrb	r3, [r7, #5]
 8001734:	461a      	mov	r2, r3
 8001736:	79bb      	ldrb	r3, [r7, #6]
 8001738:	4618      	mov	r0, r3
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	4603      	mov	r3, r0
 8001740:	480e      	ldr	r0, [pc, #56]	@ (800177c <main+0x1a4>)
 8001742:	f004 fbd5 	bl	8005ef0 <iprintf>

		  HAL_Delay(1000);
 8001746:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800174a:	f000 fb3f 	bl	8001dcc <HAL_Delay>
	  if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET)
 800174e:	e767      	b.n	8001620 <main+0x48>
 8001750:	60000000 	.word	0x60000000
 8001754:	3fee6666 	.word	0x3fee6666
 8001758:	00000000 	.word	0x00000000
 800175c:	415ab3f0 	.word	0x415ab3f0
 8001760:	200002a0 	.word	0x200002a0
 8001764:	20000204 	.word	0x20000204
 8001768:	40011000 	.word	0x40011000
 800176c:	40533333 	.word	0x40533333
 8001770:	447a0000 	.word	0x447a0000
 8001774:	42c80000 	.word	0x42c80000
 8001778:	08008f80 	.word	0x08008f80
 800177c:	08008fb8 	.word	0x08008fb8

08001780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b094      	sub	sp, #80	@ 0x50
 8001784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001786:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800178a:	2228      	movs	r2, #40	@ 0x28
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f004 fc03 	bl	8005f9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80017b0:	230a      	movs	r3, #10
 80017b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b4:	2301      	movs	r3, #1
 80017b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017b8:	2310      	movs	r3, #16
 80017ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80017bc:	2301      	movs	r3, #1
 80017be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017c8:	4618      	mov	r0, r3
 80017ca:	f002 fb07 	bl	8003ddc <HAL_RCC_OscConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80017d4:	f000 f829 	bl	800182a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d8:	230f      	movs	r3, #15
 80017da:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017dc:	2300      	movs	r3, #0
 80017de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f002 fd74 	bl	80042e0 <HAL_RCC_ClockConfig>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80017fe:	f000 f814 	bl	800182a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001802:	2303      	movs	r3, #3
 8001804:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001806:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800180a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	4618      	mov	r0, r3
 8001814:	f002 fef2 	bl	80045fc <HAL_RCCEx_PeriphCLKConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800181e:	f000 f804 	bl	800182a <Error_Handler>
  }
}
 8001822:	bf00      	nop
 8001824:	3750      	adds	r7, #80	@ 0x50
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182e:	b672      	cpsid	i
}
 8001830:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001832:	bf00      	nop
 8001834:	e7fd      	b.n	8001832 <Error_Handler+0x8>
	...

08001838 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800183c:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <MX_RTC_Init+0x30>)
 800183e:	4a0b      	ldr	r2, [pc, #44]	@ (800186c <MX_RTC_Init+0x34>)
 8001840:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001842:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <MX_RTC_Init+0x30>)
 8001844:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001848:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800184a:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <MX_RTC_Init+0x30>)
 800184c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001850:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001852:	4805      	ldr	r0, [pc, #20]	@ (8001868 <MX_RTC_Init+0x30>)
 8001854:	f003 f83e 	bl	80048d4 <HAL_RTC_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800185e:	f7ff ffe4 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000288 	.word	0x20000288
 800186c:	40002800 	.word	0x40002800

08001870 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0b      	ldr	r2, [pc, #44]	@ (80018ac <HAL_RTC_MspInit+0x3c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d110      	bne.n	80018a4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001882:	f002 fa9f 	bl	8003dc4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001886:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <HAL_RTC_MspInit+0x40>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4a09      	ldr	r2, [pc, #36]	@ (80018b0 <HAL_RTC_MspInit+0x40>)
 800188c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001890:	61d3      	str	r3, [r2, #28]
 8001892:	4b07      	ldr	r3, [pc, #28]	@ (80018b0 <HAL_RTC_MspInit+0x40>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800189e:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <HAL_RTC_MspInit+0x44>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80018a4:	bf00      	nop
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40002800 	.word	0x40002800
 80018b0:	40021000 	.word	0x40021000
 80018b4:	4242043c 	.word	0x4242043c

080018b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018be:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <HAL_MspInit+0x5c>)
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	4a14      	ldr	r2, [pc, #80]	@ (8001914 <HAL_MspInit+0x5c>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6193      	str	r3, [r2, #24]
 80018ca:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <HAL_MspInit+0x5c>)
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <HAL_MspInit+0x5c>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	4a0e      	ldr	r2, [pc, #56]	@ (8001914 <HAL_MspInit+0x5c>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e0:	61d3      	str	r3, [r2, #28]
 80018e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <HAL_MspInit+0x5c>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001918 <HAL_MspInit+0x60>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	4a04      	ldr	r2, [pc, #16]	@ (8001918 <HAL_MspInit+0x60>)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	40021000 	.word	0x40021000
 8001918:	40010000 	.word	0x40010000

0800191c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <NMI_Handler+0x4>

08001924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <HardFault_Handler+0x4>

0800192c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <MemManage_Handler+0x4>

08001934 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <BusFault_Handler+0x4>

0800193c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <UsageFault_Handler+0x4>

08001944 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196c:	f000 fa12 	bl	8001d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}

08001974 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return 1;
 8001978:	2301      	movs	r3, #1
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <_kill>:

int _kill(int pid, int sig)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800198c:	f004 fb58 	bl	8006040 <__errno>
 8001990:	4603      	mov	r3, r0
 8001992:	2216      	movs	r2, #22
 8001994:	601a      	str	r2, [r3, #0]
  return -1;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_exit>:

void _exit (int status)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019aa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffe7 	bl	8001982 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <_exit+0x12>

080019b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	e00a      	b.n	80019e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ca:	f3af 8000 	nop.w
 80019ce:	4601      	mov	r1, r0
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	60ba      	str	r2, [r7, #8]
 80019d6:	b2ca      	uxtb	r2, r1
 80019d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3301      	adds	r3, #1
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	dbf0      	blt.n	80019ca <_read+0x12>
  }

  return len;
 80019e8:	687b      	ldr	r3, [r7, #4]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	e009      	b.n	8001a18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	60ba      	str	r2, [r7, #8]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fdcb 	bl	80015a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dbf1      	blt.n	8001a04 <_write+0x12>
  }
  return len;
 8001a20:	687b      	ldr	r3, [r7, #4]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <_close>:

int _close(int file)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a50:	605a      	str	r2, [r3, #4]
  return 0;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <_isatty>:

int _isatty(int file)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr

08001a72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b085      	sub	sp, #20
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	60f8      	str	r0, [r7, #12]
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
	...

08001a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a94:	4a14      	ldr	r2, [pc, #80]	@ (8001ae8 <_sbrk+0x5c>)
 8001a96:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <_sbrk+0x60>)
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa0:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <_sbrk+0x64>)
 8001aaa:	4a12      	ldr	r2, [pc, #72]	@ (8001af4 <_sbrk+0x68>)
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aae:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d207      	bcs.n	8001acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001abc:	f004 fac0 	bl	8006040 <__errno>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aca:	e009      	b.n	8001ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001acc:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <_sbrk+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ad2:	4b07      	ldr	r3, [pc, #28]	@ (8001af0 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a05      	ldr	r2, [pc, #20]	@ (8001af0 <_sbrk+0x64>)
 8001adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20005000 	.word	0x20005000
 8001aec:	00000400 	.word	0x00000400
 8001af0:	2000029c 	.word	0x2000029c
 8001af4:	20000480 	.word	0x20000480

08001af8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0a:	f107 0308 	add.w	r3, r7, #8
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b18:	463b      	mov	r3, r7
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b20:	4b1d      	ldr	r3, [pc, #116]	@ (8001b98 <MX_TIM2_Init+0x94>)
 8001b22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001b28:	4b1b      	ldr	r3, [pc, #108]	@ (8001b98 <MX_TIM2_Init+0x94>)
 8001b2a:	2207      	movs	r2, #7
 8001b2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b98 <MX_TIM2_Init+0x94>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b34:	4b18      	ldr	r3, [pc, #96]	@ (8001b98 <MX_TIM2_Init+0x94>)
 8001b36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3c:	4b16      	ldr	r3, [pc, #88]	@ (8001b98 <MX_TIM2_Init+0x94>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b42:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <MX_TIM2_Init+0x94>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b48:	4813      	ldr	r0, [pc, #76]	@ (8001b98 <MX_TIM2_Init+0x94>)
 8001b4a:	f002 ffcc 	bl	8004ae6 <HAL_TIM_Base_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b54:	f7ff fe69 	bl	800182a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b5e:	f107 0308 	add.w	r3, r7, #8
 8001b62:	4619      	mov	r1, r3
 8001b64:	480c      	ldr	r0, [pc, #48]	@ (8001b98 <MX_TIM2_Init+0x94>)
 8001b66:	f003 f857 	bl	8004c18 <HAL_TIM_ConfigClockSource>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b70:	f7ff fe5b 	bl	800182a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b74:	2300      	movs	r3, #0
 8001b76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <MX_TIM2_Init+0x94>)
 8001b82:	f003 fa15 	bl	8004fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b8c:	f7ff fe4d 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b90:	bf00      	nop
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200002a0 	.word	0x200002a0

08001b9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bac:	d10b      	bne.n	8001bc6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bae:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x34>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a07      	ldr	r2, [pc, #28]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x34>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	61d3      	str	r3, [r2, #28]
 8001bba:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x34>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001bda:	4a12      	ldr	r2, [pc, #72]	@ (8001c24 <MX_USART2_UART_Init+0x50>)
 8001bdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bde:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001be0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001be4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	@ (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c04:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c0a:	4805      	ldr	r0, [pc, #20]	@ (8001c20 <MX_USART2_UART_Init+0x4c>)
 8001c0c:	f003 fa2e 	bl	800506c <HAL_UART_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c16:	f7ff fe08 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200002e8 	.word	0x200002e8
 8001c24:	40004400 	.word	0x40004400

08001c28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb0 <HAL_UART_MspInit+0x88>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d12f      	bne.n	8001ca8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c48:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb4 <HAL_UART_MspInit+0x8c>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	4a19      	ldr	r2, [pc, #100]	@ (8001cb4 <HAL_UART_MspInit+0x8c>)
 8001c4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c52:	61d3      	str	r3, [r2, #28]
 8001c54:	4b17      	ldr	r3, [pc, #92]	@ (8001cb4 <HAL_UART_MspInit+0x8c>)
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c60:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <HAL_UART_MspInit+0x8c>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	4a13      	ldr	r2, [pc, #76]	@ (8001cb4 <HAL_UART_MspInit+0x8c>)
 8001c66:	f043 0304 	orr.w	r3, r3, #4
 8001c6a:	6193      	str	r3, [r2, #24]
 8001c6c:	4b11      	ldr	r3, [pc, #68]	@ (8001cb4 <HAL_UART_MspInit+0x8c>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c78:	2304      	movs	r3, #4
 8001c7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c80:	2303      	movs	r3, #3
 8001c82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480b      	ldr	r0, [pc, #44]	@ (8001cb8 <HAL_UART_MspInit+0x90>)
 8001c8c:	f000 fe80 	bl	8002990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c90:	2308      	movs	r3, #8
 8001c92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 0310 	add.w	r3, r7, #16
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4805      	ldr	r0, [pc, #20]	@ (8001cb8 <HAL_UART_MspInit+0x90>)
 8001ca4:	f000 fe74 	bl	8002990 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ca8:	bf00      	nop
 8001caa:	3720      	adds	r7, #32
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40004400 	.word	0x40004400
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40010800 	.word	0x40010800

08001cbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cbc:	f7ff ff1c 	bl	8001af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cc0:	480b      	ldr	r0, [pc, #44]	@ (8001cf0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cc2:	490c      	ldr	r1, [pc, #48]	@ (8001cf4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc8:	e002      	b.n	8001cd0 <LoopCopyDataInit>

08001cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cce:	3304      	adds	r3, #4

08001cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd4:	d3f9      	bcc.n	8001cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd6:	4a09      	ldr	r2, [pc, #36]	@ (8001cfc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cd8:	4c09      	ldr	r4, [pc, #36]	@ (8001d00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cdc:	e001      	b.n	8001ce2 <LoopFillZerobss>

08001cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce0:	3204      	adds	r2, #4

08001ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce4:	d3fb      	bcc.n	8001cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f004 f9b1 	bl	800604c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cea:	f7ff fc75 	bl	80015d8 <main>
  bx lr
 8001cee:	4770      	bx	lr
  ldr r0, =_sdata
 8001cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001cf8:	080093f0 	.word	0x080093f0
  ldr r2, =_sbss
 8001cfc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001d00:	20000480 	.word	0x20000480

08001d04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d04:	e7fe      	b.n	8001d04 <ADC1_2_IRQHandler>
	...

08001d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d0c:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <HAL_Init+0x28>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a07      	ldr	r2, [pc, #28]	@ (8001d30 <HAL_Init+0x28>)
 8001d12:	f043 0310 	orr.w	r3, r3, #16
 8001d16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d18:	2003      	movs	r0, #3
 8001d1a:	f000 fe05 	bl	8002928 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1e:	200f      	movs	r0, #15
 8001d20:	f000 f808 	bl	8001d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d24:	f7ff fdc8 	bl	80018b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40022000 	.word	0x40022000

08001d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d3c:	4b12      	ldr	r3, [pc, #72]	@ (8001d88 <HAL_InitTick+0x54>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <HAL_InitTick+0x58>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	4619      	mov	r1, r3
 8001d46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 fe0f 	bl	8002976 <HAL_SYSTICK_Config>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00e      	b.n	8001d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b0f      	cmp	r3, #15
 8001d66:	d80a      	bhi.n	8001d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d70:	f000 fde5 	bl	800293e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d74:	4a06      	ldr	r2, [pc, #24]	@ (8001d90 <HAL_InitTick+0x5c>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e000      	b.n	8001d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	20000008 	.word	0x20000008
 8001d90:	20000004 	.word	0x20000004

08001d94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d98:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <HAL_IncTick+0x1c>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <HAL_IncTick+0x20>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	4a03      	ldr	r2, [pc, #12]	@ (8001db4 <HAL_IncTick+0x20>)
 8001da6:	6013      	str	r3, [r2, #0]
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	20000008 	.word	0x20000008
 8001db4:	20000330 	.word	0x20000330

08001db8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return uwTick;
 8001dbc:	4b02      	ldr	r3, [pc, #8]	@ (8001dc8 <HAL_GetTick+0x10>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	20000330 	.word	0x20000330

08001dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd4:	f7ff fff0 	bl	8001db8 <HAL_GetTick>
 8001dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001de4:	d005      	beq.n	8001df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001de6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <HAL_Delay+0x44>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4413      	add	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001df2:	bf00      	nop
 8001df4:	f7ff ffe0 	bl	8001db8 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d8f7      	bhi.n	8001df4 <HAL_Delay+0x28>
  {
  }
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000008 	.word	0x20000008

08001e14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0be      	b.n	8001fb4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d109      	bne.n	8001e58 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff f904 	bl	8001060 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fbc5 	bl	80025e8 <ADC_ConversionStop_Disable>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 8099 	bne.w	8001fa2 <HAL_ADC_Init+0x18e>
 8001e70:	7dfb      	ldrb	r3, [r7, #23]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f040 8095 	bne.w	8001fa2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e80:	f023 0302 	bic.w	r3, r3, #2
 8001e84:	f043 0202 	orr.w	r2, r3, #2
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e94:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	7b1b      	ldrb	r3, [r3, #12]
 8001e9a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e9c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001eac:	d003      	beq.n	8001eb6 <HAL_ADC_Init+0xa2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d102      	bne.n	8001ebc <HAL_ADC_Init+0xa8>
 8001eb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eba:	e000      	b.n	8001ebe <HAL_ADC_Init+0xaa>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7d1b      	ldrb	r3, [r3, #20]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d119      	bne.n	8001f00 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7b1b      	ldrb	r3, [r3, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	035a      	lsls	r2, r3, #13
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	e00b      	b.n	8001f00 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eec:	f043 0220 	orr.w	r2, r3, #32
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef8:	f043 0201 	orr.w	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	4b28      	ldr	r3, [pc, #160]	@ (8001fbc <HAL_ADC_Init+0x1a8>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	68b9      	ldr	r1, [r7, #8]
 8001f24:	430b      	orrs	r3, r1
 8001f26:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f30:	d003      	beq.n	8001f3a <HAL_ADC_Init+0x126>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d104      	bne.n	8001f44 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	051b      	lsls	r3, r3, #20
 8001f42:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	4b18      	ldr	r3, [pc, #96]	@ (8001fc0 <HAL_ADC_Init+0x1ac>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d10b      	bne.n	8001f80 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f72:	f023 0303 	bic.w	r3, r3, #3
 8001f76:	f043 0201 	orr.w	r2, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f7e:	e018      	b.n	8001fb2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f84:	f023 0312 	bic.w	r3, r3, #18
 8001f88:	f043 0210 	orr.w	r2, r3, #16
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f94:	f043 0201 	orr.w	r2, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fa0:	e007      	b.n	8001fb2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa6:	f043 0210 	orr.w	r2, r3, #16
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	ffe1f7fd 	.word	0xffe1f7fd
 8001fc0:	ff1f0efe 	.word	0xff1f0efe

08001fc4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_Start+0x1a>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e098      	b.n	8002110 <HAL_ADC_Start+0x14c>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 faa4 	bl	8002534 <ADC_Enable>
 8001fec:	4603      	mov	r3, r0
 8001fee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f040 8087 	bne.w	8002106 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a41      	ldr	r2, [pc, #260]	@ (8002118 <HAL_ADC_Start+0x154>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d105      	bne.n	8002022 <HAL_ADC_Start+0x5e>
 8002016:	4b41      	ldr	r3, [pc, #260]	@ (800211c <HAL_ADC_Start+0x158>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d115      	bne.n	800204e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002026:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002038:	2b00      	cmp	r3, #0
 800203a:	d026      	beq.n	800208a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002040:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002044:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800204c:	e01d      	b.n	800208a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002052:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a2f      	ldr	r2, [pc, #188]	@ (800211c <HAL_ADC_Start+0x158>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d004      	beq.n	800206e <HAL_ADC_Start+0xaa>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a2b      	ldr	r2, [pc, #172]	@ (8002118 <HAL_ADC_Start+0x154>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d10d      	bne.n	800208a <HAL_ADC_Start+0xc6>
 800206e:	4b2b      	ldr	r3, [pc, #172]	@ (800211c <HAL_ADC_Start+0x158>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002082:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d006      	beq.n	80020a4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209a:	f023 0206 	bic.w	r2, r3, #6
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020a2:	e002      	b.n	80020aa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f06f 0202 	mvn.w	r2, #2
 80020ba:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80020c6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80020ca:	d113      	bne.n	80020f4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020d0:	4a11      	ldr	r2, [pc, #68]	@ (8002118 <HAL_ADC_Start+0x154>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d105      	bne.n	80020e2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80020d6:	4b11      	ldr	r3, [pc, #68]	@ (800211c <HAL_ADC_Start+0x158>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d108      	bne.n	80020f4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	e00c      	b.n	800210e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	e003      	b.n	800210e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800210e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40012800 	.word	0x40012800
 800211c:	40012400 	.word	0x40012400

08002120 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002120:	b590      	push	{r4, r7, lr}
 8002122:	b087      	sub	sp, #28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002136:	f7ff fe3f 	bl	8001db8 <HAL_GetTick>
 800213a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00b      	beq.n	8002162 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214e:	f043 0220 	orr.w	r2, r3, #32
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e0d3      	b.n	800230a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d131      	bne.n	80021d4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002176:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800217a:	2b00      	cmp	r3, #0
 800217c:	d12a      	bne.n	80021d4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800217e:	e021      	b.n	80021c4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002186:	d01d      	beq.n	80021c4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <HAL_ADC_PollForConversion+0x7e>
 800218e:	f7ff fe13 	bl	8001db8 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d212      	bcs.n	80021c4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10b      	bne.n	80021c4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b0:	f043 0204 	orr.w	r2, r3, #4
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e0a2      	b.n	800230a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0d6      	beq.n	8002180 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80021d2:	e070      	b.n	80022b6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80021d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002314 <HAL_ADC_PollForConversion+0x1f4>)
 80021d6:	681c      	ldr	r4, [r3, #0]
 80021d8:	2002      	movs	r0, #2
 80021da:	f002 fac5 	bl	8004768 <HAL_RCCEx_GetPeriphCLKFreq>
 80021de:	4603      	mov	r3, r0
 80021e0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6919      	ldr	r1, [r3, #16]
 80021ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002318 <HAL_ADC_PollForConversion+0x1f8>)
 80021ec:	400b      	ands	r3, r1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d118      	bne.n	8002224 <HAL_ADC_PollForConversion+0x104>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68d9      	ldr	r1, [r3, #12]
 80021f8:	4b48      	ldr	r3, [pc, #288]	@ (800231c <HAL_ADC_PollForConversion+0x1fc>)
 80021fa:	400b      	ands	r3, r1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d111      	bne.n	8002224 <HAL_ADC_PollForConversion+0x104>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6919      	ldr	r1, [r3, #16]
 8002206:	4b46      	ldr	r3, [pc, #280]	@ (8002320 <HAL_ADC_PollForConversion+0x200>)
 8002208:	400b      	ands	r3, r1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d108      	bne.n	8002220 <HAL_ADC_PollForConversion+0x100>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68d9      	ldr	r1, [r3, #12]
 8002214:	4b43      	ldr	r3, [pc, #268]	@ (8002324 <HAL_ADC_PollForConversion+0x204>)
 8002216:	400b      	ands	r3, r1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_ADC_PollForConversion+0x100>
 800221c:	2314      	movs	r3, #20
 800221e:	e020      	b.n	8002262 <HAL_ADC_PollForConversion+0x142>
 8002220:	2329      	movs	r3, #41	@ 0x29
 8002222:	e01e      	b.n	8002262 <HAL_ADC_PollForConversion+0x142>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6919      	ldr	r1, [r3, #16]
 800222a:	4b3d      	ldr	r3, [pc, #244]	@ (8002320 <HAL_ADC_PollForConversion+0x200>)
 800222c:	400b      	ands	r3, r1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d106      	bne.n	8002240 <HAL_ADC_PollForConversion+0x120>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68d9      	ldr	r1, [r3, #12]
 8002238:	4b3a      	ldr	r3, [pc, #232]	@ (8002324 <HAL_ADC_PollForConversion+0x204>)
 800223a:	400b      	ands	r3, r1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00d      	beq.n	800225c <HAL_ADC_PollForConversion+0x13c>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6919      	ldr	r1, [r3, #16]
 8002246:	4b38      	ldr	r3, [pc, #224]	@ (8002328 <HAL_ADC_PollForConversion+0x208>)
 8002248:	400b      	ands	r3, r1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d108      	bne.n	8002260 <HAL_ADC_PollForConversion+0x140>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68d9      	ldr	r1, [r3, #12]
 8002254:	4b34      	ldr	r3, [pc, #208]	@ (8002328 <HAL_ADC_PollForConversion+0x208>)
 8002256:	400b      	ands	r3, r1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_ADC_PollForConversion+0x140>
 800225c:	2354      	movs	r3, #84	@ 0x54
 800225e:	e000      	b.n	8002262 <HAL_ADC_PollForConversion+0x142>
 8002260:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002268:	e021      	b.n	80022ae <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002270:	d01a      	beq.n	80022a8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d007      	beq.n	8002288 <HAL_ADC_PollForConversion+0x168>
 8002278:	f7ff fd9e 	bl	8001db8 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d20f      	bcs.n	80022a8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	429a      	cmp	r2, r3
 800228e:	d90b      	bls.n	80022a8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002294:	f043 0204 	orr.w	r2, r3, #4
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e030      	b.n	800230a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	3301      	adds	r3, #1
 80022ac:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d8d9      	bhi.n	800226a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f06f 0212 	mvn.w	r2, #18
 80022be:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80022d6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80022da:	d115      	bne.n	8002308 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d111      	bne.n	8002308 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d105      	bne.n	8002308 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002300:	f043 0201 	orr.w	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	371c      	adds	r7, #28
 800230e:	46bd      	mov	sp, r7
 8002310:	bd90      	pop	{r4, r7, pc}
 8002312:	bf00      	nop
 8002314:	20000000 	.word	0x20000000
 8002318:	24924924 	.word	0x24924924
 800231c:	00924924 	.word	0x00924924
 8002320:	12492492 	.word	0x12492492
 8002324:	00492492 	.word	0x00492492
 8002328:	00249249 	.word	0x00249249

0800232c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x20>
 8002360:	2302      	movs	r3, #2
 8002362:	e0dc      	b.n	800251e <HAL_ADC_ConfigChannel+0x1da>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b06      	cmp	r3, #6
 8002372:	d81c      	bhi.n	80023ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	3b05      	subs	r3, #5
 8002386:	221f      	movs	r2, #31
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	4019      	ands	r1, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	3b05      	subs	r3, #5
 80023a0:	fa00 f203 	lsl.w	r2, r0, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80023ac:	e03c      	b.n	8002428 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b0c      	cmp	r3, #12
 80023b4:	d81c      	bhi.n	80023f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	3b23      	subs	r3, #35	@ 0x23
 80023c8:	221f      	movs	r2, #31
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	4019      	ands	r1, r3
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	3b23      	subs	r3, #35	@ 0x23
 80023e2:	fa00 f203 	lsl.w	r2, r0, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80023ee:	e01b      	b.n	8002428 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	3b41      	subs	r3, #65	@ 0x41
 8002402:	221f      	movs	r2, #31
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	4019      	ands	r1, r3
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	3b41      	subs	r3, #65	@ 0x41
 800241c:	fa00 f203 	lsl.w	r2, r0, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b09      	cmp	r3, #9
 800242e:	d91c      	bls.n	800246a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68d9      	ldr	r1, [r3, #12]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	4613      	mov	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4413      	add	r3, r2
 8002440:	3b1e      	subs	r3, #30
 8002442:	2207      	movs	r2, #7
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	4019      	ands	r1, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	6898      	ldr	r0, [r3, #8]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	3b1e      	subs	r3, #30
 800245c:	fa00 f203 	lsl.w	r2, r0, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	60da      	str	r2, [r3, #12]
 8002468:	e019      	b.n	800249e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6919      	ldr	r1, [r3, #16]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4613      	mov	r3, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4413      	add	r3, r2
 800247a:	2207      	movs	r2, #7
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	4019      	ands	r1, r3
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	6898      	ldr	r0, [r3, #8]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	fa00 f203 	lsl.w	r2, r0, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b10      	cmp	r3, #16
 80024a4:	d003      	beq.n	80024ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024aa:	2b11      	cmp	r3, #17
 80024ac:	d132      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002528 <HAL_ADC_ConfigChannel+0x1e4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d125      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d126      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80024d4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b10      	cmp	r3, #16
 80024dc:	d11a      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024de:	4b13      	ldr	r3, [pc, #76]	@ (800252c <HAL_ADC_ConfigChannel+0x1e8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a13      	ldr	r2, [pc, #76]	@ (8002530 <HAL_ADC_ConfigChannel+0x1ec>)
 80024e4:	fba2 2303 	umull	r2, r3, r2, r3
 80024e8:	0c9a      	lsrs	r2, r3, #18
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024f4:	e002      	b.n	80024fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f9      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x1b2>
 8002502:	e007      	b.n	8002514 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002508:	f043 0220 	orr.w	r2, r3, #32
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800251c:	7bfb      	ldrb	r3, [r7, #15]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	40012400 	.word	0x40012400
 800252c:	20000000 	.word	0x20000000
 8002530:	431bde83 	.word	0x431bde83

08002534 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b01      	cmp	r3, #1
 8002550:	d040      	beq.n	80025d4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002562:	4b1f      	ldr	r3, [pc, #124]	@ (80025e0 <ADC_Enable+0xac>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a1f      	ldr	r2, [pc, #124]	@ (80025e4 <ADC_Enable+0xb0>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	0c9b      	lsrs	r3, r3, #18
 800256e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002570:	e002      	b.n	8002578 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	3b01      	subs	r3, #1
 8002576:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f9      	bne.n	8002572 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800257e:	f7ff fc1b 	bl	8001db8 <HAL_GetTick>
 8002582:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002584:	e01f      	b.n	80025c6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002586:	f7ff fc17 	bl	8001db8 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d918      	bls.n	80025c6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d011      	beq.n	80025c6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a6:	f043 0210 	orr.w	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b2:	f043 0201 	orr.w	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e007      	b.n	80025d6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d1d8      	bne.n	8002586 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000000 	.word	0x20000000
 80025e4:	431bde83 	.word	0x431bde83

080025e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d12e      	bne.n	8002660 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0201 	bic.w	r2, r2, #1
 8002610:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002612:	f7ff fbd1 	bl	8001db8 <HAL_GetTick>
 8002616:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002618:	e01b      	b.n	8002652 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800261a:	f7ff fbcd 	bl	8001db8 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d914      	bls.n	8002652 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b01      	cmp	r3, #1
 8002634:	d10d      	bne.n	8002652 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263a:	f043 0210 	orr.w	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002646:	f043 0201 	orr.w	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e007      	b.n	8002662 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b01      	cmp	r3, #1
 800265e:	d0dc      	beq.n	800261a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_ADCEx_Calibration_Start+0x1e>
 8002686:	2302      	movs	r3, #2
 8002688:	e097      	b.n	80027ba <HAL_ADCEx_Calibration_Start+0x14e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff ffa8 	bl	80025e8 <ADC_ConversionStop_Disable>
 8002698:	4603      	mov	r3, r0
 800269a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ff49 	bl	8002534 <ADC_Enable>
 80026a2:	4603      	mov	r3, r0
 80026a4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80026a6:	7dfb      	ldrb	r3, [r7, #23]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f040 8081 	bne.w	80027b0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80026b6:	f023 0302 	bic.w	r3, r3, #2
 80026ba:	f043 0202 	orr.w	r2, r3, #2
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80026c2:	4b40      	ldr	r3, [pc, #256]	@ (80027c4 <HAL_ADCEx_Calibration_Start+0x158>)
 80026c4:	681c      	ldr	r4, [r3, #0]
 80026c6:	2002      	movs	r0, #2
 80026c8:	f002 f84e 	bl	8004768 <HAL_RCCEx_GetPeriphCLKFreq>
 80026cc:	4603      	mov	r3, r0
 80026ce:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80026d2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80026d4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80026d6:	e002      	b.n	80026de <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	3b01      	subs	r3, #1
 80026dc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f9      	bne.n	80026d8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0208 	orr.w	r2, r2, #8
 80026f2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80026f4:	f7ff fb60 	bl	8001db8 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80026fa:	e01b      	b.n	8002734 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80026fc:	f7ff fb5c 	bl	8001db8 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b0a      	cmp	r3, #10
 8002708:	d914      	bls.n	8002734 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00d      	beq.n	8002734 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271c:	f023 0312 	bic.w	r3, r3, #18
 8002720:	f043 0210 	orr.w	r2, r3, #16
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e042      	b.n	80027ba <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1dc      	bne.n	80026fc <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0204 	orr.w	r2, r2, #4
 8002750:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002752:	f7ff fb31 	bl	8001db8 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002758:	e01b      	b.n	8002792 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800275a:	f7ff fb2d 	bl	8001db8 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b0a      	cmp	r3, #10
 8002766:	d914      	bls.n	8002792 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00d      	beq.n	8002792 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277a:	f023 0312 	bic.w	r3, r3, #18
 800277e:	f043 0210 	orr.w	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e013      	b.n	80027ba <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1dc      	bne.n	800275a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a4:	f023 0303 	bic.w	r3, r3, #3
 80027a8:	f043 0201 	orr.w	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	371c      	adds	r7, #28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd90      	pop	{r4, r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000000 	.word	0x20000000

080027c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d8:	4b0c      	ldr	r3, [pc, #48]	@ (800280c <__NVIC_SetPriorityGrouping+0x44>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027e4:	4013      	ands	r3, r2
 80027e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027fa:	4a04      	ldr	r2, [pc, #16]	@ (800280c <__NVIC_SetPriorityGrouping+0x44>)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	60d3      	str	r3, [r2, #12]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002814:	4b04      	ldr	r3, [pc, #16]	@ (8002828 <__NVIC_GetPriorityGrouping+0x18>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	0a1b      	lsrs	r3, r3, #8
 800281a:	f003 0307 	and.w	r3, r3, #7
}
 800281e:	4618      	mov	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	2b00      	cmp	r3, #0
 800283e:	db0a      	blt.n	8002856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	490c      	ldr	r1, [pc, #48]	@ (8002878 <__NVIC_SetPriority+0x4c>)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	0112      	lsls	r2, r2, #4
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	440b      	add	r3, r1
 8002850:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002854:	e00a      	b.n	800286c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4908      	ldr	r1, [pc, #32]	@ (800287c <__NVIC_SetPriority+0x50>)
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	3b04      	subs	r3, #4
 8002864:	0112      	lsls	r2, r2, #4
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	440b      	add	r3, r1
 800286a:	761a      	strb	r2, [r3, #24]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000e100 	.word	0xe000e100
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	@ 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f1c3 0307 	rsb	r3, r3, #7
 800289a:	2b04      	cmp	r3, #4
 800289c:	bf28      	it	cs
 800289e:	2304      	movcs	r3, #4
 80028a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3304      	adds	r3, #4
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d902      	bls.n	80028b0 <NVIC_EncodePriority+0x30>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3b03      	subs	r3, #3
 80028ae:	e000      	b.n	80028b2 <NVIC_EncodePriority+0x32>
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	401a      	ands	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	43d9      	mvns	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	4313      	orrs	r3, r2
         );
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	@ 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028f4:	d301      	bcc.n	80028fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028f6:	2301      	movs	r3, #1
 80028f8:	e00f      	b.n	800291a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002924 <SysTick_Config+0x40>)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002902:	210f      	movs	r1, #15
 8002904:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002908:	f7ff ff90 	bl	800282c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800290c:	4b05      	ldr	r3, [pc, #20]	@ (8002924 <SysTick_Config+0x40>)
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002912:	4b04      	ldr	r3, [pc, #16]	@ (8002924 <SysTick_Config+0x40>)
 8002914:	2207      	movs	r2, #7
 8002916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	e000e010 	.word	0xe000e010

08002928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff ff49 	bl	80027c8 <__NVIC_SetPriorityGrouping>
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800293e:	b580      	push	{r7, lr}
 8002940:	b086      	sub	sp, #24
 8002942:	af00      	add	r7, sp, #0
 8002944:	4603      	mov	r3, r0
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002950:	f7ff ff5e 	bl	8002810 <__NVIC_GetPriorityGrouping>
 8002954:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	6978      	ldr	r0, [r7, #20]
 800295c:	f7ff ff90 	bl	8002880 <NVIC_EncodePriority>
 8002960:	4602      	mov	r2, r0
 8002962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff ff5f 	bl	800282c <__NVIC_SetPriority>
}
 800296e:	bf00      	nop
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff ffb0 	bl	80028e4 <SysTick_Config>
 8002984:	4603      	mov	r3, r0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002990:	b480      	push	{r7}
 8002992:	b08b      	sub	sp, #44	@ 0x2c
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800299a:	2300      	movs	r3, #0
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800299e:	2300      	movs	r3, #0
 80029a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029a2:	e169      	b.n	8002c78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029a4:	2201      	movs	r2, #1
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	429a      	cmp	r2, r3
 80029be:	f040 8158 	bne.w	8002c72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4a9a      	ldr	r2, [pc, #616]	@ (8002c30 <HAL_GPIO_Init+0x2a0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d05e      	beq.n	8002a8a <HAL_GPIO_Init+0xfa>
 80029cc:	4a98      	ldr	r2, [pc, #608]	@ (8002c30 <HAL_GPIO_Init+0x2a0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d875      	bhi.n	8002abe <HAL_GPIO_Init+0x12e>
 80029d2:	4a98      	ldr	r2, [pc, #608]	@ (8002c34 <HAL_GPIO_Init+0x2a4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d058      	beq.n	8002a8a <HAL_GPIO_Init+0xfa>
 80029d8:	4a96      	ldr	r2, [pc, #600]	@ (8002c34 <HAL_GPIO_Init+0x2a4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d86f      	bhi.n	8002abe <HAL_GPIO_Init+0x12e>
 80029de:	4a96      	ldr	r2, [pc, #600]	@ (8002c38 <HAL_GPIO_Init+0x2a8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d052      	beq.n	8002a8a <HAL_GPIO_Init+0xfa>
 80029e4:	4a94      	ldr	r2, [pc, #592]	@ (8002c38 <HAL_GPIO_Init+0x2a8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d869      	bhi.n	8002abe <HAL_GPIO_Init+0x12e>
 80029ea:	4a94      	ldr	r2, [pc, #592]	@ (8002c3c <HAL_GPIO_Init+0x2ac>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d04c      	beq.n	8002a8a <HAL_GPIO_Init+0xfa>
 80029f0:	4a92      	ldr	r2, [pc, #584]	@ (8002c3c <HAL_GPIO_Init+0x2ac>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d863      	bhi.n	8002abe <HAL_GPIO_Init+0x12e>
 80029f6:	4a92      	ldr	r2, [pc, #584]	@ (8002c40 <HAL_GPIO_Init+0x2b0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d046      	beq.n	8002a8a <HAL_GPIO_Init+0xfa>
 80029fc:	4a90      	ldr	r2, [pc, #576]	@ (8002c40 <HAL_GPIO_Init+0x2b0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d85d      	bhi.n	8002abe <HAL_GPIO_Init+0x12e>
 8002a02:	2b12      	cmp	r3, #18
 8002a04:	d82a      	bhi.n	8002a5c <HAL_GPIO_Init+0xcc>
 8002a06:	2b12      	cmp	r3, #18
 8002a08:	d859      	bhi.n	8002abe <HAL_GPIO_Init+0x12e>
 8002a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a10 <HAL_GPIO_Init+0x80>)
 8002a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a10:	08002a8b 	.word	0x08002a8b
 8002a14:	08002a65 	.word	0x08002a65
 8002a18:	08002a77 	.word	0x08002a77
 8002a1c:	08002ab9 	.word	0x08002ab9
 8002a20:	08002abf 	.word	0x08002abf
 8002a24:	08002abf 	.word	0x08002abf
 8002a28:	08002abf 	.word	0x08002abf
 8002a2c:	08002abf 	.word	0x08002abf
 8002a30:	08002abf 	.word	0x08002abf
 8002a34:	08002abf 	.word	0x08002abf
 8002a38:	08002abf 	.word	0x08002abf
 8002a3c:	08002abf 	.word	0x08002abf
 8002a40:	08002abf 	.word	0x08002abf
 8002a44:	08002abf 	.word	0x08002abf
 8002a48:	08002abf 	.word	0x08002abf
 8002a4c:	08002abf 	.word	0x08002abf
 8002a50:	08002abf 	.word	0x08002abf
 8002a54:	08002a6d 	.word	0x08002a6d
 8002a58:	08002a81 	.word	0x08002a81
 8002a5c:	4a79      	ldr	r2, [pc, #484]	@ (8002c44 <HAL_GPIO_Init+0x2b4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d013      	beq.n	8002a8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a62:	e02c      	b.n	8002abe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	623b      	str	r3, [r7, #32]
          break;
 8002a6a:	e029      	b.n	8002ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	3304      	adds	r3, #4
 8002a72:	623b      	str	r3, [r7, #32]
          break;
 8002a74:	e024      	b.n	8002ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	3308      	adds	r3, #8
 8002a7c:	623b      	str	r3, [r7, #32]
          break;
 8002a7e:	e01f      	b.n	8002ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	330c      	adds	r3, #12
 8002a86:	623b      	str	r3, [r7, #32]
          break;
 8002a88:	e01a      	b.n	8002ac0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d102      	bne.n	8002a98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a92:	2304      	movs	r3, #4
 8002a94:	623b      	str	r3, [r7, #32]
          break;
 8002a96:	e013      	b.n	8002ac0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d105      	bne.n	8002aac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002aa0:	2308      	movs	r3, #8
 8002aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	611a      	str	r2, [r3, #16]
          break;
 8002aaa:	e009      	b.n	8002ac0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002aac:	2308      	movs	r3, #8
 8002aae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	615a      	str	r2, [r3, #20]
          break;
 8002ab6:	e003      	b.n	8002ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	623b      	str	r3, [r7, #32]
          break;
 8002abc:	e000      	b.n	8002ac0 <HAL_GPIO_Init+0x130>
          break;
 8002abe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2bff      	cmp	r3, #255	@ 0xff
 8002ac4:	d801      	bhi.n	8002aca <HAL_GPIO_Init+0x13a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	e001      	b.n	8002ace <HAL_GPIO_Init+0x13e>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3304      	adds	r3, #4
 8002ace:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2bff      	cmp	r3, #255	@ 0xff
 8002ad4:	d802      	bhi.n	8002adc <HAL_GPIO_Init+0x14c>
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	e002      	b.n	8002ae2 <HAL_GPIO_Init+0x152>
 8002adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ade:	3b08      	subs	r3, #8
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	210f      	movs	r1, #15
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	fa01 f303 	lsl.w	r3, r1, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	401a      	ands	r2, r3
 8002af4:	6a39      	ldr	r1, [r7, #32]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	fa01 f303 	lsl.w	r3, r1, r3
 8002afc:	431a      	orrs	r2, r3
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 80b1 	beq.w	8002c72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b10:	4b4d      	ldr	r3, [pc, #308]	@ (8002c48 <HAL_GPIO_Init+0x2b8>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	4a4c      	ldr	r2, [pc, #304]	@ (8002c48 <HAL_GPIO_Init+0x2b8>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	6193      	str	r3, [r2, #24]
 8002b1c:	4b4a      	ldr	r3, [pc, #296]	@ (8002c48 <HAL_GPIO_Init+0x2b8>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b28:	4a48      	ldr	r2, [pc, #288]	@ (8002c4c <HAL_GPIO_Init+0x2bc>)
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2c:	089b      	lsrs	r3, r3, #2
 8002b2e:	3302      	adds	r3, #2
 8002b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	220f      	movs	r2, #15
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a40      	ldr	r2, [pc, #256]	@ (8002c50 <HAL_GPIO_Init+0x2c0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d013      	beq.n	8002b7c <HAL_GPIO_Init+0x1ec>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a3f      	ldr	r2, [pc, #252]	@ (8002c54 <HAL_GPIO_Init+0x2c4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d00d      	beq.n	8002b78 <HAL_GPIO_Init+0x1e8>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a3e      	ldr	r2, [pc, #248]	@ (8002c58 <HAL_GPIO_Init+0x2c8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d007      	beq.n	8002b74 <HAL_GPIO_Init+0x1e4>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a3d      	ldr	r2, [pc, #244]	@ (8002c5c <HAL_GPIO_Init+0x2cc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d101      	bne.n	8002b70 <HAL_GPIO_Init+0x1e0>
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e006      	b.n	8002b7e <HAL_GPIO_Init+0x1ee>
 8002b70:	2304      	movs	r3, #4
 8002b72:	e004      	b.n	8002b7e <HAL_GPIO_Init+0x1ee>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e002      	b.n	8002b7e <HAL_GPIO_Init+0x1ee>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <HAL_GPIO_Init+0x1ee>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b80:	f002 0203 	and.w	r2, r2, #3
 8002b84:	0092      	lsls	r2, r2, #2
 8002b86:	4093      	lsls	r3, r2
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b8e:	492f      	ldr	r1, [pc, #188]	@ (8002c4c <HAL_GPIO_Init+0x2bc>)
 8002b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b92:	089b      	lsrs	r3, r3, #2
 8002b94:	3302      	adds	r3, #2
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d006      	beq.n	8002bb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c60 <HAL_GPIO_Init+0x2d0>)
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	492c      	ldr	r1, [pc, #176]	@ (8002c60 <HAL_GPIO_Init+0x2d0>)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]
 8002bb4:	e006      	b.n	8002bc4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8002c60 <HAL_GPIO_Init+0x2d0>)
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	4928      	ldr	r1, [pc, #160]	@ (8002c60 <HAL_GPIO_Init+0x2d0>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d006      	beq.n	8002bde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bd0:	4b23      	ldr	r3, [pc, #140]	@ (8002c60 <HAL_GPIO_Init+0x2d0>)
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	4922      	ldr	r1, [pc, #136]	@ (8002c60 <HAL_GPIO_Init+0x2d0>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60cb      	str	r3, [r1, #12]
 8002bdc:	e006      	b.n	8002bec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bde:	4b20      	ldr	r3, [pc, #128]	@ (8002c60 <HAL_GPIO_Init+0x2d0>)
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	43db      	mvns	r3, r3
 8002be6:	491e      	ldr	r1, [pc, #120]	@ (8002c60 <HAL_GPIO_Init+0x2d0>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d006      	beq.n	8002c06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bf8:	4b19      	ldr	r3, [pc, #100]	@ (8002c60 <HAL_GPIO_Init+0x2d0>)
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	4918      	ldr	r1, [pc, #96]	@ (8002c60 <HAL_GPIO_Init+0x2d0>)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
 8002c04:	e006      	b.n	8002c14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c06:	4b16      	ldr	r3, [pc, #88]	@ (8002c60 <HAL_GPIO_Init+0x2d0>)
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	4914      	ldr	r1, [pc, #80]	@ (8002c60 <HAL_GPIO_Init+0x2d0>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d021      	beq.n	8002c64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c20:	4b0f      	ldr	r3, [pc, #60]	@ (8002c60 <HAL_GPIO_Init+0x2d0>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	490e      	ldr	r1, [pc, #56]	@ (8002c60 <HAL_GPIO_Init+0x2d0>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	600b      	str	r3, [r1, #0]
 8002c2c:	e021      	b.n	8002c72 <HAL_GPIO_Init+0x2e2>
 8002c2e:	bf00      	nop
 8002c30:	10320000 	.word	0x10320000
 8002c34:	10310000 	.word	0x10310000
 8002c38:	10220000 	.word	0x10220000
 8002c3c:	10210000 	.word	0x10210000
 8002c40:	10120000 	.word	0x10120000
 8002c44:	10110000 	.word	0x10110000
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40010000 	.word	0x40010000
 8002c50:	40010800 	.word	0x40010800
 8002c54:	40010c00 	.word	0x40010c00
 8002c58:	40011000 	.word	0x40011000
 8002c5c:	40011400 	.word	0x40011400
 8002c60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c64:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <HAL_GPIO_Init+0x304>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	4909      	ldr	r1, [pc, #36]	@ (8002c94 <HAL_GPIO_Init+0x304>)
 8002c6e:	4013      	ands	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	3301      	adds	r3, #1
 8002c76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f47f ae8e 	bne.w	80029a4 <HAL_GPIO_Init+0x14>
  }
}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	372c      	adds	r7, #44	@ 0x2c
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	40010400 	.word	0x40010400

08002c98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	887b      	ldrh	r3, [r7, #2]
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
 8002cb4:	e001      	b.n	8002cba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	807b      	strh	r3, [r7, #2]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cd6:	787b      	ldrb	r3, [r7, #1]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cdc:	887a      	ldrh	r2, [r7, #2]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ce2:	e003      	b.n	8002cec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ce4:	887b      	ldrh	r3, [r7, #2]
 8002ce6:	041a      	lsls	r2, r3, #16
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	611a      	str	r2, [r3, #16]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr
	...

08002cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e12b      	b.n	8002f62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7fe fb2e 	bl	8001380 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2224      	movs	r2, #36	@ 0x24
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0201 	bic.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d5c:	f001 fc08 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8002d60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4a81      	ldr	r2, [pc, #516]	@ (8002f6c <HAL_I2C_Init+0x274>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d807      	bhi.n	8002d7c <HAL_I2C_Init+0x84>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4a80      	ldr	r2, [pc, #512]	@ (8002f70 <HAL_I2C_Init+0x278>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	bf94      	ite	ls
 8002d74:	2301      	movls	r3, #1
 8002d76:	2300      	movhi	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	e006      	b.n	8002d8a <HAL_I2C_Init+0x92>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4a7d      	ldr	r2, [pc, #500]	@ (8002f74 <HAL_I2C_Init+0x27c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	bf94      	ite	ls
 8002d84:	2301      	movls	r3, #1
 8002d86:	2300      	movhi	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e0e7      	b.n	8002f62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4a78      	ldr	r2, [pc, #480]	@ (8002f78 <HAL_I2C_Init+0x280>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	0c9b      	lsrs	r3, r3, #18
 8002d9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4a6a      	ldr	r2, [pc, #424]	@ (8002f6c <HAL_I2C_Init+0x274>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d802      	bhi.n	8002dcc <HAL_I2C_Init+0xd4>
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	e009      	b.n	8002de0 <HAL_I2C_Init+0xe8>
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002dd2:	fb02 f303 	mul.w	r3, r2, r3
 8002dd6:	4a69      	ldr	r2, [pc, #420]	@ (8002f7c <HAL_I2C_Init+0x284>)
 8002dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ddc:	099b      	lsrs	r3, r3, #6
 8002dde:	3301      	adds	r3, #1
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	430b      	orrs	r3, r1
 8002de6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002df2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	495c      	ldr	r1, [pc, #368]	@ (8002f6c <HAL_I2C_Init+0x274>)
 8002dfc:	428b      	cmp	r3, r1
 8002dfe:	d819      	bhi.n	8002e34 <HAL_I2C_Init+0x13c>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	1e59      	subs	r1, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e0e:	1c59      	adds	r1, r3, #1
 8002e10:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e14:	400b      	ands	r3, r1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_I2C_Init+0x138>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1e59      	subs	r1, r3, #1
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e2e:	e051      	b.n	8002ed4 <HAL_I2C_Init+0x1dc>
 8002e30:	2304      	movs	r3, #4
 8002e32:	e04f      	b.n	8002ed4 <HAL_I2C_Init+0x1dc>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d111      	bne.n	8002e60 <HAL_I2C_Init+0x168>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1e58      	subs	r0, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6859      	ldr	r1, [r3, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	440b      	add	r3, r1
 8002e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e4e:	3301      	adds	r3, #1
 8002e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bf0c      	ite	eq
 8002e58:	2301      	moveq	r3, #1
 8002e5a:	2300      	movne	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	e012      	b.n	8002e86 <HAL_I2C_Init+0x18e>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1e58      	subs	r0, r3, #1
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	0099      	lsls	r1, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e76:	3301      	adds	r3, #1
 8002e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_Init+0x196>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e022      	b.n	8002ed4 <HAL_I2C_Init+0x1dc>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10e      	bne.n	8002eb4 <HAL_I2C_Init+0x1bc>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1e58      	subs	r0, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6859      	ldr	r1, [r3, #4]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	440b      	add	r3, r1
 8002ea4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eb2:	e00f      	b.n	8002ed4 <HAL_I2C_Init+0x1dc>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1e58      	subs	r0, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6859      	ldr	r1, [r3, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	0099      	lsls	r1, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	6809      	ldr	r1, [r1, #0]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69da      	ldr	r2, [r3, #28]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6911      	ldr	r1, [r2, #16]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	68d2      	ldr	r2, [r2, #12]
 8002f0e:	4311      	orrs	r1, r2
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	430b      	orrs	r3, r1
 8002f16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695a      	ldr	r2, [r3, #20]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	000186a0 	.word	0x000186a0
 8002f70:	001e847f 	.word	0x001e847f
 8002f74:	003d08ff 	.word	0x003d08ff
 8002f78:	431bde83 	.word	0x431bde83
 8002f7c:	10624dd3 	.word	0x10624dd3

08002f80 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	4608      	mov	r0, r1
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4603      	mov	r3, r0
 8002f90:	817b      	strh	r3, [r7, #10]
 8002f92:	460b      	mov	r3, r1
 8002f94:	813b      	strh	r3, [r7, #8]
 8002f96:	4613      	mov	r3, r2
 8002f98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f9a:	f7fe ff0d 	bl	8001db8 <HAL_GetTick>
 8002f9e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	f040 80d9 	bne.w	8003160 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	2319      	movs	r3, #25
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	496d      	ldr	r1, [pc, #436]	@ (800316c <HAL_I2C_Mem_Write+0x1ec>)
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 fccd 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e0cc      	b.n	8003162 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_I2C_Mem_Write+0x56>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e0c5      	b.n	8003162 <HAL_I2C_Mem_Write+0x1e2>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d007      	beq.n	8002ffc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800300a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2221      	movs	r2, #33	@ 0x21
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2240      	movs	r2, #64	@ 0x40
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a3a      	ldr	r2, [r7, #32]
 8003026:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800302c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4a4d      	ldr	r2, [pc, #308]	@ (8003170 <HAL_I2C_Mem_Write+0x1f0>)
 800303c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800303e:	88f8      	ldrh	r0, [r7, #6]
 8003040:	893a      	ldrh	r2, [r7, #8]
 8003042:	8979      	ldrh	r1, [r7, #10]
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	4603      	mov	r3, r0
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 fb04 	bl	800365c <I2C_RequestMemoryWrite>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d052      	beq.n	8003100 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e081      	b.n	8003162 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 fd92 	bl	8003b8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00d      	beq.n	800308a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003072:	2b04      	cmp	r3, #4
 8003074:	d107      	bne.n	8003086 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003084:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e06b      	b.n	8003162 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308e:	781a      	ldrb	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	3b01      	subs	r3, #1
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d11b      	bne.n	8003100 <HAL_I2C_Mem_Write+0x180>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d017      	beq.n	8003100 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d4:	781a      	ldrb	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1aa      	bne.n	800305e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 fd85 	bl	8003c1c <I2C_WaitOnBTFFlagUntilTimeout>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00d      	beq.n	8003134 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	2b04      	cmp	r3, #4
 800311e:	d107      	bne.n	8003130 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800312e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e016      	b.n	8003162 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	e000      	b.n	8003162 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003160:	2302      	movs	r3, #2
  }
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	00100002 	.word	0x00100002
 8003170:	ffff0000 	.word	0xffff0000

08003174 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08c      	sub	sp, #48	@ 0x30
 8003178:	af02      	add	r7, sp, #8
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	4608      	mov	r0, r1
 800317e:	4611      	mov	r1, r2
 8003180:	461a      	mov	r2, r3
 8003182:	4603      	mov	r3, r0
 8003184:	817b      	strh	r3, [r7, #10]
 8003186:	460b      	mov	r3, r1
 8003188:	813b      	strh	r3, [r7, #8]
 800318a:	4613      	mov	r3, r2
 800318c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003192:	f7fe fe11 	bl	8001db8 <HAL_GetTick>
 8003196:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b20      	cmp	r3, #32
 80031a2:	f040 8250 	bne.w	8003646 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	2319      	movs	r3, #25
 80031ac:	2201      	movs	r2, #1
 80031ae:	4982      	ldr	r1, [pc, #520]	@ (80033b8 <HAL_I2C_Mem_Read+0x244>)
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 fbd1 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80031bc:	2302      	movs	r3, #2
 80031be:	e243      	b.n	8003648 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_I2C_Mem_Read+0x5a>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e23c      	b.n	8003648 <HAL_I2C_Mem_Read+0x4d4>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d007      	beq.n	80031f4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003202:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2222      	movs	r2, #34	@ 0x22
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2240      	movs	r2, #64	@ 0x40
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800321e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003224:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4a62      	ldr	r2, [pc, #392]	@ (80033bc <HAL_I2C_Mem_Read+0x248>)
 8003234:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003236:	88f8      	ldrh	r0, [r7, #6]
 8003238:	893a      	ldrh	r2, [r7, #8]
 800323a:	8979      	ldrh	r1, [r7, #10]
 800323c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323e:	9301      	str	r3, [sp, #4]
 8003240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	4603      	mov	r3, r0
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 fa9e 	bl	8003788 <I2C_RequestMemoryRead>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e1f8      	b.n	8003648 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325a:	2b00      	cmp	r3, #0
 800325c:	d113      	bne.n	8003286 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	e1cc      	b.n	8003620 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328a:	2b01      	cmp	r3, #1
 800328c:	d11e      	bne.n	80032cc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800329c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800329e:	b672      	cpsid	i
}
 80032a0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80032c8:	b662      	cpsie	i
}
 80032ca:	e035      	b.n	8003338 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d11e      	bne.n	8003312 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032e4:	b672      	cpsid	i
}
 80032e6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800330c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800330e:	b662      	cpsie	i
}
 8003310:	e012      	b.n	8003338 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003320:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003338:	e172      	b.n	8003620 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333e:	2b03      	cmp	r3, #3
 8003340:	f200 811f 	bhi.w	8003582 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003348:	2b01      	cmp	r3, #1
 800334a:	d123      	bne.n	8003394 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800334c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800334e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 fcab 	bl	8003cac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e173      	b.n	8003648 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691a      	ldr	r2, [r3, #16]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003388:	b29b      	uxth	r3, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003392:	e145      	b.n	8003620 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003398:	2b02      	cmp	r3, #2
 800339a:	d152      	bne.n	8003442 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800339c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a2:	2200      	movs	r2, #0
 80033a4:	4906      	ldr	r1, [pc, #24]	@ (80033c0 <HAL_I2C_Mem_Read+0x24c>)
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 fad6 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e148      	b.n	8003648 <HAL_I2C_Mem_Read+0x4d4>
 80033b6:	bf00      	nop
 80033b8:	00100002 	.word	0x00100002
 80033bc:	ffff0000 	.word	0xffff0000
 80033c0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80033c4:	b672      	cpsid	i
}
 80033c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691a      	ldr	r2, [r3, #16]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800340a:	b662      	cpsie	i
}
 800340c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003440:	e0ee      	b.n	8003620 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003448:	2200      	movs	r2, #0
 800344a:	4981      	ldr	r1, [pc, #516]	@ (8003650 <HAL_I2C_Mem_Read+0x4dc>)
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 fa83 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0f5      	b.n	8003648 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800346a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800346c:	b672      	cpsid	i
}
 800346e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003498:	b29b      	uxth	r3, r3
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034a2:	4b6c      	ldr	r3, [pc, #432]	@ (8003654 <HAL_I2C_Mem_Read+0x4e0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	08db      	lsrs	r3, r3, #3
 80034a8:	4a6b      	ldr	r2, [pc, #428]	@ (8003658 <HAL_I2C_Mem_Read+0x4e4>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	0a1a      	lsrs	r2, r3, #8
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	00da      	lsls	r2, r3, #3
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	3b01      	subs	r3, #1
 80034c0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d118      	bne.n	80034fa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2220      	movs	r2, #32
 80034d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	f043 0220 	orr.w	r2, r3, #32
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80034ea:	b662      	cpsie	i
}
 80034ec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e0a6      	b.n	8003648 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b04      	cmp	r3, #4
 8003506:	d1d9      	bne.n	80034bc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003516:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800354a:	b662      	cpsie	i
}
 800354c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b01      	subs	r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003580:	e04e      	b.n	8003620 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003584:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fb90 	bl	8003cac <I2C_WaitOnRXNEFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e058      	b.n	8003648 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d124      	bne.n	8003620 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d107      	bne.n	80035ee <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003624:	2b00      	cmp	r3, #0
 8003626:	f47f ae88 	bne.w	800333a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	e000      	b.n	8003648 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003646:	2302      	movs	r3, #2
  }
}
 8003648:	4618      	mov	r0, r3
 800364a:	3728      	adds	r7, #40	@ 0x28
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	00010004 	.word	0x00010004
 8003654:	20000000 	.word	0x20000000
 8003658:	14f8b589 	.word	0x14f8b589

0800365c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	4608      	mov	r0, r1
 8003666:	4611      	mov	r1, r2
 8003668:	461a      	mov	r2, r3
 800366a:	4603      	mov	r3, r0
 800366c:	817b      	strh	r3, [r7, #10]
 800366e:	460b      	mov	r3, r1
 8003670:	813b      	strh	r3, [r7, #8]
 8003672:	4613      	mov	r3, r2
 8003674:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003684:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	2200      	movs	r2, #0
 800368e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f960 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00d      	beq.n	80036ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ac:	d103      	bne.n	80036b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e05f      	b.n	800377a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ba:	897b      	ldrh	r3, [r7, #10]
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	6a3a      	ldr	r2, [r7, #32]
 80036ce:	492d      	ldr	r1, [pc, #180]	@ (8003784 <I2C_RequestMemoryWrite+0x128>)
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f9bb 	bl	8003a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e04c      	b.n	800377a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f8:	6a39      	ldr	r1, [r7, #32]
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 fa46 	bl	8003b8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00d      	beq.n	8003722 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	2b04      	cmp	r3, #4
 800370c:	d107      	bne.n	800371e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800371c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e02b      	b.n	800377a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003722:	88fb      	ldrh	r3, [r7, #6]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d105      	bne.n	8003734 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003728:	893b      	ldrh	r3, [r7, #8]
 800372a:	b2da      	uxtb	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	611a      	str	r2, [r3, #16]
 8003732:	e021      	b.n	8003778 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003734:	893b      	ldrh	r3, [r7, #8]
 8003736:	0a1b      	lsrs	r3, r3, #8
 8003738:	b29b      	uxth	r3, r3
 800373a:	b2da      	uxtb	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003744:	6a39      	ldr	r1, [r7, #32]
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 fa20 	bl	8003b8c <I2C_WaitOnTXEFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00d      	beq.n	800376e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	2b04      	cmp	r3, #4
 8003758:	d107      	bne.n	800376a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003768:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e005      	b.n	800377a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800376e:	893b      	ldrh	r3, [r7, #8]
 8003770:	b2da      	uxtb	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	00010002 	.word	0x00010002

08003788 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af02      	add	r7, sp, #8
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	4608      	mov	r0, r1
 8003792:	4611      	mov	r1, r2
 8003794:	461a      	mov	r2, r3
 8003796:	4603      	mov	r3, r0
 8003798:	817b      	strh	r3, [r7, #10]
 800379a:	460b      	mov	r3, r1
 800379c:	813b      	strh	r3, [r7, #8]
 800379e:	4613      	mov	r3, r2
 80037a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f8c2 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00d      	beq.n	80037f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037e8:	d103      	bne.n	80037f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e0aa      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037f6:	897b      	ldrh	r3, [r7, #10]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003804:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003808:	6a3a      	ldr	r2, [r7, #32]
 800380a:	4952      	ldr	r1, [pc, #328]	@ (8003954 <I2C_RequestMemoryRead+0x1cc>)
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f91d 	bl	8003a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e097      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003834:	6a39      	ldr	r1, [r7, #32]
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f9a8 	bl	8003b8c <I2C_WaitOnTXEFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00d      	beq.n	800385e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	2b04      	cmp	r3, #4
 8003848:	d107      	bne.n	800385a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003858:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e076      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d105      	bne.n	8003870 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003864:	893b      	ldrh	r3, [r7, #8]
 8003866:	b2da      	uxtb	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	611a      	str	r2, [r3, #16]
 800386e:	e021      	b.n	80038b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003870:	893b      	ldrh	r3, [r7, #8]
 8003872:	0a1b      	lsrs	r3, r3, #8
 8003874:	b29b      	uxth	r3, r3
 8003876:	b2da      	uxtb	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800387e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003880:	6a39      	ldr	r1, [r7, #32]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f982 	bl	8003b8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00d      	beq.n	80038aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	2b04      	cmp	r3, #4
 8003894:	d107      	bne.n	80038a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e050      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038aa:	893b      	ldrh	r3, [r7, #8]
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b6:	6a39      	ldr	r1, [r7, #32]
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 f967 	bl	8003b8c <I2C_WaitOnTXEFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00d      	beq.n	80038e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d107      	bne.n	80038dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e035      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f82b 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00d      	beq.n	8003924 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003916:	d103      	bne.n	8003920 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800391e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e013      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003924:	897b      	ldrh	r3, [r7, #10]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	b2da      	uxtb	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003936:	6a3a      	ldr	r2, [r7, #32]
 8003938:	4906      	ldr	r1, [pc, #24]	@ (8003954 <I2C_RequestMemoryRead+0x1cc>)
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f886 	bl	8003a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	00010002 	.word	0x00010002

08003958 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	4613      	mov	r3, r2
 8003966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003968:	e048      	b.n	80039fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003970:	d044      	beq.n	80039fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003972:	f7fe fa21 	bl	8001db8 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d139      	bne.n	80039fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	0c1b      	lsrs	r3, r3, #16
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b01      	cmp	r3, #1
 8003990:	d10d      	bne.n	80039ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	43da      	mvns	r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	4013      	ands	r3, r2
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bf0c      	ite	eq
 80039a4:	2301      	moveq	r3, #1
 80039a6:	2300      	movne	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	e00c      	b.n	80039c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	43da      	mvns	r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	4013      	ands	r3, r2
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d116      	bne.n	80039fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e8:	f043 0220 	orr.w	r2, r3, #32
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e023      	b.n	8003a44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	0c1b      	lsrs	r3, r3, #16
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d10d      	bne.n	8003a22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	43da      	mvns	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	4013      	ands	r3, r2
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf0c      	ite	eq
 8003a18:	2301      	moveq	r3, #1
 8003a1a:	2300      	movne	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	e00c      	b.n	8003a3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	43da      	mvns	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf0c      	ite	eq
 8003a34:	2301      	moveq	r3, #1
 8003a36:	2300      	movne	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d093      	beq.n	800396a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a5a:	e071      	b.n	8003b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a6a:	d123      	bne.n	8003ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa0:	f043 0204 	orr.w	r2, r3, #4
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e067      	b.n	8003b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003aba:	d041      	beq.n	8003b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003abc:	f7fe f97c 	bl	8001db8 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d302      	bcc.n	8003ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d136      	bne.n	8003b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	0c1b      	lsrs	r3, r3, #16
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d10c      	bne.n	8003af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	bf14      	ite	ne
 8003aee:	2301      	movne	r3, #1
 8003af0:	2300      	moveq	r3, #0
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	e00b      	b.n	8003b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	43da      	mvns	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	4013      	ands	r3, r2
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	bf14      	ite	ne
 8003b08:	2301      	movne	r3, #1
 8003b0a:	2300      	moveq	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d016      	beq.n	8003b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2c:	f043 0220 	orr.w	r2, r3, #32
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e021      	b.n	8003b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	0c1b      	lsrs	r3, r3, #16
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d10c      	bne.n	8003b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	43da      	mvns	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	4013      	ands	r3, r2
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	bf14      	ite	ne
 8003b5c:	2301      	movne	r3, #1
 8003b5e:	2300      	moveq	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	e00b      	b.n	8003b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	43da      	mvns	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	bf14      	ite	ne
 8003b76:	2301      	movne	r3, #1
 8003b78:	2300      	moveq	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f47f af6d 	bne.w	8003a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b98:	e034      	b.n	8003c04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f8e3 	bl	8003d66 <I2C_IsAcknowledgeFailed>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e034      	b.n	8003c14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bb0:	d028      	beq.n	8003c04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb2:	f7fe f901 	bl	8001db8 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d302      	bcc.n	8003bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d11d      	bne.n	8003c04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd2:	2b80      	cmp	r3, #128	@ 0x80
 8003bd4:	d016      	beq.n	8003c04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf0:	f043 0220 	orr.w	r2, r3, #32
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e007      	b.n	8003c14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c0e:	2b80      	cmp	r3, #128	@ 0x80
 8003c10:	d1c3      	bne.n	8003b9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c28:	e034      	b.n	8003c94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 f89b 	bl	8003d66 <I2C_IsAcknowledgeFailed>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e034      	b.n	8003ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c40:	d028      	beq.n	8003c94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c42:	f7fe f8b9 	bl	8001db8 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d302      	bcc.n	8003c58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d11d      	bne.n	8003c94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d016      	beq.n	8003c94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c80:	f043 0220 	orr.w	r2, r3, #32
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e007      	b.n	8003ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d1c3      	bne.n	8003c2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cb8:	e049      	b.n	8003d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	f003 0310 	and.w	r3, r3, #16
 8003cc4:	2b10      	cmp	r3, #16
 8003cc6:	d119      	bne.n	8003cfc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0210 	mvn.w	r2, #16
 8003cd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e030      	b.n	8003d5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfc:	f7fe f85c 	bl	8001db8 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d302      	bcc.n	8003d12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d11d      	bne.n	8003d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d1c:	2b40      	cmp	r3, #64	@ 0x40
 8003d1e:	d016      	beq.n	8003d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	f043 0220 	orr.w	r2, r3, #32
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e007      	b.n	8003d5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d58:	2b40      	cmp	r3, #64	@ 0x40
 8003d5a:	d1ae      	bne.n	8003cba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d7c:	d11b      	bne.n	8003db6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d86:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	f043 0204 	orr.w	r2, r3, #4
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr
	...

08003dc4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003dc8:	4b03      	ldr	r3, [pc, #12]	@ (8003dd8 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
}
 8003dce:	bf00      	nop
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	420e0020 	.word	0x420e0020

08003ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e272      	b.n	80042d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 8087 	beq.w	8003f0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dfc:	4b92      	ldr	r3, [pc, #584]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 030c 	and.w	r3, r3, #12
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d00c      	beq.n	8003e22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e08:	4b8f      	ldr	r3, [pc, #572]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 030c 	and.w	r3, r3, #12
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d112      	bne.n	8003e3a <HAL_RCC_OscConfig+0x5e>
 8003e14:	4b8c      	ldr	r3, [pc, #560]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e20:	d10b      	bne.n	8003e3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e22:	4b89      	ldr	r3, [pc, #548]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d06c      	beq.n	8003f08 <HAL_RCC_OscConfig+0x12c>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d168      	bne.n	8003f08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e24c      	b.n	80042d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e42:	d106      	bne.n	8003e52 <HAL_RCC_OscConfig+0x76>
 8003e44:	4b80      	ldr	r3, [pc, #512]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a7f      	ldr	r2, [pc, #508]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	e02e      	b.n	8003eb0 <HAL_RCC_OscConfig+0xd4>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x98>
 8003e5a:	4b7b      	ldr	r3, [pc, #492]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a7a      	ldr	r2, [pc, #488]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	4b78      	ldr	r3, [pc, #480]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a77      	ldr	r2, [pc, #476]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003e6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	e01d      	b.n	8003eb0 <HAL_RCC_OscConfig+0xd4>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0xbc>
 8003e7e:	4b72      	ldr	r3, [pc, #456]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a71      	ldr	r2, [pc, #452]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4b6f      	ldr	r3, [pc, #444]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a6e      	ldr	r2, [pc, #440]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCC_OscConfig+0xd4>
 8003e98:	4b6b      	ldr	r3, [pc, #428]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a6a      	ldr	r2, [pc, #424]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	4b68      	ldr	r3, [pc, #416]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a67      	ldr	r2, [pc, #412]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003eaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d013      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb8:	f7fd ff7e 	bl	8001db8 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec0:	f7fd ff7a 	bl	8001db8 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b64      	cmp	r3, #100	@ 0x64
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e200      	b.n	80042d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed2:	4b5d      	ldr	r3, [pc, #372]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0xe4>
 8003ede:	e014      	b.n	8003f0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fd ff6a 	bl	8001db8 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee8:	f7fd ff66 	bl	8001db8 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	@ 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e1ec      	b.n	80042d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efa:	4b53      	ldr	r3, [pc, #332]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x10c>
 8003f06:	e000      	b.n	8003f0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d063      	beq.n	8003fde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f16:	4b4c      	ldr	r3, [pc, #304]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00b      	beq.n	8003f3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f22:	4b49      	ldr	r3, [pc, #292]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d11c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x18c>
 8003f2e:	4b46      	ldr	r3, [pc, #280]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d116      	bne.n	8003f68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f3a:	4b43      	ldr	r3, [pc, #268]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <HAL_RCC_OscConfig+0x176>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d001      	beq.n	8003f52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e1c0      	b.n	80042d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f52:	4b3d      	ldr	r3, [pc, #244]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4939      	ldr	r1, [pc, #228]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f66:	e03a      	b.n	8003fde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d020      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f70:	4b36      	ldr	r3, [pc, #216]	@ (800404c <HAL_RCC_OscConfig+0x270>)
 8003f72:	2201      	movs	r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f76:	f7fd ff1f 	bl	8001db8 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f7e:	f7fd ff1b 	bl	8001db8 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e1a1      	b.n	80042d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f90:	4b2d      	ldr	r3, [pc, #180]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0f0      	beq.n	8003f7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4927      	ldr	r1, [pc, #156]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]
 8003fb0:	e015      	b.n	8003fde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fb2:	4b26      	ldr	r3, [pc, #152]	@ (800404c <HAL_RCC_OscConfig+0x270>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb8:	f7fd fefe 	bl	8001db8 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fc0:	f7fd fefa 	bl	8001db8 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e180      	b.n	80042d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d03a      	beq.n	8004060 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d019      	beq.n	8004026 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ff2:	4b17      	ldr	r3, [pc, #92]	@ (8004050 <HAL_RCC_OscConfig+0x274>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff8:	f7fd fede 	bl	8001db8 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004000:	f7fd feda 	bl	8001db8 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e160      	b.n	80042d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004012:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <HAL_RCC_OscConfig+0x26c>)
 8004014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800401e:	2001      	movs	r0, #1
 8004020:	f000 face 	bl	80045c0 <RCC_Delay>
 8004024:	e01c      	b.n	8004060 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004026:	4b0a      	ldr	r3, [pc, #40]	@ (8004050 <HAL_RCC_OscConfig+0x274>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402c:	f7fd fec4 	bl	8001db8 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004032:	e00f      	b.n	8004054 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004034:	f7fd fec0 	bl	8001db8 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d908      	bls.n	8004054 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e146      	b.n	80042d4 <HAL_RCC_OscConfig+0x4f8>
 8004046:	bf00      	nop
 8004048:	40021000 	.word	0x40021000
 800404c:	42420000 	.word	0x42420000
 8004050:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004054:	4b92      	ldr	r3, [pc, #584]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e9      	bne.n	8004034 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 80a6 	beq.w	80041ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800406e:	2300      	movs	r3, #0
 8004070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004072:	4b8b      	ldr	r3, [pc, #556]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10d      	bne.n	800409a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800407e:	4b88      	ldr	r3, [pc, #544]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	4a87      	ldr	r2, [pc, #540]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 8004084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004088:	61d3      	str	r3, [r2, #28]
 800408a:	4b85      	ldr	r3, [pc, #532]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004092:	60bb      	str	r3, [r7, #8]
 8004094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004096:	2301      	movs	r3, #1
 8004098:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409a:	4b82      	ldr	r3, [pc, #520]	@ (80042a4 <HAL_RCC_OscConfig+0x4c8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d118      	bne.n	80040d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040a6:	4b7f      	ldr	r3, [pc, #508]	@ (80042a4 <HAL_RCC_OscConfig+0x4c8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a7e      	ldr	r2, [pc, #504]	@ (80042a4 <HAL_RCC_OscConfig+0x4c8>)
 80040ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040b2:	f7fd fe81 	bl	8001db8 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ba:	f7fd fe7d 	bl	8001db8 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b64      	cmp	r3, #100	@ 0x64
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e103      	b.n	80042d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040cc:	4b75      	ldr	r3, [pc, #468]	@ (80042a4 <HAL_RCC_OscConfig+0x4c8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0f0      	beq.n	80040ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d106      	bne.n	80040ee <HAL_RCC_OscConfig+0x312>
 80040e0:	4b6f      	ldr	r3, [pc, #444]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	4a6e      	ldr	r2, [pc, #440]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 80040e6:	f043 0301 	orr.w	r3, r3, #1
 80040ea:	6213      	str	r3, [r2, #32]
 80040ec:	e02d      	b.n	800414a <HAL_RCC_OscConfig+0x36e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10c      	bne.n	8004110 <HAL_RCC_OscConfig+0x334>
 80040f6:	4b6a      	ldr	r3, [pc, #424]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	4a69      	ldr	r2, [pc, #420]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 80040fc:	f023 0301 	bic.w	r3, r3, #1
 8004100:	6213      	str	r3, [r2, #32]
 8004102:	4b67      	ldr	r3, [pc, #412]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	4a66      	ldr	r2, [pc, #408]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 8004108:	f023 0304 	bic.w	r3, r3, #4
 800410c:	6213      	str	r3, [r2, #32]
 800410e:	e01c      	b.n	800414a <HAL_RCC_OscConfig+0x36e>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	2b05      	cmp	r3, #5
 8004116:	d10c      	bne.n	8004132 <HAL_RCC_OscConfig+0x356>
 8004118:	4b61      	ldr	r3, [pc, #388]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	4a60      	ldr	r2, [pc, #384]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 800411e:	f043 0304 	orr.w	r3, r3, #4
 8004122:	6213      	str	r3, [r2, #32]
 8004124:	4b5e      	ldr	r3, [pc, #376]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	4a5d      	ldr	r2, [pc, #372]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 800412a:	f043 0301 	orr.w	r3, r3, #1
 800412e:	6213      	str	r3, [r2, #32]
 8004130:	e00b      	b.n	800414a <HAL_RCC_OscConfig+0x36e>
 8004132:	4b5b      	ldr	r3, [pc, #364]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	4a5a      	ldr	r2, [pc, #360]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 8004138:	f023 0301 	bic.w	r3, r3, #1
 800413c:	6213      	str	r3, [r2, #32]
 800413e:	4b58      	ldr	r3, [pc, #352]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	4a57      	ldr	r2, [pc, #348]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 8004144:	f023 0304 	bic.w	r3, r3, #4
 8004148:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d015      	beq.n	800417e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004152:	f7fd fe31 	bl	8001db8 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004158:	e00a      	b.n	8004170 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415a:	f7fd fe2d 	bl	8001db8 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004168:	4293      	cmp	r3, r2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e0b1      	b.n	80042d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004170:	4b4b      	ldr	r3, [pc, #300]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0ee      	beq.n	800415a <HAL_RCC_OscConfig+0x37e>
 800417c:	e014      	b.n	80041a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417e:	f7fd fe1b 	bl	8001db8 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004184:	e00a      	b.n	800419c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004186:	f7fd fe17 	bl	8001db8 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004194:	4293      	cmp	r3, r2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e09b      	b.n	80042d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800419c:	4b40      	ldr	r3, [pc, #256]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1ee      	bne.n	8004186 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041a8:	7dfb      	ldrb	r3, [r7, #23]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d105      	bne.n	80041ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ae:	4b3c      	ldr	r3, [pc, #240]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	4a3b      	ldr	r2, [pc, #236]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 80041b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 8087 	beq.w	80042d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041c4:	4b36      	ldr	r3, [pc, #216]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 030c 	and.w	r3, r3, #12
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d061      	beq.n	8004294 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d146      	bne.n	8004266 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d8:	4b33      	ldr	r3, [pc, #204]	@ (80042a8 <HAL_RCC_OscConfig+0x4cc>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041de:	f7fd fdeb 	bl	8001db8 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e6:	f7fd fde7 	bl	8001db8 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e06d      	b.n	80042d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041f8:	4b29      	ldr	r3, [pc, #164]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f0      	bne.n	80041e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800420c:	d108      	bne.n	8004220 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800420e:	4b24      	ldr	r3, [pc, #144]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	4921      	ldr	r1, [pc, #132]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 800421c:	4313      	orrs	r3, r2
 800421e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004220:	4b1f      	ldr	r3, [pc, #124]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a19      	ldr	r1, [r3, #32]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004230:	430b      	orrs	r3, r1
 8004232:	491b      	ldr	r1, [pc, #108]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 8004234:	4313      	orrs	r3, r2
 8004236:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004238:	4b1b      	ldr	r3, [pc, #108]	@ (80042a8 <HAL_RCC_OscConfig+0x4cc>)
 800423a:	2201      	movs	r2, #1
 800423c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423e:	f7fd fdbb 	bl	8001db8 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004246:	f7fd fdb7 	bl	8001db8 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e03d      	b.n	80042d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004258:	4b11      	ldr	r3, [pc, #68]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0x46a>
 8004264:	e035      	b.n	80042d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004266:	4b10      	ldr	r3, [pc, #64]	@ (80042a8 <HAL_RCC_OscConfig+0x4cc>)
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426c:	f7fd fda4 	bl	8001db8 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004274:	f7fd fda0 	bl	8001db8 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e026      	b.n	80042d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004286:	4b06      	ldr	r3, [pc, #24]	@ (80042a0 <HAL_RCC_OscConfig+0x4c4>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f0      	bne.n	8004274 <HAL_RCC_OscConfig+0x498>
 8004292:	e01e      	b.n	80042d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d107      	bne.n	80042ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e019      	b.n	80042d4 <HAL_RCC_OscConfig+0x4f8>
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40007000 	.word	0x40007000
 80042a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042ac:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <HAL_RCC_OscConfig+0x500>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d106      	bne.n	80042ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d001      	beq.n	80042d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40021000 	.word	0x40021000

080042e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0d0      	b.n	8004496 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042f4:	4b6a      	ldr	r3, [pc, #424]	@ (80044a0 <HAL_RCC_ClockConfig+0x1c0>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d910      	bls.n	8004324 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004302:	4b67      	ldr	r3, [pc, #412]	@ (80044a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 0207 	bic.w	r2, r3, #7
 800430a:	4965      	ldr	r1, [pc, #404]	@ (80044a0 <HAL_RCC_ClockConfig+0x1c0>)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004312:	4b63      	ldr	r3, [pc, #396]	@ (80044a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d001      	beq.n	8004324 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0b8      	b.n	8004496 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d020      	beq.n	8004372 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800433c:	4b59      	ldr	r3, [pc, #356]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	4a58      	ldr	r2, [pc, #352]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004342:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004346:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004354:	4b53      	ldr	r3, [pc, #332]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4a52      	ldr	r2, [pc, #328]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 800435a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800435e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004360:	4b50      	ldr	r3, [pc, #320]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	494d      	ldr	r1, [pc, #308]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 800436e:	4313      	orrs	r3, r2
 8004370:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d040      	beq.n	8004400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d107      	bne.n	8004396 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004386:	4b47      	ldr	r3, [pc, #284]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d115      	bne.n	80043be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e07f      	b.n	8004496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d107      	bne.n	80043ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800439e:	4b41      	ldr	r3, [pc, #260]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e073      	b.n	8004496 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ae:	4b3d      	ldr	r3, [pc, #244]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e06b      	b.n	8004496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043be:	4b39      	ldr	r3, [pc, #228]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f023 0203 	bic.w	r2, r3, #3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	4936      	ldr	r1, [pc, #216]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043d0:	f7fd fcf2 	bl	8001db8 <HAL_GetTick>
 80043d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d6:	e00a      	b.n	80043ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d8:	f7fd fcee 	bl	8001db8 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e053      	b.n	8004496 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ee:	4b2d      	ldr	r3, [pc, #180]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 020c 	and.w	r2, r3, #12
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d1eb      	bne.n	80043d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004400:	4b27      	ldr	r3, [pc, #156]	@ (80044a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d210      	bcs.n	8004430 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440e:	4b24      	ldr	r3, [pc, #144]	@ (80044a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 0207 	bic.w	r2, r3, #7
 8004416:	4922      	ldr	r1, [pc, #136]	@ (80044a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	4313      	orrs	r3, r2
 800441c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800441e:	4b20      	ldr	r3, [pc, #128]	@ (80044a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d001      	beq.n	8004430 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e032      	b.n	8004496 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d008      	beq.n	800444e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800443c:	4b19      	ldr	r3, [pc, #100]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	4916      	ldr	r1, [pc, #88]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 800444a:	4313      	orrs	r3, r2
 800444c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d009      	beq.n	800446e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800445a:	4b12      	ldr	r3, [pc, #72]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	490e      	ldr	r1, [pc, #56]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 800446a:	4313      	orrs	r3, r2
 800446c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800446e:	f000 f821 	bl	80044b4 <HAL_RCC_GetSysClockFreq>
 8004472:	4602      	mov	r2, r0
 8004474:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	091b      	lsrs	r3, r3, #4
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	490a      	ldr	r1, [pc, #40]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004480:	5ccb      	ldrb	r3, [r1, r3]
 8004482:	fa22 f303 	lsr.w	r3, r2, r3
 8004486:	4a09      	ldr	r2, [pc, #36]	@ (80044ac <HAL_RCC_ClockConfig+0x1cc>)
 8004488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800448a:	4b09      	ldr	r3, [pc, #36]	@ (80044b0 <HAL_RCC_ClockConfig+0x1d0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7fd fc50 	bl	8001d34 <HAL_InitTick>

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40022000 	.word	0x40022000
 80044a4:	40021000 	.word	0x40021000
 80044a8:	08008fd4 	.word	0x08008fd4
 80044ac:	20000000 	.word	0x20000000
 80044b0:	20000004 	.word	0x20000004

080044b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	2300      	movs	r3, #0
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	2300      	movs	r3, #0
 80044c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x94>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d002      	beq.n	80044e4 <HAL_RCC_GetSysClockFreq+0x30>
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d003      	beq.n	80044ea <HAL_RCC_GetSysClockFreq+0x36>
 80044e2:	e027      	b.n	8004534 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044e4:	4b19      	ldr	r3, [pc, #100]	@ (800454c <HAL_RCC_GetSysClockFreq+0x98>)
 80044e6:	613b      	str	r3, [r7, #16]
      break;
 80044e8:	e027      	b.n	800453a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	0c9b      	lsrs	r3, r3, #18
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	4a17      	ldr	r2, [pc, #92]	@ (8004550 <HAL_RCC_GetSysClockFreq+0x9c>)
 80044f4:	5cd3      	ldrb	r3, [r2, r3]
 80044f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d010      	beq.n	8004524 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004502:	4b11      	ldr	r3, [pc, #68]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x94>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	0c5b      	lsrs	r3, r3, #17
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	4a11      	ldr	r2, [pc, #68]	@ (8004554 <HAL_RCC_GetSysClockFreq+0xa0>)
 800450e:	5cd3      	ldrb	r3, [r2, r3]
 8004510:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a0d      	ldr	r2, [pc, #52]	@ (800454c <HAL_RCC_GetSysClockFreq+0x98>)
 8004516:	fb03 f202 	mul.w	r2, r3, r2
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	e004      	b.n	800452e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a0c      	ldr	r2, [pc, #48]	@ (8004558 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004528:	fb02 f303 	mul.w	r3, r2, r3
 800452c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	613b      	str	r3, [r7, #16]
      break;
 8004532:	e002      	b.n	800453a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004534:	4b05      	ldr	r3, [pc, #20]	@ (800454c <HAL_RCC_GetSysClockFreq+0x98>)
 8004536:	613b      	str	r3, [r7, #16]
      break;
 8004538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800453a:	693b      	ldr	r3, [r7, #16]
}
 800453c:	4618      	mov	r0, r3
 800453e:	371c      	adds	r7, #28
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40021000 	.word	0x40021000
 800454c:	007a1200 	.word	0x007a1200
 8004550:	08008fec 	.word	0x08008fec
 8004554:	08008ffc 	.word	0x08008ffc
 8004558:	003d0900 	.word	0x003d0900

0800455c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004560:	4b02      	ldr	r3, [pc, #8]	@ (800456c <HAL_RCC_GetHCLKFreq+0x10>)
 8004562:	681b      	ldr	r3, [r3, #0]
}
 8004564:	4618      	mov	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr
 800456c:	20000000 	.word	0x20000000

08004570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004574:	f7ff fff2 	bl	800455c <HAL_RCC_GetHCLKFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b05      	ldr	r3, [pc, #20]	@ (8004590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	0a1b      	lsrs	r3, r3, #8
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	4903      	ldr	r1, [pc, #12]	@ (8004594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004586:	5ccb      	ldrb	r3, [r1, r3]
 8004588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800458c:	4618      	mov	r0, r3
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40021000 	.word	0x40021000
 8004594:	08008fe4 	.word	0x08008fe4

08004598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800459c:	f7ff ffde 	bl	800455c <HAL_RCC_GetHCLKFreq>
 80045a0:	4602      	mov	r2, r0
 80045a2:	4b05      	ldr	r3, [pc, #20]	@ (80045b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	0adb      	lsrs	r3, r3, #11
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	4903      	ldr	r1, [pc, #12]	@ (80045bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045ae:	5ccb      	ldrb	r3, [r1, r3]
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40021000 	.word	0x40021000
 80045bc:	08008fe4 	.word	0x08008fe4

080045c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045c8:	4b0a      	ldr	r3, [pc, #40]	@ (80045f4 <RCC_Delay+0x34>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a0a      	ldr	r2, [pc, #40]	@ (80045f8 <RCC_Delay+0x38>)
 80045ce:	fba2 2303 	umull	r2, r3, r2, r3
 80045d2:	0a5b      	lsrs	r3, r3, #9
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045dc:	bf00      	nop
  }
  while (Delay --);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1e5a      	subs	r2, r3, #1
 80045e2:	60fa      	str	r2, [r7, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f9      	bne.n	80045dc <RCC_Delay+0x1c>
}
 80045e8:	bf00      	nop
 80045ea:	bf00      	nop
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr
 80045f4:	20000000 	.word	0x20000000
 80045f8:	10624dd3 	.word	0x10624dd3

080045fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d07d      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004618:	2300      	movs	r3, #0
 800461a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800461c:	4b4f      	ldr	r3, [pc, #316]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10d      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004628:	4b4c      	ldr	r3, [pc, #304]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	4a4b      	ldr	r2, [pc, #300]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004632:	61d3      	str	r3, [r2, #28]
 8004634:	4b49      	ldr	r3, [pc, #292]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004640:	2301      	movs	r3, #1
 8004642:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004644:	4b46      	ldr	r3, [pc, #280]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d118      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004650:	4b43      	ldr	r3, [pc, #268]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a42      	ldr	r2, [pc, #264]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004656:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800465a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800465c:	f7fd fbac 	bl	8001db8 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004662:	e008      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004664:	f7fd fba8 	bl	8001db8 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b64      	cmp	r3, #100	@ 0x64
 8004670:	d901      	bls.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e06d      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004676:	4b3a      	ldr	r3, [pc, #232]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004682:	4b36      	ldr	r3, [pc, #216]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800468a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d02e      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	429a      	cmp	r2, r3
 800469e:	d027      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046a0:	4b2e      	ldr	r3, [pc, #184]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046aa:	4b2e      	ldr	r3, [pc, #184]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046ac:	2201      	movs	r2, #1
 80046ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046b6:	4a29      	ldr	r2, [pc, #164]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d014      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c6:	f7fd fb77 	bl	8001db8 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046cc:	e00a      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ce:	f7fd fb73 	bl	8001db8 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046dc:	4293      	cmp	r3, r2
 80046de:	d901      	bls.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e036      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e4:	4b1d      	ldr	r3, [pc, #116]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0ee      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046f0:	4b1a      	ldr	r3, [pc, #104]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	4917      	ldr	r1, [pc, #92]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004702:	7dfb      	ldrb	r3, [r7, #23]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d105      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004708:	4b14      	ldr	r3, [pc, #80]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	4a13      	ldr	r2, [pc, #76]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800470e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004712:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d008      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004720:	4b0e      	ldr	r3, [pc, #56]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	490b      	ldr	r1, [pc, #44]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472e:	4313      	orrs	r3, r2
 8004730:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0310 	and.w	r3, r3, #16
 800473a:	2b00      	cmp	r3, #0
 800473c:	d008      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800473e:	4b07      	ldr	r3, [pc, #28]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	4904      	ldr	r1, [pc, #16]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800474c:	4313      	orrs	r3, r2
 800474e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40021000 	.word	0x40021000
 8004760:	40007000 	.word	0x40007000
 8004764:	42420440 	.word	0x42420440

08004768 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]
 8004778:	2300      	movs	r3, #0
 800477a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	2300      	movs	r3, #0
 8004782:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b10      	cmp	r3, #16
 8004788:	d00a      	beq.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b10      	cmp	r3, #16
 800478e:	f200 808a 	bhi.w	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d045      	beq.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b02      	cmp	r3, #2
 800479c:	d075      	beq.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800479e:	e082      	b.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80047a0:	4b46      	ldr	r3, [pc, #280]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80047a6:	4b45      	ldr	r3, [pc, #276]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d07b      	beq.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	0c9b      	lsrs	r3, r3, #18
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	4a41      	ldr	r2, [pc, #260]	@ (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80047bc:	5cd3      	ldrb	r3, [r2, r3]
 80047be:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d015      	beq.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047ca:	4b3c      	ldr	r3, [pc, #240]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	0c5b      	lsrs	r3, r3, #17
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	4a3b      	ldr	r2, [pc, #236]	@ (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80047d6:	5cd3      	ldrb	r3, [r2, r3]
 80047d8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00d      	beq.n	8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80047e4:	4a38      	ldr	r2, [pc, #224]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	fb02 f303 	mul.w	r3, r2, r3
 80047f2:	61fb      	str	r3, [r7, #28]
 80047f4:	e004      	b.n	8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	4a34      	ldr	r2, [pc, #208]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80047fa:	fb02 f303 	mul.w	r3, r2, r3
 80047fe:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004800:	4b2e      	ldr	r3, [pc, #184]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004808:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800480c:	d102      	bne.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	61bb      	str	r3, [r7, #24]
      break;
 8004812:	e04a      	b.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	4a2d      	ldr	r2, [pc, #180]	@ (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	085b      	lsrs	r3, r3, #1
 8004820:	61bb      	str	r3, [r7, #24]
      break;
 8004822:	e042      	b.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004824:	4b25      	ldr	r3, [pc, #148]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004830:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004834:	d108      	bne.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004840:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004844:	61bb      	str	r3, [r7, #24]
 8004846:	e01f      	b.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800484e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004852:	d109      	bne.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004854:	4b19      	ldr	r3, [pc, #100]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004860:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	e00f      	b.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800486e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004872:	d11c      	bne.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004874:	4b11      	ldr	r3, [pc, #68]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d016      	beq.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004880:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004884:	61bb      	str	r3, [r7, #24]
      break;
 8004886:	e012      	b.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004888:	e011      	b.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800488a:	f7ff fe85 	bl	8004598 <HAL_RCC_GetPCLK2Freq>
 800488e:	4602      	mov	r2, r0
 8004890:	4b0a      	ldr	r3, [pc, #40]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	0b9b      	lsrs	r3, r3, #14
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	3301      	adds	r3, #1
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a2:	61bb      	str	r3, [r7, #24]
      break;
 80048a4:	e004      	b.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80048a6:	bf00      	nop
 80048a8:	e002      	b.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80048aa:	bf00      	nop
 80048ac:	e000      	b.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80048ae:	bf00      	nop
    }
  }
  return (frequency);
 80048b0:	69bb      	ldr	r3, [r7, #24]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3720      	adds	r7, #32
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40021000 	.word	0x40021000
 80048c0:	08009000 	.word	0x08009000
 80048c4:	08009010 	.word	0x08009010
 80048c8:	007a1200 	.word	0x007a1200
 80048cc:	003d0900 	.word	0x003d0900
 80048d0:	aaaaaaab 	.word	0xaaaaaaab

080048d4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e07a      	b.n	80049e0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	7c5b      	ldrb	r3, [r3, #17]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d105      	bne.n	8004900 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fc ffb8 	bl	8001870 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f870 	bl	80049ec <HAL_RTC_WaitForSynchro>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d004      	beq.n	800491c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2204      	movs	r2, #4
 8004916:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e061      	b.n	80049e0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f892 	bl	8004a46 <RTC_EnterInitMode>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d004      	beq.n	8004932 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2204      	movs	r2, #4
 800492c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e056      	b.n	80049e0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0207 	bic.w	r2, r2, #7
 8004940:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d005      	beq.n	8004956 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800494a:	4b27      	ldr	r3, [pc, #156]	@ (80049e8 <HAL_RTC_Init+0x114>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494e:	4a26      	ldr	r2, [pc, #152]	@ (80049e8 <HAL_RTC_Init+0x114>)
 8004950:	f023 0301 	bic.w	r3, r3, #1
 8004954:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004956:	4b24      	ldr	r3, [pc, #144]	@ (80049e8 <HAL_RTC_Init+0x114>)
 8004958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495a:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	4921      	ldr	r1, [pc, #132]	@ (80049e8 <HAL_RTC_Init+0x114>)
 8004964:	4313      	orrs	r3, r2
 8004966:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004970:	d003      	beq.n	800497a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	e00e      	b.n	8004998 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800497a:	2001      	movs	r0, #1
 800497c:	f7ff fef4 	bl	8004768 <HAL_RCCEx_GetPeriphCLKFreq>
 8004980:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d104      	bne.n	8004992 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2204      	movs	r2, #4
 800498c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e026      	b.n	80049e0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3b01      	subs	r3, #1
 8004996:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	0c1a      	lsrs	r2, r3, #16
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f002 020f 	and.w	r2, r2, #15
 80049a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	b292      	uxth	r2, r2
 80049ae:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f870 	bl	8004a96 <RTC_ExitInitMode>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d004      	beq.n	80049c6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2204      	movs	r2, #4
 80049c0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e00c      	b.n	80049e0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80049de:	2300      	movs	r3, #0
  }
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40006c00 	.word	0x40006c00

080049ec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e01d      	b.n	8004a3e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0208 	bic.w	r2, r2, #8
 8004a10:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004a12:	f7fd f9d1 	bl	8001db8 <HAL_GetTick>
 8004a16:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004a18:	e009      	b.n	8004a2e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004a1a:	f7fd f9cd 	bl	8001db8 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a28:	d901      	bls.n	8004a2e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e007      	b.n	8004a3e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0ee      	beq.n	8004a1a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004a52:	f7fd f9b1 	bl	8001db8 <HAL_GetTick>
 8004a56:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004a58:	e009      	b.n	8004a6e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004a5a:	f7fd f9ad 	bl	8001db8 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a68:	d901      	bls.n	8004a6e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e00f      	b.n	8004a8e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 0320 	and.w	r3, r3, #32
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0ee      	beq.n	8004a5a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0210 	orr.w	r2, r2, #16
 8004a8a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b084      	sub	sp, #16
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0210 	bic.w	r2, r2, #16
 8004ab0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004ab2:	f7fd f981 	bl	8001db8 <HAL_GetTick>
 8004ab6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004ab8:	e009      	b.n	8004ace <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004aba:	f7fd f97d 	bl	8001db8 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ac8:	d901      	bls.n	8004ace <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e007      	b.n	8004ade <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0ee      	beq.n	8004aba <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b082      	sub	sp, #8
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e041      	b.n	8004b7c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d106      	bne.n	8004b12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7fd f845 	bl	8001b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2202      	movs	r2, #2
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3304      	adds	r3, #4
 8004b22:	4619      	mov	r1, r3
 8004b24:	4610      	mov	r0, r2
 8004b26:	f000 f93f 	bl	8004da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d001      	beq.n	8004b9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e032      	b.n	8004c02 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a18      	ldr	r2, [pc, #96]	@ (8004c0c <HAL_TIM_Base_Start+0x88>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00e      	beq.n	8004bcc <HAL_TIM_Base_Start+0x48>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bb6:	d009      	beq.n	8004bcc <HAL_TIM_Base_Start+0x48>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a14      	ldr	r2, [pc, #80]	@ (8004c10 <HAL_TIM_Base_Start+0x8c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <HAL_TIM_Base_Start+0x48>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a13      	ldr	r2, [pc, #76]	@ (8004c14 <HAL_TIM_Base_Start+0x90>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d111      	bne.n	8004bf0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b06      	cmp	r3, #6
 8004bdc:	d010      	beq.n	8004c00 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f042 0201 	orr.w	r2, r2, #1
 8004bec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bee:	e007      	b.n	8004c00 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40000800 	.word	0x40000800

08004c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_TIM_ConfigClockSource+0x1c>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e0b4      	b.n	8004d9e <HAL_TIM_ConfigClockSource+0x186>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c6c:	d03e      	beq.n	8004cec <HAL_TIM_ConfigClockSource+0xd4>
 8004c6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c72:	f200 8087 	bhi.w	8004d84 <HAL_TIM_ConfigClockSource+0x16c>
 8004c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c7a:	f000 8086 	beq.w	8004d8a <HAL_TIM_ConfigClockSource+0x172>
 8004c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c82:	d87f      	bhi.n	8004d84 <HAL_TIM_ConfigClockSource+0x16c>
 8004c84:	2b70      	cmp	r3, #112	@ 0x70
 8004c86:	d01a      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0xa6>
 8004c88:	2b70      	cmp	r3, #112	@ 0x70
 8004c8a:	d87b      	bhi.n	8004d84 <HAL_TIM_ConfigClockSource+0x16c>
 8004c8c:	2b60      	cmp	r3, #96	@ 0x60
 8004c8e:	d050      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x11a>
 8004c90:	2b60      	cmp	r3, #96	@ 0x60
 8004c92:	d877      	bhi.n	8004d84 <HAL_TIM_ConfigClockSource+0x16c>
 8004c94:	2b50      	cmp	r3, #80	@ 0x50
 8004c96:	d03c      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0xfa>
 8004c98:	2b50      	cmp	r3, #80	@ 0x50
 8004c9a:	d873      	bhi.n	8004d84 <HAL_TIM_ConfigClockSource+0x16c>
 8004c9c:	2b40      	cmp	r3, #64	@ 0x40
 8004c9e:	d058      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x13a>
 8004ca0:	2b40      	cmp	r3, #64	@ 0x40
 8004ca2:	d86f      	bhi.n	8004d84 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b30      	cmp	r3, #48	@ 0x30
 8004ca6:	d064      	beq.n	8004d72 <HAL_TIM_ConfigClockSource+0x15a>
 8004ca8:	2b30      	cmp	r3, #48	@ 0x30
 8004caa:	d86b      	bhi.n	8004d84 <HAL_TIM_ConfigClockSource+0x16c>
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	d060      	beq.n	8004d72 <HAL_TIM_ConfigClockSource+0x15a>
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d867      	bhi.n	8004d84 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d05c      	beq.n	8004d72 <HAL_TIM_ConfigClockSource+0x15a>
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	d05a      	beq.n	8004d72 <HAL_TIM_ConfigClockSource+0x15a>
 8004cbc:	e062      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cce:	f000 f950 	bl	8004f72 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ce0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	609a      	str	r2, [r3, #8]
      break;
 8004cea:	e04f      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cfc:	f000 f939 	bl	8004f72 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d0e:	609a      	str	r2, [r3, #8]
      break;
 8004d10:	e03c      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f000 f8b0 	bl	8004e84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2150      	movs	r1, #80	@ 0x50
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 f907 	bl	8004f3e <TIM_ITRx_SetConfig>
      break;
 8004d30:	e02c      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f000 f8ce 	bl	8004ee0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2160      	movs	r1, #96	@ 0x60
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 f8f7 	bl	8004f3e <TIM_ITRx_SetConfig>
      break;
 8004d50:	e01c      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f000 f890 	bl	8004e84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2140      	movs	r1, #64	@ 0x40
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 f8e7 	bl	8004f3e <TIM_ITRx_SetConfig>
      break;
 8004d70:	e00c      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	f000 f8de 	bl	8004f3e <TIM_ITRx_SetConfig>
      break;
 8004d82:	e003      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	73fb      	strb	r3, [r7, #15]
      break;
 8004d88:	e000      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a2f      	ldr	r2, [pc, #188]	@ (8004e78 <TIM_Base_SetConfig+0xd0>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00b      	beq.n	8004dd8 <TIM_Base_SetConfig+0x30>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc6:	d007      	beq.n	8004dd8 <TIM_Base_SetConfig+0x30>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a2c      	ldr	r2, [pc, #176]	@ (8004e7c <TIM_Base_SetConfig+0xd4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <TIM_Base_SetConfig+0x30>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a2b      	ldr	r2, [pc, #172]	@ (8004e80 <TIM_Base_SetConfig+0xd8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d108      	bne.n	8004dea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a22      	ldr	r2, [pc, #136]	@ (8004e78 <TIM_Base_SetConfig+0xd0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d00b      	beq.n	8004e0a <TIM_Base_SetConfig+0x62>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df8:	d007      	beq.n	8004e0a <TIM_Base_SetConfig+0x62>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8004e7c <TIM_Base_SetConfig+0xd4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d003      	beq.n	8004e0a <TIM_Base_SetConfig+0x62>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a1e      	ldr	r2, [pc, #120]	@ (8004e80 <TIM_Base_SetConfig+0xd8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d108      	bne.n	8004e1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a0d      	ldr	r2, [pc, #52]	@ (8004e78 <TIM_Base_SetConfig+0xd0>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d103      	bne.n	8004e50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d005      	beq.n	8004e6e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f023 0201 	bic.w	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	611a      	str	r2, [r3, #16]
  }
}
 8004e6e:	bf00      	nop
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bc80      	pop	{r7}
 8004e76:	4770      	bx	lr
 8004e78:	40012c00 	.word	0x40012c00
 8004e7c:	40000400 	.word	0x40000400
 8004e80:	40000800 	.word	0x40000800

08004e84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	f023 0201 	bic.w	r2, r3, #1
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f023 030a 	bic.w	r3, r3, #10
 8004ec0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	621a      	str	r2, [r3, #32]
}
 8004ed6:	bf00      	nop
 8004ed8:	371c      	adds	r7, #28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bc80      	pop	{r7}
 8004ede:	4770      	bx	lr

08004ee0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	f023 0210 	bic.w	r2, r3, #16
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	031b      	lsls	r3, r3, #12
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f1c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	621a      	str	r2, [r3, #32]
}
 8004f34:	bf00      	nop
 8004f36:	371c      	adds	r7, #28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bc80      	pop	{r7}
 8004f3c:	4770      	bx	lr

08004f3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f043 0307 	orr.w	r3, r3, #7
 8004f60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	609a      	str	r2, [r3, #8]
}
 8004f68:	bf00      	nop
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bc80      	pop	{r7}
 8004f70:	4770      	bx	lr

08004f72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b087      	sub	sp, #28
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	60f8      	str	r0, [r7, #12]
 8004f7a:	60b9      	str	r1, [r7, #8]
 8004f7c:	607a      	str	r2, [r7, #4]
 8004f7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	021a      	lsls	r2, r3, #8
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	431a      	orrs	r2, r3
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	609a      	str	r2, [r3, #8]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr

08004fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e046      	b.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a16      	ldr	r2, [pc, #88]	@ (8005060 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00e      	beq.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005014:	d009      	beq.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a12      	ldr	r2, [pc, #72]	@ (8005064 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d004      	beq.n	800502a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a10      	ldr	r2, [pc, #64]	@ (8005068 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d10c      	bne.n	8005044 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005030:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	4313      	orrs	r3, r2
 800503a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr
 8005060:	40012c00 	.word	0x40012c00
 8005064:	40000400 	.word	0x40000400
 8005068:	40000800 	.word	0x40000800

0800506c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e042      	b.n	8005104 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fc fdc8 	bl	8001c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2224      	movs	r2, #36	@ 0x24
 800509c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f971 	bl	8005398 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695a      	ldr	r2, [r3, #20]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	@ 0x28
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	4613      	mov	r3, r2
 800511a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b20      	cmp	r3, #32
 800512a:	d175      	bne.n	8005218 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <HAL_UART_Transmit+0x2c>
 8005132:	88fb      	ldrh	r3, [r7, #6]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e06e      	b.n	800521a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2221      	movs	r2, #33	@ 0x21
 8005146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800514a:	f7fc fe35 	bl	8001db8 <HAL_GetTick>
 800514e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	88fa      	ldrh	r2, [r7, #6]
 8005154:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	88fa      	ldrh	r2, [r7, #6]
 800515a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005164:	d108      	bne.n	8005178 <HAL_UART_Transmit+0x6c>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d104      	bne.n	8005178 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800516e:	2300      	movs	r3, #0
 8005170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	e003      	b.n	8005180 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800517c:	2300      	movs	r3, #0
 800517e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005180:	e02e      	b.n	80051e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2200      	movs	r2, #0
 800518a:	2180      	movs	r1, #128	@ 0x80
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f848 	bl	8005222 <UART_WaitOnFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e03a      	b.n	800521a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10b      	bne.n	80051c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	3302      	adds	r3, #2
 80051be:	61bb      	str	r3, [r7, #24]
 80051c0:	e007      	b.n	80051d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	781a      	ldrb	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	3301      	adds	r3, #1
 80051d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1cb      	bne.n	8005182 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2200      	movs	r2, #0
 80051f2:	2140      	movs	r1, #64	@ 0x40
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f814 	bl	8005222 <UART_WaitOnFlagUntilTimeout>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e006      	b.n	800521a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	e000      	b.n	800521a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005218:	2302      	movs	r3, #2
  }
}
 800521a:	4618      	mov	r0, r3
 800521c:	3720      	adds	r7, #32
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b086      	sub	sp, #24
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	603b      	str	r3, [r7, #0]
 800522e:	4613      	mov	r3, r2
 8005230:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005232:	e03b      	b.n	80052ac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800523a:	d037      	beq.n	80052ac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800523c:	f7fc fdbc 	bl	8001db8 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	6a3a      	ldr	r2, [r7, #32]
 8005248:	429a      	cmp	r2, r3
 800524a:	d302      	bcc.n	8005252 <UART_WaitOnFlagUntilTimeout+0x30>
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e03a      	b.n	80052cc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	d023      	beq.n	80052ac <UART_WaitOnFlagUntilTimeout+0x8a>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b80      	cmp	r3, #128	@ 0x80
 8005268:	d020      	beq.n	80052ac <UART_WaitOnFlagUntilTimeout+0x8a>
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b40      	cmp	r3, #64	@ 0x40
 800526e:	d01d      	beq.n	80052ac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b08      	cmp	r3, #8
 800527c:	d116      	bne.n	80052ac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800527e:	2300      	movs	r3, #0
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 f81d 	bl	80052d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2208      	movs	r2, #8
 800529e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e00f      	b.n	80052cc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	4013      	ands	r3, r2
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	bf0c      	ite	eq
 80052bc:	2301      	moveq	r3, #1
 80052be:	2300      	movne	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	79fb      	ldrb	r3, [r7, #7]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d0b4      	beq.n	8005234 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b095      	sub	sp, #84	@ 0x54
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	330c      	adds	r3, #12
 80052e2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	330c      	adds	r3, #12
 80052fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80052fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005302:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800530a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e5      	bne.n	80052dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3314      	adds	r3, #20
 8005316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	e853 3f00 	ldrex	r3, [r3]
 800531e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f023 0301 	bic.w	r3, r3, #1
 8005326:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3314      	adds	r3, #20
 800532e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005330:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005332:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e5      	bne.n	8005310 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005348:	2b01      	cmp	r3, #1
 800534a:	d119      	bne.n	8005380 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	330c      	adds	r3, #12
 8005352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	e853 3f00 	ldrex	r3, [r3]
 800535a:	60bb      	str	r3, [r7, #8]
   return(result);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f023 0310 	bic.w	r3, r3, #16
 8005362:	647b      	str	r3, [r7, #68]	@ 0x44
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	330c      	adds	r3, #12
 800536a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800536c:	61ba      	str	r2, [r7, #24]
 800536e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	6979      	ldr	r1, [r7, #20]
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	e841 2300 	strex	r3, r2, [r1]
 8005378:	613b      	str	r3, [r7, #16]
   return(result);
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1e5      	bne.n	800534c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800538e:	bf00      	nop
 8005390:	3754      	adds	r7, #84	@ 0x54
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr

08005398 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689a      	ldr	r2, [r3, #8]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80053d2:	f023 030c 	bic.w	r3, r3, #12
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6812      	ldr	r2, [r2, #0]
 80053da:	68b9      	ldr	r1, [r7, #8]
 80053dc:	430b      	orrs	r3, r1
 80053de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a2c      	ldr	r2, [pc, #176]	@ (80054ac <UART_SetConfig+0x114>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d103      	bne.n	8005408 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005400:	f7ff f8ca 	bl	8004598 <HAL_RCC_GetPCLK2Freq>
 8005404:	60f8      	str	r0, [r7, #12]
 8005406:	e002      	b.n	800540e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005408:	f7ff f8b2 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 800540c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4613      	mov	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	009a      	lsls	r2, r3, #2
 8005418:	441a      	add	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	fbb2 f3f3 	udiv	r3, r2, r3
 8005424:	4a22      	ldr	r2, [pc, #136]	@ (80054b0 <UART_SetConfig+0x118>)
 8005426:	fba2 2303 	umull	r2, r3, r2, r3
 800542a:	095b      	lsrs	r3, r3, #5
 800542c:	0119      	lsls	r1, r3, #4
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	009a      	lsls	r2, r3, #2
 8005438:	441a      	add	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	fbb2 f2f3 	udiv	r2, r2, r3
 8005444:	4b1a      	ldr	r3, [pc, #104]	@ (80054b0 <UART_SetConfig+0x118>)
 8005446:	fba3 0302 	umull	r0, r3, r3, r2
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	2064      	movs	r0, #100	@ 0x64
 800544e:	fb00 f303 	mul.w	r3, r0, r3
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	3332      	adds	r3, #50	@ 0x32
 8005458:	4a15      	ldr	r2, [pc, #84]	@ (80054b0 <UART_SetConfig+0x118>)
 800545a:	fba2 2303 	umull	r2, r3, r2, r3
 800545e:	095b      	lsrs	r3, r3, #5
 8005460:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005464:	4419      	add	r1, r3
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4613      	mov	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	009a      	lsls	r2, r3, #2
 8005470:	441a      	add	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	fbb2 f2f3 	udiv	r2, r2, r3
 800547c:	4b0c      	ldr	r3, [pc, #48]	@ (80054b0 <UART_SetConfig+0x118>)
 800547e:	fba3 0302 	umull	r0, r3, r3, r2
 8005482:	095b      	lsrs	r3, r3, #5
 8005484:	2064      	movs	r0, #100	@ 0x64
 8005486:	fb00 f303 	mul.w	r3, r0, r3
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	3332      	adds	r3, #50	@ 0x32
 8005490:	4a07      	ldr	r2, [pc, #28]	@ (80054b0 <UART_SetConfig+0x118>)
 8005492:	fba2 2303 	umull	r2, r3, r2, r3
 8005496:	095b      	lsrs	r3, r3, #5
 8005498:	f003 020f 	and.w	r2, r3, #15
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	440a      	add	r2, r1
 80054a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80054a4:	bf00      	nop
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40013800 	.word	0x40013800
 80054b0:	51eb851f 	.word	0x51eb851f

080054b4 <__cvt>:
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054ba:	461d      	mov	r5, r3
 80054bc:	bfbb      	ittet	lt
 80054be:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80054c2:	461d      	movlt	r5, r3
 80054c4:	2300      	movge	r3, #0
 80054c6:	232d      	movlt	r3, #45	@ 0x2d
 80054c8:	b088      	sub	sp, #32
 80054ca:	4614      	mov	r4, r2
 80054cc:	bfb8      	it	lt
 80054ce:	4614      	movlt	r4, r2
 80054d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80054d2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80054d4:	7013      	strb	r3, [r2, #0]
 80054d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80054d8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80054dc:	f023 0820 	bic.w	r8, r3, #32
 80054e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80054e4:	d005      	beq.n	80054f2 <__cvt+0x3e>
 80054e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80054ea:	d100      	bne.n	80054ee <__cvt+0x3a>
 80054ec:	3601      	adds	r6, #1
 80054ee:	2302      	movs	r3, #2
 80054f0:	e000      	b.n	80054f4 <__cvt+0x40>
 80054f2:	2303      	movs	r3, #3
 80054f4:	aa07      	add	r2, sp, #28
 80054f6:	9204      	str	r2, [sp, #16]
 80054f8:	aa06      	add	r2, sp, #24
 80054fa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80054fe:	e9cd 3600 	strd	r3, r6, [sp]
 8005502:	4622      	mov	r2, r4
 8005504:	462b      	mov	r3, r5
 8005506:	f000 fe5f 	bl	80061c8 <_dtoa_r>
 800550a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800550e:	4607      	mov	r7, r0
 8005510:	d119      	bne.n	8005546 <__cvt+0x92>
 8005512:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005514:	07db      	lsls	r3, r3, #31
 8005516:	d50e      	bpl.n	8005536 <__cvt+0x82>
 8005518:	eb00 0906 	add.w	r9, r0, r6
 800551c:	2200      	movs	r2, #0
 800551e:	2300      	movs	r3, #0
 8005520:	4620      	mov	r0, r4
 8005522:	4629      	mov	r1, r5
 8005524:	f7fb fa40 	bl	80009a8 <__aeabi_dcmpeq>
 8005528:	b108      	cbz	r0, 800552e <__cvt+0x7a>
 800552a:	f8cd 901c 	str.w	r9, [sp, #28]
 800552e:	2230      	movs	r2, #48	@ 0x30
 8005530:	9b07      	ldr	r3, [sp, #28]
 8005532:	454b      	cmp	r3, r9
 8005534:	d31e      	bcc.n	8005574 <__cvt+0xc0>
 8005536:	4638      	mov	r0, r7
 8005538:	9b07      	ldr	r3, [sp, #28]
 800553a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800553c:	1bdb      	subs	r3, r3, r7
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	b008      	add	sp, #32
 8005542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005546:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800554a:	eb00 0906 	add.w	r9, r0, r6
 800554e:	d1e5      	bne.n	800551c <__cvt+0x68>
 8005550:	7803      	ldrb	r3, [r0, #0]
 8005552:	2b30      	cmp	r3, #48	@ 0x30
 8005554:	d10a      	bne.n	800556c <__cvt+0xb8>
 8005556:	2200      	movs	r2, #0
 8005558:	2300      	movs	r3, #0
 800555a:	4620      	mov	r0, r4
 800555c:	4629      	mov	r1, r5
 800555e:	f7fb fa23 	bl	80009a8 <__aeabi_dcmpeq>
 8005562:	b918      	cbnz	r0, 800556c <__cvt+0xb8>
 8005564:	f1c6 0601 	rsb	r6, r6, #1
 8005568:	f8ca 6000 	str.w	r6, [sl]
 800556c:	f8da 3000 	ldr.w	r3, [sl]
 8005570:	4499      	add	r9, r3
 8005572:	e7d3      	b.n	800551c <__cvt+0x68>
 8005574:	1c59      	adds	r1, r3, #1
 8005576:	9107      	str	r1, [sp, #28]
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	e7d9      	b.n	8005530 <__cvt+0x7c>

0800557c <__exponent>:
 800557c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800557e:	2900      	cmp	r1, #0
 8005580:	bfb6      	itet	lt
 8005582:	232d      	movlt	r3, #45	@ 0x2d
 8005584:	232b      	movge	r3, #43	@ 0x2b
 8005586:	4249      	neglt	r1, r1
 8005588:	2909      	cmp	r1, #9
 800558a:	7002      	strb	r2, [r0, #0]
 800558c:	7043      	strb	r3, [r0, #1]
 800558e:	dd29      	ble.n	80055e4 <__exponent+0x68>
 8005590:	f10d 0307 	add.w	r3, sp, #7
 8005594:	461d      	mov	r5, r3
 8005596:	270a      	movs	r7, #10
 8005598:	fbb1 f6f7 	udiv	r6, r1, r7
 800559c:	461a      	mov	r2, r3
 800559e:	fb07 1416 	mls	r4, r7, r6, r1
 80055a2:	3430      	adds	r4, #48	@ 0x30
 80055a4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80055a8:	460c      	mov	r4, r1
 80055aa:	2c63      	cmp	r4, #99	@ 0x63
 80055ac:	4631      	mov	r1, r6
 80055ae:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80055b2:	dcf1      	bgt.n	8005598 <__exponent+0x1c>
 80055b4:	3130      	adds	r1, #48	@ 0x30
 80055b6:	1e94      	subs	r4, r2, #2
 80055b8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80055bc:	4623      	mov	r3, r4
 80055be:	1c41      	adds	r1, r0, #1
 80055c0:	42ab      	cmp	r3, r5
 80055c2:	d30a      	bcc.n	80055da <__exponent+0x5e>
 80055c4:	f10d 0309 	add.w	r3, sp, #9
 80055c8:	1a9b      	subs	r3, r3, r2
 80055ca:	42ac      	cmp	r4, r5
 80055cc:	bf88      	it	hi
 80055ce:	2300      	movhi	r3, #0
 80055d0:	3302      	adds	r3, #2
 80055d2:	4403      	add	r3, r0
 80055d4:	1a18      	subs	r0, r3, r0
 80055d6:	b003      	add	sp, #12
 80055d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055da:	f813 6b01 	ldrb.w	r6, [r3], #1
 80055de:	f801 6f01 	strb.w	r6, [r1, #1]!
 80055e2:	e7ed      	b.n	80055c0 <__exponent+0x44>
 80055e4:	2330      	movs	r3, #48	@ 0x30
 80055e6:	3130      	adds	r1, #48	@ 0x30
 80055e8:	7083      	strb	r3, [r0, #2]
 80055ea:	70c1      	strb	r1, [r0, #3]
 80055ec:	1d03      	adds	r3, r0, #4
 80055ee:	e7f1      	b.n	80055d4 <__exponent+0x58>

080055f0 <_printf_float>:
 80055f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f4:	b091      	sub	sp, #68	@ 0x44
 80055f6:	460c      	mov	r4, r1
 80055f8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80055fc:	4616      	mov	r6, r2
 80055fe:	461f      	mov	r7, r3
 8005600:	4605      	mov	r5, r0
 8005602:	f000 fcd3 	bl	8005fac <_localeconv_r>
 8005606:	6803      	ldr	r3, [r0, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	9308      	str	r3, [sp, #32]
 800560c:	f7fa fda0 	bl	8000150 <strlen>
 8005610:	2300      	movs	r3, #0
 8005612:	930e      	str	r3, [sp, #56]	@ 0x38
 8005614:	f8d8 3000 	ldr.w	r3, [r8]
 8005618:	9009      	str	r0, [sp, #36]	@ 0x24
 800561a:	3307      	adds	r3, #7
 800561c:	f023 0307 	bic.w	r3, r3, #7
 8005620:	f103 0208 	add.w	r2, r3, #8
 8005624:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005628:	f8d4 b000 	ldr.w	fp, [r4]
 800562c:	f8c8 2000 	str.w	r2, [r8]
 8005630:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005634:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005638:	930b      	str	r3, [sp, #44]	@ 0x2c
 800563a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800563e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005642:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005646:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800564a:	4b9c      	ldr	r3, [pc, #624]	@ (80058bc <_printf_float+0x2cc>)
 800564c:	f7fb f9de 	bl	8000a0c <__aeabi_dcmpun>
 8005650:	bb70      	cbnz	r0, 80056b0 <_printf_float+0xc0>
 8005652:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005656:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800565a:	4b98      	ldr	r3, [pc, #608]	@ (80058bc <_printf_float+0x2cc>)
 800565c:	f7fb f9b8 	bl	80009d0 <__aeabi_dcmple>
 8005660:	bb30      	cbnz	r0, 80056b0 <_printf_float+0xc0>
 8005662:	2200      	movs	r2, #0
 8005664:	2300      	movs	r3, #0
 8005666:	4640      	mov	r0, r8
 8005668:	4649      	mov	r1, r9
 800566a:	f7fb f9a7 	bl	80009bc <__aeabi_dcmplt>
 800566e:	b110      	cbz	r0, 8005676 <_printf_float+0x86>
 8005670:	232d      	movs	r3, #45	@ 0x2d
 8005672:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005676:	4a92      	ldr	r2, [pc, #584]	@ (80058c0 <_printf_float+0x2d0>)
 8005678:	4b92      	ldr	r3, [pc, #584]	@ (80058c4 <_printf_float+0x2d4>)
 800567a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800567e:	bf94      	ite	ls
 8005680:	4690      	movls	r8, r2
 8005682:	4698      	movhi	r8, r3
 8005684:	2303      	movs	r3, #3
 8005686:	f04f 0900 	mov.w	r9, #0
 800568a:	6123      	str	r3, [r4, #16]
 800568c:	f02b 0304 	bic.w	r3, fp, #4
 8005690:	6023      	str	r3, [r4, #0]
 8005692:	4633      	mov	r3, r6
 8005694:	4621      	mov	r1, r4
 8005696:	4628      	mov	r0, r5
 8005698:	9700      	str	r7, [sp, #0]
 800569a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800569c:	f000 f9d4 	bl	8005a48 <_printf_common>
 80056a0:	3001      	adds	r0, #1
 80056a2:	f040 8090 	bne.w	80057c6 <_printf_float+0x1d6>
 80056a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056aa:	b011      	add	sp, #68	@ 0x44
 80056ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056b0:	4642      	mov	r2, r8
 80056b2:	464b      	mov	r3, r9
 80056b4:	4640      	mov	r0, r8
 80056b6:	4649      	mov	r1, r9
 80056b8:	f7fb f9a8 	bl	8000a0c <__aeabi_dcmpun>
 80056bc:	b148      	cbz	r0, 80056d2 <_printf_float+0xe2>
 80056be:	464b      	mov	r3, r9
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	bfb8      	it	lt
 80056c4:	232d      	movlt	r3, #45	@ 0x2d
 80056c6:	4a80      	ldr	r2, [pc, #512]	@ (80058c8 <_printf_float+0x2d8>)
 80056c8:	bfb8      	it	lt
 80056ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80056ce:	4b7f      	ldr	r3, [pc, #508]	@ (80058cc <_printf_float+0x2dc>)
 80056d0:	e7d3      	b.n	800567a <_printf_float+0x8a>
 80056d2:	6863      	ldr	r3, [r4, #4]
 80056d4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	d13f      	bne.n	800575c <_printf_float+0x16c>
 80056dc:	2306      	movs	r3, #6
 80056de:	6063      	str	r3, [r4, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80056e6:	6023      	str	r3, [r4, #0]
 80056e8:	9206      	str	r2, [sp, #24]
 80056ea:	aa0e      	add	r2, sp, #56	@ 0x38
 80056ec:	e9cd a204 	strd	sl, r2, [sp, #16]
 80056f0:	aa0d      	add	r2, sp, #52	@ 0x34
 80056f2:	9203      	str	r2, [sp, #12]
 80056f4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80056f8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80056fc:	6863      	ldr	r3, [r4, #4]
 80056fe:	4642      	mov	r2, r8
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	4628      	mov	r0, r5
 8005704:	464b      	mov	r3, r9
 8005706:	910a      	str	r1, [sp, #40]	@ 0x28
 8005708:	f7ff fed4 	bl	80054b4 <__cvt>
 800570c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800570e:	4680      	mov	r8, r0
 8005710:	2947      	cmp	r1, #71	@ 0x47
 8005712:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005714:	d128      	bne.n	8005768 <_printf_float+0x178>
 8005716:	1cc8      	adds	r0, r1, #3
 8005718:	db02      	blt.n	8005720 <_printf_float+0x130>
 800571a:	6863      	ldr	r3, [r4, #4]
 800571c:	4299      	cmp	r1, r3
 800571e:	dd40      	ble.n	80057a2 <_printf_float+0x1b2>
 8005720:	f1aa 0a02 	sub.w	sl, sl, #2
 8005724:	fa5f fa8a 	uxtb.w	sl, sl
 8005728:	4652      	mov	r2, sl
 800572a:	3901      	subs	r1, #1
 800572c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005730:	910d      	str	r1, [sp, #52]	@ 0x34
 8005732:	f7ff ff23 	bl	800557c <__exponent>
 8005736:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005738:	4681      	mov	r9, r0
 800573a:	1813      	adds	r3, r2, r0
 800573c:	2a01      	cmp	r2, #1
 800573e:	6123      	str	r3, [r4, #16]
 8005740:	dc02      	bgt.n	8005748 <_printf_float+0x158>
 8005742:	6822      	ldr	r2, [r4, #0]
 8005744:	07d2      	lsls	r2, r2, #31
 8005746:	d501      	bpl.n	800574c <_printf_float+0x15c>
 8005748:	3301      	adds	r3, #1
 800574a:	6123      	str	r3, [r4, #16]
 800574c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005750:	2b00      	cmp	r3, #0
 8005752:	d09e      	beq.n	8005692 <_printf_float+0xa2>
 8005754:	232d      	movs	r3, #45	@ 0x2d
 8005756:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800575a:	e79a      	b.n	8005692 <_printf_float+0xa2>
 800575c:	2947      	cmp	r1, #71	@ 0x47
 800575e:	d1bf      	bne.n	80056e0 <_printf_float+0xf0>
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1bd      	bne.n	80056e0 <_printf_float+0xf0>
 8005764:	2301      	movs	r3, #1
 8005766:	e7ba      	b.n	80056de <_printf_float+0xee>
 8005768:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800576c:	d9dc      	bls.n	8005728 <_printf_float+0x138>
 800576e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005772:	d118      	bne.n	80057a6 <_printf_float+0x1b6>
 8005774:	2900      	cmp	r1, #0
 8005776:	6863      	ldr	r3, [r4, #4]
 8005778:	dd0b      	ble.n	8005792 <_printf_float+0x1a2>
 800577a:	6121      	str	r1, [r4, #16]
 800577c:	b913      	cbnz	r3, 8005784 <_printf_float+0x194>
 800577e:	6822      	ldr	r2, [r4, #0]
 8005780:	07d0      	lsls	r0, r2, #31
 8005782:	d502      	bpl.n	800578a <_printf_float+0x19a>
 8005784:	3301      	adds	r3, #1
 8005786:	440b      	add	r3, r1
 8005788:	6123      	str	r3, [r4, #16]
 800578a:	f04f 0900 	mov.w	r9, #0
 800578e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005790:	e7dc      	b.n	800574c <_printf_float+0x15c>
 8005792:	b913      	cbnz	r3, 800579a <_printf_float+0x1aa>
 8005794:	6822      	ldr	r2, [r4, #0]
 8005796:	07d2      	lsls	r2, r2, #31
 8005798:	d501      	bpl.n	800579e <_printf_float+0x1ae>
 800579a:	3302      	adds	r3, #2
 800579c:	e7f4      	b.n	8005788 <_printf_float+0x198>
 800579e:	2301      	movs	r3, #1
 80057a0:	e7f2      	b.n	8005788 <_printf_float+0x198>
 80057a2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80057a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057a8:	4299      	cmp	r1, r3
 80057aa:	db05      	blt.n	80057b8 <_printf_float+0x1c8>
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	6121      	str	r1, [r4, #16]
 80057b0:	07d8      	lsls	r0, r3, #31
 80057b2:	d5ea      	bpl.n	800578a <_printf_float+0x19a>
 80057b4:	1c4b      	adds	r3, r1, #1
 80057b6:	e7e7      	b.n	8005788 <_printf_float+0x198>
 80057b8:	2900      	cmp	r1, #0
 80057ba:	bfcc      	ite	gt
 80057bc:	2201      	movgt	r2, #1
 80057be:	f1c1 0202 	rsble	r2, r1, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	e7e0      	b.n	8005788 <_printf_float+0x198>
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	055a      	lsls	r2, r3, #21
 80057ca:	d407      	bmi.n	80057dc <_printf_float+0x1ec>
 80057cc:	6923      	ldr	r3, [r4, #16]
 80057ce:	4642      	mov	r2, r8
 80057d0:	4631      	mov	r1, r6
 80057d2:	4628      	mov	r0, r5
 80057d4:	47b8      	blx	r7
 80057d6:	3001      	adds	r0, #1
 80057d8:	d12b      	bne.n	8005832 <_printf_float+0x242>
 80057da:	e764      	b.n	80056a6 <_printf_float+0xb6>
 80057dc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80057e0:	f240 80dc 	bls.w	800599c <_printf_float+0x3ac>
 80057e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057e8:	2200      	movs	r2, #0
 80057ea:	2300      	movs	r3, #0
 80057ec:	f7fb f8dc 	bl	80009a8 <__aeabi_dcmpeq>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d033      	beq.n	800585c <_printf_float+0x26c>
 80057f4:	2301      	movs	r3, #1
 80057f6:	4631      	mov	r1, r6
 80057f8:	4628      	mov	r0, r5
 80057fa:	4a35      	ldr	r2, [pc, #212]	@ (80058d0 <_printf_float+0x2e0>)
 80057fc:	47b8      	blx	r7
 80057fe:	3001      	adds	r0, #1
 8005800:	f43f af51 	beq.w	80056a6 <_printf_float+0xb6>
 8005804:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005808:	4543      	cmp	r3, r8
 800580a:	db02      	blt.n	8005812 <_printf_float+0x222>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	07d8      	lsls	r0, r3, #31
 8005810:	d50f      	bpl.n	8005832 <_printf_float+0x242>
 8005812:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005816:	4631      	mov	r1, r6
 8005818:	4628      	mov	r0, r5
 800581a:	47b8      	blx	r7
 800581c:	3001      	adds	r0, #1
 800581e:	f43f af42 	beq.w	80056a6 <_printf_float+0xb6>
 8005822:	f04f 0900 	mov.w	r9, #0
 8005826:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800582a:	f104 0a1a 	add.w	sl, r4, #26
 800582e:	45c8      	cmp	r8, r9
 8005830:	dc09      	bgt.n	8005846 <_printf_float+0x256>
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	079b      	lsls	r3, r3, #30
 8005836:	f100 8102 	bmi.w	8005a3e <_printf_float+0x44e>
 800583a:	68e0      	ldr	r0, [r4, #12]
 800583c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800583e:	4298      	cmp	r0, r3
 8005840:	bfb8      	it	lt
 8005842:	4618      	movlt	r0, r3
 8005844:	e731      	b.n	80056aa <_printf_float+0xba>
 8005846:	2301      	movs	r3, #1
 8005848:	4652      	mov	r2, sl
 800584a:	4631      	mov	r1, r6
 800584c:	4628      	mov	r0, r5
 800584e:	47b8      	blx	r7
 8005850:	3001      	adds	r0, #1
 8005852:	f43f af28 	beq.w	80056a6 <_printf_float+0xb6>
 8005856:	f109 0901 	add.w	r9, r9, #1
 800585a:	e7e8      	b.n	800582e <_printf_float+0x23e>
 800585c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800585e:	2b00      	cmp	r3, #0
 8005860:	dc38      	bgt.n	80058d4 <_printf_float+0x2e4>
 8005862:	2301      	movs	r3, #1
 8005864:	4631      	mov	r1, r6
 8005866:	4628      	mov	r0, r5
 8005868:	4a19      	ldr	r2, [pc, #100]	@ (80058d0 <_printf_float+0x2e0>)
 800586a:	47b8      	blx	r7
 800586c:	3001      	adds	r0, #1
 800586e:	f43f af1a 	beq.w	80056a6 <_printf_float+0xb6>
 8005872:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005876:	ea59 0303 	orrs.w	r3, r9, r3
 800587a:	d102      	bne.n	8005882 <_printf_float+0x292>
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	07d9      	lsls	r1, r3, #31
 8005880:	d5d7      	bpl.n	8005832 <_printf_float+0x242>
 8005882:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005886:	4631      	mov	r1, r6
 8005888:	4628      	mov	r0, r5
 800588a:	47b8      	blx	r7
 800588c:	3001      	adds	r0, #1
 800588e:	f43f af0a 	beq.w	80056a6 <_printf_float+0xb6>
 8005892:	f04f 0a00 	mov.w	sl, #0
 8005896:	f104 0b1a 	add.w	fp, r4, #26
 800589a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800589c:	425b      	negs	r3, r3
 800589e:	4553      	cmp	r3, sl
 80058a0:	dc01      	bgt.n	80058a6 <_printf_float+0x2b6>
 80058a2:	464b      	mov	r3, r9
 80058a4:	e793      	b.n	80057ce <_printf_float+0x1de>
 80058a6:	2301      	movs	r3, #1
 80058a8:	465a      	mov	r2, fp
 80058aa:	4631      	mov	r1, r6
 80058ac:	4628      	mov	r0, r5
 80058ae:	47b8      	blx	r7
 80058b0:	3001      	adds	r0, #1
 80058b2:	f43f aef8 	beq.w	80056a6 <_printf_float+0xb6>
 80058b6:	f10a 0a01 	add.w	sl, sl, #1
 80058ba:	e7ee      	b.n	800589a <_printf_float+0x2aa>
 80058bc:	7fefffff 	.word	0x7fefffff
 80058c0:	08009012 	.word	0x08009012
 80058c4:	08009016 	.word	0x08009016
 80058c8:	0800901a 	.word	0x0800901a
 80058cc:	0800901e 	.word	0x0800901e
 80058d0:	08009022 	.word	0x08009022
 80058d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058d6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80058da:	4553      	cmp	r3, sl
 80058dc:	bfa8      	it	ge
 80058de:	4653      	movge	r3, sl
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	4699      	mov	r9, r3
 80058e4:	dc36      	bgt.n	8005954 <_printf_float+0x364>
 80058e6:	f04f 0b00 	mov.w	fp, #0
 80058ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058ee:	f104 021a 	add.w	r2, r4, #26
 80058f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80058f6:	eba3 0309 	sub.w	r3, r3, r9
 80058fa:	455b      	cmp	r3, fp
 80058fc:	dc31      	bgt.n	8005962 <_printf_float+0x372>
 80058fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005900:	459a      	cmp	sl, r3
 8005902:	dc3a      	bgt.n	800597a <_printf_float+0x38a>
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	07da      	lsls	r2, r3, #31
 8005908:	d437      	bmi.n	800597a <_printf_float+0x38a>
 800590a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800590c:	ebaa 0903 	sub.w	r9, sl, r3
 8005910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005912:	ebaa 0303 	sub.w	r3, sl, r3
 8005916:	4599      	cmp	r9, r3
 8005918:	bfa8      	it	ge
 800591a:	4699      	movge	r9, r3
 800591c:	f1b9 0f00 	cmp.w	r9, #0
 8005920:	dc33      	bgt.n	800598a <_printf_float+0x39a>
 8005922:	f04f 0800 	mov.w	r8, #0
 8005926:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800592a:	f104 0b1a 	add.w	fp, r4, #26
 800592e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005930:	ebaa 0303 	sub.w	r3, sl, r3
 8005934:	eba3 0309 	sub.w	r3, r3, r9
 8005938:	4543      	cmp	r3, r8
 800593a:	f77f af7a 	ble.w	8005832 <_printf_float+0x242>
 800593e:	2301      	movs	r3, #1
 8005940:	465a      	mov	r2, fp
 8005942:	4631      	mov	r1, r6
 8005944:	4628      	mov	r0, r5
 8005946:	47b8      	blx	r7
 8005948:	3001      	adds	r0, #1
 800594a:	f43f aeac 	beq.w	80056a6 <_printf_float+0xb6>
 800594e:	f108 0801 	add.w	r8, r8, #1
 8005952:	e7ec      	b.n	800592e <_printf_float+0x33e>
 8005954:	4642      	mov	r2, r8
 8005956:	4631      	mov	r1, r6
 8005958:	4628      	mov	r0, r5
 800595a:	47b8      	blx	r7
 800595c:	3001      	adds	r0, #1
 800595e:	d1c2      	bne.n	80058e6 <_printf_float+0x2f6>
 8005960:	e6a1      	b.n	80056a6 <_printf_float+0xb6>
 8005962:	2301      	movs	r3, #1
 8005964:	4631      	mov	r1, r6
 8005966:	4628      	mov	r0, r5
 8005968:	920a      	str	r2, [sp, #40]	@ 0x28
 800596a:	47b8      	blx	r7
 800596c:	3001      	adds	r0, #1
 800596e:	f43f ae9a 	beq.w	80056a6 <_printf_float+0xb6>
 8005972:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005974:	f10b 0b01 	add.w	fp, fp, #1
 8005978:	e7bb      	b.n	80058f2 <_printf_float+0x302>
 800597a:	4631      	mov	r1, r6
 800597c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005980:	4628      	mov	r0, r5
 8005982:	47b8      	blx	r7
 8005984:	3001      	adds	r0, #1
 8005986:	d1c0      	bne.n	800590a <_printf_float+0x31a>
 8005988:	e68d      	b.n	80056a6 <_printf_float+0xb6>
 800598a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800598c:	464b      	mov	r3, r9
 800598e:	4631      	mov	r1, r6
 8005990:	4628      	mov	r0, r5
 8005992:	4442      	add	r2, r8
 8005994:	47b8      	blx	r7
 8005996:	3001      	adds	r0, #1
 8005998:	d1c3      	bne.n	8005922 <_printf_float+0x332>
 800599a:	e684      	b.n	80056a6 <_printf_float+0xb6>
 800599c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80059a0:	f1ba 0f01 	cmp.w	sl, #1
 80059a4:	dc01      	bgt.n	80059aa <_printf_float+0x3ba>
 80059a6:	07db      	lsls	r3, r3, #31
 80059a8:	d536      	bpl.n	8005a18 <_printf_float+0x428>
 80059aa:	2301      	movs	r3, #1
 80059ac:	4642      	mov	r2, r8
 80059ae:	4631      	mov	r1, r6
 80059b0:	4628      	mov	r0, r5
 80059b2:	47b8      	blx	r7
 80059b4:	3001      	adds	r0, #1
 80059b6:	f43f ae76 	beq.w	80056a6 <_printf_float+0xb6>
 80059ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80059be:	4631      	mov	r1, r6
 80059c0:	4628      	mov	r0, r5
 80059c2:	47b8      	blx	r7
 80059c4:	3001      	adds	r0, #1
 80059c6:	f43f ae6e 	beq.w	80056a6 <_printf_float+0xb6>
 80059ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059ce:	2200      	movs	r2, #0
 80059d0:	2300      	movs	r3, #0
 80059d2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80059d6:	f7fa ffe7 	bl	80009a8 <__aeabi_dcmpeq>
 80059da:	b9c0      	cbnz	r0, 8005a0e <_printf_float+0x41e>
 80059dc:	4653      	mov	r3, sl
 80059de:	f108 0201 	add.w	r2, r8, #1
 80059e2:	4631      	mov	r1, r6
 80059e4:	4628      	mov	r0, r5
 80059e6:	47b8      	blx	r7
 80059e8:	3001      	adds	r0, #1
 80059ea:	d10c      	bne.n	8005a06 <_printf_float+0x416>
 80059ec:	e65b      	b.n	80056a6 <_printf_float+0xb6>
 80059ee:	2301      	movs	r3, #1
 80059f0:	465a      	mov	r2, fp
 80059f2:	4631      	mov	r1, r6
 80059f4:	4628      	mov	r0, r5
 80059f6:	47b8      	blx	r7
 80059f8:	3001      	adds	r0, #1
 80059fa:	f43f ae54 	beq.w	80056a6 <_printf_float+0xb6>
 80059fe:	f108 0801 	add.w	r8, r8, #1
 8005a02:	45d0      	cmp	r8, sl
 8005a04:	dbf3      	blt.n	80059ee <_printf_float+0x3fe>
 8005a06:	464b      	mov	r3, r9
 8005a08:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005a0c:	e6e0      	b.n	80057d0 <_printf_float+0x1e0>
 8005a0e:	f04f 0800 	mov.w	r8, #0
 8005a12:	f104 0b1a 	add.w	fp, r4, #26
 8005a16:	e7f4      	b.n	8005a02 <_printf_float+0x412>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	4642      	mov	r2, r8
 8005a1c:	e7e1      	b.n	80059e2 <_printf_float+0x3f2>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	464a      	mov	r2, r9
 8005a22:	4631      	mov	r1, r6
 8005a24:	4628      	mov	r0, r5
 8005a26:	47b8      	blx	r7
 8005a28:	3001      	adds	r0, #1
 8005a2a:	f43f ae3c 	beq.w	80056a6 <_printf_float+0xb6>
 8005a2e:	f108 0801 	add.w	r8, r8, #1
 8005a32:	68e3      	ldr	r3, [r4, #12]
 8005a34:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005a36:	1a5b      	subs	r3, r3, r1
 8005a38:	4543      	cmp	r3, r8
 8005a3a:	dcf0      	bgt.n	8005a1e <_printf_float+0x42e>
 8005a3c:	e6fd      	b.n	800583a <_printf_float+0x24a>
 8005a3e:	f04f 0800 	mov.w	r8, #0
 8005a42:	f104 0919 	add.w	r9, r4, #25
 8005a46:	e7f4      	b.n	8005a32 <_printf_float+0x442>

08005a48 <_printf_common>:
 8005a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a4c:	4616      	mov	r6, r2
 8005a4e:	4698      	mov	r8, r3
 8005a50:	688a      	ldr	r2, [r1, #8]
 8005a52:	690b      	ldr	r3, [r1, #16]
 8005a54:	4607      	mov	r7, r0
 8005a56:	4293      	cmp	r3, r2
 8005a58:	bfb8      	it	lt
 8005a5a:	4613      	movlt	r3, r2
 8005a5c:	6033      	str	r3, [r6, #0]
 8005a5e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a62:	460c      	mov	r4, r1
 8005a64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a68:	b10a      	cbz	r2, 8005a6e <_printf_common+0x26>
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	6033      	str	r3, [r6, #0]
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	0699      	lsls	r1, r3, #26
 8005a72:	bf42      	ittt	mi
 8005a74:	6833      	ldrmi	r3, [r6, #0]
 8005a76:	3302      	addmi	r3, #2
 8005a78:	6033      	strmi	r3, [r6, #0]
 8005a7a:	6825      	ldr	r5, [r4, #0]
 8005a7c:	f015 0506 	ands.w	r5, r5, #6
 8005a80:	d106      	bne.n	8005a90 <_printf_common+0x48>
 8005a82:	f104 0a19 	add.w	sl, r4, #25
 8005a86:	68e3      	ldr	r3, [r4, #12]
 8005a88:	6832      	ldr	r2, [r6, #0]
 8005a8a:	1a9b      	subs	r3, r3, r2
 8005a8c:	42ab      	cmp	r3, r5
 8005a8e:	dc2b      	bgt.n	8005ae8 <_printf_common+0xa0>
 8005a90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a94:	6822      	ldr	r2, [r4, #0]
 8005a96:	3b00      	subs	r3, #0
 8005a98:	bf18      	it	ne
 8005a9a:	2301      	movne	r3, #1
 8005a9c:	0692      	lsls	r2, r2, #26
 8005a9e:	d430      	bmi.n	8005b02 <_printf_common+0xba>
 8005aa0:	4641      	mov	r1, r8
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005aa8:	47c8      	blx	r9
 8005aaa:	3001      	adds	r0, #1
 8005aac:	d023      	beq.n	8005af6 <_printf_common+0xae>
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	6922      	ldr	r2, [r4, #16]
 8005ab2:	f003 0306 	and.w	r3, r3, #6
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	bf14      	ite	ne
 8005aba:	2500      	movne	r5, #0
 8005abc:	6833      	ldreq	r3, [r6, #0]
 8005abe:	f04f 0600 	mov.w	r6, #0
 8005ac2:	bf08      	it	eq
 8005ac4:	68e5      	ldreq	r5, [r4, #12]
 8005ac6:	f104 041a 	add.w	r4, r4, #26
 8005aca:	bf08      	it	eq
 8005acc:	1aed      	subeq	r5, r5, r3
 8005ace:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005ad2:	bf08      	it	eq
 8005ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	bfc4      	itt	gt
 8005adc:	1a9b      	subgt	r3, r3, r2
 8005ade:	18ed      	addgt	r5, r5, r3
 8005ae0:	42b5      	cmp	r5, r6
 8005ae2:	d11a      	bne.n	8005b1a <_printf_common+0xd2>
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	e008      	b.n	8005afa <_printf_common+0xb2>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	4652      	mov	r2, sl
 8005aec:	4641      	mov	r1, r8
 8005aee:	4638      	mov	r0, r7
 8005af0:	47c8      	blx	r9
 8005af2:	3001      	adds	r0, #1
 8005af4:	d103      	bne.n	8005afe <_printf_common+0xb6>
 8005af6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afe:	3501      	adds	r5, #1
 8005b00:	e7c1      	b.n	8005a86 <_printf_common+0x3e>
 8005b02:	2030      	movs	r0, #48	@ 0x30
 8005b04:	18e1      	adds	r1, r4, r3
 8005b06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b10:	4422      	add	r2, r4
 8005b12:	3302      	adds	r3, #2
 8005b14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b18:	e7c2      	b.n	8005aa0 <_printf_common+0x58>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	4622      	mov	r2, r4
 8005b1e:	4641      	mov	r1, r8
 8005b20:	4638      	mov	r0, r7
 8005b22:	47c8      	blx	r9
 8005b24:	3001      	adds	r0, #1
 8005b26:	d0e6      	beq.n	8005af6 <_printf_common+0xae>
 8005b28:	3601      	adds	r6, #1
 8005b2a:	e7d9      	b.n	8005ae0 <_printf_common+0x98>

08005b2c <_printf_i>:
 8005b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b30:	7e0f      	ldrb	r7, [r1, #24]
 8005b32:	4691      	mov	r9, r2
 8005b34:	2f78      	cmp	r7, #120	@ 0x78
 8005b36:	4680      	mov	r8, r0
 8005b38:	460c      	mov	r4, r1
 8005b3a:	469a      	mov	sl, r3
 8005b3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b42:	d807      	bhi.n	8005b54 <_printf_i+0x28>
 8005b44:	2f62      	cmp	r7, #98	@ 0x62
 8005b46:	d80a      	bhi.n	8005b5e <_printf_i+0x32>
 8005b48:	2f00      	cmp	r7, #0
 8005b4a:	f000 80d3 	beq.w	8005cf4 <_printf_i+0x1c8>
 8005b4e:	2f58      	cmp	r7, #88	@ 0x58
 8005b50:	f000 80ba 	beq.w	8005cc8 <_printf_i+0x19c>
 8005b54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b5c:	e03a      	b.n	8005bd4 <_printf_i+0xa8>
 8005b5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b62:	2b15      	cmp	r3, #21
 8005b64:	d8f6      	bhi.n	8005b54 <_printf_i+0x28>
 8005b66:	a101      	add	r1, pc, #4	@ (adr r1, 8005b6c <_printf_i+0x40>)
 8005b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b6c:	08005bc5 	.word	0x08005bc5
 8005b70:	08005bd9 	.word	0x08005bd9
 8005b74:	08005b55 	.word	0x08005b55
 8005b78:	08005b55 	.word	0x08005b55
 8005b7c:	08005b55 	.word	0x08005b55
 8005b80:	08005b55 	.word	0x08005b55
 8005b84:	08005bd9 	.word	0x08005bd9
 8005b88:	08005b55 	.word	0x08005b55
 8005b8c:	08005b55 	.word	0x08005b55
 8005b90:	08005b55 	.word	0x08005b55
 8005b94:	08005b55 	.word	0x08005b55
 8005b98:	08005cdb 	.word	0x08005cdb
 8005b9c:	08005c03 	.word	0x08005c03
 8005ba0:	08005c95 	.word	0x08005c95
 8005ba4:	08005b55 	.word	0x08005b55
 8005ba8:	08005b55 	.word	0x08005b55
 8005bac:	08005cfd 	.word	0x08005cfd
 8005bb0:	08005b55 	.word	0x08005b55
 8005bb4:	08005c03 	.word	0x08005c03
 8005bb8:	08005b55 	.word	0x08005b55
 8005bbc:	08005b55 	.word	0x08005b55
 8005bc0:	08005c9d 	.word	0x08005c9d
 8005bc4:	6833      	ldr	r3, [r6, #0]
 8005bc6:	1d1a      	adds	r2, r3, #4
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6032      	str	r2, [r6, #0]
 8005bcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e09e      	b.n	8005d16 <_printf_i+0x1ea>
 8005bd8:	6833      	ldr	r3, [r6, #0]
 8005bda:	6820      	ldr	r0, [r4, #0]
 8005bdc:	1d19      	adds	r1, r3, #4
 8005bde:	6031      	str	r1, [r6, #0]
 8005be0:	0606      	lsls	r6, r0, #24
 8005be2:	d501      	bpl.n	8005be8 <_printf_i+0xbc>
 8005be4:	681d      	ldr	r5, [r3, #0]
 8005be6:	e003      	b.n	8005bf0 <_printf_i+0xc4>
 8005be8:	0645      	lsls	r5, r0, #25
 8005bea:	d5fb      	bpl.n	8005be4 <_printf_i+0xb8>
 8005bec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005bf0:	2d00      	cmp	r5, #0
 8005bf2:	da03      	bge.n	8005bfc <_printf_i+0xd0>
 8005bf4:	232d      	movs	r3, #45	@ 0x2d
 8005bf6:	426d      	negs	r5, r5
 8005bf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bfc:	230a      	movs	r3, #10
 8005bfe:	4859      	ldr	r0, [pc, #356]	@ (8005d64 <_printf_i+0x238>)
 8005c00:	e011      	b.n	8005c26 <_printf_i+0xfa>
 8005c02:	6821      	ldr	r1, [r4, #0]
 8005c04:	6833      	ldr	r3, [r6, #0]
 8005c06:	0608      	lsls	r0, r1, #24
 8005c08:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c0c:	d402      	bmi.n	8005c14 <_printf_i+0xe8>
 8005c0e:	0649      	lsls	r1, r1, #25
 8005c10:	bf48      	it	mi
 8005c12:	b2ad      	uxthmi	r5, r5
 8005c14:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c16:	6033      	str	r3, [r6, #0]
 8005c18:	bf14      	ite	ne
 8005c1a:	230a      	movne	r3, #10
 8005c1c:	2308      	moveq	r3, #8
 8005c1e:	4851      	ldr	r0, [pc, #324]	@ (8005d64 <_printf_i+0x238>)
 8005c20:	2100      	movs	r1, #0
 8005c22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c26:	6866      	ldr	r6, [r4, #4]
 8005c28:	2e00      	cmp	r6, #0
 8005c2a:	bfa8      	it	ge
 8005c2c:	6821      	ldrge	r1, [r4, #0]
 8005c2e:	60a6      	str	r6, [r4, #8]
 8005c30:	bfa4      	itt	ge
 8005c32:	f021 0104 	bicge.w	r1, r1, #4
 8005c36:	6021      	strge	r1, [r4, #0]
 8005c38:	b90d      	cbnz	r5, 8005c3e <_printf_i+0x112>
 8005c3a:	2e00      	cmp	r6, #0
 8005c3c:	d04b      	beq.n	8005cd6 <_printf_i+0x1aa>
 8005c3e:	4616      	mov	r6, r2
 8005c40:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c44:	fb03 5711 	mls	r7, r3, r1, r5
 8005c48:	5dc7      	ldrb	r7, [r0, r7]
 8005c4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c4e:	462f      	mov	r7, r5
 8005c50:	42bb      	cmp	r3, r7
 8005c52:	460d      	mov	r5, r1
 8005c54:	d9f4      	bls.n	8005c40 <_printf_i+0x114>
 8005c56:	2b08      	cmp	r3, #8
 8005c58:	d10b      	bne.n	8005c72 <_printf_i+0x146>
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	07df      	lsls	r7, r3, #31
 8005c5e:	d508      	bpl.n	8005c72 <_printf_i+0x146>
 8005c60:	6923      	ldr	r3, [r4, #16]
 8005c62:	6861      	ldr	r1, [r4, #4]
 8005c64:	4299      	cmp	r1, r3
 8005c66:	bfde      	ittt	le
 8005c68:	2330      	movle	r3, #48	@ 0x30
 8005c6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c6e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005c72:	1b92      	subs	r2, r2, r6
 8005c74:	6122      	str	r2, [r4, #16]
 8005c76:	464b      	mov	r3, r9
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	f8cd a000 	str.w	sl, [sp]
 8005c80:	aa03      	add	r2, sp, #12
 8005c82:	f7ff fee1 	bl	8005a48 <_printf_common>
 8005c86:	3001      	adds	r0, #1
 8005c88:	d14a      	bne.n	8005d20 <_printf_i+0x1f4>
 8005c8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c8e:	b004      	add	sp, #16
 8005c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	f043 0320 	orr.w	r3, r3, #32
 8005c9a:	6023      	str	r3, [r4, #0]
 8005c9c:	2778      	movs	r7, #120	@ 0x78
 8005c9e:	4832      	ldr	r0, [pc, #200]	@ (8005d68 <_printf_i+0x23c>)
 8005ca0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	6831      	ldr	r1, [r6, #0]
 8005ca8:	061f      	lsls	r7, r3, #24
 8005caa:	f851 5b04 	ldr.w	r5, [r1], #4
 8005cae:	d402      	bmi.n	8005cb6 <_printf_i+0x18a>
 8005cb0:	065f      	lsls	r7, r3, #25
 8005cb2:	bf48      	it	mi
 8005cb4:	b2ad      	uxthmi	r5, r5
 8005cb6:	6031      	str	r1, [r6, #0]
 8005cb8:	07d9      	lsls	r1, r3, #31
 8005cba:	bf44      	itt	mi
 8005cbc:	f043 0320 	orrmi.w	r3, r3, #32
 8005cc0:	6023      	strmi	r3, [r4, #0]
 8005cc2:	b11d      	cbz	r5, 8005ccc <_printf_i+0x1a0>
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	e7ab      	b.n	8005c20 <_printf_i+0xf4>
 8005cc8:	4826      	ldr	r0, [pc, #152]	@ (8005d64 <_printf_i+0x238>)
 8005cca:	e7e9      	b.n	8005ca0 <_printf_i+0x174>
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	f023 0320 	bic.w	r3, r3, #32
 8005cd2:	6023      	str	r3, [r4, #0]
 8005cd4:	e7f6      	b.n	8005cc4 <_printf_i+0x198>
 8005cd6:	4616      	mov	r6, r2
 8005cd8:	e7bd      	b.n	8005c56 <_printf_i+0x12a>
 8005cda:	6833      	ldr	r3, [r6, #0]
 8005cdc:	6825      	ldr	r5, [r4, #0]
 8005cde:	1d18      	adds	r0, r3, #4
 8005ce0:	6961      	ldr	r1, [r4, #20]
 8005ce2:	6030      	str	r0, [r6, #0]
 8005ce4:	062e      	lsls	r6, r5, #24
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	d501      	bpl.n	8005cee <_printf_i+0x1c2>
 8005cea:	6019      	str	r1, [r3, #0]
 8005cec:	e002      	b.n	8005cf4 <_printf_i+0x1c8>
 8005cee:	0668      	lsls	r0, r5, #25
 8005cf0:	d5fb      	bpl.n	8005cea <_printf_i+0x1be>
 8005cf2:	8019      	strh	r1, [r3, #0]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	4616      	mov	r6, r2
 8005cf8:	6123      	str	r3, [r4, #16]
 8005cfa:	e7bc      	b.n	8005c76 <_printf_i+0x14a>
 8005cfc:	6833      	ldr	r3, [r6, #0]
 8005cfe:	2100      	movs	r1, #0
 8005d00:	1d1a      	adds	r2, r3, #4
 8005d02:	6032      	str	r2, [r6, #0]
 8005d04:	681e      	ldr	r6, [r3, #0]
 8005d06:	6862      	ldr	r2, [r4, #4]
 8005d08:	4630      	mov	r0, r6
 8005d0a:	f000 f9c6 	bl	800609a <memchr>
 8005d0e:	b108      	cbz	r0, 8005d14 <_printf_i+0x1e8>
 8005d10:	1b80      	subs	r0, r0, r6
 8005d12:	6060      	str	r0, [r4, #4]
 8005d14:	6863      	ldr	r3, [r4, #4]
 8005d16:	6123      	str	r3, [r4, #16]
 8005d18:	2300      	movs	r3, #0
 8005d1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d1e:	e7aa      	b.n	8005c76 <_printf_i+0x14a>
 8005d20:	4632      	mov	r2, r6
 8005d22:	4649      	mov	r1, r9
 8005d24:	4640      	mov	r0, r8
 8005d26:	6923      	ldr	r3, [r4, #16]
 8005d28:	47d0      	blx	sl
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	d0ad      	beq.n	8005c8a <_printf_i+0x15e>
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	079b      	lsls	r3, r3, #30
 8005d32:	d413      	bmi.n	8005d5c <_printf_i+0x230>
 8005d34:	68e0      	ldr	r0, [r4, #12]
 8005d36:	9b03      	ldr	r3, [sp, #12]
 8005d38:	4298      	cmp	r0, r3
 8005d3a:	bfb8      	it	lt
 8005d3c:	4618      	movlt	r0, r3
 8005d3e:	e7a6      	b.n	8005c8e <_printf_i+0x162>
 8005d40:	2301      	movs	r3, #1
 8005d42:	4632      	mov	r2, r6
 8005d44:	4649      	mov	r1, r9
 8005d46:	4640      	mov	r0, r8
 8005d48:	47d0      	blx	sl
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	d09d      	beq.n	8005c8a <_printf_i+0x15e>
 8005d4e:	3501      	adds	r5, #1
 8005d50:	68e3      	ldr	r3, [r4, #12]
 8005d52:	9903      	ldr	r1, [sp, #12]
 8005d54:	1a5b      	subs	r3, r3, r1
 8005d56:	42ab      	cmp	r3, r5
 8005d58:	dcf2      	bgt.n	8005d40 <_printf_i+0x214>
 8005d5a:	e7eb      	b.n	8005d34 <_printf_i+0x208>
 8005d5c:	2500      	movs	r5, #0
 8005d5e:	f104 0619 	add.w	r6, r4, #25
 8005d62:	e7f5      	b.n	8005d50 <_printf_i+0x224>
 8005d64:	08009024 	.word	0x08009024
 8005d68:	08009035 	.word	0x08009035

08005d6c <std>:
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	b510      	push	{r4, lr}
 8005d70:	4604      	mov	r4, r0
 8005d72:	e9c0 3300 	strd	r3, r3, [r0]
 8005d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d7a:	6083      	str	r3, [r0, #8]
 8005d7c:	8181      	strh	r1, [r0, #12]
 8005d7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d80:	81c2      	strh	r2, [r0, #14]
 8005d82:	6183      	str	r3, [r0, #24]
 8005d84:	4619      	mov	r1, r3
 8005d86:	2208      	movs	r2, #8
 8005d88:	305c      	adds	r0, #92	@ 0x5c
 8005d8a:	f000 f906 	bl	8005f9a <memset>
 8005d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc4 <std+0x58>)
 8005d90:	6224      	str	r4, [r4, #32]
 8005d92:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d94:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc8 <std+0x5c>)
 8005d96:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d98:	4b0c      	ldr	r3, [pc, #48]	@ (8005dcc <std+0x60>)
 8005d9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd0 <std+0x64>)
 8005d9e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005da0:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd4 <std+0x68>)
 8005da2:	429c      	cmp	r4, r3
 8005da4:	d006      	beq.n	8005db4 <std+0x48>
 8005da6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005daa:	4294      	cmp	r4, r2
 8005dac:	d002      	beq.n	8005db4 <std+0x48>
 8005dae:	33d0      	adds	r3, #208	@ 0xd0
 8005db0:	429c      	cmp	r4, r3
 8005db2:	d105      	bne.n	8005dc0 <std+0x54>
 8005db4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dbc:	f000 b96a 	b.w	8006094 <__retarget_lock_init_recursive>
 8005dc0:	bd10      	pop	{r4, pc}
 8005dc2:	bf00      	nop
 8005dc4:	08005f15 	.word	0x08005f15
 8005dc8:	08005f37 	.word	0x08005f37
 8005dcc:	08005f6f 	.word	0x08005f6f
 8005dd0:	08005f93 	.word	0x08005f93
 8005dd4:	20000334 	.word	0x20000334

08005dd8 <stdio_exit_handler>:
 8005dd8:	4a02      	ldr	r2, [pc, #8]	@ (8005de4 <stdio_exit_handler+0xc>)
 8005dda:	4903      	ldr	r1, [pc, #12]	@ (8005de8 <stdio_exit_handler+0x10>)
 8005ddc:	4803      	ldr	r0, [pc, #12]	@ (8005dec <stdio_exit_handler+0x14>)
 8005dde:	f000 b869 	b.w	8005eb4 <_fwalk_sglue>
 8005de2:	bf00      	nop
 8005de4:	2000000c 	.word	0x2000000c
 8005de8:	080079d5 	.word	0x080079d5
 8005dec:	2000001c 	.word	0x2000001c

08005df0 <cleanup_stdio>:
 8005df0:	6841      	ldr	r1, [r0, #4]
 8005df2:	4b0c      	ldr	r3, [pc, #48]	@ (8005e24 <cleanup_stdio+0x34>)
 8005df4:	b510      	push	{r4, lr}
 8005df6:	4299      	cmp	r1, r3
 8005df8:	4604      	mov	r4, r0
 8005dfa:	d001      	beq.n	8005e00 <cleanup_stdio+0x10>
 8005dfc:	f001 fdea 	bl	80079d4 <_fflush_r>
 8005e00:	68a1      	ldr	r1, [r4, #8]
 8005e02:	4b09      	ldr	r3, [pc, #36]	@ (8005e28 <cleanup_stdio+0x38>)
 8005e04:	4299      	cmp	r1, r3
 8005e06:	d002      	beq.n	8005e0e <cleanup_stdio+0x1e>
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f001 fde3 	bl	80079d4 <_fflush_r>
 8005e0e:	68e1      	ldr	r1, [r4, #12]
 8005e10:	4b06      	ldr	r3, [pc, #24]	@ (8005e2c <cleanup_stdio+0x3c>)
 8005e12:	4299      	cmp	r1, r3
 8005e14:	d004      	beq.n	8005e20 <cleanup_stdio+0x30>
 8005e16:	4620      	mov	r0, r4
 8005e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e1c:	f001 bdda 	b.w	80079d4 <_fflush_r>
 8005e20:	bd10      	pop	{r4, pc}
 8005e22:	bf00      	nop
 8005e24:	20000334 	.word	0x20000334
 8005e28:	2000039c 	.word	0x2000039c
 8005e2c:	20000404 	.word	0x20000404

08005e30 <global_stdio_init.part.0>:
 8005e30:	b510      	push	{r4, lr}
 8005e32:	4b0b      	ldr	r3, [pc, #44]	@ (8005e60 <global_stdio_init.part.0+0x30>)
 8005e34:	4c0b      	ldr	r4, [pc, #44]	@ (8005e64 <global_stdio_init.part.0+0x34>)
 8005e36:	4a0c      	ldr	r2, [pc, #48]	@ (8005e68 <global_stdio_init.part.0+0x38>)
 8005e38:	4620      	mov	r0, r4
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	2104      	movs	r1, #4
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f7ff ff94 	bl	8005d6c <std>
 8005e44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e48:	2201      	movs	r2, #1
 8005e4a:	2109      	movs	r1, #9
 8005e4c:	f7ff ff8e 	bl	8005d6c <std>
 8005e50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e54:	2202      	movs	r2, #2
 8005e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e5a:	2112      	movs	r1, #18
 8005e5c:	f7ff bf86 	b.w	8005d6c <std>
 8005e60:	2000046c 	.word	0x2000046c
 8005e64:	20000334 	.word	0x20000334
 8005e68:	08005dd9 	.word	0x08005dd9

08005e6c <__sfp_lock_acquire>:
 8005e6c:	4801      	ldr	r0, [pc, #4]	@ (8005e74 <__sfp_lock_acquire+0x8>)
 8005e6e:	f000 b912 	b.w	8006096 <__retarget_lock_acquire_recursive>
 8005e72:	bf00      	nop
 8005e74:	20000475 	.word	0x20000475

08005e78 <__sfp_lock_release>:
 8005e78:	4801      	ldr	r0, [pc, #4]	@ (8005e80 <__sfp_lock_release+0x8>)
 8005e7a:	f000 b90d 	b.w	8006098 <__retarget_lock_release_recursive>
 8005e7e:	bf00      	nop
 8005e80:	20000475 	.word	0x20000475

08005e84 <__sinit>:
 8005e84:	b510      	push	{r4, lr}
 8005e86:	4604      	mov	r4, r0
 8005e88:	f7ff fff0 	bl	8005e6c <__sfp_lock_acquire>
 8005e8c:	6a23      	ldr	r3, [r4, #32]
 8005e8e:	b11b      	cbz	r3, 8005e98 <__sinit+0x14>
 8005e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e94:	f7ff bff0 	b.w	8005e78 <__sfp_lock_release>
 8005e98:	4b04      	ldr	r3, [pc, #16]	@ (8005eac <__sinit+0x28>)
 8005e9a:	6223      	str	r3, [r4, #32]
 8005e9c:	4b04      	ldr	r3, [pc, #16]	@ (8005eb0 <__sinit+0x2c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1f5      	bne.n	8005e90 <__sinit+0xc>
 8005ea4:	f7ff ffc4 	bl	8005e30 <global_stdio_init.part.0>
 8005ea8:	e7f2      	b.n	8005e90 <__sinit+0xc>
 8005eaa:	bf00      	nop
 8005eac:	08005df1 	.word	0x08005df1
 8005eb0:	2000046c 	.word	0x2000046c

08005eb4 <_fwalk_sglue>:
 8005eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eb8:	4607      	mov	r7, r0
 8005eba:	4688      	mov	r8, r1
 8005ebc:	4614      	mov	r4, r2
 8005ebe:	2600      	movs	r6, #0
 8005ec0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ec4:	f1b9 0901 	subs.w	r9, r9, #1
 8005ec8:	d505      	bpl.n	8005ed6 <_fwalk_sglue+0x22>
 8005eca:	6824      	ldr	r4, [r4, #0]
 8005ecc:	2c00      	cmp	r4, #0
 8005ece:	d1f7      	bne.n	8005ec0 <_fwalk_sglue+0xc>
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ed6:	89ab      	ldrh	r3, [r5, #12]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d907      	bls.n	8005eec <_fwalk_sglue+0x38>
 8005edc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	d003      	beq.n	8005eec <_fwalk_sglue+0x38>
 8005ee4:	4629      	mov	r1, r5
 8005ee6:	4638      	mov	r0, r7
 8005ee8:	47c0      	blx	r8
 8005eea:	4306      	orrs	r6, r0
 8005eec:	3568      	adds	r5, #104	@ 0x68
 8005eee:	e7e9      	b.n	8005ec4 <_fwalk_sglue+0x10>

08005ef0 <iprintf>:
 8005ef0:	b40f      	push	{r0, r1, r2, r3}
 8005ef2:	b507      	push	{r0, r1, r2, lr}
 8005ef4:	4906      	ldr	r1, [pc, #24]	@ (8005f10 <iprintf+0x20>)
 8005ef6:	ab04      	add	r3, sp, #16
 8005ef8:	6808      	ldr	r0, [r1, #0]
 8005efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005efe:	6881      	ldr	r1, [r0, #8]
 8005f00:	9301      	str	r3, [sp, #4]
 8005f02:	f001 fbcf 	bl	80076a4 <_vfiprintf_r>
 8005f06:	b003      	add	sp, #12
 8005f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f0c:	b004      	add	sp, #16
 8005f0e:	4770      	bx	lr
 8005f10:	20000018 	.word	0x20000018

08005f14 <__sread>:
 8005f14:	b510      	push	{r4, lr}
 8005f16:	460c      	mov	r4, r1
 8005f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f1c:	f000 f86c 	bl	8005ff8 <_read_r>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	bfab      	itete	ge
 8005f24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f26:	89a3      	ldrhlt	r3, [r4, #12]
 8005f28:	181b      	addge	r3, r3, r0
 8005f2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f2e:	bfac      	ite	ge
 8005f30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f32:	81a3      	strhlt	r3, [r4, #12]
 8005f34:	bd10      	pop	{r4, pc}

08005f36 <__swrite>:
 8005f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3a:	461f      	mov	r7, r3
 8005f3c:	898b      	ldrh	r3, [r1, #12]
 8005f3e:	4605      	mov	r5, r0
 8005f40:	05db      	lsls	r3, r3, #23
 8005f42:	460c      	mov	r4, r1
 8005f44:	4616      	mov	r6, r2
 8005f46:	d505      	bpl.n	8005f54 <__swrite+0x1e>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f50:	f000 f840 	bl	8005fd4 <_lseek_r>
 8005f54:	89a3      	ldrh	r3, [r4, #12]
 8005f56:	4632      	mov	r2, r6
 8005f58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f5c:	81a3      	strh	r3, [r4, #12]
 8005f5e:	4628      	mov	r0, r5
 8005f60:	463b      	mov	r3, r7
 8005f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6a:	f000 b857 	b.w	800601c <_write_r>

08005f6e <__sseek>:
 8005f6e:	b510      	push	{r4, lr}
 8005f70:	460c      	mov	r4, r1
 8005f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f76:	f000 f82d 	bl	8005fd4 <_lseek_r>
 8005f7a:	1c43      	adds	r3, r0, #1
 8005f7c:	89a3      	ldrh	r3, [r4, #12]
 8005f7e:	bf15      	itete	ne
 8005f80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f8a:	81a3      	strheq	r3, [r4, #12]
 8005f8c:	bf18      	it	ne
 8005f8e:	81a3      	strhne	r3, [r4, #12]
 8005f90:	bd10      	pop	{r4, pc}

08005f92 <__sclose>:
 8005f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f96:	f000 b80d 	b.w	8005fb4 <_close_r>

08005f9a <memset>:
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	4402      	add	r2, r0
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d100      	bne.n	8005fa4 <memset+0xa>
 8005fa2:	4770      	bx	lr
 8005fa4:	f803 1b01 	strb.w	r1, [r3], #1
 8005fa8:	e7f9      	b.n	8005f9e <memset+0x4>
	...

08005fac <_localeconv_r>:
 8005fac:	4800      	ldr	r0, [pc, #0]	@ (8005fb0 <_localeconv_r+0x4>)
 8005fae:	4770      	bx	lr
 8005fb0:	20000158 	.word	0x20000158

08005fb4 <_close_r>:
 8005fb4:	b538      	push	{r3, r4, r5, lr}
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	4d05      	ldr	r5, [pc, #20]	@ (8005fd0 <_close_r+0x1c>)
 8005fba:	4604      	mov	r4, r0
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	602b      	str	r3, [r5, #0]
 8005fc0:	f7fb fd33 	bl	8001a2a <_close>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d102      	bne.n	8005fce <_close_r+0x1a>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	b103      	cbz	r3, 8005fce <_close_r+0x1a>
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	20000470 	.word	0x20000470

08005fd4 <_lseek_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	4608      	mov	r0, r1
 8005fda:	4611      	mov	r1, r2
 8005fdc:	2200      	movs	r2, #0
 8005fde:	4d05      	ldr	r5, [pc, #20]	@ (8005ff4 <_lseek_r+0x20>)
 8005fe0:	602a      	str	r2, [r5, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f7fb fd45 	bl	8001a72 <_lseek>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	d102      	bne.n	8005ff2 <_lseek_r+0x1e>
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	b103      	cbz	r3, 8005ff2 <_lseek_r+0x1e>
 8005ff0:	6023      	str	r3, [r4, #0]
 8005ff2:	bd38      	pop	{r3, r4, r5, pc}
 8005ff4:	20000470 	.word	0x20000470

08005ff8 <_read_r>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	4608      	mov	r0, r1
 8005ffe:	4611      	mov	r1, r2
 8006000:	2200      	movs	r2, #0
 8006002:	4d05      	ldr	r5, [pc, #20]	@ (8006018 <_read_r+0x20>)
 8006004:	602a      	str	r2, [r5, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	f7fb fcd6 	bl	80019b8 <_read>
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	d102      	bne.n	8006016 <_read_r+0x1e>
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	b103      	cbz	r3, 8006016 <_read_r+0x1e>
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	bd38      	pop	{r3, r4, r5, pc}
 8006018:	20000470 	.word	0x20000470

0800601c <_write_r>:
 800601c:	b538      	push	{r3, r4, r5, lr}
 800601e:	4604      	mov	r4, r0
 8006020:	4608      	mov	r0, r1
 8006022:	4611      	mov	r1, r2
 8006024:	2200      	movs	r2, #0
 8006026:	4d05      	ldr	r5, [pc, #20]	@ (800603c <_write_r+0x20>)
 8006028:	602a      	str	r2, [r5, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	f7fb fce1 	bl	80019f2 <_write>
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	d102      	bne.n	800603a <_write_r+0x1e>
 8006034:	682b      	ldr	r3, [r5, #0]
 8006036:	b103      	cbz	r3, 800603a <_write_r+0x1e>
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	20000470 	.word	0x20000470

08006040 <__errno>:
 8006040:	4b01      	ldr	r3, [pc, #4]	@ (8006048 <__errno+0x8>)
 8006042:	6818      	ldr	r0, [r3, #0]
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	20000018 	.word	0x20000018

0800604c <__libc_init_array>:
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	2600      	movs	r6, #0
 8006050:	4d0c      	ldr	r5, [pc, #48]	@ (8006084 <__libc_init_array+0x38>)
 8006052:	4c0d      	ldr	r4, [pc, #52]	@ (8006088 <__libc_init_array+0x3c>)
 8006054:	1b64      	subs	r4, r4, r5
 8006056:	10a4      	asrs	r4, r4, #2
 8006058:	42a6      	cmp	r6, r4
 800605a:	d109      	bne.n	8006070 <__libc_init_array+0x24>
 800605c:	f002 ff84 	bl	8008f68 <_init>
 8006060:	2600      	movs	r6, #0
 8006062:	4d0a      	ldr	r5, [pc, #40]	@ (800608c <__libc_init_array+0x40>)
 8006064:	4c0a      	ldr	r4, [pc, #40]	@ (8006090 <__libc_init_array+0x44>)
 8006066:	1b64      	subs	r4, r4, r5
 8006068:	10a4      	asrs	r4, r4, #2
 800606a:	42a6      	cmp	r6, r4
 800606c:	d105      	bne.n	800607a <__libc_init_array+0x2e>
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	f855 3b04 	ldr.w	r3, [r5], #4
 8006074:	4798      	blx	r3
 8006076:	3601      	adds	r6, #1
 8006078:	e7ee      	b.n	8006058 <__libc_init_array+0xc>
 800607a:	f855 3b04 	ldr.w	r3, [r5], #4
 800607e:	4798      	blx	r3
 8006080:	3601      	adds	r6, #1
 8006082:	e7f2      	b.n	800606a <__libc_init_array+0x1e>
 8006084:	080093e8 	.word	0x080093e8
 8006088:	080093e8 	.word	0x080093e8
 800608c:	080093e8 	.word	0x080093e8
 8006090:	080093ec 	.word	0x080093ec

08006094 <__retarget_lock_init_recursive>:
 8006094:	4770      	bx	lr

08006096 <__retarget_lock_acquire_recursive>:
 8006096:	4770      	bx	lr

08006098 <__retarget_lock_release_recursive>:
 8006098:	4770      	bx	lr

0800609a <memchr>:
 800609a:	4603      	mov	r3, r0
 800609c:	b510      	push	{r4, lr}
 800609e:	b2c9      	uxtb	r1, r1
 80060a0:	4402      	add	r2, r0
 80060a2:	4293      	cmp	r3, r2
 80060a4:	4618      	mov	r0, r3
 80060a6:	d101      	bne.n	80060ac <memchr+0x12>
 80060a8:	2000      	movs	r0, #0
 80060aa:	e003      	b.n	80060b4 <memchr+0x1a>
 80060ac:	7804      	ldrb	r4, [r0, #0]
 80060ae:	3301      	adds	r3, #1
 80060b0:	428c      	cmp	r4, r1
 80060b2:	d1f6      	bne.n	80060a2 <memchr+0x8>
 80060b4:	bd10      	pop	{r4, pc}

080060b6 <quorem>:
 80060b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ba:	6903      	ldr	r3, [r0, #16]
 80060bc:	690c      	ldr	r4, [r1, #16]
 80060be:	4607      	mov	r7, r0
 80060c0:	42a3      	cmp	r3, r4
 80060c2:	db7e      	blt.n	80061c2 <quorem+0x10c>
 80060c4:	3c01      	subs	r4, #1
 80060c6:	00a3      	lsls	r3, r4, #2
 80060c8:	f100 0514 	add.w	r5, r0, #20
 80060cc:	f101 0814 	add.w	r8, r1, #20
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060d6:	9301      	str	r3, [sp, #4]
 80060d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060e0:	3301      	adds	r3, #1
 80060e2:	429a      	cmp	r2, r3
 80060e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80060e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060ec:	d32e      	bcc.n	800614c <quorem+0x96>
 80060ee:	f04f 0a00 	mov.w	sl, #0
 80060f2:	46c4      	mov	ip, r8
 80060f4:	46ae      	mov	lr, r5
 80060f6:	46d3      	mov	fp, sl
 80060f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060fc:	b298      	uxth	r0, r3
 80060fe:	fb06 a000 	mla	r0, r6, r0, sl
 8006102:	0c1b      	lsrs	r3, r3, #16
 8006104:	0c02      	lsrs	r2, r0, #16
 8006106:	fb06 2303 	mla	r3, r6, r3, r2
 800610a:	f8de 2000 	ldr.w	r2, [lr]
 800610e:	b280      	uxth	r0, r0
 8006110:	b292      	uxth	r2, r2
 8006112:	1a12      	subs	r2, r2, r0
 8006114:	445a      	add	r2, fp
 8006116:	f8de 0000 	ldr.w	r0, [lr]
 800611a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800611e:	b29b      	uxth	r3, r3
 8006120:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006124:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006128:	b292      	uxth	r2, r2
 800612a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800612e:	45e1      	cmp	r9, ip
 8006130:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006134:	f84e 2b04 	str.w	r2, [lr], #4
 8006138:	d2de      	bcs.n	80060f8 <quorem+0x42>
 800613a:	9b00      	ldr	r3, [sp, #0]
 800613c:	58eb      	ldr	r3, [r5, r3]
 800613e:	b92b      	cbnz	r3, 800614c <quorem+0x96>
 8006140:	9b01      	ldr	r3, [sp, #4]
 8006142:	3b04      	subs	r3, #4
 8006144:	429d      	cmp	r5, r3
 8006146:	461a      	mov	r2, r3
 8006148:	d32f      	bcc.n	80061aa <quorem+0xf4>
 800614a:	613c      	str	r4, [r7, #16]
 800614c:	4638      	mov	r0, r7
 800614e:	f001 f979 	bl	8007444 <__mcmp>
 8006152:	2800      	cmp	r0, #0
 8006154:	db25      	blt.n	80061a2 <quorem+0xec>
 8006156:	4629      	mov	r1, r5
 8006158:	2000      	movs	r0, #0
 800615a:	f858 2b04 	ldr.w	r2, [r8], #4
 800615e:	f8d1 c000 	ldr.w	ip, [r1]
 8006162:	fa1f fe82 	uxth.w	lr, r2
 8006166:	fa1f f38c 	uxth.w	r3, ip
 800616a:	eba3 030e 	sub.w	r3, r3, lr
 800616e:	4403      	add	r3, r0
 8006170:	0c12      	lsrs	r2, r2, #16
 8006172:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006176:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800617a:	b29b      	uxth	r3, r3
 800617c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006180:	45c1      	cmp	r9, r8
 8006182:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006186:	f841 3b04 	str.w	r3, [r1], #4
 800618a:	d2e6      	bcs.n	800615a <quorem+0xa4>
 800618c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006190:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006194:	b922      	cbnz	r2, 80061a0 <quorem+0xea>
 8006196:	3b04      	subs	r3, #4
 8006198:	429d      	cmp	r5, r3
 800619a:	461a      	mov	r2, r3
 800619c:	d30b      	bcc.n	80061b6 <quorem+0x100>
 800619e:	613c      	str	r4, [r7, #16]
 80061a0:	3601      	adds	r6, #1
 80061a2:	4630      	mov	r0, r6
 80061a4:	b003      	add	sp, #12
 80061a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061aa:	6812      	ldr	r2, [r2, #0]
 80061ac:	3b04      	subs	r3, #4
 80061ae:	2a00      	cmp	r2, #0
 80061b0:	d1cb      	bne.n	800614a <quorem+0x94>
 80061b2:	3c01      	subs	r4, #1
 80061b4:	e7c6      	b.n	8006144 <quorem+0x8e>
 80061b6:	6812      	ldr	r2, [r2, #0]
 80061b8:	3b04      	subs	r3, #4
 80061ba:	2a00      	cmp	r2, #0
 80061bc:	d1ef      	bne.n	800619e <quorem+0xe8>
 80061be:	3c01      	subs	r4, #1
 80061c0:	e7ea      	b.n	8006198 <quorem+0xe2>
 80061c2:	2000      	movs	r0, #0
 80061c4:	e7ee      	b.n	80061a4 <quorem+0xee>
	...

080061c8 <_dtoa_r>:
 80061c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061cc:	4614      	mov	r4, r2
 80061ce:	461d      	mov	r5, r3
 80061d0:	69c7      	ldr	r7, [r0, #28]
 80061d2:	b097      	sub	sp, #92	@ 0x5c
 80061d4:	4683      	mov	fp, r0
 80061d6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80061da:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80061dc:	b97f      	cbnz	r7, 80061fe <_dtoa_r+0x36>
 80061de:	2010      	movs	r0, #16
 80061e0:	f000 fe02 	bl	8006de8 <malloc>
 80061e4:	4602      	mov	r2, r0
 80061e6:	f8cb 001c 	str.w	r0, [fp, #28]
 80061ea:	b920      	cbnz	r0, 80061f6 <_dtoa_r+0x2e>
 80061ec:	21ef      	movs	r1, #239	@ 0xef
 80061ee:	4ba8      	ldr	r3, [pc, #672]	@ (8006490 <_dtoa_r+0x2c8>)
 80061f0:	48a8      	ldr	r0, [pc, #672]	@ (8006494 <_dtoa_r+0x2cc>)
 80061f2:	f001 fcc9 	bl	8007b88 <__assert_func>
 80061f6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80061fa:	6007      	str	r7, [r0, #0]
 80061fc:	60c7      	str	r7, [r0, #12]
 80061fe:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006202:	6819      	ldr	r1, [r3, #0]
 8006204:	b159      	cbz	r1, 800621e <_dtoa_r+0x56>
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	2301      	movs	r3, #1
 800620a:	4093      	lsls	r3, r2
 800620c:	604a      	str	r2, [r1, #4]
 800620e:	608b      	str	r3, [r1, #8]
 8006210:	4658      	mov	r0, fp
 8006212:	f000 fedf 	bl	8006fd4 <_Bfree>
 8006216:	2200      	movs	r2, #0
 8006218:	f8db 301c 	ldr.w	r3, [fp, #28]
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	1e2b      	subs	r3, r5, #0
 8006220:	bfaf      	iteee	ge
 8006222:	2300      	movge	r3, #0
 8006224:	2201      	movlt	r2, #1
 8006226:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800622a:	9303      	strlt	r3, [sp, #12]
 800622c:	bfa8      	it	ge
 800622e:	6033      	strge	r3, [r6, #0]
 8006230:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006234:	4b98      	ldr	r3, [pc, #608]	@ (8006498 <_dtoa_r+0x2d0>)
 8006236:	bfb8      	it	lt
 8006238:	6032      	strlt	r2, [r6, #0]
 800623a:	ea33 0308 	bics.w	r3, r3, r8
 800623e:	d112      	bne.n	8006266 <_dtoa_r+0x9e>
 8006240:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006244:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800624c:	4323      	orrs	r3, r4
 800624e:	f000 8550 	beq.w	8006cf2 <_dtoa_r+0xb2a>
 8006252:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006254:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800649c <_dtoa_r+0x2d4>
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 8552 	beq.w	8006d02 <_dtoa_r+0xb3a>
 800625e:	f10a 0303 	add.w	r3, sl, #3
 8006262:	f000 bd4c 	b.w	8006cfe <_dtoa_r+0xb36>
 8006266:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800626a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800626e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006272:	2200      	movs	r2, #0
 8006274:	2300      	movs	r3, #0
 8006276:	f7fa fb97 	bl	80009a8 <__aeabi_dcmpeq>
 800627a:	4607      	mov	r7, r0
 800627c:	b158      	cbz	r0, 8006296 <_dtoa_r+0xce>
 800627e:	2301      	movs	r3, #1
 8006280:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006286:	b113      	cbz	r3, 800628e <_dtoa_r+0xc6>
 8006288:	4b85      	ldr	r3, [pc, #532]	@ (80064a0 <_dtoa_r+0x2d8>)
 800628a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80064a4 <_dtoa_r+0x2dc>
 8006292:	f000 bd36 	b.w	8006d02 <_dtoa_r+0xb3a>
 8006296:	ab14      	add	r3, sp, #80	@ 0x50
 8006298:	9301      	str	r3, [sp, #4]
 800629a:	ab15      	add	r3, sp, #84	@ 0x54
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	4658      	mov	r0, fp
 80062a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80062a4:	f001 f97e 	bl	80075a4 <__d2b>
 80062a8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80062ac:	4681      	mov	r9, r0
 80062ae:	2e00      	cmp	r6, #0
 80062b0:	d077      	beq.n	80063a2 <_dtoa_r+0x1da>
 80062b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062b8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80062bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062c0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80062c4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80062c8:	9712      	str	r7, [sp, #72]	@ 0x48
 80062ca:	4619      	mov	r1, r3
 80062cc:	2200      	movs	r2, #0
 80062ce:	4b76      	ldr	r3, [pc, #472]	@ (80064a8 <_dtoa_r+0x2e0>)
 80062d0:	f7f9 ff4a 	bl	8000168 <__aeabi_dsub>
 80062d4:	a368      	add	r3, pc, #416	@ (adr r3, 8006478 <_dtoa_r+0x2b0>)
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	f7fa f8fd 	bl	80004d8 <__aeabi_dmul>
 80062de:	a368      	add	r3, pc, #416	@ (adr r3, 8006480 <_dtoa_r+0x2b8>)
 80062e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e4:	f7f9 ff42 	bl	800016c <__adddf3>
 80062e8:	4604      	mov	r4, r0
 80062ea:	4630      	mov	r0, r6
 80062ec:	460d      	mov	r5, r1
 80062ee:	f7fa f889 	bl	8000404 <__aeabi_i2d>
 80062f2:	a365      	add	r3, pc, #404	@ (adr r3, 8006488 <_dtoa_r+0x2c0>)
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	f7fa f8ee 	bl	80004d8 <__aeabi_dmul>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4620      	mov	r0, r4
 8006302:	4629      	mov	r1, r5
 8006304:	f7f9 ff32 	bl	800016c <__adddf3>
 8006308:	4604      	mov	r4, r0
 800630a:	460d      	mov	r5, r1
 800630c:	f7fa fb94 	bl	8000a38 <__aeabi_d2iz>
 8006310:	2200      	movs	r2, #0
 8006312:	4607      	mov	r7, r0
 8006314:	2300      	movs	r3, #0
 8006316:	4620      	mov	r0, r4
 8006318:	4629      	mov	r1, r5
 800631a:	f7fa fb4f 	bl	80009bc <__aeabi_dcmplt>
 800631e:	b140      	cbz	r0, 8006332 <_dtoa_r+0x16a>
 8006320:	4638      	mov	r0, r7
 8006322:	f7fa f86f 	bl	8000404 <__aeabi_i2d>
 8006326:	4622      	mov	r2, r4
 8006328:	462b      	mov	r3, r5
 800632a:	f7fa fb3d 	bl	80009a8 <__aeabi_dcmpeq>
 800632e:	b900      	cbnz	r0, 8006332 <_dtoa_r+0x16a>
 8006330:	3f01      	subs	r7, #1
 8006332:	2f16      	cmp	r7, #22
 8006334:	d853      	bhi.n	80063de <_dtoa_r+0x216>
 8006336:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800633a:	4b5c      	ldr	r3, [pc, #368]	@ (80064ac <_dtoa_r+0x2e4>)
 800633c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006344:	f7fa fb3a 	bl	80009bc <__aeabi_dcmplt>
 8006348:	2800      	cmp	r0, #0
 800634a:	d04a      	beq.n	80063e2 <_dtoa_r+0x21a>
 800634c:	2300      	movs	r3, #0
 800634e:	3f01      	subs	r7, #1
 8006350:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006352:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006354:	1b9b      	subs	r3, r3, r6
 8006356:	1e5a      	subs	r2, r3, #1
 8006358:	bf46      	itte	mi
 800635a:	f1c3 0801 	rsbmi	r8, r3, #1
 800635e:	2300      	movmi	r3, #0
 8006360:	f04f 0800 	movpl.w	r8, #0
 8006364:	9209      	str	r2, [sp, #36]	@ 0x24
 8006366:	bf48      	it	mi
 8006368:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800636a:	2f00      	cmp	r7, #0
 800636c:	db3b      	blt.n	80063e6 <_dtoa_r+0x21e>
 800636e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006370:	970e      	str	r7, [sp, #56]	@ 0x38
 8006372:	443b      	add	r3, r7
 8006374:	9309      	str	r3, [sp, #36]	@ 0x24
 8006376:	2300      	movs	r3, #0
 8006378:	930a      	str	r3, [sp, #40]	@ 0x28
 800637a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800637c:	2b09      	cmp	r3, #9
 800637e:	d866      	bhi.n	800644e <_dtoa_r+0x286>
 8006380:	2b05      	cmp	r3, #5
 8006382:	bfc4      	itt	gt
 8006384:	3b04      	subgt	r3, #4
 8006386:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006388:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800638a:	bfc8      	it	gt
 800638c:	2400      	movgt	r4, #0
 800638e:	f1a3 0302 	sub.w	r3, r3, #2
 8006392:	bfd8      	it	le
 8006394:	2401      	movle	r4, #1
 8006396:	2b03      	cmp	r3, #3
 8006398:	d864      	bhi.n	8006464 <_dtoa_r+0x29c>
 800639a:	e8df f003 	tbb	[pc, r3]
 800639e:	382b      	.short	0x382b
 80063a0:	5636      	.short	0x5636
 80063a2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80063a6:	441e      	add	r6, r3
 80063a8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80063ac:	2b20      	cmp	r3, #32
 80063ae:	bfc1      	itttt	gt
 80063b0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80063b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80063b8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80063bc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80063c0:	bfd6      	itet	le
 80063c2:	f1c3 0320 	rsble	r3, r3, #32
 80063c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80063ca:	fa04 f003 	lslle.w	r0, r4, r3
 80063ce:	f7fa f809 	bl	80003e4 <__aeabi_ui2d>
 80063d2:	2201      	movs	r2, #1
 80063d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80063d8:	3e01      	subs	r6, #1
 80063da:	9212      	str	r2, [sp, #72]	@ 0x48
 80063dc:	e775      	b.n	80062ca <_dtoa_r+0x102>
 80063de:	2301      	movs	r3, #1
 80063e0:	e7b6      	b.n	8006350 <_dtoa_r+0x188>
 80063e2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80063e4:	e7b5      	b.n	8006352 <_dtoa_r+0x18a>
 80063e6:	427b      	negs	r3, r7
 80063e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80063ea:	2300      	movs	r3, #0
 80063ec:	eba8 0807 	sub.w	r8, r8, r7
 80063f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80063f2:	e7c2      	b.n	800637a <_dtoa_r+0x1b2>
 80063f4:	2300      	movs	r3, #0
 80063f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	dc35      	bgt.n	800646a <_dtoa_r+0x2a2>
 80063fe:	2301      	movs	r3, #1
 8006400:	461a      	mov	r2, r3
 8006402:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006406:	9221      	str	r2, [sp, #132]	@ 0x84
 8006408:	e00b      	b.n	8006422 <_dtoa_r+0x25a>
 800640a:	2301      	movs	r3, #1
 800640c:	e7f3      	b.n	80063f6 <_dtoa_r+0x22e>
 800640e:	2300      	movs	r3, #0
 8006410:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006412:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006414:	18fb      	adds	r3, r7, r3
 8006416:	9308      	str	r3, [sp, #32]
 8006418:	3301      	adds	r3, #1
 800641a:	2b01      	cmp	r3, #1
 800641c:	9307      	str	r3, [sp, #28]
 800641e:	bfb8      	it	lt
 8006420:	2301      	movlt	r3, #1
 8006422:	2100      	movs	r1, #0
 8006424:	2204      	movs	r2, #4
 8006426:	f8db 001c 	ldr.w	r0, [fp, #28]
 800642a:	f102 0514 	add.w	r5, r2, #20
 800642e:	429d      	cmp	r5, r3
 8006430:	d91f      	bls.n	8006472 <_dtoa_r+0x2aa>
 8006432:	6041      	str	r1, [r0, #4]
 8006434:	4658      	mov	r0, fp
 8006436:	f000 fd8d 	bl	8006f54 <_Balloc>
 800643a:	4682      	mov	sl, r0
 800643c:	2800      	cmp	r0, #0
 800643e:	d139      	bne.n	80064b4 <_dtoa_r+0x2ec>
 8006440:	4602      	mov	r2, r0
 8006442:	f240 11af 	movw	r1, #431	@ 0x1af
 8006446:	4b1a      	ldr	r3, [pc, #104]	@ (80064b0 <_dtoa_r+0x2e8>)
 8006448:	e6d2      	b.n	80061f0 <_dtoa_r+0x28>
 800644a:	2301      	movs	r3, #1
 800644c:	e7e0      	b.n	8006410 <_dtoa_r+0x248>
 800644e:	2401      	movs	r4, #1
 8006450:	2300      	movs	r3, #0
 8006452:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006454:	9320      	str	r3, [sp, #128]	@ 0x80
 8006456:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800645a:	2200      	movs	r2, #0
 800645c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006460:	2312      	movs	r3, #18
 8006462:	e7d0      	b.n	8006406 <_dtoa_r+0x23e>
 8006464:	2301      	movs	r3, #1
 8006466:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006468:	e7f5      	b.n	8006456 <_dtoa_r+0x28e>
 800646a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800646c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006470:	e7d7      	b.n	8006422 <_dtoa_r+0x25a>
 8006472:	3101      	adds	r1, #1
 8006474:	0052      	lsls	r2, r2, #1
 8006476:	e7d8      	b.n	800642a <_dtoa_r+0x262>
 8006478:	636f4361 	.word	0x636f4361
 800647c:	3fd287a7 	.word	0x3fd287a7
 8006480:	8b60c8b3 	.word	0x8b60c8b3
 8006484:	3fc68a28 	.word	0x3fc68a28
 8006488:	509f79fb 	.word	0x509f79fb
 800648c:	3fd34413 	.word	0x3fd34413
 8006490:	08009053 	.word	0x08009053
 8006494:	0800906a 	.word	0x0800906a
 8006498:	7ff00000 	.word	0x7ff00000
 800649c:	0800904f 	.word	0x0800904f
 80064a0:	08009023 	.word	0x08009023
 80064a4:	08009022 	.word	0x08009022
 80064a8:	3ff80000 	.word	0x3ff80000
 80064ac:	08009160 	.word	0x08009160
 80064b0:	080090c2 	.word	0x080090c2
 80064b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064b8:	6018      	str	r0, [r3, #0]
 80064ba:	9b07      	ldr	r3, [sp, #28]
 80064bc:	2b0e      	cmp	r3, #14
 80064be:	f200 80a4 	bhi.w	800660a <_dtoa_r+0x442>
 80064c2:	2c00      	cmp	r4, #0
 80064c4:	f000 80a1 	beq.w	800660a <_dtoa_r+0x442>
 80064c8:	2f00      	cmp	r7, #0
 80064ca:	dd33      	ble.n	8006534 <_dtoa_r+0x36c>
 80064cc:	4b86      	ldr	r3, [pc, #536]	@ (80066e8 <_dtoa_r+0x520>)
 80064ce:	f007 020f 	and.w	r2, r7, #15
 80064d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064d6:	05f8      	lsls	r0, r7, #23
 80064d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064dc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80064e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80064e4:	d516      	bpl.n	8006514 <_dtoa_r+0x34c>
 80064e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064ea:	4b80      	ldr	r3, [pc, #512]	@ (80066ec <_dtoa_r+0x524>)
 80064ec:	2603      	movs	r6, #3
 80064ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064f2:	f7fa f91b 	bl	800072c <__aeabi_ddiv>
 80064f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064fa:	f004 040f 	and.w	r4, r4, #15
 80064fe:	4d7b      	ldr	r5, [pc, #492]	@ (80066ec <_dtoa_r+0x524>)
 8006500:	b954      	cbnz	r4, 8006518 <_dtoa_r+0x350>
 8006502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800650a:	f7fa f90f 	bl	800072c <__aeabi_ddiv>
 800650e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006512:	e028      	b.n	8006566 <_dtoa_r+0x39e>
 8006514:	2602      	movs	r6, #2
 8006516:	e7f2      	b.n	80064fe <_dtoa_r+0x336>
 8006518:	07e1      	lsls	r1, r4, #31
 800651a:	d508      	bpl.n	800652e <_dtoa_r+0x366>
 800651c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006520:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006524:	f7f9 ffd8 	bl	80004d8 <__aeabi_dmul>
 8006528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800652c:	3601      	adds	r6, #1
 800652e:	1064      	asrs	r4, r4, #1
 8006530:	3508      	adds	r5, #8
 8006532:	e7e5      	b.n	8006500 <_dtoa_r+0x338>
 8006534:	f000 80d2 	beq.w	80066dc <_dtoa_r+0x514>
 8006538:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800653c:	427c      	negs	r4, r7
 800653e:	4b6a      	ldr	r3, [pc, #424]	@ (80066e8 <_dtoa_r+0x520>)
 8006540:	f004 020f 	and.w	r2, r4, #15
 8006544:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	f7f9 ffc4 	bl	80004d8 <__aeabi_dmul>
 8006550:	2602      	movs	r6, #2
 8006552:	2300      	movs	r3, #0
 8006554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006558:	4d64      	ldr	r5, [pc, #400]	@ (80066ec <_dtoa_r+0x524>)
 800655a:	1124      	asrs	r4, r4, #4
 800655c:	2c00      	cmp	r4, #0
 800655e:	f040 80b2 	bne.w	80066c6 <_dtoa_r+0x4fe>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1d3      	bne.n	800650e <_dtoa_r+0x346>
 8006566:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800656a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 80b7 	beq.w	80066e0 <_dtoa_r+0x518>
 8006572:	2200      	movs	r2, #0
 8006574:	4620      	mov	r0, r4
 8006576:	4629      	mov	r1, r5
 8006578:	4b5d      	ldr	r3, [pc, #372]	@ (80066f0 <_dtoa_r+0x528>)
 800657a:	f7fa fa1f 	bl	80009bc <__aeabi_dcmplt>
 800657e:	2800      	cmp	r0, #0
 8006580:	f000 80ae 	beq.w	80066e0 <_dtoa_r+0x518>
 8006584:	9b07      	ldr	r3, [sp, #28]
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 80aa 	beq.w	80066e0 <_dtoa_r+0x518>
 800658c:	9b08      	ldr	r3, [sp, #32]
 800658e:	2b00      	cmp	r3, #0
 8006590:	dd37      	ble.n	8006602 <_dtoa_r+0x43a>
 8006592:	1e7b      	subs	r3, r7, #1
 8006594:	4620      	mov	r0, r4
 8006596:	9304      	str	r3, [sp, #16]
 8006598:	2200      	movs	r2, #0
 800659a:	4629      	mov	r1, r5
 800659c:	4b55      	ldr	r3, [pc, #340]	@ (80066f4 <_dtoa_r+0x52c>)
 800659e:	f7f9 ff9b 	bl	80004d8 <__aeabi_dmul>
 80065a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065a6:	9c08      	ldr	r4, [sp, #32]
 80065a8:	3601      	adds	r6, #1
 80065aa:	4630      	mov	r0, r6
 80065ac:	f7f9 ff2a 	bl	8000404 <__aeabi_i2d>
 80065b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065b4:	f7f9 ff90 	bl	80004d8 <__aeabi_dmul>
 80065b8:	2200      	movs	r2, #0
 80065ba:	4b4f      	ldr	r3, [pc, #316]	@ (80066f8 <_dtoa_r+0x530>)
 80065bc:	f7f9 fdd6 	bl	800016c <__adddf3>
 80065c0:	4605      	mov	r5, r0
 80065c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80065c6:	2c00      	cmp	r4, #0
 80065c8:	f040 809a 	bne.w	8006700 <_dtoa_r+0x538>
 80065cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065d0:	2200      	movs	r2, #0
 80065d2:	4b4a      	ldr	r3, [pc, #296]	@ (80066fc <_dtoa_r+0x534>)
 80065d4:	f7f9 fdc8 	bl	8000168 <__aeabi_dsub>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065e0:	462a      	mov	r2, r5
 80065e2:	4633      	mov	r3, r6
 80065e4:	f7fa fa08 	bl	80009f8 <__aeabi_dcmpgt>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	f040 828e 	bne.w	8006b0a <_dtoa_r+0x942>
 80065ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065f2:	462a      	mov	r2, r5
 80065f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80065f8:	f7fa f9e0 	bl	80009bc <__aeabi_dcmplt>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	f040 8127 	bne.w	8006850 <_dtoa_r+0x688>
 8006602:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006606:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800660a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800660c:	2b00      	cmp	r3, #0
 800660e:	f2c0 8163 	blt.w	80068d8 <_dtoa_r+0x710>
 8006612:	2f0e      	cmp	r7, #14
 8006614:	f300 8160 	bgt.w	80068d8 <_dtoa_r+0x710>
 8006618:	4b33      	ldr	r3, [pc, #204]	@ (80066e8 <_dtoa_r+0x520>)
 800661a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800661e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006622:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006626:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006628:	2b00      	cmp	r3, #0
 800662a:	da03      	bge.n	8006634 <_dtoa_r+0x46c>
 800662c:	9b07      	ldr	r3, [sp, #28]
 800662e:	2b00      	cmp	r3, #0
 8006630:	f340 8100 	ble.w	8006834 <_dtoa_r+0x66c>
 8006634:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006638:	4656      	mov	r6, sl
 800663a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800663e:	4620      	mov	r0, r4
 8006640:	4629      	mov	r1, r5
 8006642:	f7fa f873 	bl	800072c <__aeabi_ddiv>
 8006646:	f7fa f9f7 	bl	8000a38 <__aeabi_d2iz>
 800664a:	4680      	mov	r8, r0
 800664c:	f7f9 feda 	bl	8000404 <__aeabi_i2d>
 8006650:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006654:	f7f9 ff40 	bl	80004d8 <__aeabi_dmul>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4620      	mov	r0, r4
 800665e:	4629      	mov	r1, r5
 8006660:	f7f9 fd82 	bl	8000168 <__aeabi_dsub>
 8006664:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006668:	9d07      	ldr	r5, [sp, #28]
 800666a:	f806 4b01 	strb.w	r4, [r6], #1
 800666e:	eba6 040a 	sub.w	r4, r6, sl
 8006672:	42a5      	cmp	r5, r4
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	f040 8116 	bne.w	80068a8 <_dtoa_r+0x6e0>
 800667c:	f7f9 fd76 	bl	800016c <__adddf3>
 8006680:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006684:	4604      	mov	r4, r0
 8006686:	460d      	mov	r5, r1
 8006688:	f7fa f9b6 	bl	80009f8 <__aeabi_dcmpgt>
 800668c:	2800      	cmp	r0, #0
 800668e:	f040 80f8 	bne.w	8006882 <_dtoa_r+0x6ba>
 8006692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006696:	4620      	mov	r0, r4
 8006698:	4629      	mov	r1, r5
 800669a:	f7fa f985 	bl	80009a8 <__aeabi_dcmpeq>
 800669e:	b118      	cbz	r0, 80066a8 <_dtoa_r+0x4e0>
 80066a0:	f018 0f01 	tst.w	r8, #1
 80066a4:	f040 80ed 	bne.w	8006882 <_dtoa_r+0x6ba>
 80066a8:	4649      	mov	r1, r9
 80066aa:	4658      	mov	r0, fp
 80066ac:	f000 fc92 	bl	8006fd4 <_Bfree>
 80066b0:	2300      	movs	r3, #0
 80066b2:	7033      	strb	r3, [r6, #0]
 80066b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80066b6:	3701      	adds	r7, #1
 80066b8:	601f      	str	r7, [r3, #0]
 80066ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 8320 	beq.w	8006d02 <_dtoa_r+0xb3a>
 80066c2:	601e      	str	r6, [r3, #0]
 80066c4:	e31d      	b.n	8006d02 <_dtoa_r+0xb3a>
 80066c6:	07e2      	lsls	r2, r4, #31
 80066c8:	d505      	bpl.n	80066d6 <_dtoa_r+0x50e>
 80066ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066ce:	f7f9 ff03 	bl	80004d8 <__aeabi_dmul>
 80066d2:	2301      	movs	r3, #1
 80066d4:	3601      	adds	r6, #1
 80066d6:	1064      	asrs	r4, r4, #1
 80066d8:	3508      	adds	r5, #8
 80066da:	e73f      	b.n	800655c <_dtoa_r+0x394>
 80066dc:	2602      	movs	r6, #2
 80066de:	e742      	b.n	8006566 <_dtoa_r+0x39e>
 80066e0:	9c07      	ldr	r4, [sp, #28]
 80066e2:	9704      	str	r7, [sp, #16]
 80066e4:	e761      	b.n	80065aa <_dtoa_r+0x3e2>
 80066e6:	bf00      	nop
 80066e8:	08009160 	.word	0x08009160
 80066ec:	08009138 	.word	0x08009138
 80066f0:	3ff00000 	.word	0x3ff00000
 80066f4:	40240000 	.word	0x40240000
 80066f8:	401c0000 	.word	0x401c0000
 80066fc:	40140000 	.word	0x40140000
 8006700:	4b70      	ldr	r3, [pc, #448]	@ (80068c4 <_dtoa_r+0x6fc>)
 8006702:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006704:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006708:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800670c:	4454      	add	r4, sl
 800670e:	2900      	cmp	r1, #0
 8006710:	d045      	beq.n	800679e <_dtoa_r+0x5d6>
 8006712:	2000      	movs	r0, #0
 8006714:	496c      	ldr	r1, [pc, #432]	@ (80068c8 <_dtoa_r+0x700>)
 8006716:	f7fa f809 	bl	800072c <__aeabi_ddiv>
 800671a:	4633      	mov	r3, r6
 800671c:	462a      	mov	r2, r5
 800671e:	f7f9 fd23 	bl	8000168 <__aeabi_dsub>
 8006722:	4656      	mov	r6, sl
 8006724:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006728:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800672c:	f7fa f984 	bl	8000a38 <__aeabi_d2iz>
 8006730:	4605      	mov	r5, r0
 8006732:	f7f9 fe67 	bl	8000404 <__aeabi_i2d>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800673e:	f7f9 fd13 	bl	8000168 <__aeabi_dsub>
 8006742:	4602      	mov	r2, r0
 8006744:	460b      	mov	r3, r1
 8006746:	3530      	adds	r5, #48	@ 0x30
 8006748:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800674c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006750:	f806 5b01 	strb.w	r5, [r6], #1
 8006754:	f7fa f932 	bl	80009bc <__aeabi_dcmplt>
 8006758:	2800      	cmp	r0, #0
 800675a:	d163      	bne.n	8006824 <_dtoa_r+0x65c>
 800675c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006760:	2000      	movs	r0, #0
 8006762:	495a      	ldr	r1, [pc, #360]	@ (80068cc <_dtoa_r+0x704>)
 8006764:	f7f9 fd00 	bl	8000168 <__aeabi_dsub>
 8006768:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800676c:	f7fa f926 	bl	80009bc <__aeabi_dcmplt>
 8006770:	2800      	cmp	r0, #0
 8006772:	f040 8087 	bne.w	8006884 <_dtoa_r+0x6bc>
 8006776:	42a6      	cmp	r6, r4
 8006778:	f43f af43 	beq.w	8006602 <_dtoa_r+0x43a>
 800677c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006780:	2200      	movs	r2, #0
 8006782:	4b53      	ldr	r3, [pc, #332]	@ (80068d0 <_dtoa_r+0x708>)
 8006784:	f7f9 fea8 	bl	80004d8 <__aeabi_dmul>
 8006788:	2200      	movs	r2, #0
 800678a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800678e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006792:	4b4f      	ldr	r3, [pc, #316]	@ (80068d0 <_dtoa_r+0x708>)
 8006794:	f7f9 fea0 	bl	80004d8 <__aeabi_dmul>
 8006798:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800679c:	e7c4      	b.n	8006728 <_dtoa_r+0x560>
 800679e:	4631      	mov	r1, r6
 80067a0:	4628      	mov	r0, r5
 80067a2:	f7f9 fe99 	bl	80004d8 <__aeabi_dmul>
 80067a6:	4656      	mov	r6, sl
 80067a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80067ac:	9413      	str	r4, [sp, #76]	@ 0x4c
 80067ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067b2:	f7fa f941 	bl	8000a38 <__aeabi_d2iz>
 80067b6:	4605      	mov	r5, r0
 80067b8:	f7f9 fe24 	bl	8000404 <__aeabi_i2d>
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067c4:	f7f9 fcd0 	bl	8000168 <__aeabi_dsub>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	3530      	adds	r5, #48	@ 0x30
 80067ce:	f806 5b01 	strb.w	r5, [r6], #1
 80067d2:	42a6      	cmp	r6, r4
 80067d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067d8:	f04f 0200 	mov.w	r2, #0
 80067dc:	d124      	bne.n	8006828 <_dtoa_r+0x660>
 80067de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80067e2:	4b39      	ldr	r3, [pc, #228]	@ (80068c8 <_dtoa_r+0x700>)
 80067e4:	f7f9 fcc2 	bl	800016c <__adddf3>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067f0:	f7fa f902 	bl	80009f8 <__aeabi_dcmpgt>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d145      	bne.n	8006884 <_dtoa_r+0x6bc>
 80067f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80067fc:	2000      	movs	r0, #0
 80067fe:	4932      	ldr	r1, [pc, #200]	@ (80068c8 <_dtoa_r+0x700>)
 8006800:	f7f9 fcb2 	bl	8000168 <__aeabi_dsub>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800680c:	f7fa f8d6 	bl	80009bc <__aeabi_dcmplt>
 8006810:	2800      	cmp	r0, #0
 8006812:	f43f aef6 	beq.w	8006602 <_dtoa_r+0x43a>
 8006816:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006818:	1e73      	subs	r3, r6, #1
 800681a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800681c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006820:	2b30      	cmp	r3, #48	@ 0x30
 8006822:	d0f8      	beq.n	8006816 <_dtoa_r+0x64e>
 8006824:	9f04      	ldr	r7, [sp, #16]
 8006826:	e73f      	b.n	80066a8 <_dtoa_r+0x4e0>
 8006828:	4b29      	ldr	r3, [pc, #164]	@ (80068d0 <_dtoa_r+0x708>)
 800682a:	f7f9 fe55 	bl	80004d8 <__aeabi_dmul>
 800682e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006832:	e7bc      	b.n	80067ae <_dtoa_r+0x5e6>
 8006834:	d10c      	bne.n	8006850 <_dtoa_r+0x688>
 8006836:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800683a:	2200      	movs	r2, #0
 800683c:	4b25      	ldr	r3, [pc, #148]	@ (80068d4 <_dtoa_r+0x70c>)
 800683e:	f7f9 fe4b 	bl	80004d8 <__aeabi_dmul>
 8006842:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006846:	f7fa f8cd 	bl	80009e4 <__aeabi_dcmpge>
 800684a:	2800      	cmp	r0, #0
 800684c:	f000 815b 	beq.w	8006b06 <_dtoa_r+0x93e>
 8006850:	2400      	movs	r4, #0
 8006852:	4625      	mov	r5, r4
 8006854:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006856:	4656      	mov	r6, sl
 8006858:	43db      	mvns	r3, r3
 800685a:	9304      	str	r3, [sp, #16]
 800685c:	2700      	movs	r7, #0
 800685e:	4621      	mov	r1, r4
 8006860:	4658      	mov	r0, fp
 8006862:	f000 fbb7 	bl	8006fd4 <_Bfree>
 8006866:	2d00      	cmp	r5, #0
 8006868:	d0dc      	beq.n	8006824 <_dtoa_r+0x65c>
 800686a:	b12f      	cbz	r7, 8006878 <_dtoa_r+0x6b0>
 800686c:	42af      	cmp	r7, r5
 800686e:	d003      	beq.n	8006878 <_dtoa_r+0x6b0>
 8006870:	4639      	mov	r1, r7
 8006872:	4658      	mov	r0, fp
 8006874:	f000 fbae 	bl	8006fd4 <_Bfree>
 8006878:	4629      	mov	r1, r5
 800687a:	4658      	mov	r0, fp
 800687c:	f000 fbaa 	bl	8006fd4 <_Bfree>
 8006880:	e7d0      	b.n	8006824 <_dtoa_r+0x65c>
 8006882:	9704      	str	r7, [sp, #16]
 8006884:	4633      	mov	r3, r6
 8006886:	461e      	mov	r6, r3
 8006888:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800688c:	2a39      	cmp	r2, #57	@ 0x39
 800688e:	d107      	bne.n	80068a0 <_dtoa_r+0x6d8>
 8006890:	459a      	cmp	sl, r3
 8006892:	d1f8      	bne.n	8006886 <_dtoa_r+0x6be>
 8006894:	9a04      	ldr	r2, [sp, #16]
 8006896:	3201      	adds	r2, #1
 8006898:	9204      	str	r2, [sp, #16]
 800689a:	2230      	movs	r2, #48	@ 0x30
 800689c:	f88a 2000 	strb.w	r2, [sl]
 80068a0:	781a      	ldrb	r2, [r3, #0]
 80068a2:	3201      	adds	r2, #1
 80068a4:	701a      	strb	r2, [r3, #0]
 80068a6:	e7bd      	b.n	8006824 <_dtoa_r+0x65c>
 80068a8:	2200      	movs	r2, #0
 80068aa:	4b09      	ldr	r3, [pc, #36]	@ (80068d0 <_dtoa_r+0x708>)
 80068ac:	f7f9 fe14 	bl	80004d8 <__aeabi_dmul>
 80068b0:	2200      	movs	r2, #0
 80068b2:	2300      	movs	r3, #0
 80068b4:	4604      	mov	r4, r0
 80068b6:	460d      	mov	r5, r1
 80068b8:	f7fa f876 	bl	80009a8 <__aeabi_dcmpeq>
 80068bc:	2800      	cmp	r0, #0
 80068be:	f43f aebc 	beq.w	800663a <_dtoa_r+0x472>
 80068c2:	e6f1      	b.n	80066a8 <_dtoa_r+0x4e0>
 80068c4:	08009160 	.word	0x08009160
 80068c8:	3fe00000 	.word	0x3fe00000
 80068cc:	3ff00000 	.word	0x3ff00000
 80068d0:	40240000 	.word	0x40240000
 80068d4:	40140000 	.word	0x40140000
 80068d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068da:	2a00      	cmp	r2, #0
 80068dc:	f000 80db 	beq.w	8006a96 <_dtoa_r+0x8ce>
 80068e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80068e2:	2a01      	cmp	r2, #1
 80068e4:	f300 80bf 	bgt.w	8006a66 <_dtoa_r+0x89e>
 80068e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80068ea:	2a00      	cmp	r2, #0
 80068ec:	f000 80b7 	beq.w	8006a5e <_dtoa_r+0x896>
 80068f0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80068f4:	4646      	mov	r6, r8
 80068f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80068f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068fa:	2101      	movs	r1, #1
 80068fc:	441a      	add	r2, r3
 80068fe:	4658      	mov	r0, fp
 8006900:	4498      	add	r8, r3
 8006902:	9209      	str	r2, [sp, #36]	@ 0x24
 8006904:	f000 fc1a 	bl	800713c <__i2b>
 8006908:	4605      	mov	r5, r0
 800690a:	b15e      	cbz	r6, 8006924 <_dtoa_r+0x75c>
 800690c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800690e:	2b00      	cmp	r3, #0
 8006910:	dd08      	ble.n	8006924 <_dtoa_r+0x75c>
 8006912:	42b3      	cmp	r3, r6
 8006914:	bfa8      	it	ge
 8006916:	4633      	movge	r3, r6
 8006918:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800691a:	eba8 0803 	sub.w	r8, r8, r3
 800691e:	1af6      	subs	r6, r6, r3
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	9309      	str	r3, [sp, #36]	@ 0x24
 8006924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006926:	b1f3      	cbz	r3, 8006966 <_dtoa_r+0x79e>
 8006928:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 80b7 	beq.w	8006a9e <_dtoa_r+0x8d6>
 8006930:	b18c      	cbz	r4, 8006956 <_dtoa_r+0x78e>
 8006932:	4629      	mov	r1, r5
 8006934:	4622      	mov	r2, r4
 8006936:	4658      	mov	r0, fp
 8006938:	f000 fcbe 	bl	80072b8 <__pow5mult>
 800693c:	464a      	mov	r2, r9
 800693e:	4601      	mov	r1, r0
 8006940:	4605      	mov	r5, r0
 8006942:	4658      	mov	r0, fp
 8006944:	f000 fc10 	bl	8007168 <__multiply>
 8006948:	4649      	mov	r1, r9
 800694a:	9004      	str	r0, [sp, #16]
 800694c:	4658      	mov	r0, fp
 800694e:	f000 fb41 	bl	8006fd4 <_Bfree>
 8006952:	9b04      	ldr	r3, [sp, #16]
 8006954:	4699      	mov	r9, r3
 8006956:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006958:	1b1a      	subs	r2, r3, r4
 800695a:	d004      	beq.n	8006966 <_dtoa_r+0x79e>
 800695c:	4649      	mov	r1, r9
 800695e:	4658      	mov	r0, fp
 8006960:	f000 fcaa 	bl	80072b8 <__pow5mult>
 8006964:	4681      	mov	r9, r0
 8006966:	2101      	movs	r1, #1
 8006968:	4658      	mov	r0, fp
 800696a:	f000 fbe7 	bl	800713c <__i2b>
 800696e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006970:	4604      	mov	r4, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 81c9 	beq.w	8006d0a <_dtoa_r+0xb42>
 8006978:	461a      	mov	r2, r3
 800697a:	4601      	mov	r1, r0
 800697c:	4658      	mov	r0, fp
 800697e:	f000 fc9b 	bl	80072b8 <__pow5mult>
 8006982:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006984:	4604      	mov	r4, r0
 8006986:	2b01      	cmp	r3, #1
 8006988:	f300 808f 	bgt.w	8006aaa <_dtoa_r+0x8e2>
 800698c:	9b02      	ldr	r3, [sp, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f040 8087 	bne.w	8006aa2 <_dtoa_r+0x8da>
 8006994:	9b03      	ldr	r3, [sp, #12]
 8006996:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800699a:	2b00      	cmp	r3, #0
 800699c:	f040 8083 	bne.w	8006aa6 <_dtoa_r+0x8de>
 80069a0:	9b03      	ldr	r3, [sp, #12]
 80069a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069a6:	0d1b      	lsrs	r3, r3, #20
 80069a8:	051b      	lsls	r3, r3, #20
 80069aa:	b12b      	cbz	r3, 80069b8 <_dtoa_r+0x7f0>
 80069ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ae:	f108 0801 	add.w	r8, r8, #1
 80069b2:	3301      	adds	r3, #1
 80069b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80069b6:	2301      	movs	r3, #1
 80069b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80069ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 81aa 	beq.w	8006d16 <_dtoa_r+0xb4e>
 80069c2:	6923      	ldr	r3, [r4, #16]
 80069c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069c8:	6918      	ldr	r0, [r3, #16]
 80069ca:	f000 fb6b 	bl	80070a4 <__hi0bits>
 80069ce:	f1c0 0020 	rsb	r0, r0, #32
 80069d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069d4:	4418      	add	r0, r3
 80069d6:	f010 001f 	ands.w	r0, r0, #31
 80069da:	d071      	beq.n	8006ac0 <_dtoa_r+0x8f8>
 80069dc:	f1c0 0320 	rsb	r3, r0, #32
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	dd65      	ble.n	8006ab0 <_dtoa_r+0x8e8>
 80069e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069e6:	f1c0 001c 	rsb	r0, r0, #28
 80069ea:	4403      	add	r3, r0
 80069ec:	4480      	add	r8, r0
 80069ee:	4406      	add	r6, r0
 80069f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80069f2:	f1b8 0f00 	cmp.w	r8, #0
 80069f6:	dd05      	ble.n	8006a04 <_dtoa_r+0x83c>
 80069f8:	4649      	mov	r1, r9
 80069fa:	4642      	mov	r2, r8
 80069fc:	4658      	mov	r0, fp
 80069fe:	f000 fcb5 	bl	800736c <__lshift>
 8006a02:	4681      	mov	r9, r0
 8006a04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	dd05      	ble.n	8006a16 <_dtoa_r+0x84e>
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	4658      	mov	r0, fp
 8006a10:	f000 fcac 	bl	800736c <__lshift>
 8006a14:	4604      	mov	r4, r0
 8006a16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d053      	beq.n	8006ac4 <_dtoa_r+0x8fc>
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	4648      	mov	r0, r9
 8006a20:	f000 fd10 	bl	8007444 <__mcmp>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	da4d      	bge.n	8006ac4 <_dtoa_r+0x8fc>
 8006a28:	1e7b      	subs	r3, r7, #1
 8006a2a:	4649      	mov	r1, r9
 8006a2c:	9304      	str	r3, [sp, #16]
 8006a2e:	220a      	movs	r2, #10
 8006a30:	2300      	movs	r3, #0
 8006a32:	4658      	mov	r0, fp
 8006a34:	f000 faf0 	bl	8007018 <__multadd>
 8006a38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a3a:	4681      	mov	r9, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 816c 	beq.w	8006d1a <_dtoa_r+0xb52>
 8006a42:	2300      	movs	r3, #0
 8006a44:	4629      	mov	r1, r5
 8006a46:	220a      	movs	r2, #10
 8006a48:	4658      	mov	r0, fp
 8006a4a:	f000 fae5 	bl	8007018 <__multadd>
 8006a4e:	9b08      	ldr	r3, [sp, #32]
 8006a50:	4605      	mov	r5, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	dc61      	bgt.n	8006b1a <_dtoa_r+0x952>
 8006a56:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	dc3b      	bgt.n	8006ad4 <_dtoa_r+0x90c>
 8006a5c:	e05d      	b.n	8006b1a <_dtoa_r+0x952>
 8006a5e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a60:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a64:	e746      	b.n	80068f4 <_dtoa_r+0x72c>
 8006a66:	9b07      	ldr	r3, [sp, #28]
 8006a68:	1e5c      	subs	r4, r3, #1
 8006a6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a6c:	42a3      	cmp	r3, r4
 8006a6e:	bfbf      	itttt	lt
 8006a70:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006a72:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006a74:	1ae3      	sublt	r3, r4, r3
 8006a76:	18d2      	addlt	r2, r2, r3
 8006a78:	bfa8      	it	ge
 8006a7a:	1b1c      	subge	r4, r3, r4
 8006a7c:	9b07      	ldr	r3, [sp, #28]
 8006a7e:	bfbe      	ittt	lt
 8006a80:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006a82:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006a84:	2400      	movlt	r4, #0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	bfb5      	itete	lt
 8006a8a:	eba8 0603 	sublt.w	r6, r8, r3
 8006a8e:	4646      	movge	r6, r8
 8006a90:	2300      	movlt	r3, #0
 8006a92:	9b07      	ldrge	r3, [sp, #28]
 8006a94:	e730      	b.n	80068f8 <_dtoa_r+0x730>
 8006a96:	4646      	mov	r6, r8
 8006a98:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006a9a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006a9c:	e735      	b.n	800690a <_dtoa_r+0x742>
 8006a9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006aa0:	e75c      	b.n	800695c <_dtoa_r+0x794>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e788      	b.n	80069b8 <_dtoa_r+0x7f0>
 8006aa6:	9b02      	ldr	r3, [sp, #8]
 8006aa8:	e786      	b.n	80069b8 <_dtoa_r+0x7f0>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	930a      	str	r3, [sp, #40]	@ 0x28
 8006aae:	e788      	b.n	80069c2 <_dtoa_r+0x7fa>
 8006ab0:	d09f      	beq.n	80069f2 <_dtoa_r+0x82a>
 8006ab2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ab4:	331c      	adds	r3, #28
 8006ab6:	441a      	add	r2, r3
 8006ab8:	4498      	add	r8, r3
 8006aba:	441e      	add	r6, r3
 8006abc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006abe:	e798      	b.n	80069f2 <_dtoa_r+0x82a>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	e7f6      	b.n	8006ab2 <_dtoa_r+0x8ea>
 8006ac4:	9b07      	ldr	r3, [sp, #28]
 8006ac6:	9704      	str	r7, [sp, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	dc20      	bgt.n	8006b0e <_dtoa_r+0x946>
 8006acc:	9308      	str	r3, [sp, #32]
 8006ace:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	dd1e      	ble.n	8006b12 <_dtoa_r+0x94a>
 8006ad4:	9b08      	ldr	r3, [sp, #32]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f47f aebc 	bne.w	8006854 <_dtoa_r+0x68c>
 8006adc:	4621      	mov	r1, r4
 8006ade:	2205      	movs	r2, #5
 8006ae0:	4658      	mov	r0, fp
 8006ae2:	f000 fa99 	bl	8007018 <__multadd>
 8006ae6:	4601      	mov	r1, r0
 8006ae8:	4604      	mov	r4, r0
 8006aea:	4648      	mov	r0, r9
 8006aec:	f000 fcaa 	bl	8007444 <__mcmp>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	f77f aeaf 	ble.w	8006854 <_dtoa_r+0x68c>
 8006af6:	2331      	movs	r3, #49	@ 0x31
 8006af8:	4656      	mov	r6, sl
 8006afa:	f806 3b01 	strb.w	r3, [r6], #1
 8006afe:	9b04      	ldr	r3, [sp, #16]
 8006b00:	3301      	adds	r3, #1
 8006b02:	9304      	str	r3, [sp, #16]
 8006b04:	e6aa      	b.n	800685c <_dtoa_r+0x694>
 8006b06:	9c07      	ldr	r4, [sp, #28]
 8006b08:	9704      	str	r7, [sp, #16]
 8006b0a:	4625      	mov	r5, r4
 8006b0c:	e7f3      	b.n	8006af6 <_dtoa_r+0x92e>
 8006b0e:	9b07      	ldr	r3, [sp, #28]
 8006b10:	9308      	str	r3, [sp, #32]
 8006b12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 8104 	beq.w	8006d22 <_dtoa_r+0xb5a>
 8006b1a:	2e00      	cmp	r6, #0
 8006b1c:	dd05      	ble.n	8006b2a <_dtoa_r+0x962>
 8006b1e:	4629      	mov	r1, r5
 8006b20:	4632      	mov	r2, r6
 8006b22:	4658      	mov	r0, fp
 8006b24:	f000 fc22 	bl	800736c <__lshift>
 8006b28:	4605      	mov	r5, r0
 8006b2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d05a      	beq.n	8006be6 <_dtoa_r+0xa1e>
 8006b30:	4658      	mov	r0, fp
 8006b32:	6869      	ldr	r1, [r5, #4]
 8006b34:	f000 fa0e 	bl	8006f54 <_Balloc>
 8006b38:	4606      	mov	r6, r0
 8006b3a:	b928      	cbnz	r0, 8006b48 <_dtoa_r+0x980>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b42:	4b83      	ldr	r3, [pc, #524]	@ (8006d50 <_dtoa_r+0xb88>)
 8006b44:	f7ff bb54 	b.w	80061f0 <_dtoa_r+0x28>
 8006b48:	692a      	ldr	r2, [r5, #16]
 8006b4a:	f105 010c 	add.w	r1, r5, #12
 8006b4e:	3202      	adds	r2, #2
 8006b50:	0092      	lsls	r2, r2, #2
 8006b52:	300c      	adds	r0, #12
 8006b54:	f001 f80a 	bl	8007b6c <memcpy>
 8006b58:	2201      	movs	r2, #1
 8006b5a:	4631      	mov	r1, r6
 8006b5c:	4658      	mov	r0, fp
 8006b5e:	f000 fc05 	bl	800736c <__lshift>
 8006b62:	462f      	mov	r7, r5
 8006b64:	4605      	mov	r5, r0
 8006b66:	f10a 0301 	add.w	r3, sl, #1
 8006b6a:	9307      	str	r3, [sp, #28]
 8006b6c:	9b08      	ldr	r3, [sp, #32]
 8006b6e:	4453      	add	r3, sl
 8006b70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b72:	9b02      	ldr	r3, [sp, #8]
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b7a:	9b07      	ldr	r3, [sp, #28]
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	4648      	mov	r0, r9
 8006b82:	9302      	str	r3, [sp, #8]
 8006b84:	f7ff fa97 	bl	80060b6 <quorem>
 8006b88:	4639      	mov	r1, r7
 8006b8a:	9008      	str	r0, [sp, #32]
 8006b8c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006b90:	4648      	mov	r0, r9
 8006b92:	f000 fc57 	bl	8007444 <__mcmp>
 8006b96:	462a      	mov	r2, r5
 8006b98:	9009      	str	r0, [sp, #36]	@ 0x24
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	4658      	mov	r0, fp
 8006b9e:	f000 fc6d 	bl	800747c <__mdiff>
 8006ba2:	68c2      	ldr	r2, [r0, #12]
 8006ba4:	4606      	mov	r6, r0
 8006ba6:	bb02      	cbnz	r2, 8006bea <_dtoa_r+0xa22>
 8006ba8:	4601      	mov	r1, r0
 8006baa:	4648      	mov	r0, r9
 8006bac:	f000 fc4a 	bl	8007444 <__mcmp>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	4631      	mov	r1, r6
 8006bb4:	4658      	mov	r0, fp
 8006bb6:	920c      	str	r2, [sp, #48]	@ 0x30
 8006bb8:	f000 fa0c 	bl	8006fd4 <_Bfree>
 8006bbc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006bbe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006bc0:	9e07      	ldr	r6, [sp, #28]
 8006bc2:	ea43 0102 	orr.w	r1, r3, r2
 8006bc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bc8:	4319      	orrs	r1, r3
 8006bca:	d110      	bne.n	8006bee <_dtoa_r+0xa26>
 8006bcc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006bd0:	d029      	beq.n	8006c26 <_dtoa_r+0xa5e>
 8006bd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	dd02      	ble.n	8006bde <_dtoa_r+0xa16>
 8006bd8:	9b08      	ldr	r3, [sp, #32]
 8006bda:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006bde:	9b02      	ldr	r3, [sp, #8]
 8006be0:	f883 8000 	strb.w	r8, [r3]
 8006be4:	e63b      	b.n	800685e <_dtoa_r+0x696>
 8006be6:	4628      	mov	r0, r5
 8006be8:	e7bb      	b.n	8006b62 <_dtoa_r+0x99a>
 8006bea:	2201      	movs	r2, #1
 8006bec:	e7e1      	b.n	8006bb2 <_dtoa_r+0x9ea>
 8006bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	db04      	blt.n	8006bfe <_dtoa_r+0xa36>
 8006bf4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006bf6:	430b      	orrs	r3, r1
 8006bf8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006bfa:	430b      	orrs	r3, r1
 8006bfc:	d120      	bne.n	8006c40 <_dtoa_r+0xa78>
 8006bfe:	2a00      	cmp	r2, #0
 8006c00:	dded      	ble.n	8006bde <_dtoa_r+0xa16>
 8006c02:	4649      	mov	r1, r9
 8006c04:	2201      	movs	r2, #1
 8006c06:	4658      	mov	r0, fp
 8006c08:	f000 fbb0 	bl	800736c <__lshift>
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	4681      	mov	r9, r0
 8006c10:	f000 fc18 	bl	8007444 <__mcmp>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	dc03      	bgt.n	8006c20 <_dtoa_r+0xa58>
 8006c18:	d1e1      	bne.n	8006bde <_dtoa_r+0xa16>
 8006c1a:	f018 0f01 	tst.w	r8, #1
 8006c1e:	d0de      	beq.n	8006bde <_dtoa_r+0xa16>
 8006c20:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c24:	d1d8      	bne.n	8006bd8 <_dtoa_r+0xa10>
 8006c26:	2339      	movs	r3, #57	@ 0x39
 8006c28:	9a02      	ldr	r2, [sp, #8]
 8006c2a:	7013      	strb	r3, [r2, #0]
 8006c2c:	4633      	mov	r3, r6
 8006c2e:	461e      	mov	r6, r3
 8006c30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c34:	3b01      	subs	r3, #1
 8006c36:	2a39      	cmp	r2, #57	@ 0x39
 8006c38:	d052      	beq.n	8006ce0 <_dtoa_r+0xb18>
 8006c3a:	3201      	adds	r2, #1
 8006c3c:	701a      	strb	r2, [r3, #0]
 8006c3e:	e60e      	b.n	800685e <_dtoa_r+0x696>
 8006c40:	2a00      	cmp	r2, #0
 8006c42:	dd07      	ble.n	8006c54 <_dtoa_r+0xa8c>
 8006c44:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c48:	d0ed      	beq.n	8006c26 <_dtoa_r+0xa5e>
 8006c4a:	9a02      	ldr	r2, [sp, #8]
 8006c4c:	f108 0301 	add.w	r3, r8, #1
 8006c50:	7013      	strb	r3, [r2, #0]
 8006c52:	e604      	b.n	800685e <_dtoa_r+0x696>
 8006c54:	9b07      	ldr	r3, [sp, #28]
 8006c56:	9a07      	ldr	r2, [sp, #28]
 8006c58:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006c5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d028      	beq.n	8006cb4 <_dtoa_r+0xaec>
 8006c62:	4649      	mov	r1, r9
 8006c64:	2300      	movs	r3, #0
 8006c66:	220a      	movs	r2, #10
 8006c68:	4658      	mov	r0, fp
 8006c6a:	f000 f9d5 	bl	8007018 <__multadd>
 8006c6e:	42af      	cmp	r7, r5
 8006c70:	4681      	mov	r9, r0
 8006c72:	f04f 0300 	mov.w	r3, #0
 8006c76:	f04f 020a 	mov.w	r2, #10
 8006c7a:	4639      	mov	r1, r7
 8006c7c:	4658      	mov	r0, fp
 8006c7e:	d107      	bne.n	8006c90 <_dtoa_r+0xac8>
 8006c80:	f000 f9ca 	bl	8007018 <__multadd>
 8006c84:	4607      	mov	r7, r0
 8006c86:	4605      	mov	r5, r0
 8006c88:	9b07      	ldr	r3, [sp, #28]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	9307      	str	r3, [sp, #28]
 8006c8e:	e774      	b.n	8006b7a <_dtoa_r+0x9b2>
 8006c90:	f000 f9c2 	bl	8007018 <__multadd>
 8006c94:	4629      	mov	r1, r5
 8006c96:	4607      	mov	r7, r0
 8006c98:	2300      	movs	r3, #0
 8006c9a:	220a      	movs	r2, #10
 8006c9c:	4658      	mov	r0, fp
 8006c9e:	f000 f9bb 	bl	8007018 <__multadd>
 8006ca2:	4605      	mov	r5, r0
 8006ca4:	e7f0      	b.n	8006c88 <_dtoa_r+0xac0>
 8006ca6:	9b08      	ldr	r3, [sp, #32]
 8006ca8:	2700      	movs	r7, #0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	bfcc      	ite	gt
 8006cae:	461e      	movgt	r6, r3
 8006cb0:	2601      	movle	r6, #1
 8006cb2:	4456      	add	r6, sl
 8006cb4:	4649      	mov	r1, r9
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	4658      	mov	r0, fp
 8006cba:	f000 fb57 	bl	800736c <__lshift>
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	4681      	mov	r9, r0
 8006cc2:	f000 fbbf 	bl	8007444 <__mcmp>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	dcb0      	bgt.n	8006c2c <_dtoa_r+0xa64>
 8006cca:	d102      	bne.n	8006cd2 <_dtoa_r+0xb0a>
 8006ccc:	f018 0f01 	tst.w	r8, #1
 8006cd0:	d1ac      	bne.n	8006c2c <_dtoa_r+0xa64>
 8006cd2:	4633      	mov	r3, r6
 8006cd4:	461e      	mov	r6, r3
 8006cd6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cda:	2a30      	cmp	r2, #48	@ 0x30
 8006cdc:	d0fa      	beq.n	8006cd4 <_dtoa_r+0xb0c>
 8006cde:	e5be      	b.n	800685e <_dtoa_r+0x696>
 8006ce0:	459a      	cmp	sl, r3
 8006ce2:	d1a4      	bne.n	8006c2e <_dtoa_r+0xa66>
 8006ce4:	9b04      	ldr	r3, [sp, #16]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	9304      	str	r3, [sp, #16]
 8006cea:	2331      	movs	r3, #49	@ 0x31
 8006cec:	f88a 3000 	strb.w	r3, [sl]
 8006cf0:	e5b5      	b.n	800685e <_dtoa_r+0x696>
 8006cf2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006cf4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006d54 <_dtoa_r+0xb8c>
 8006cf8:	b11b      	cbz	r3, 8006d02 <_dtoa_r+0xb3a>
 8006cfa:	f10a 0308 	add.w	r3, sl, #8
 8006cfe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d00:	6013      	str	r3, [r2, #0]
 8006d02:	4650      	mov	r0, sl
 8006d04:	b017      	add	sp, #92	@ 0x5c
 8006d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	f77f ae3d 	ble.w	800698c <_dtoa_r+0x7c4>
 8006d12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d14:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d16:	2001      	movs	r0, #1
 8006d18:	e65b      	b.n	80069d2 <_dtoa_r+0x80a>
 8006d1a:	9b08      	ldr	r3, [sp, #32]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f77f aed6 	ble.w	8006ace <_dtoa_r+0x906>
 8006d22:	4656      	mov	r6, sl
 8006d24:	4621      	mov	r1, r4
 8006d26:	4648      	mov	r0, r9
 8006d28:	f7ff f9c5 	bl	80060b6 <quorem>
 8006d2c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d30:	9b08      	ldr	r3, [sp, #32]
 8006d32:	f806 8b01 	strb.w	r8, [r6], #1
 8006d36:	eba6 020a 	sub.w	r2, r6, sl
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	ddb3      	ble.n	8006ca6 <_dtoa_r+0xade>
 8006d3e:	4649      	mov	r1, r9
 8006d40:	2300      	movs	r3, #0
 8006d42:	220a      	movs	r2, #10
 8006d44:	4658      	mov	r0, fp
 8006d46:	f000 f967 	bl	8007018 <__multadd>
 8006d4a:	4681      	mov	r9, r0
 8006d4c:	e7ea      	b.n	8006d24 <_dtoa_r+0xb5c>
 8006d4e:	bf00      	nop
 8006d50:	080090c2 	.word	0x080090c2
 8006d54:	08009046 	.word	0x08009046

08006d58 <_free_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4605      	mov	r5, r0
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	d040      	beq.n	8006de2 <_free_r+0x8a>
 8006d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d64:	1f0c      	subs	r4, r1, #4
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	bfb8      	it	lt
 8006d6a:	18e4      	addlt	r4, r4, r3
 8006d6c:	f000 f8e6 	bl	8006f3c <__malloc_lock>
 8006d70:	4a1c      	ldr	r2, [pc, #112]	@ (8006de4 <_free_r+0x8c>)
 8006d72:	6813      	ldr	r3, [r2, #0]
 8006d74:	b933      	cbnz	r3, 8006d84 <_free_r+0x2c>
 8006d76:	6063      	str	r3, [r4, #4]
 8006d78:	6014      	str	r4, [r2, #0]
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d80:	f000 b8e2 	b.w	8006f48 <__malloc_unlock>
 8006d84:	42a3      	cmp	r3, r4
 8006d86:	d908      	bls.n	8006d9a <_free_r+0x42>
 8006d88:	6820      	ldr	r0, [r4, #0]
 8006d8a:	1821      	adds	r1, r4, r0
 8006d8c:	428b      	cmp	r3, r1
 8006d8e:	bf01      	itttt	eq
 8006d90:	6819      	ldreq	r1, [r3, #0]
 8006d92:	685b      	ldreq	r3, [r3, #4]
 8006d94:	1809      	addeq	r1, r1, r0
 8006d96:	6021      	streq	r1, [r4, #0]
 8006d98:	e7ed      	b.n	8006d76 <_free_r+0x1e>
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	b10b      	cbz	r3, 8006da4 <_free_r+0x4c>
 8006da0:	42a3      	cmp	r3, r4
 8006da2:	d9fa      	bls.n	8006d9a <_free_r+0x42>
 8006da4:	6811      	ldr	r1, [r2, #0]
 8006da6:	1850      	adds	r0, r2, r1
 8006da8:	42a0      	cmp	r0, r4
 8006daa:	d10b      	bne.n	8006dc4 <_free_r+0x6c>
 8006dac:	6820      	ldr	r0, [r4, #0]
 8006dae:	4401      	add	r1, r0
 8006db0:	1850      	adds	r0, r2, r1
 8006db2:	4283      	cmp	r3, r0
 8006db4:	6011      	str	r1, [r2, #0]
 8006db6:	d1e0      	bne.n	8006d7a <_free_r+0x22>
 8006db8:	6818      	ldr	r0, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	4408      	add	r0, r1
 8006dbe:	6010      	str	r0, [r2, #0]
 8006dc0:	6053      	str	r3, [r2, #4]
 8006dc2:	e7da      	b.n	8006d7a <_free_r+0x22>
 8006dc4:	d902      	bls.n	8006dcc <_free_r+0x74>
 8006dc6:	230c      	movs	r3, #12
 8006dc8:	602b      	str	r3, [r5, #0]
 8006dca:	e7d6      	b.n	8006d7a <_free_r+0x22>
 8006dcc:	6820      	ldr	r0, [r4, #0]
 8006dce:	1821      	adds	r1, r4, r0
 8006dd0:	428b      	cmp	r3, r1
 8006dd2:	bf01      	itttt	eq
 8006dd4:	6819      	ldreq	r1, [r3, #0]
 8006dd6:	685b      	ldreq	r3, [r3, #4]
 8006dd8:	1809      	addeq	r1, r1, r0
 8006dda:	6021      	streq	r1, [r4, #0]
 8006ddc:	6063      	str	r3, [r4, #4]
 8006dde:	6054      	str	r4, [r2, #4]
 8006de0:	e7cb      	b.n	8006d7a <_free_r+0x22>
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	2000047c 	.word	0x2000047c

08006de8 <malloc>:
 8006de8:	4b02      	ldr	r3, [pc, #8]	@ (8006df4 <malloc+0xc>)
 8006dea:	4601      	mov	r1, r0
 8006dec:	6818      	ldr	r0, [r3, #0]
 8006dee:	f000 b825 	b.w	8006e3c <_malloc_r>
 8006df2:	bf00      	nop
 8006df4:	20000018 	.word	0x20000018

08006df8 <sbrk_aligned>:
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	4e0f      	ldr	r6, [pc, #60]	@ (8006e38 <sbrk_aligned+0x40>)
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	6831      	ldr	r1, [r6, #0]
 8006e00:	4605      	mov	r5, r0
 8006e02:	b911      	cbnz	r1, 8006e0a <sbrk_aligned+0x12>
 8006e04:	f000 fea2 	bl	8007b4c <_sbrk_r>
 8006e08:	6030      	str	r0, [r6, #0]
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	f000 fe9d 	bl	8007b4c <_sbrk_r>
 8006e12:	1c43      	adds	r3, r0, #1
 8006e14:	d103      	bne.n	8006e1e <sbrk_aligned+0x26>
 8006e16:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	bd70      	pop	{r4, r5, r6, pc}
 8006e1e:	1cc4      	adds	r4, r0, #3
 8006e20:	f024 0403 	bic.w	r4, r4, #3
 8006e24:	42a0      	cmp	r0, r4
 8006e26:	d0f8      	beq.n	8006e1a <sbrk_aligned+0x22>
 8006e28:	1a21      	subs	r1, r4, r0
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	f000 fe8e 	bl	8007b4c <_sbrk_r>
 8006e30:	3001      	adds	r0, #1
 8006e32:	d1f2      	bne.n	8006e1a <sbrk_aligned+0x22>
 8006e34:	e7ef      	b.n	8006e16 <sbrk_aligned+0x1e>
 8006e36:	bf00      	nop
 8006e38:	20000478 	.word	0x20000478

08006e3c <_malloc_r>:
 8006e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e40:	1ccd      	adds	r5, r1, #3
 8006e42:	f025 0503 	bic.w	r5, r5, #3
 8006e46:	3508      	adds	r5, #8
 8006e48:	2d0c      	cmp	r5, #12
 8006e4a:	bf38      	it	cc
 8006e4c:	250c      	movcc	r5, #12
 8006e4e:	2d00      	cmp	r5, #0
 8006e50:	4606      	mov	r6, r0
 8006e52:	db01      	blt.n	8006e58 <_malloc_r+0x1c>
 8006e54:	42a9      	cmp	r1, r5
 8006e56:	d904      	bls.n	8006e62 <_malloc_r+0x26>
 8006e58:	230c      	movs	r3, #12
 8006e5a:	6033      	str	r3, [r6, #0]
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f38 <_malloc_r+0xfc>
 8006e66:	f000 f869 	bl	8006f3c <__malloc_lock>
 8006e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e6e:	461c      	mov	r4, r3
 8006e70:	bb44      	cbnz	r4, 8006ec4 <_malloc_r+0x88>
 8006e72:	4629      	mov	r1, r5
 8006e74:	4630      	mov	r0, r6
 8006e76:	f7ff ffbf 	bl	8006df8 <sbrk_aligned>
 8006e7a:	1c43      	adds	r3, r0, #1
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	d158      	bne.n	8006f32 <_malloc_r+0xf6>
 8006e80:	f8d8 4000 	ldr.w	r4, [r8]
 8006e84:	4627      	mov	r7, r4
 8006e86:	2f00      	cmp	r7, #0
 8006e88:	d143      	bne.n	8006f12 <_malloc_r+0xd6>
 8006e8a:	2c00      	cmp	r4, #0
 8006e8c:	d04b      	beq.n	8006f26 <_malloc_r+0xea>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	4639      	mov	r1, r7
 8006e92:	4630      	mov	r0, r6
 8006e94:	eb04 0903 	add.w	r9, r4, r3
 8006e98:	f000 fe58 	bl	8007b4c <_sbrk_r>
 8006e9c:	4581      	cmp	r9, r0
 8006e9e:	d142      	bne.n	8006f26 <_malloc_r+0xea>
 8006ea0:	6821      	ldr	r1, [r4, #0]
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	1a6d      	subs	r5, r5, r1
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	f7ff ffa6 	bl	8006df8 <sbrk_aligned>
 8006eac:	3001      	adds	r0, #1
 8006eae:	d03a      	beq.n	8006f26 <_malloc_r+0xea>
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	442b      	add	r3, r5
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	bb62      	cbnz	r2, 8006f18 <_malloc_r+0xdc>
 8006ebe:	f8c8 7000 	str.w	r7, [r8]
 8006ec2:	e00f      	b.n	8006ee4 <_malloc_r+0xa8>
 8006ec4:	6822      	ldr	r2, [r4, #0]
 8006ec6:	1b52      	subs	r2, r2, r5
 8006ec8:	d420      	bmi.n	8006f0c <_malloc_r+0xd0>
 8006eca:	2a0b      	cmp	r2, #11
 8006ecc:	d917      	bls.n	8006efe <_malloc_r+0xc2>
 8006ece:	1961      	adds	r1, r4, r5
 8006ed0:	42a3      	cmp	r3, r4
 8006ed2:	6025      	str	r5, [r4, #0]
 8006ed4:	bf18      	it	ne
 8006ed6:	6059      	strne	r1, [r3, #4]
 8006ed8:	6863      	ldr	r3, [r4, #4]
 8006eda:	bf08      	it	eq
 8006edc:	f8c8 1000 	streq.w	r1, [r8]
 8006ee0:	5162      	str	r2, [r4, r5]
 8006ee2:	604b      	str	r3, [r1, #4]
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f000 f82f 	bl	8006f48 <__malloc_unlock>
 8006eea:	f104 000b 	add.w	r0, r4, #11
 8006eee:	1d23      	adds	r3, r4, #4
 8006ef0:	f020 0007 	bic.w	r0, r0, #7
 8006ef4:	1ac2      	subs	r2, r0, r3
 8006ef6:	bf1c      	itt	ne
 8006ef8:	1a1b      	subne	r3, r3, r0
 8006efa:	50a3      	strne	r3, [r4, r2]
 8006efc:	e7af      	b.n	8006e5e <_malloc_r+0x22>
 8006efe:	6862      	ldr	r2, [r4, #4]
 8006f00:	42a3      	cmp	r3, r4
 8006f02:	bf0c      	ite	eq
 8006f04:	f8c8 2000 	streq.w	r2, [r8]
 8006f08:	605a      	strne	r2, [r3, #4]
 8006f0a:	e7eb      	b.n	8006ee4 <_malloc_r+0xa8>
 8006f0c:	4623      	mov	r3, r4
 8006f0e:	6864      	ldr	r4, [r4, #4]
 8006f10:	e7ae      	b.n	8006e70 <_malloc_r+0x34>
 8006f12:	463c      	mov	r4, r7
 8006f14:	687f      	ldr	r7, [r7, #4]
 8006f16:	e7b6      	b.n	8006e86 <_malloc_r+0x4a>
 8006f18:	461a      	mov	r2, r3
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	42a3      	cmp	r3, r4
 8006f1e:	d1fb      	bne.n	8006f18 <_malloc_r+0xdc>
 8006f20:	2300      	movs	r3, #0
 8006f22:	6053      	str	r3, [r2, #4]
 8006f24:	e7de      	b.n	8006ee4 <_malloc_r+0xa8>
 8006f26:	230c      	movs	r3, #12
 8006f28:	4630      	mov	r0, r6
 8006f2a:	6033      	str	r3, [r6, #0]
 8006f2c:	f000 f80c 	bl	8006f48 <__malloc_unlock>
 8006f30:	e794      	b.n	8006e5c <_malloc_r+0x20>
 8006f32:	6005      	str	r5, [r0, #0]
 8006f34:	e7d6      	b.n	8006ee4 <_malloc_r+0xa8>
 8006f36:	bf00      	nop
 8006f38:	2000047c 	.word	0x2000047c

08006f3c <__malloc_lock>:
 8006f3c:	4801      	ldr	r0, [pc, #4]	@ (8006f44 <__malloc_lock+0x8>)
 8006f3e:	f7ff b8aa 	b.w	8006096 <__retarget_lock_acquire_recursive>
 8006f42:	bf00      	nop
 8006f44:	20000474 	.word	0x20000474

08006f48 <__malloc_unlock>:
 8006f48:	4801      	ldr	r0, [pc, #4]	@ (8006f50 <__malloc_unlock+0x8>)
 8006f4a:	f7ff b8a5 	b.w	8006098 <__retarget_lock_release_recursive>
 8006f4e:	bf00      	nop
 8006f50:	20000474 	.word	0x20000474

08006f54 <_Balloc>:
 8006f54:	b570      	push	{r4, r5, r6, lr}
 8006f56:	69c6      	ldr	r6, [r0, #28]
 8006f58:	4604      	mov	r4, r0
 8006f5a:	460d      	mov	r5, r1
 8006f5c:	b976      	cbnz	r6, 8006f7c <_Balloc+0x28>
 8006f5e:	2010      	movs	r0, #16
 8006f60:	f7ff ff42 	bl	8006de8 <malloc>
 8006f64:	4602      	mov	r2, r0
 8006f66:	61e0      	str	r0, [r4, #28]
 8006f68:	b920      	cbnz	r0, 8006f74 <_Balloc+0x20>
 8006f6a:	216b      	movs	r1, #107	@ 0x6b
 8006f6c:	4b17      	ldr	r3, [pc, #92]	@ (8006fcc <_Balloc+0x78>)
 8006f6e:	4818      	ldr	r0, [pc, #96]	@ (8006fd0 <_Balloc+0x7c>)
 8006f70:	f000 fe0a 	bl	8007b88 <__assert_func>
 8006f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f78:	6006      	str	r6, [r0, #0]
 8006f7a:	60c6      	str	r6, [r0, #12]
 8006f7c:	69e6      	ldr	r6, [r4, #28]
 8006f7e:	68f3      	ldr	r3, [r6, #12]
 8006f80:	b183      	cbz	r3, 8006fa4 <_Balloc+0x50>
 8006f82:	69e3      	ldr	r3, [r4, #28]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f8a:	b9b8      	cbnz	r0, 8006fbc <_Balloc+0x68>
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	fa01 f605 	lsl.w	r6, r1, r5
 8006f92:	1d72      	adds	r2, r6, #5
 8006f94:	4620      	mov	r0, r4
 8006f96:	0092      	lsls	r2, r2, #2
 8006f98:	f000 fe14 	bl	8007bc4 <_calloc_r>
 8006f9c:	b160      	cbz	r0, 8006fb8 <_Balloc+0x64>
 8006f9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fa2:	e00e      	b.n	8006fc2 <_Balloc+0x6e>
 8006fa4:	2221      	movs	r2, #33	@ 0x21
 8006fa6:	2104      	movs	r1, #4
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f000 fe0b 	bl	8007bc4 <_calloc_r>
 8006fae:	69e3      	ldr	r3, [r4, #28]
 8006fb0:	60f0      	str	r0, [r6, #12]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e4      	bne.n	8006f82 <_Balloc+0x2e>
 8006fb8:	2000      	movs	r0, #0
 8006fba:	bd70      	pop	{r4, r5, r6, pc}
 8006fbc:	6802      	ldr	r2, [r0, #0]
 8006fbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fc8:	e7f7      	b.n	8006fba <_Balloc+0x66>
 8006fca:	bf00      	nop
 8006fcc:	08009053 	.word	0x08009053
 8006fd0:	080090d3 	.word	0x080090d3

08006fd4 <_Bfree>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	69c6      	ldr	r6, [r0, #28]
 8006fd8:	4605      	mov	r5, r0
 8006fda:	460c      	mov	r4, r1
 8006fdc:	b976      	cbnz	r6, 8006ffc <_Bfree+0x28>
 8006fde:	2010      	movs	r0, #16
 8006fe0:	f7ff ff02 	bl	8006de8 <malloc>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	61e8      	str	r0, [r5, #28]
 8006fe8:	b920      	cbnz	r0, 8006ff4 <_Bfree+0x20>
 8006fea:	218f      	movs	r1, #143	@ 0x8f
 8006fec:	4b08      	ldr	r3, [pc, #32]	@ (8007010 <_Bfree+0x3c>)
 8006fee:	4809      	ldr	r0, [pc, #36]	@ (8007014 <_Bfree+0x40>)
 8006ff0:	f000 fdca 	bl	8007b88 <__assert_func>
 8006ff4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ff8:	6006      	str	r6, [r0, #0]
 8006ffa:	60c6      	str	r6, [r0, #12]
 8006ffc:	b13c      	cbz	r4, 800700e <_Bfree+0x3a>
 8006ffe:	69eb      	ldr	r3, [r5, #28]
 8007000:	6862      	ldr	r2, [r4, #4]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007008:	6021      	str	r1, [r4, #0]
 800700a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800700e:	bd70      	pop	{r4, r5, r6, pc}
 8007010:	08009053 	.word	0x08009053
 8007014:	080090d3 	.word	0x080090d3

08007018 <__multadd>:
 8007018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800701c:	4607      	mov	r7, r0
 800701e:	460c      	mov	r4, r1
 8007020:	461e      	mov	r6, r3
 8007022:	2000      	movs	r0, #0
 8007024:	690d      	ldr	r5, [r1, #16]
 8007026:	f101 0c14 	add.w	ip, r1, #20
 800702a:	f8dc 3000 	ldr.w	r3, [ip]
 800702e:	3001      	adds	r0, #1
 8007030:	b299      	uxth	r1, r3
 8007032:	fb02 6101 	mla	r1, r2, r1, r6
 8007036:	0c1e      	lsrs	r6, r3, #16
 8007038:	0c0b      	lsrs	r3, r1, #16
 800703a:	fb02 3306 	mla	r3, r2, r6, r3
 800703e:	b289      	uxth	r1, r1
 8007040:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007044:	4285      	cmp	r5, r0
 8007046:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800704a:	f84c 1b04 	str.w	r1, [ip], #4
 800704e:	dcec      	bgt.n	800702a <__multadd+0x12>
 8007050:	b30e      	cbz	r6, 8007096 <__multadd+0x7e>
 8007052:	68a3      	ldr	r3, [r4, #8]
 8007054:	42ab      	cmp	r3, r5
 8007056:	dc19      	bgt.n	800708c <__multadd+0x74>
 8007058:	6861      	ldr	r1, [r4, #4]
 800705a:	4638      	mov	r0, r7
 800705c:	3101      	adds	r1, #1
 800705e:	f7ff ff79 	bl	8006f54 <_Balloc>
 8007062:	4680      	mov	r8, r0
 8007064:	b928      	cbnz	r0, 8007072 <__multadd+0x5a>
 8007066:	4602      	mov	r2, r0
 8007068:	21ba      	movs	r1, #186	@ 0xba
 800706a:	4b0c      	ldr	r3, [pc, #48]	@ (800709c <__multadd+0x84>)
 800706c:	480c      	ldr	r0, [pc, #48]	@ (80070a0 <__multadd+0x88>)
 800706e:	f000 fd8b 	bl	8007b88 <__assert_func>
 8007072:	6922      	ldr	r2, [r4, #16]
 8007074:	f104 010c 	add.w	r1, r4, #12
 8007078:	3202      	adds	r2, #2
 800707a:	0092      	lsls	r2, r2, #2
 800707c:	300c      	adds	r0, #12
 800707e:	f000 fd75 	bl	8007b6c <memcpy>
 8007082:	4621      	mov	r1, r4
 8007084:	4638      	mov	r0, r7
 8007086:	f7ff ffa5 	bl	8006fd4 <_Bfree>
 800708a:	4644      	mov	r4, r8
 800708c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007090:	3501      	adds	r5, #1
 8007092:	615e      	str	r6, [r3, #20]
 8007094:	6125      	str	r5, [r4, #16]
 8007096:	4620      	mov	r0, r4
 8007098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800709c:	080090c2 	.word	0x080090c2
 80070a0:	080090d3 	.word	0x080090d3

080070a4 <__hi0bits>:
 80070a4:	4603      	mov	r3, r0
 80070a6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80070aa:	bf3a      	itte	cc
 80070ac:	0403      	lslcc	r3, r0, #16
 80070ae:	2010      	movcc	r0, #16
 80070b0:	2000      	movcs	r0, #0
 80070b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070b6:	bf3c      	itt	cc
 80070b8:	021b      	lslcc	r3, r3, #8
 80070ba:	3008      	addcc	r0, #8
 80070bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070c0:	bf3c      	itt	cc
 80070c2:	011b      	lslcc	r3, r3, #4
 80070c4:	3004      	addcc	r0, #4
 80070c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ca:	bf3c      	itt	cc
 80070cc:	009b      	lslcc	r3, r3, #2
 80070ce:	3002      	addcc	r0, #2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	db05      	blt.n	80070e0 <__hi0bits+0x3c>
 80070d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80070d8:	f100 0001 	add.w	r0, r0, #1
 80070dc:	bf08      	it	eq
 80070de:	2020      	moveq	r0, #32
 80070e0:	4770      	bx	lr

080070e2 <__lo0bits>:
 80070e2:	6803      	ldr	r3, [r0, #0]
 80070e4:	4602      	mov	r2, r0
 80070e6:	f013 0007 	ands.w	r0, r3, #7
 80070ea:	d00b      	beq.n	8007104 <__lo0bits+0x22>
 80070ec:	07d9      	lsls	r1, r3, #31
 80070ee:	d421      	bmi.n	8007134 <__lo0bits+0x52>
 80070f0:	0798      	lsls	r0, r3, #30
 80070f2:	bf49      	itett	mi
 80070f4:	085b      	lsrmi	r3, r3, #1
 80070f6:	089b      	lsrpl	r3, r3, #2
 80070f8:	2001      	movmi	r0, #1
 80070fa:	6013      	strmi	r3, [r2, #0]
 80070fc:	bf5c      	itt	pl
 80070fe:	2002      	movpl	r0, #2
 8007100:	6013      	strpl	r3, [r2, #0]
 8007102:	4770      	bx	lr
 8007104:	b299      	uxth	r1, r3
 8007106:	b909      	cbnz	r1, 800710c <__lo0bits+0x2a>
 8007108:	2010      	movs	r0, #16
 800710a:	0c1b      	lsrs	r3, r3, #16
 800710c:	b2d9      	uxtb	r1, r3
 800710e:	b909      	cbnz	r1, 8007114 <__lo0bits+0x32>
 8007110:	3008      	adds	r0, #8
 8007112:	0a1b      	lsrs	r3, r3, #8
 8007114:	0719      	lsls	r1, r3, #28
 8007116:	bf04      	itt	eq
 8007118:	091b      	lsreq	r3, r3, #4
 800711a:	3004      	addeq	r0, #4
 800711c:	0799      	lsls	r1, r3, #30
 800711e:	bf04      	itt	eq
 8007120:	089b      	lsreq	r3, r3, #2
 8007122:	3002      	addeq	r0, #2
 8007124:	07d9      	lsls	r1, r3, #31
 8007126:	d403      	bmi.n	8007130 <__lo0bits+0x4e>
 8007128:	085b      	lsrs	r3, r3, #1
 800712a:	f100 0001 	add.w	r0, r0, #1
 800712e:	d003      	beq.n	8007138 <__lo0bits+0x56>
 8007130:	6013      	str	r3, [r2, #0]
 8007132:	4770      	bx	lr
 8007134:	2000      	movs	r0, #0
 8007136:	4770      	bx	lr
 8007138:	2020      	movs	r0, #32
 800713a:	4770      	bx	lr

0800713c <__i2b>:
 800713c:	b510      	push	{r4, lr}
 800713e:	460c      	mov	r4, r1
 8007140:	2101      	movs	r1, #1
 8007142:	f7ff ff07 	bl	8006f54 <_Balloc>
 8007146:	4602      	mov	r2, r0
 8007148:	b928      	cbnz	r0, 8007156 <__i2b+0x1a>
 800714a:	f240 1145 	movw	r1, #325	@ 0x145
 800714e:	4b04      	ldr	r3, [pc, #16]	@ (8007160 <__i2b+0x24>)
 8007150:	4804      	ldr	r0, [pc, #16]	@ (8007164 <__i2b+0x28>)
 8007152:	f000 fd19 	bl	8007b88 <__assert_func>
 8007156:	2301      	movs	r3, #1
 8007158:	6144      	str	r4, [r0, #20]
 800715a:	6103      	str	r3, [r0, #16]
 800715c:	bd10      	pop	{r4, pc}
 800715e:	bf00      	nop
 8007160:	080090c2 	.word	0x080090c2
 8007164:	080090d3 	.word	0x080090d3

08007168 <__multiply>:
 8007168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716c:	4614      	mov	r4, r2
 800716e:	690a      	ldr	r2, [r1, #16]
 8007170:	6923      	ldr	r3, [r4, #16]
 8007172:	460f      	mov	r7, r1
 8007174:	429a      	cmp	r2, r3
 8007176:	bfa2      	ittt	ge
 8007178:	4623      	movge	r3, r4
 800717a:	460c      	movge	r4, r1
 800717c:	461f      	movge	r7, r3
 800717e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007182:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007186:	68a3      	ldr	r3, [r4, #8]
 8007188:	6861      	ldr	r1, [r4, #4]
 800718a:	eb0a 0609 	add.w	r6, sl, r9
 800718e:	42b3      	cmp	r3, r6
 8007190:	b085      	sub	sp, #20
 8007192:	bfb8      	it	lt
 8007194:	3101      	addlt	r1, #1
 8007196:	f7ff fedd 	bl	8006f54 <_Balloc>
 800719a:	b930      	cbnz	r0, 80071aa <__multiply+0x42>
 800719c:	4602      	mov	r2, r0
 800719e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80071a2:	4b43      	ldr	r3, [pc, #268]	@ (80072b0 <__multiply+0x148>)
 80071a4:	4843      	ldr	r0, [pc, #268]	@ (80072b4 <__multiply+0x14c>)
 80071a6:	f000 fcef 	bl	8007b88 <__assert_func>
 80071aa:	f100 0514 	add.w	r5, r0, #20
 80071ae:	462b      	mov	r3, r5
 80071b0:	2200      	movs	r2, #0
 80071b2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071b6:	4543      	cmp	r3, r8
 80071b8:	d321      	bcc.n	80071fe <__multiply+0x96>
 80071ba:	f107 0114 	add.w	r1, r7, #20
 80071be:	f104 0214 	add.w	r2, r4, #20
 80071c2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80071c6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80071ca:	9302      	str	r3, [sp, #8]
 80071cc:	1b13      	subs	r3, r2, r4
 80071ce:	3b15      	subs	r3, #21
 80071d0:	f023 0303 	bic.w	r3, r3, #3
 80071d4:	3304      	adds	r3, #4
 80071d6:	f104 0715 	add.w	r7, r4, #21
 80071da:	42ba      	cmp	r2, r7
 80071dc:	bf38      	it	cc
 80071de:	2304      	movcc	r3, #4
 80071e0:	9301      	str	r3, [sp, #4]
 80071e2:	9b02      	ldr	r3, [sp, #8]
 80071e4:	9103      	str	r1, [sp, #12]
 80071e6:	428b      	cmp	r3, r1
 80071e8:	d80c      	bhi.n	8007204 <__multiply+0x9c>
 80071ea:	2e00      	cmp	r6, #0
 80071ec:	dd03      	ble.n	80071f6 <__multiply+0x8e>
 80071ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d05a      	beq.n	80072ac <__multiply+0x144>
 80071f6:	6106      	str	r6, [r0, #16]
 80071f8:	b005      	add	sp, #20
 80071fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071fe:	f843 2b04 	str.w	r2, [r3], #4
 8007202:	e7d8      	b.n	80071b6 <__multiply+0x4e>
 8007204:	f8b1 a000 	ldrh.w	sl, [r1]
 8007208:	f1ba 0f00 	cmp.w	sl, #0
 800720c:	d023      	beq.n	8007256 <__multiply+0xee>
 800720e:	46a9      	mov	r9, r5
 8007210:	f04f 0c00 	mov.w	ip, #0
 8007214:	f104 0e14 	add.w	lr, r4, #20
 8007218:	f85e 7b04 	ldr.w	r7, [lr], #4
 800721c:	f8d9 3000 	ldr.w	r3, [r9]
 8007220:	fa1f fb87 	uxth.w	fp, r7
 8007224:	b29b      	uxth	r3, r3
 8007226:	fb0a 330b 	mla	r3, sl, fp, r3
 800722a:	4463      	add	r3, ip
 800722c:	f8d9 c000 	ldr.w	ip, [r9]
 8007230:	0c3f      	lsrs	r7, r7, #16
 8007232:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007236:	fb0a c707 	mla	r7, sl, r7, ip
 800723a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800723e:	b29b      	uxth	r3, r3
 8007240:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007244:	4572      	cmp	r2, lr
 8007246:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800724a:	f849 3b04 	str.w	r3, [r9], #4
 800724e:	d8e3      	bhi.n	8007218 <__multiply+0xb0>
 8007250:	9b01      	ldr	r3, [sp, #4]
 8007252:	f845 c003 	str.w	ip, [r5, r3]
 8007256:	9b03      	ldr	r3, [sp, #12]
 8007258:	3104      	adds	r1, #4
 800725a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800725e:	f1b9 0f00 	cmp.w	r9, #0
 8007262:	d021      	beq.n	80072a8 <__multiply+0x140>
 8007264:	46ae      	mov	lr, r5
 8007266:	f04f 0a00 	mov.w	sl, #0
 800726a:	682b      	ldr	r3, [r5, #0]
 800726c:	f104 0c14 	add.w	ip, r4, #20
 8007270:	f8bc b000 	ldrh.w	fp, [ip]
 8007274:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007278:	b29b      	uxth	r3, r3
 800727a:	fb09 770b 	mla	r7, r9, fp, r7
 800727e:	4457      	add	r7, sl
 8007280:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007284:	f84e 3b04 	str.w	r3, [lr], #4
 8007288:	f85c 3b04 	ldr.w	r3, [ip], #4
 800728c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007290:	f8be 3000 	ldrh.w	r3, [lr]
 8007294:	4562      	cmp	r2, ip
 8007296:	fb09 330a 	mla	r3, r9, sl, r3
 800729a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800729e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072a2:	d8e5      	bhi.n	8007270 <__multiply+0x108>
 80072a4:	9f01      	ldr	r7, [sp, #4]
 80072a6:	51eb      	str	r3, [r5, r7]
 80072a8:	3504      	adds	r5, #4
 80072aa:	e79a      	b.n	80071e2 <__multiply+0x7a>
 80072ac:	3e01      	subs	r6, #1
 80072ae:	e79c      	b.n	80071ea <__multiply+0x82>
 80072b0:	080090c2 	.word	0x080090c2
 80072b4:	080090d3 	.word	0x080090d3

080072b8 <__pow5mult>:
 80072b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072bc:	4615      	mov	r5, r2
 80072be:	f012 0203 	ands.w	r2, r2, #3
 80072c2:	4607      	mov	r7, r0
 80072c4:	460e      	mov	r6, r1
 80072c6:	d007      	beq.n	80072d8 <__pow5mult+0x20>
 80072c8:	4c25      	ldr	r4, [pc, #148]	@ (8007360 <__pow5mult+0xa8>)
 80072ca:	3a01      	subs	r2, #1
 80072cc:	2300      	movs	r3, #0
 80072ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072d2:	f7ff fea1 	bl	8007018 <__multadd>
 80072d6:	4606      	mov	r6, r0
 80072d8:	10ad      	asrs	r5, r5, #2
 80072da:	d03d      	beq.n	8007358 <__pow5mult+0xa0>
 80072dc:	69fc      	ldr	r4, [r7, #28]
 80072de:	b97c      	cbnz	r4, 8007300 <__pow5mult+0x48>
 80072e0:	2010      	movs	r0, #16
 80072e2:	f7ff fd81 	bl	8006de8 <malloc>
 80072e6:	4602      	mov	r2, r0
 80072e8:	61f8      	str	r0, [r7, #28]
 80072ea:	b928      	cbnz	r0, 80072f8 <__pow5mult+0x40>
 80072ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80072f0:	4b1c      	ldr	r3, [pc, #112]	@ (8007364 <__pow5mult+0xac>)
 80072f2:	481d      	ldr	r0, [pc, #116]	@ (8007368 <__pow5mult+0xb0>)
 80072f4:	f000 fc48 	bl	8007b88 <__assert_func>
 80072f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072fc:	6004      	str	r4, [r0, #0]
 80072fe:	60c4      	str	r4, [r0, #12]
 8007300:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007304:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007308:	b94c      	cbnz	r4, 800731e <__pow5mult+0x66>
 800730a:	f240 2171 	movw	r1, #625	@ 0x271
 800730e:	4638      	mov	r0, r7
 8007310:	f7ff ff14 	bl	800713c <__i2b>
 8007314:	2300      	movs	r3, #0
 8007316:	4604      	mov	r4, r0
 8007318:	f8c8 0008 	str.w	r0, [r8, #8]
 800731c:	6003      	str	r3, [r0, #0]
 800731e:	f04f 0900 	mov.w	r9, #0
 8007322:	07eb      	lsls	r3, r5, #31
 8007324:	d50a      	bpl.n	800733c <__pow5mult+0x84>
 8007326:	4631      	mov	r1, r6
 8007328:	4622      	mov	r2, r4
 800732a:	4638      	mov	r0, r7
 800732c:	f7ff ff1c 	bl	8007168 <__multiply>
 8007330:	4680      	mov	r8, r0
 8007332:	4631      	mov	r1, r6
 8007334:	4638      	mov	r0, r7
 8007336:	f7ff fe4d 	bl	8006fd4 <_Bfree>
 800733a:	4646      	mov	r6, r8
 800733c:	106d      	asrs	r5, r5, #1
 800733e:	d00b      	beq.n	8007358 <__pow5mult+0xa0>
 8007340:	6820      	ldr	r0, [r4, #0]
 8007342:	b938      	cbnz	r0, 8007354 <__pow5mult+0x9c>
 8007344:	4622      	mov	r2, r4
 8007346:	4621      	mov	r1, r4
 8007348:	4638      	mov	r0, r7
 800734a:	f7ff ff0d 	bl	8007168 <__multiply>
 800734e:	6020      	str	r0, [r4, #0]
 8007350:	f8c0 9000 	str.w	r9, [r0]
 8007354:	4604      	mov	r4, r0
 8007356:	e7e4      	b.n	8007322 <__pow5mult+0x6a>
 8007358:	4630      	mov	r0, r6
 800735a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800735e:	bf00      	nop
 8007360:	0800912c 	.word	0x0800912c
 8007364:	08009053 	.word	0x08009053
 8007368:	080090d3 	.word	0x080090d3

0800736c <__lshift>:
 800736c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007370:	460c      	mov	r4, r1
 8007372:	4607      	mov	r7, r0
 8007374:	4691      	mov	r9, r2
 8007376:	6923      	ldr	r3, [r4, #16]
 8007378:	6849      	ldr	r1, [r1, #4]
 800737a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800737e:	68a3      	ldr	r3, [r4, #8]
 8007380:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007384:	f108 0601 	add.w	r6, r8, #1
 8007388:	42b3      	cmp	r3, r6
 800738a:	db0b      	blt.n	80073a4 <__lshift+0x38>
 800738c:	4638      	mov	r0, r7
 800738e:	f7ff fde1 	bl	8006f54 <_Balloc>
 8007392:	4605      	mov	r5, r0
 8007394:	b948      	cbnz	r0, 80073aa <__lshift+0x3e>
 8007396:	4602      	mov	r2, r0
 8007398:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800739c:	4b27      	ldr	r3, [pc, #156]	@ (800743c <__lshift+0xd0>)
 800739e:	4828      	ldr	r0, [pc, #160]	@ (8007440 <__lshift+0xd4>)
 80073a0:	f000 fbf2 	bl	8007b88 <__assert_func>
 80073a4:	3101      	adds	r1, #1
 80073a6:	005b      	lsls	r3, r3, #1
 80073a8:	e7ee      	b.n	8007388 <__lshift+0x1c>
 80073aa:	2300      	movs	r3, #0
 80073ac:	f100 0114 	add.w	r1, r0, #20
 80073b0:	f100 0210 	add.w	r2, r0, #16
 80073b4:	4618      	mov	r0, r3
 80073b6:	4553      	cmp	r3, sl
 80073b8:	db33      	blt.n	8007422 <__lshift+0xb6>
 80073ba:	6920      	ldr	r0, [r4, #16]
 80073bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073c0:	f104 0314 	add.w	r3, r4, #20
 80073c4:	f019 091f 	ands.w	r9, r9, #31
 80073c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80073d0:	d02b      	beq.n	800742a <__lshift+0xbe>
 80073d2:	468a      	mov	sl, r1
 80073d4:	2200      	movs	r2, #0
 80073d6:	f1c9 0e20 	rsb	lr, r9, #32
 80073da:	6818      	ldr	r0, [r3, #0]
 80073dc:	fa00 f009 	lsl.w	r0, r0, r9
 80073e0:	4310      	orrs	r0, r2
 80073e2:	f84a 0b04 	str.w	r0, [sl], #4
 80073e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ea:	459c      	cmp	ip, r3
 80073ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80073f0:	d8f3      	bhi.n	80073da <__lshift+0x6e>
 80073f2:	ebac 0304 	sub.w	r3, ip, r4
 80073f6:	3b15      	subs	r3, #21
 80073f8:	f023 0303 	bic.w	r3, r3, #3
 80073fc:	3304      	adds	r3, #4
 80073fe:	f104 0015 	add.w	r0, r4, #21
 8007402:	4584      	cmp	ip, r0
 8007404:	bf38      	it	cc
 8007406:	2304      	movcc	r3, #4
 8007408:	50ca      	str	r2, [r1, r3]
 800740a:	b10a      	cbz	r2, 8007410 <__lshift+0xa4>
 800740c:	f108 0602 	add.w	r6, r8, #2
 8007410:	3e01      	subs	r6, #1
 8007412:	4638      	mov	r0, r7
 8007414:	4621      	mov	r1, r4
 8007416:	612e      	str	r6, [r5, #16]
 8007418:	f7ff fddc 	bl	8006fd4 <_Bfree>
 800741c:	4628      	mov	r0, r5
 800741e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007422:	f842 0f04 	str.w	r0, [r2, #4]!
 8007426:	3301      	adds	r3, #1
 8007428:	e7c5      	b.n	80073b6 <__lshift+0x4a>
 800742a:	3904      	subs	r1, #4
 800742c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007430:	459c      	cmp	ip, r3
 8007432:	f841 2f04 	str.w	r2, [r1, #4]!
 8007436:	d8f9      	bhi.n	800742c <__lshift+0xc0>
 8007438:	e7ea      	b.n	8007410 <__lshift+0xa4>
 800743a:	bf00      	nop
 800743c:	080090c2 	.word	0x080090c2
 8007440:	080090d3 	.word	0x080090d3

08007444 <__mcmp>:
 8007444:	4603      	mov	r3, r0
 8007446:	690a      	ldr	r2, [r1, #16]
 8007448:	6900      	ldr	r0, [r0, #16]
 800744a:	b530      	push	{r4, r5, lr}
 800744c:	1a80      	subs	r0, r0, r2
 800744e:	d10e      	bne.n	800746e <__mcmp+0x2a>
 8007450:	3314      	adds	r3, #20
 8007452:	3114      	adds	r1, #20
 8007454:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007458:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800745c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007460:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007464:	4295      	cmp	r5, r2
 8007466:	d003      	beq.n	8007470 <__mcmp+0x2c>
 8007468:	d205      	bcs.n	8007476 <__mcmp+0x32>
 800746a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800746e:	bd30      	pop	{r4, r5, pc}
 8007470:	42a3      	cmp	r3, r4
 8007472:	d3f3      	bcc.n	800745c <__mcmp+0x18>
 8007474:	e7fb      	b.n	800746e <__mcmp+0x2a>
 8007476:	2001      	movs	r0, #1
 8007478:	e7f9      	b.n	800746e <__mcmp+0x2a>
	...

0800747c <__mdiff>:
 800747c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007480:	4689      	mov	r9, r1
 8007482:	4606      	mov	r6, r0
 8007484:	4611      	mov	r1, r2
 8007486:	4648      	mov	r0, r9
 8007488:	4614      	mov	r4, r2
 800748a:	f7ff ffdb 	bl	8007444 <__mcmp>
 800748e:	1e05      	subs	r5, r0, #0
 8007490:	d112      	bne.n	80074b8 <__mdiff+0x3c>
 8007492:	4629      	mov	r1, r5
 8007494:	4630      	mov	r0, r6
 8007496:	f7ff fd5d 	bl	8006f54 <_Balloc>
 800749a:	4602      	mov	r2, r0
 800749c:	b928      	cbnz	r0, 80074aa <__mdiff+0x2e>
 800749e:	f240 2137 	movw	r1, #567	@ 0x237
 80074a2:	4b3e      	ldr	r3, [pc, #248]	@ (800759c <__mdiff+0x120>)
 80074a4:	483e      	ldr	r0, [pc, #248]	@ (80075a0 <__mdiff+0x124>)
 80074a6:	f000 fb6f 	bl	8007b88 <__assert_func>
 80074aa:	2301      	movs	r3, #1
 80074ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074b0:	4610      	mov	r0, r2
 80074b2:	b003      	add	sp, #12
 80074b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074b8:	bfbc      	itt	lt
 80074ba:	464b      	movlt	r3, r9
 80074bc:	46a1      	movlt	r9, r4
 80074be:	4630      	mov	r0, r6
 80074c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80074c4:	bfba      	itte	lt
 80074c6:	461c      	movlt	r4, r3
 80074c8:	2501      	movlt	r5, #1
 80074ca:	2500      	movge	r5, #0
 80074cc:	f7ff fd42 	bl	8006f54 <_Balloc>
 80074d0:	4602      	mov	r2, r0
 80074d2:	b918      	cbnz	r0, 80074dc <__mdiff+0x60>
 80074d4:	f240 2145 	movw	r1, #581	@ 0x245
 80074d8:	4b30      	ldr	r3, [pc, #192]	@ (800759c <__mdiff+0x120>)
 80074da:	e7e3      	b.n	80074a4 <__mdiff+0x28>
 80074dc:	f100 0b14 	add.w	fp, r0, #20
 80074e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80074e4:	f109 0310 	add.w	r3, r9, #16
 80074e8:	60c5      	str	r5, [r0, #12]
 80074ea:	f04f 0c00 	mov.w	ip, #0
 80074ee:	f109 0514 	add.w	r5, r9, #20
 80074f2:	46d9      	mov	r9, fp
 80074f4:	6926      	ldr	r6, [r4, #16]
 80074f6:	f104 0e14 	add.w	lr, r4, #20
 80074fa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80074fe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007502:	9301      	str	r3, [sp, #4]
 8007504:	9b01      	ldr	r3, [sp, #4]
 8007506:	f85e 0b04 	ldr.w	r0, [lr], #4
 800750a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800750e:	b281      	uxth	r1, r0
 8007510:	9301      	str	r3, [sp, #4]
 8007512:	fa1f f38a 	uxth.w	r3, sl
 8007516:	1a5b      	subs	r3, r3, r1
 8007518:	0c00      	lsrs	r0, r0, #16
 800751a:	4463      	add	r3, ip
 800751c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007520:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007524:	b29b      	uxth	r3, r3
 8007526:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800752a:	4576      	cmp	r6, lr
 800752c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007530:	f849 3b04 	str.w	r3, [r9], #4
 8007534:	d8e6      	bhi.n	8007504 <__mdiff+0x88>
 8007536:	1b33      	subs	r3, r6, r4
 8007538:	3b15      	subs	r3, #21
 800753a:	f023 0303 	bic.w	r3, r3, #3
 800753e:	3415      	adds	r4, #21
 8007540:	3304      	adds	r3, #4
 8007542:	42a6      	cmp	r6, r4
 8007544:	bf38      	it	cc
 8007546:	2304      	movcc	r3, #4
 8007548:	441d      	add	r5, r3
 800754a:	445b      	add	r3, fp
 800754c:	461e      	mov	r6, r3
 800754e:	462c      	mov	r4, r5
 8007550:	4544      	cmp	r4, r8
 8007552:	d30e      	bcc.n	8007572 <__mdiff+0xf6>
 8007554:	f108 0103 	add.w	r1, r8, #3
 8007558:	1b49      	subs	r1, r1, r5
 800755a:	f021 0103 	bic.w	r1, r1, #3
 800755e:	3d03      	subs	r5, #3
 8007560:	45a8      	cmp	r8, r5
 8007562:	bf38      	it	cc
 8007564:	2100      	movcc	r1, #0
 8007566:	440b      	add	r3, r1
 8007568:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800756c:	b199      	cbz	r1, 8007596 <__mdiff+0x11a>
 800756e:	6117      	str	r7, [r2, #16]
 8007570:	e79e      	b.n	80074b0 <__mdiff+0x34>
 8007572:	46e6      	mov	lr, ip
 8007574:	f854 1b04 	ldr.w	r1, [r4], #4
 8007578:	fa1f fc81 	uxth.w	ip, r1
 800757c:	44f4      	add	ip, lr
 800757e:	0c08      	lsrs	r0, r1, #16
 8007580:	4471      	add	r1, lr
 8007582:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007586:	b289      	uxth	r1, r1
 8007588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800758c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007590:	f846 1b04 	str.w	r1, [r6], #4
 8007594:	e7dc      	b.n	8007550 <__mdiff+0xd4>
 8007596:	3f01      	subs	r7, #1
 8007598:	e7e6      	b.n	8007568 <__mdiff+0xec>
 800759a:	bf00      	nop
 800759c:	080090c2 	.word	0x080090c2
 80075a0:	080090d3 	.word	0x080090d3

080075a4 <__d2b>:
 80075a4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80075a8:	2101      	movs	r1, #1
 80075aa:	4690      	mov	r8, r2
 80075ac:	4699      	mov	r9, r3
 80075ae:	9e08      	ldr	r6, [sp, #32]
 80075b0:	f7ff fcd0 	bl	8006f54 <_Balloc>
 80075b4:	4604      	mov	r4, r0
 80075b6:	b930      	cbnz	r0, 80075c6 <__d2b+0x22>
 80075b8:	4602      	mov	r2, r0
 80075ba:	f240 310f 	movw	r1, #783	@ 0x30f
 80075be:	4b23      	ldr	r3, [pc, #140]	@ (800764c <__d2b+0xa8>)
 80075c0:	4823      	ldr	r0, [pc, #140]	@ (8007650 <__d2b+0xac>)
 80075c2:	f000 fae1 	bl	8007b88 <__assert_func>
 80075c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80075ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075ce:	b10d      	cbz	r5, 80075d4 <__d2b+0x30>
 80075d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075d4:	9301      	str	r3, [sp, #4]
 80075d6:	f1b8 0300 	subs.w	r3, r8, #0
 80075da:	d024      	beq.n	8007626 <__d2b+0x82>
 80075dc:	4668      	mov	r0, sp
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	f7ff fd7f 	bl	80070e2 <__lo0bits>
 80075e4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80075e8:	b1d8      	cbz	r0, 8007622 <__d2b+0x7e>
 80075ea:	f1c0 0320 	rsb	r3, r0, #32
 80075ee:	fa02 f303 	lsl.w	r3, r2, r3
 80075f2:	430b      	orrs	r3, r1
 80075f4:	40c2      	lsrs	r2, r0
 80075f6:	6163      	str	r3, [r4, #20]
 80075f8:	9201      	str	r2, [sp, #4]
 80075fa:	9b01      	ldr	r3, [sp, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	bf0c      	ite	eq
 8007600:	2201      	moveq	r2, #1
 8007602:	2202      	movne	r2, #2
 8007604:	61a3      	str	r3, [r4, #24]
 8007606:	6122      	str	r2, [r4, #16]
 8007608:	b1ad      	cbz	r5, 8007636 <__d2b+0x92>
 800760a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800760e:	4405      	add	r5, r0
 8007610:	6035      	str	r5, [r6, #0]
 8007612:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007618:	6018      	str	r0, [r3, #0]
 800761a:	4620      	mov	r0, r4
 800761c:	b002      	add	sp, #8
 800761e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007622:	6161      	str	r1, [r4, #20]
 8007624:	e7e9      	b.n	80075fa <__d2b+0x56>
 8007626:	a801      	add	r0, sp, #4
 8007628:	f7ff fd5b 	bl	80070e2 <__lo0bits>
 800762c:	9b01      	ldr	r3, [sp, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	6163      	str	r3, [r4, #20]
 8007632:	3020      	adds	r0, #32
 8007634:	e7e7      	b.n	8007606 <__d2b+0x62>
 8007636:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800763a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800763e:	6030      	str	r0, [r6, #0]
 8007640:	6918      	ldr	r0, [r3, #16]
 8007642:	f7ff fd2f 	bl	80070a4 <__hi0bits>
 8007646:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800764a:	e7e4      	b.n	8007616 <__d2b+0x72>
 800764c:	080090c2 	.word	0x080090c2
 8007650:	080090d3 	.word	0x080090d3

08007654 <__sfputc_r>:
 8007654:	6893      	ldr	r3, [r2, #8]
 8007656:	b410      	push	{r4}
 8007658:	3b01      	subs	r3, #1
 800765a:	2b00      	cmp	r3, #0
 800765c:	6093      	str	r3, [r2, #8]
 800765e:	da07      	bge.n	8007670 <__sfputc_r+0x1c>
 8007660:	6994      	ldr	r4, [r2, #24]
 8007662:	42a3      	cmp	r3, r4
 8007664:	db01      	blt.n	800766a <__sfputc_r+0x16>
 8007666:	290a      	cmp	r1, #10
 8007668:	d102      	bne.n	8007670 <__sfputc_r+0x1c>
 800766a:	bc10      	pop	{r4}
 800766c:	f000 b9da 	b.w	8007a24 <__swbuf_r>
 8007670:	6813      	ldr	r3, [r2, #0]
 8007672:	1c58      	adds	r0, r3, #1
 8007674:	6010      	str	r0, [r2, #0]
 8007676:	7019      	strb	r1, [r3, #0]
 8007678:	4608      	mov	r0, r1
 800767a:	bc10      	pop	{r4}
 800767c:	4770      	bx	lr

0800767e <__sfputs_r>:
 800767e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007680:	4606      	mov	r6, r0
 8007682:	460f      	mov	r7, r1
 8007684:	4614      	mov	r4, r2
 8007686:	18d5      	adds	r5, r2, r3
 8007688:	42ac      	cmp	r4, r5
 800768a:	d101      	bne.n	8007690 <__sfputs_r+0x12>
 800768c:	2000      	movs	r0, #0
 800768e:	e007      	b.n	80076a0 <__sfputs_r+0x22>
 8007690:	463a      	mov	r2, r7
 8007692:	4630      	mov	r0, r6
 8007694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007698:	f7ff ffdc 	bl	8007654 <__sfputc_r>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	d1f3      	bne.n	8007688 <__sfputs_r+0xa>
 80076a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076a4 <_vfiprintf_r>:
 80076a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a8:	460d      	mov	r5, r1
 80076aa:	4614      	mov	r4, r2
 80076ac:	4698      	mov	r8, r3
 80076ae:	4606      	mov	r6, r0
 80076b0:	b09d      	sub	sp, #116	@ 0x74
 80076b2:	b118      	cbz	r0, 80076bc <_vfiprintf_r+0x18>
 80076b4:	6a03      	ldr	r3, [r0, #32]
 80076b6:	b90b      	cbnz	r3, 80076bc <_vfiprintf_r+0x18>
 80076b8:	f7fe fbe4 	bl	8005e84 <__sinit>
 80076bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076be:	07d9      	lsls	r1, r3, #31
 80076c0:	d405      	bmi.n	80076ce <_vfiprintf_r+0x2a>
 80076c2:	89ab      	ldrh	r3, [r5, #12]
 80076c4:	059a      	lsls	r2, r3, #22
 80076c6:	d402      	bmi.n	80076ce <_vfiprintf_r+0x2a>
 80076c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076ca:	f7fe fce4 	bl	8006096 <__retarget_lock_acquire_recursive>
 80076ce:	89ab      	ldrh	r3, [r5, #12]
 80076d0:	071b      	lsls	r3, r3, #28
 80076d2:	d501      	bpl.n	80076d8 <_vfiprintf_r+0x34>
 80076d4:	692b      	ldr	r3, [r5, #16]
 80076d6:	b99b      	cbnz	r3, 8007700 <_vfiprintf_r+0x5c>
 80076d8:	4629      	mov	r1, r5
 80076da:	4630      	mov	r0, r6
 80076dc:	f000 f9e0 	bl	8007aa0 <__swsetup_r>
 80076e0:	b170      	cbz	r0, 8007700 <_vfiprintf_r+0x5c>
 80076e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076e4:	07dc      	lsls	r4, r3, #31
 80076e6:	d504      	bpl.n	80076f2 <_vfiprintf_r+0x4e>
 80076e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076ec:	b01d      	add	sp, #116	@ 0x74
 80076ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f2:	89ab      	ldrh	r3, [r5, #12]
 80076f4:	0598      	lsls	r0, r3, #22
 80076f6:	d4f7      	bmi.n	80076e8 <_vfiprintf_r+0x44>
 80076f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076fa:	f7fe fccd 	bl	8006098 <__retarget_lock_release_recursive>
 80076fe:	e7f3      	b.n	80076e8 <_vfiprintf_r+0x44>
 8007700:	2300      	movs	r3, #0
 8007702:	9309      	str	r3, [sp, #36]	@ 0x24
 8007704:	2320      	movs	r3, #32
 8007706:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800770a:	2330      	movs	r3, #48	@ 0x30
 800770c:	f04f 0901 	mov.w	r9, #1
 8007710:	f8cd 800c 	str.w	r8, [sp, #12]
 8007714:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80078c0 <_vfiprintf_r+0x21c>
 8007718:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800771c:	4623      	mov	r3, r4
 800771e:	469a      	mov	sl, r3
 8007720:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007724:	b10a      	cbz	r2, 800772a <_vfiprintf_r+0x86>
 8007726:	2a25      	cmp	r2, #37	@ 0x25
 8007728:	d1f9      	bne.n	800771e <_vfiprintf_r+0x7a>
 800772a:	ebba 0b04 	subs.w	fp, sl, r4
 800772e:	d00b      	beq.n	8007748 <_vfiprintf_r+0xa4>
 8007730:	465b      	mov	r3, fp
 8007732:	4622      	mov	r2, r4
 8007734:	4629      	mov	r1, r5
 8007736:	4630      	mov	r0, r6
 8007738:	f7ff ffa1 	bl	800767e <__sfputs_r>
 800773c:	3001      	adds	r0, #1
 800773e:	f000 80a7 	beq.w	8007890 <_vfiprintf_r+0x1ec>
 8007742:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007744:	445a      	add	r2, fp
 8007746:	9209      	str	r2, [sp, #36]	@ 0x24
 8007748:	f89a 3000 	ldrb.w	r3, [sl]
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 809f 	beq.w	8007890 <_vfiprintf_r+0x1ec>
 8007752:	2300      	movs	r3, #0
 8007754:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007758:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800775c:	f10a 0a01 	add.w	sl, sl, #1
 8007760:	9304      	str	r3, [sp, #16]
 8007762:	9307      	str	r3, [sp, #28]
 8007764:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007768:	931a      	str	r3, [sp, #104]	@ 0x68
 800776a:	4654      	mov	r4, sl
 800776c:	2205      	movs	r2, #5
 800776e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007772:	4853      	ldr	r0, [pc, #332]	@ (80078c0 <_vfiprintf_r+0x21c>)
 8007774:	f7fe fc91 	bl	800609a <memchr>
 8007778:	9a04      	ldr	r2, [sp, #16]
 800777a:	b9d8      	cbnz	r0, 80077b4 <_vfiprintf_r+0x110>
 800777c:	06d1      	lsls	r1, r2, #27
 800777e:	bf44      	itt	mi
 8007780:	2320      	movmi	r3, #32
 8007782:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007786:	0713      	lsls	r3, r2, #28
 8007788:	bf44      	itt	mi
 800778a:	232b      	movmi	r3, #43	@ 0x2b
 800778c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007790:	f89a 3000 	ldrb.w	r3, [sl]
 8007794:	2b2a      	cmp	r3, #42	@ 0x2a
 8007796:	d015      	beq.n	80077c4 <_vfiprintf_r+0x120>
 8007798:	4654      	mov	r4, sl
 800779a:	2000      	movs	r0, #0
 800779c:	f04f 0c0a 	mov.w	ip, #10
 80077a0:	9a07      	ldr	r2, [sp, #28]
 80077a2:	4621      	mov	r1, r4
 80077a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077a8:	3b30      	subs	r3, #48	@ 0x30
 80077aa:	2b09      	cmp	r3, #9
 80077ac:	d94b      	bls.n	8007846 <_vfiprintf_r+0x1a2>
 80077ae:	b1b0      	cbz	r0, 80077de <_vfiprintf_r+0x13a>
 80077b0:	9207      	str	r2, [sp, #28]
 80077b2:	e014      	b.n	80077de <_vfiprintf_r+0x13a>
 80077b4:	eba0 0308 	sub.w	r3, r0, r8
 80077b8:	fa09 f303 	lsl.w	r3, r9, r3
 80077bc:	4313      	orrs	r3, r2
 80077be:	46a2      	mov	sl, r4
 80077c0:	9304      	str	r3, [sp, #16]
 80077c2:	e7d2      	b.n	800776a <_vfiprintf_r+0xc6>
 80077c4:	9b03      	ldr	r3, [sp, #12]
 80077c6:	1d19      	adds	r1, r3, #4
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	9103      	str	r1, [sp, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	bfbb      	ittet	lt
 80077d0:	425b      	neglt	r3, r3
 80077d2:	f042 0202 	orrlt.w	r2, r2, #2
 80077d6:	9307      	strge	r3, [sp, #28]
 80077d8:	9307      	strlt	r3, [sp, #28]
 80077da:	bfb8      	it	lt
 80077dc:	9204      	strlt	r2, [sp, #16]
 80077de:	7823      	ldrb	r3, [r4, #0]
 80077e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80077e2:	d10a      	bne.n	80077fa <_vfiprintf_r+0x156>
 80077e4:	7863      	ldrb	r3, [r4, #1]
 80077e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80077e8:	d132      	bne.n	8007850 <_vfiprintf_r+0x1ac>
 80077ea:	9b03      	ldr	r3, [sp, #12]
 80077ec:	3402      	adds	r4, #2
 80077ee:	1d1a      	adds	r2, r3, #4
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	9203      	str	r2, [sp, #12]
 80077f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077f8:	9305      	str	r3, [sp, #20]
 80077fa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80078c4 <_vfiprintf_r+0x220>
 80077fe:	2203      	movs	r2, #3
 8007800:	4650      	mov	r0, sl
 8007802:	7821      	ldrb	r1, [r4, #0]
 8007804:	f7fe fc49 	bl	800609a <memchr>
 8007808:	b138      	cbz	r0, 800781a <_vfiprintf_r+0x176>
 800780a:	2240      	movs	r2, #64	@ 0x40
 800780c:	9b04      	ldr	r3, [sp, #16]
 800780e:	eba0 000a 	sub.w	r0, r0, sl
 8007812:	4082      	lsls	r2, r0
 8007814:	4313      	orrs	r3, r2
 8007816:	3401      	adds	r4, #1
 8007818:	9304      	str	r3, [sp, #16]
 800781a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800781e:	2206      	movs	r2, #6
 8007820:	4829      	ldr	r0, [pc, #164]	@ (80078c8 <_vfiprintf_r+0x224>)
 8007822:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007826:	f7fe fc38 	bl	800609a <memchr>
 800782a:	2800      	cmp	r0, #0
 800782c:	d03f      	beq.n	80078ae <_vfiprintf_r+0x20a>
 800782e:	4b27      	ldr	r3, [pc, #156]	@ (80078cc <_vfiprintf_r+0x228>)
 8007830:	bb1b      	cbnz	r3, 800787a <_vfiprintf_r+0x1d6>
 8007832:	9b03      	ldr	r3, [sp, #12]
 8007834:	3307      	adds	r3, #7
 8007836:	f023 0307 	bic.w	r3, r3, #7
 800783a:	3308      	adds	r3, #8
 800783c:	9303      	str	r3, [sp, #12]
 800783e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007840:	443b      	add	r3, r7
 8007842:	9309      	str	r3, [sp, #36]	@ 0x24
 8007844:	e76a      	b.n	800771c <_vfiprintf_r+0x78>
 8007846:	460c      	mov	r4, r1
 8007848:	2001      	movs	r0, #1
 800784a:	fb0c 3202 	mla	r2, ip, r2, r3
 800784e:	e7a8      	b.n	80077a2 <_vfiprintf_r+0xfe>
 8007850:	2300      	movs	r3, #0
 8007852:	f04f 0c0a 	mov.w	ip, #10
 8007856:	4619      	mov	r1, r3
 8007858:	3401      	adds	r4, #1
 800785a:	9305      	str	r3, [sp, #20]
 800785c:	4620      	mov	r0, r4
 800785e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007862:	3a30      	subs	r2, #48	@ 0x30
 8007864:	2a09      	cmp	r2, #9
 8007866:	d903      	bls.n	8007870 <_vfiprintf_r+0x1cc>
 8007868:	2b00      	cmp	r3, #0
 800786a:	d0c6      	beq.n	80077fa <_vfiprintf_r+0x156>
 800786c:	9105      	str	r1, [sp, #20]
 800786e:	e7c4      	b.n	80077fa <_vfiprintf_r+0x156>
 8007870:	4604      	mov	r4, r0
 8007872:	2301      	movs	r3, #1
 8007874:	fb0c 2101 	mla	r1, ip, r1, r2
 8007878:	e7f0      	b.n	800785c <_vfiprintf_r+0x1b8>
 800787a:	ab03      	add	r3, sp, #12
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	462a      	mov	r2, r5
 8007880:	4630      	mov	r0, r6
 8007882:	4b13      	ldr	r3, [pc, #76]	@ (80078d0 <_vfiprintf_r+0x22c>)
 8007884:	a904      	add	r1, sp, #16
 8007886:	f7fd feb3 	bl	80055f0 <_printf_float>
 800788a:	4607      	mov	r7, r0
 800788c:	1c78      	adds	r0, r7, #1
 800788e:	d1d6      	bne.n	800783e <_vfiprintf_r+0x19a>
 8007890:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007892:	07d9      	lsls	r1, r3, #31
 8007894:	d405      	bmi.n	80078a2 <_vfiprintf_r+0x1fe>
 8007896:	89ab      	ldrh	r3, [r5, #12]
 8007898:	059a      	lsls	r2, r3, #22
 800789a:	d402      	bmi.n	80078a2 <_vfiprintf_r+0x1fe>
 800789c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800789e:	f7fe fbfb 	bl	8006098 <__retarget_lock_release_recursive>
 80078a2:	89ab      	ldrh	r3, [r5, #12]
 80078a4:	065b      	lsls	r3, r3, #25
 80078a6:	f53f af1f 	bmi.w	80076e8 <_vfiprintf_r+0x44>
 80078aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078ac:	e71e      	b.n	80076ec <_vfiprintf_r+0x48>
 80078ae:	ab03      	add	r3, sp, #12
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	462a      	mov	r2, r5
 80078b4:	4630      	mov	r0, r6
 80078b6:	4b06      	ldr	r3, [pc, #24]	@ (80078d0 <_vfiprintf_r+0x22c>)
 80078b8:	a904      	add	r1, sp, #16
 80078ba:	f7fe f937 	bl	8005b2c <_printf_i>
 80078be:	e7e4      	b.n	800788a <_vfiprintf_r+0x1e6>
 80078c0:	08009228 	.word	0x08009228
 80078c4:	0800922e 	.word	0x0800922e
 80078c8:	08009232 	.word	0x08009232
 80078cc:	080055f1 	.word	0x080055f1
 80078d0:	0800767f 	.word	0x0800767f

080078d4 <__sflush_r>:
 80078d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078da:	0716      	lsls	r6, r2, #28
 80078dc:	4605      	mov	r5, r0
 80078de:	460c      	mov	r4, r1
 80078e0:	d454      	bmi.n	800798c <__sflush_r+0xb8>
 80078e2:	684b      	ldr	r3, [r1, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	dc02      	bgt.n	80078ee <__sflush_r+0x1a>
 80078e8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	dd48      	ble.n	8007980 <__sflush_r+0xac>
 80078ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078f0:	2e00      	cmp	r6, #0
 80078f2:	d045      	beq.n	8007980 <__sflush_r+0xac>
 80078f4:	2300      	movs	r3, #0
 80078f6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80078fa:	682f      	ldr	r7, [r5, #0]
 80078fc:	6a21      	ldr	r1, [r4, #32]
 80078fe:	602b      	str	r3, [r5, #0]
 8007900:	d030      	beq.n	8007964 <__sflush_r+0x90>
 8007902:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007904:	89a3      	ldrh	r3, [r4, #12]
 8007906:	0759      	lsls	r1, r3, #29
 8007908:	d505      	bpl.n	8007916 <__sflush_r+0x42>
 800790a:	6863      	ldr	r3, [r4, #4]
 800790c:	1ad2      	subs	r2, r2, r3
 800790e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007910:	b10b      	cbz	r3, 8007916 <__sflush_r+0x42>
 8007912:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007914:	1ad2      	subs	r2, r2, r3
 8007916:	2300      	movs	r3, #0
 8007918:	4628      	mov	r0, r5
 800791a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800791c:	6a21      	ldr	r1, [r4, #32]
 800791e:	47b0      	blx	r6
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	89a3      	ldrh	r3, [r4, #12]
 8007924:	d106      	bne.n	8007934 <__sflush_r+0x60>
 8007926:	6829      	ldr	r1, [r5, #0]
 8007928:	291d      	cmp	r1, #29
 800792a:	d82b      	bhi.n	8007984 <__sflush_r+0xb0>
 800792c:	4a28      	ldr	r2, [pc, #160]	@ (80079d0 <__sflush_r+0xfc>)
 800792e:	410a      	asrs	r2, r1
 8007930:	07d6      	lsls	r6, r2, #31
 8007932:	d427      	bmi.n	8007984 <__sflush_r+0xb0>
 8007934:	2200      	movs	r2, #0
 8007936:	6062      	str	r2, [r4, #4]
 8007938:	6922      	ldr	r2, [r4, #16]
 800793a:	04d9      	lsls	r1, r3, #19
 800793c:	6022      	str	r2, [r4, #0]
 800793e:	d504      	bpl.n	800794a <__sflush_r+0x76>
 8007940:	1c42      	adds	r2, r0, #1
 8007942:	d101      	bne.n	8007948 <__sflush_r+0x74>
 8007944:	682b      	ldr	r3, [r5, #0]
 8007946:	b903      	cbnz	r3, 800794a <__sflush_r+0x76>
 8007948:	6560      	str	r0, [r4, #84]	@ 0x54
 800794a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800794c:	602f      	str	r7, [r5, #0]
 800794e:	b1b9      	cbz	r1, 8007980 <__sflush_r+0xac>
 8007950:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007954:	4299      	cmp	r1, r3
 8007956:	d002      	beq.n	800795e <__sflush_r+0x8a>
 8007958:	4628      	mov	r0, r5
 800795a:	f7ff f9fd 	bl	8006d58 <_free_r>
 800795e:	2300      	movs	r3, #0
 8007960:	6363      	str	r3, [r4, #52]	@ 0x34
 8007962:	e00d      	b.n	8007980 <__sflush_r+0xac>
 8007964:	2301      	movs	r3, #1
 8007966:	4628      	mov	r0, r5
 8007968:	47b0      	blx	r6
 800796a:	4602      	mov	r2, r0
 800796c:	1c50      	adds	r0, r2, #1
 800796e:	d1c9      	bne.n	8007904 <__sflush_r+0x30>
 8007970:	682b      	ldr	r3, [r5, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d0c6      	beq.n	8007904 <__sflush_r+0x30>
 8007976:	2b1d      	cmp	r3, #29
 8007978:	d001      	beq.n	800797e <__sflush_r+0xaa>
 800797a:	2b16      	cmp	r3, #22
 800797c:	d11d      	bne.n	80079ba <__sflush_r+0xe6>
 800797e:	602f      	str	r7, [r5, #0]
 8007980:	2000      	movs	r0, #0
 8007982:	e021      	b.n	80079c8 <__sflush_r+0xf4>
 8007984:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007988:	b21b      	sxth	r3, r3
 800798a:	e01a      	b.n	80079c2 <__sflush_r+0xee>
 800798c:	690f      	ldr	r7, [r1, #16]
 800798e:	2f00      	cmp	r7, #0
 8007990:	d0f6      	beq.n	8007980 <__sflush_r+0xac>
 8007992:	0793      	lsls	r3, r2, #30
 8007994:	bf18      	it	ne
 8007996:	2300      	movne	r3, #0
 8007998:	680e      	ldr	r6, [r1, #0]
 800799a:	bf08      	it	eq
 800799c:	694b      	ldreq	r3, [r1, #20]
 800799e:	1bf6      	subs	r6, r6, r7
 80079a0:	600f      	str	r7, [r1, #0]
 80079a2:	608b      	str	r3, [r1, #8]
 80079a4:	2e00      	cmp	r6, #0
 80079a6:	ddeb      	ble.n	8007980 <__sflush_r+0xac>
 80079a8:	4633      	mov	r3, r6
 80079aa:	463a      	mov	r2, r7
 80079ac:	4628      	mov	r0, r5
 80079ae:	6a21      	ldr	r1, [r4, #32]
 80079b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80079b4:	47e0      	blx	ip
 80079b6:	2800      	cmp	r0, #0
 80079b8:	dc07      	bgt.n	80079ca <__sflush_r+0xf6>
 80079ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079c6:	81a3      	strh	r3, [r4, #12]
 80079c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079ca:	4407      	add	r7, r0
 80079cc:	1a36      	subs	r6, r6, r0
 80079ce:	e7e9      	b.n	80079a4 <__sflush_r+0xd0>
 80079d0:	dfbffffe 	.word	0xdfbffffe

080079d4 <_fflush_r>:
 80079d4:	b538      	push	{r3, r4, r5, lr}
 80079d6:	690b      	ldr	r3, [r1, #16]
 80079d8:	4605      	mov	r5, r0
 80079da:	460c      	mov	r4, r1
 80079dc:	b913      	cbnz	r3, 80079e4 <_fflush_r+0x10>
 80079de:	2500      	movs	r5, #0
 80079e0:	4628      	mov	r0, r5
 80079e2:	bd38      	pop	{r3, r4, r5, pc}
 80079e4:	b118      	cbz	r0, 80079ee <_fflush_r+0x1a>
 80079e6:	6a03      	ldr	r3, [r0, #32]
 80079e8:	b90b      	cbnz	r3, 80079ee <_fflush_r+0x1a>
 80079ea:	f7fe fa4b 	bl	8005e84 <__sinit>
 80079ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d0f3      	beq.n	80079de <_fflush_r+0xa>
 80079f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079f8:	07d0      	lsls	r0, r2, #31
 80079fa:	d404      	bmi.n	8007a06 <_fflush_r+0x32>
 80079fc:	0599      	lsls	r1, r3, #22
 80079fe:	d402      	bmi.n	8007a06 <_fflush_r+0x32>
 8007a00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a02:	f7fe fb48 	bl	8006096 <__retarget_lock_acquire_recursive>
 8007a06:	4628      	mov	r0, r5
 8007a08:	4621      	mov	r1, r4
 8007a0a:	f7ff ff63 	bl	80078d4 <__sflush_r>
 8007a0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a10:	4605      	mov	r5, r0
 8007a12:	07da      	lsls	r2, r3, #31
 8007a14:	d4e4      	bmi.n	80079e0 <_fflush_r+0xc>
 8007a16:	89a3      	ldrh	r3, [r4, #12]
 8007a18:	059b      	lsls	r3, r3, #22
 8007a1a:	d4e1      	bmi.n	80079e0 <_fflush_r+0xc>
 8007a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a1e:	f7fe fb3b 	bl	8006098 <__retarget_lock_release_recursive>
 8007a22:	e7dd      	b.n	80079e0 <_fflush_r+0xc>

08007a24 <__swbuf_r>:
 8007a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a26:	460e      	mov	r6, r1
 8007a28:	4614      	mov	r4, r2
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	b118      	cbz	r0, 8007a36 <__swbuf_r+0x12>
 8007a2e:	6a03      	ldr	r3, [r0, #32]
 8007a30:	b90b      	cbnz	r3, 8007a36 <__swbuf_r+0x12>
 8007a32:	f7fe fa27 	bl	8005e84 <__sinit>
 8007a36:	69a3      	ldr	r3, [r4, #24]
 8007a38:	60a3      	str	r3, [r4, #8]
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	071a      	lsls	r2, r3, #28
 8007a3e:	d501      	bpl.n	8007a44 <__swbuf_r+0x20>
 8007a40:	6923      	ldr	r3, [r4, #16]
 8007a42:	b943      	cbnz	r3, 8007a56 <__swbuf_r+0x32>
 8007a44:	4621      	mov	r1, r4
 8007a46:	4628      	mov	r0, r5
 8007a48:	f000 f82a 	bl	8007aa0 <__swsetup_r>
 8007a4c:	b118      	cbz	r0, 8007a56 <__swbuf_r+0x32>
 8007a4e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007a52:	4638      	mov	r0, r7
 8007a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	6922      	ldr	r2, [r4, #16]
 8007a5a:	b2f6      	uxtb	r6, r6
 8007a5c:	1a98      	subs	r0, r3, r2
 8007a5e:	6963      	ldr	r3, [r4, #20]
 8007a60:	4637      	mov	r7, r6
 8007a62:	4283      	cmp	r3, r0
 8007a64:	dc05      	bgt.n	8007a72 <__swbuf_r+0x4e>
 8007a66:	4621      	mov	r1, r4
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f7ff ffb3 	bl	80079d4 <_fflush_r>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	d1ed      	bne.n	8007a4e <__swbuf_r+0x2a>
 8007a72:	68a3      	ldr	r3, [r4, #8]
 8007a74:	3b01      	subs	r3, #1
 8007a76:	60a3      	str	r3, [r4, #8]
 8007a78:	6823      	ldr	r3, [r4, #0]
 8007a7a:	1c5a      	adds	r2, r3, #1
 8007a7c:	6022      	str	r2, [r4, #0]
 8007a7e:	701e      	strb	r6, [r3, #0]
 8007a80:	6962      	ldr	r2, [r4, #20]
 8007a82:	1c43      	adds	r3, r0, #1
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d004      	beq.n	8007a92 <__swbuf_r+0x6e>
 8007a88:	89a3      	ldrh	r3, [r4, #12]
 8007a8a:	07db      	lsls	r3, r3, #31
 8007a8c:	d5e1      	bpl.n	8007a52 <__swbuf_r+0x2e>
 8007a8e:	2e0a      	cmp	r6, #10
 8007a90:	d1df      	bne.n	8007a52 <__swbuf_r+0x2e>
 8007a92:	4621      	mov	r1, r4
 8007a94:	4628      	mov	r0, r5
 8007a96:	f7ff ff9d 	bl	80079d4 <_fflush_r>
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	d0d9      	beq.n	8007a52 <__swbuf_r+0x2e>
 8007a9e:	e7d6      	b.n	8007a4e <__swbuf_r+0x2a>

08007aa0 <__swsetup_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4b29      	ldr	r3, [pc, #164]	@ (8007b48 <__swsetup_r+0xa8>)
 8007aa4:	4605      	mov	r5, r0
 8007aa6:	6818      	ldr	r0, [r3, #0]
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	b118      	cbz	r0, 8007ab4 <__swsetup_r+0x14>
 8007aac:	6a03      	ldr	r3, [r0, #32]
 8007aae:	b90b      	cbnz	r3, 8007ab4 <__swsetup_r+0x14>
 8007ab0:	f7fe f9e8 	bl	8005e84 <__sinit>
 8007ab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ab8:	0719      	lsls	r1, r3, #28
 8007aba:	d422      	bmi.n	8007b02 <__swsetup_r+0x62>
 8007abc:	06da      	lsls	r2, r3, #27
 8007abe:	d407      	bmi.n	8007ad0 <__swsetup_r+0x30>
 8007ac0:	2209      	movs	r2, #9
 8007ac2:	602a      	str	r2, [r5, #0]
 8007ac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ac8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007acc:	81a3      	strh	r3, [r4, #12]
 8007ace:	e033      	b.n	8007b38 <__swsetup_r+0x98>
 8007ad0:	0758      	lsls	r0, r3, #29
 8007ad2:	d512      	bpl.n	8007afa <__swsetup_r+0x5a>
 8007ad4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ad6:	b141      	cbz	r1, 8007aea <__swsetup_r+0x4a>
 8007ad8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007adc:	4299      	cmp	r1, r3
 8007ade:	d002      	beq.n	8007ae6 <__swsetup_r+0x46>
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	f7ff f939 	bl	8006d58 <_free_r>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007af0:	81a3      	strh	r3, [r4, #12]
 8007af2:	2300      	movs	r3, #0
 8007af4:	6063      	str	r3, [r4, #4]
 8007af6:	6923      	ldr	r3, [r4, #16]
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	f043 0308 	orr.w	r3, r3, #8
 8007b00:	81a3      	strh	r3, [r4, #12]
 8007b02:	6923      	ldr	r3, [r4, #16]
 8007b04:	b94b      	cbnz	r3, 8007b1a <__swsetup_r+0x7a>
 8007b06:	89a3      	ldrh	r3, [r4, #12]
 8007b08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b10:	d003      	beq.n	8007b1a <__swsetup_r+0x7a>
 8007b12:	4621      	mov	r1, r4
 8007b14:	4628      	mov	r0, r5
 8007b16:	f000 f8c0 	bl	8007c9a <__smakebuf_r>
 8007b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b1e:	f013 0201 	ands.w	r2, r3, #1
 8007b22:	d00a      	beq.n	8007b3a <__swsetup_r+0x9a>
 8007b24:	2200      	movs	r2, #0
 8007b26:	60a2      	str	r2, [r4, #8]
 8007b28:	6962      	ldr	r2, [r4, #20]
 8007b2a:	4252      	negs	r2, r2
 8007b2c:	61a2      	str	r2, [r4, #24]
 8007b2e:	6922      	ldr	r2, [r4, #16]
 8007b30:	b942      	cbnz	r2, 8007b44 <__swsetup_r+0xa4>
 8007b32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b36:	d1c5      	bne.n	8007ac4 <__swsetup_r+0x24>
 8007b38:	bd38      	pop	{r3, r4, r5, pc}
 8007b3a:	0799      	lsls	r1, r3, #30
 8007b3c:	bf58      	it	pl
 8007b3e:	6962      	ldrpl	r2, [r4, #20]
 8007b40:	60a2      	str	r2, [r4, #8]
 8007b42:	e7f4      	b.n	8007b2e <__swsetup_r+0x8e>
 8007b44:	2000      	movs	r0, #0
 8007b46:	e7f7      	b.n	8007b38 <__swsetup_r+0x98>
 8007b48:	20000018 	.word	0x20000018

08007b4c <_sbrk_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	2300      	movs	r3, #0
 8007b50:	4d05      	ldr	r5, [pc, #20]	@ (8007b68 <_sbrk_r+0x1c>)
 8007b52:	4604      	mov	r4, r0
 8007b54:	4608      	mov	r0, r1
 8007b56:	602b      	str	r3, [r5, #0]
 8007b58:	f7f9 ff98 	bl	8001a8c <_sbrk>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d102      	bne.n	8007b66 <_sbrk_r+0x1a>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	b103      	cbz	r3, 8007b66 <_sbrk_r+0x1a>
 8007b64:	6023      	str	r3, [r4, #0]
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	20000470 	.word	0x20000470

08007b6c <memcpy>:
 8007b6c:	440a      	add	r2, r1
 8007b6e:	4291      	cmp	r1, r2
 8007b70:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007b74:	d100      	bne.n	8007b78 <memcpy+0xc>
 8007b76:	4770      	bx	lr
 8007b78:	b510      	push	{r4, lr}
 8007b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b7e:	4291      	cmp	r1, r2
 8007b80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b84:	d1f9      	bne.n	8007b7a <memcpy+0xe>
 8007b86:	bd10      	pop	{r4, pc}

08007b88 <__assert_func>:
 8007b88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b8a:	4614      	mov	r4, r2
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	4b09      	ldr	r3, [pc, #36]	@ (8007bb4 <__assert_func+0x2c>)
 8007b90:	4605      	mov	r5, r0
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68d8      	ldr	r0, [r3, #12]
 8007b96:	b954      	cbnz	r4, 8007bae <__assert_func+0x26>
 8007b98:	4b07      	ldr	r3, [pc, #28]	@ (8007bb8 <__assert_func+0x30>)
 8007b9a:	461c      	mov	r4, r3
 8007b9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ba0:	9100      	str	r1, [sp, #0]
 8007ba2:	462b      	mov	r3, r5
 8007ba4:	4905      	ldr	r1, [pc, #20]	@ (8007bbc <__assert_func+0x34>)
 8007ba6:	f000 f841 	bl	8007c2c <fiprintf>
 8007baa:	f000 f8d5 	bl	8007d58 <abort>
 8007bae:	4b04      	ldr	r3, [pc, #16]	@ (8007bc0 <__assert_func+0x38>)
 8007bb0:	e7f4      	b.n	8007b9c <__assert_func+0x14>
 8007bb2:	bf00      	nop
 8007bb4:	20000018 	.word	0x20000018
 8007bb8:	0800927e 	.word	0x0800927e
 8007bbc:	08009250 	.word	0x08009250
 8007bc0:	08009243 	.word	0x08009243

08007bc4 <_calloc_r>:
 8007bc4:	b570      	push	{r4, r5, r6, lr}
 8007bc6:	fba1 5402 	umull	r5, r4, r1, r2
 8007bca:	b93c      	cbnz	r4, 8007bdc <_calloc_r+0x18>
 8007bcc:	4629      	mov	r1, r5
 8007bce:	f7ff f935 	bl	8006e3c <_malloc_r>
 8007bd2:	4606      	mov	r6, r0
 8007bd4:	b928      	cbnz	r0, 8007be2 <_calloc_r+0x1e>
 8007bd6:	2600      	movs	r6, #0
 8007bd8:	4630      	mov	r0, r6
 8007bda:	bd70      	pop	{r4, r5, r6, pc}
 8007bdc:	220c      	movs	r2, #12
 8007bde:	6002      	str	r2, [r0, #0]
 8007be0:	e7f9      	b.n	8007bd6 <_calloc_r+0x12>
 8007be2:	462a      	mov	r2, r5
 8007be4:	4621      	mov	r1, r4
 8007be6:	f7fe f9d8 	bl	8005f9a <memset>
 8007bea:	e7f5      	b.n	8007bd8 <_calloc_r+0x14>

08007bec <__ascii_mbtowc>:
 8007bec:	b082      	sub	sp, #8
 8007bee:	b901      	cbnz	r1, 8007bf2 <__ascii_mbtowc+0x6>
 8007bf0:	a901      	add	r1, sp, #4
 8007bf2:	b142      	cbz	r2, 8007c06 <__ascii_mbtowc+0x1a>
 8007bf4:	b14b      	cbz	r3, 8007c0a <__ascii_mbtowc+0x1e>
 8007bf6:	7813      	ldrb	r3, [r2, #0]
 8007bf8:	600b      	str	r3, [r1, #0]
 8007bfa:	7812      	ldrb	r2, [r2, #0]
 8007bfc:	1e10      	subs	r0, r2, #0
 8007bfe:	bf18      	it	ne
 8007c00:	2001      	movne	r0, #1
 8007c02:	b002      	add	sp, #8
 8007c04:	4770      	bx	lr
 8007c06:	4610      	mov	r0, r2
 8007c08:	e7fb      	b.n	8007c02 <__ascii_mbtowc+0x16>
 8007c0a:	f06f 0001 	mvn.w	r0, #1
 8007c0e:	e7f8      	b.n	8007c02 <__ascii_mbtowc+0x16>

08007c10 <__ascii_wctomb>:
 8007c10:	4603      	mov	r3, r0
 8007c12:	4608      	mov	r0, r1
 8007c14:	b141      	cbz	r1, 8007c28 <__ascii_wctomb+0x18>
 8007c16:	2aff      	cmp	r2, #255	@ 0xff
 8007c18:	d904      	bls.n	8007c24 <__ascii_wctomb+0x14>
 8007c1a:	228a      	movs	r2, #138	@ 0x8a
 8007c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	4770      	bx	lr
 8007c24:	2001      	movs	r0, #1
 8007c26:	700a      	strb	r2, [r1, #0]
 8007c28:	4770      	bx	lr
	...

08007c2c <fiprintf>:
 8007c2c:	b40e      	push	{r1, r2, r3}
 8007c2e:	b503      	push	{r0, r1, lr}
 8007c30:	4601      	mov	r1, r0
 8007c32:	ab03      	add	r3, sp, #12
 8007c34:	4805      	ldr	r0, [pc, #20]	@ (8007c4c <fiprintf+0x20>)
 8007c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c3a:	6800      	ldr	r0, [r0, #0]
 8007c3c:	9301      	str	r3, [sp, #4]
 8007c3e:	f7ff fd31 	bl	80076a4 <_vfiprintf_r>
 8007c42:	b002      	add	sp, #8
 8007c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c48:	b003      	add	sp, #12
 8007c4a:	4770      	bx	lr
 8007c4c:	20000018 	.word	0x20000018

08007c50 <__swhatbuf_r>:
 8007c50:	b570      	push	{r4, r5, r6, lr}
 8007c52:	460c      	mov	r4, r1
 8007c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c58:	4615      	mov	r5, r2
 8007c5a:	2900      	cmp	r1, #0
 8007c5c:	461e      	mov	r6, r3
 8007c5e:	b096      	sub	sp, #88	@ 0x58
 8007c60:	da0c      	bge.n	8007c7c <__swhatbuf_r+0x2c>
 8007c62:	89a3      	ldrh	r3, [r4, #12]
 8007c64:	2100      	movs	r1, #0
 8007c66:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007c6a:	bf14      	ite	ne
 8007c6c:	2340      	movne	r3, #64	@ 0x40
 8007c6e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007c72:	2000      	movs	r0, #0
 8007c74:	6031      	str	r1, [r6, #0]
 8007c76:	602b      	str	r3, [r5, #0]
 8007c78:	b016      	add	sp, #88	@ 0x58
 8007c7a:	bd70      	pop	{r4, r5, r6, pc}
 8007c7c:	466a      	mov	r2, sp
 8007c7e:	f000 f849 	bl	8007d14 <_fstat_r>
 8007c82:	2800      	cmp	r0, #0
 8007c84:	dbed      	blt.n	8007c62 <__swhatbuf_r+0x12>
 8007c86:	9901      	ldr	r1, [sp, #4]
 8007c88:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c8c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c90:	4259      	negs	r1, r3
 8007c92:	4159      	adcs	r1, r3
 8007c94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c98:	e7eb      	b.n	8007c72 <__swhatbuf_r+0x22>

08007c9a <__smakebuf_r>:
 8007c9a:	898b      	ldrh	r3, [r1, #12]
 8007c9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c9e:	079d      	lsls	r5, r3, #30
 8007ca0:	4606      	mov	r6, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	d507      	bpl.n	8007cb6 <__smakebuf_r+0x1c>
 8007ca6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007caa:	6023      	str	r3, [r4, #0]
 8007cac:	6123      	str	r3, [r4, #16]
 8007cae:	2301      	movs	r3, #1
 8007cb0:	6163      	str	r3, [r4, #20]
 8007cb2:	b003      	add	sp, #12
 8007cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cb6:	466a      	mov	r2, sp
 8007cb8:	ab01      	add	r3, sp, #4
 8007cba:	f7ff ffc9 	bl	8007c50 <__swhatbuf_r>
 8007cbe:	9f00      	ldr	r7, [sp, #0]
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	f7ff f8b9 	bl	8006e3c <_malloc_r>
 8007cca:	b948      	cbnz	r0, 8007ce0 <__smakebuf_r+0x46>
 8007ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cd0:	059a      	lsls	r2, r3, #22
 8007cd2:	d4ee      	bmi.n	8007cb2 <__smakebuf_r+0x18>
 8007cd4:	f023 0303 	bic.w	r3, r3, #3
 8007cd8:	f043 0302 	orr.w	r3, r3, #2
 8007cdc:	81a3      	strh	r3, [r4, #12]
 8007cde:	e7e2      	b.n	8007ca6 <__smakebuf_r+0xc>
 8007ce0:	89a3      	ldrh	r3, [r4, #12]
 8007ce2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cea:	81a3      	strh	r3, [r4, #12]
 8007cec:	9b01      	ldr	r3, [sp, #4]
 8007cee:	6020      	str	r0, [r4, #0]
 8007cf0:	b15b      	cbz	r3, 8007d0a <__smakebuf_r+0x70>
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cf8:	f000 f81e 	bl	8007d38 <_isatty_r>
 8007cfc:	b128      	cbz	r0, 8007d0a <__smakebuf_r+0x70>
 8007cfe:	89a3      	ldrh	r3, [r4, #12]
 8007d00:	f023 0303 	bic.w	r3, r3, #3
 8007d04:	f043 0301 	orr.w	r3, r3, #1
 8007d08:	81a3      	strh	r3, [r4, #12]
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	431d      	orrs	r5, r3
 8007d0e:	81a5      	strh	r5, [r4, #12]
 8007d10:	e7cf      	b.n	8007cb2 <__smakebuf_r+0x18>
	...

08007d14 <_fstat_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	2300      	movs	r3, #0
 8007d18:	4d06      	ldr	r5, [pc, #24]	@ (8007d34 <_fstat_r+0x20>)
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	4608      	mov	r0, r1
 8007d1e:	4611      	mov	r1, r2
 8007d20:	602b      	str	r3, [r5, #0]
 8007d22:	f7f9 fe8d 	bl	8001a40 <_fstat>
 8007d26:	1c43      	adds	r3, r0, #1
 8007d28:	d102      	bne.n	8007d30 <_fstat_r+0x1c>
 8007d2a:	682b      	ldr	r3, [r5, #0]
 8007d2c:	b103      	cbz	r3, 8007d30 <_fstat_r+0x1c>
 8007d2e:	6023      	str	r3, [r4, #0]
 8007d30:	bd38      	pop	{r3, r4, r5, pc}
 8007d32:	bf00      	nop
 8007d34:	20000470 	.word	0x20000470

08007d38 <_isatty_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	4d05      	ldr	r5, [pc, #20]	@ (8007d54 <_isatty_r+0x1c>)
 8007d3e:	4604      	mov	r4, r0
 8007d40:	4608      	mov	r0, r1
 8007d42:	602b      	str	r3, [r5, #0]
 8007d44:	f7f9 fe8b 	bl	8001a5e <_isatty>
 8007d48:	1c43      	adds	r3, r0, #1
 8007d4a:	d102      	bne.n	8007d52 <_isatty_r+0x1a>
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	b103      	cbz	r3, 8007d52 <_isatty_r+0x1a>
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	bd38      	pop	{r3, r4, r5, pc}
 8007d54:	20000470 	.word	0x20000470

08007d58 <abort>:
 8007d58:	2006      	movs	r0, #6
 8007d5a:	b508      	push	{r3, lr}
 8007d5c:	f000 f82c 	bl	8007db8 <raise>
 8007d60:	2001      	movs	r0, #1
 8007d62:	f7f9 fe1e 	bl	80019a2 <_exit>

08007d66 <_raise_r>:
 8007d66:	291f      	cmp	r1, #31
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	460c      	mov	r4, r1
 8007d6e:	d904      	bls.n	8007d7a <_raise_r+0x14>
 8007d70:	2316      	movs	r3, #22
 8007d72:	6003      	str	r3, [r0, #0]
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d78:	bd38      	pop	{r3, r4, r5, pc}
 8007d7a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007d7c:	b112      	cbz	r2, 8007d84 <_raise_r+0x1e>
 8007d7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d82:	b94b      	cbnz	r3, 8007d98 <_raise_r+0x32>
 8007d84:	4628      	mov	r0, r5
 8007d86:	f000 f831 	bl	8007dec <_getpid_r>
 8007d8a:	4622      	mov	r2, r4
 8007d8c:	4601      	mov	r1, r0
 8007d8e:	4628      	mov	r0, r5
 8007d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d94:	f000 b818 	b.w	8007dc8 <_kill_r>
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d00a      	beq.n	8007db2 <_raise_r+0x4c>
 8007d9c:	1c59      	adds	r1, r3, #1
 8007d9e:	d103      	bne.n	8007da8 <_raise_r+0x42>
 8007da0:	2316      	movs	r3, #22
 8007da2:	6003      	str	r3, [r0, #0]
 8007da4:	2001      	movs	r0, #1
 8007da6:	e7e7      	b.n	8007d78 <_raise_r+0x12>
 8007da8:	2100      	movs	r1, #0
 8007daa:	4620      	mov	r0, r4
 8007dac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007db0:	4798      	blx	r3
 8007db2:	2000      	movs	r0, #0
 8007db4:	e7e0      	b.n	8007d78 <_raise_r+0x12>
	...

08007db8 <raise>:
 8007db8:	4b02      	ldr	r3, [pc, #8]	@ (8007dc4 <raise+0xc>)
 8007dba:	4601      	mov	r1, r0
 8007dbc:	6818      	ldr	r0, [r3, #0]
 8007dbe:	f7ff bfd2 	b.w	8007d66 <_raise_r>
 8007dc2:	bf00      	nop
 8007dc4:	20000018 	.word	0x20000018

08007dc8 <_kill_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	2300      	movs	r3, #0
 8007dcc:	4d06      	ldr	r5, [pc, #24]	@ (8007de8 <_kill_r+0x20>)
 8007dce:	4604      	mov	r4, r0
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	602b      	str	r3, [r5, #0]
 8007dd6:	f7f9 fdd4 	bl	8001982 <_kill>
 8007dda:	1c43      	adds	r3, r0, #1
 8007ddc:	d102      	bne.n	8007de4 <_kill_r+0x1c>
 8007dde:	682b      	ldr	r3, [r5, #0]
 8007de0:	b103      	cbz	r3, 8007de4 <_kill_r+0x1c>
 8007de2:	6023      	str	r3, [r4, #0]
 8007de4:	bd38      	pop	{r3, r4, r5, pc}
 8007de6:	bf00      	nop
 8007de8:	20000470 	.word	0x20000470

08007dec <_getpid_r>:
 8007dec:	f7f9 bdc2 	b.w	8001974 <_getpid>

08007df0 <exp>:
 8007df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df2:	4606      	mov	r6, r0
 8007df4:	460f      	mov	r7, r1
 8007df6:	f000 f8a3 	bl	8007f40 <__ieee754_exp>
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	460d      	mov	r5, r1
 8007dfe:	4630      	mov	r0, r6
 8007e00:	4639      	mov	r1, r7
 8007e02:	f000 f897 	bl	8007f34 <finite>
 8007e06:	b168      	cbz	r0, 8007e24 <exp+0x34>
 8007e08:	a311      	add	r3, pc, #68	@ (adr r3, 8007e50 <exp+0x60>)
 8007e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0e:	4630      	mov	r0, r6
 8007e10:	4639      	mov	r1, r7
 8007e12:	f7f8 fdf1 	bl	80009f8 <__aeabi_dcmpgt>
 8007e16:	b140      	cbz	r0, 8007e2a <exp+0x3a>
 8007e18:	f7fe f912 	bl	8006040 <__errno>
 8007e1c:	2322      	movs	r3, #34	@ 0x22
 8007e1e:	2400      	movs	r4, #0
 8007e20:	4d0f      	ldr	r5, [pc, #60]	@ (8007e60 <exp+0x70>)
 8007e22:	6003      	str	r3, [r0, #0]
 8007e24:	4620      	mov	r0, r4
 8007e26:	4629      	mov	r1, r5
 8007e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	a30a      	add	r3, pc, #40	@ (adr r3, 8007e58 <exp+0x68>)
 8007e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e32:	4639      	mov	r1, r7
 8007e34:	f7f8 fdc2 	bl	80009bc <__aeabi_dcmplt>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	d0f3      	beq.n	8007e24 <exp+0x34>
 8007e3c:	f7fe f900 	bl	8006040 <__errno>
 8007e40:	2322      	movs	r3, #34	@ 0x22
 8007e42:	2400      	movs	r4, #0
 8007e44:	2500      	movs	r5, #0
 8007e46:	6003      	str	r3, [r0, #0]
 8007e48:	e7ec      	b.n	8007e24 <exp+0x34>
 8007e4a:	bf00      	nop
 8007e4c:	f3af 8000 	nop.w
 8007e50:	fefa39ef 	.word	0xfefa39ef
 8007e54:	40862e42 	.word	0x40862e42
 8007e58:	d52d3051 	.word	0xd52d3051
 8007e5c:	c0874910 	.word	0xc0874910
 8007e60:	7ff00000 	.word	0x7ff00000

08007e64 <pow>:
 8007e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e68:	4614      	mov	r4, r2
 8007e6a:	461d      	mov	r5, r3
 8007e6c:	4680      	mov	r8, r0
 8007e6e:	4689      	mov	r9, r1
 8007e70:	f000 f9da 	bl	8008228 <__ieee754_pow>
 8007e74:	4622      	mov	r2, r4
 8007e76:	4606      	mov	r6, r0
 8007e78:	460f      	mov	r7, r1
 8007e7a:	462b      	mov	r3, r5
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	4629      	mov	r1, r5
 8007e80:	f7f8 fdc4 	bl	8000a0c <__aeabi_dcmpun>
 8007e84:	bbc8      	cbnz	r0, 8007efa <pow+0x96>
 8007e86:	2200      	movs	r2, #0
 8007e88:	2300      	movs	r3, #0
 8007e8a:	4640      	mov	r0, r8
 8007e8c:	4649      	mov	r1, r9
 8007e8e:	f7f8 fd8b 	bl	80009a8 <__aeabi_dcmpeq>
 8007e92:	b1b8      	cbz	r0, 8007ec4 <pow+0x60>
 8007e94:	2200      	movs	r2, #0
 8007e96:	2300      	movs	r3, #0
 8007e98:	4620      	mov	r0, r4
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	f7f8 fd84 	bl	80009a8 <__aeabi_dcmpeq>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	d141      	bne.n	8007f28 <pow+0xc4>
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	f000 f844 	bl	8007f34 <finite>
 8007eac:	b328      	cbz	r0, 8007efa <pow+0x96>
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	f7f8 fd81 	bl	80009bc <__aeabi_dcmplt>
 8007eba:	b1f0      	cbz	r0, 8007efa <pow+0x96>
 8007ebc:	f7fe f8c0 	bl	8006040 <__errno>
 8007ec0:	2322      	movs	r3, #34	@ 0x22
 8007ec2:	e019      	b.n	8007ef8 <pow+0x94>
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	4639      	mov	r1, r7
 8007ec8:	f000 f834 	bl	8007f34 <finite>
 8007ecc:	b9c8      	cbnz	r0, 8007f02 <pow+0x9e>
 8007ece:	4640      	mov	r0, r8
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	f000 f82f 	bl	8007f34 <finite>
 8007ed6:	b1a0      	cbz	r0, 8007f02 <pow+0x9e>
 8007ed8:	4620      	mov	r0, r4
 8007eda:	4629      	mov	r1, r5
 8007edc:	f000 f82a 	bl	8007f34 <finite>
 8007ee0:	b178      	cbz	r0, 8007f02 <pow+0x9e>
 8007ee2:	4632      	mov	r2, r6
 8007ee4:	463b      	mov	r3, r7
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	4639      	mov	r1, r7
 8007eea:	f7f8 fd8f 	bl	8000a0c <__aeabi_dcmpun>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d0e4      	beq.n	8007ebc <pow+0x58>
 8007ef2:	f7fe f8a5 	bl	8006040 <__errno>
 8007ef6:	2321      	movs	r3, #33	@ 0x21
 8007ef8:	6003      	str	r3, [r0, #0]
 8007efa:	4630      	mov	r0, r6
 8007efc:	4639      	mov	r1, r7
 8007efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f02:	2200      	movs	r2, #0
 8007f04:	2300      	movs	r3, #0
 8007f06:	4630      	mov	r0, r6
 8007f08:	4639      	mov	r1, r7
 8007f0a:	f7f8 fd4d 	bl	80009a8 <__aeabi_dcmpeq>
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d0f3      	beq.n	8007efa <pow+0x96>
 8007f12:	4640      	mov	r0, r8
 8007f14:	4649      	mov	r1, r9
 8007f16:	f000 f80d 	bl	8007f34 <finite>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d0ed      	beq.n	8007efa <pow+0x96>
 8007f1e:	4620      	mov	r0, r4
 8007f20:	4629      	mov	r1, r5
 8007f22:	f000 f807 	bl	8007f34 <finite>
 8007f26:	e7c8      	b.n	8007eba <pow+0x56>
 8007f28:	2600      	movs	r6, #0
 8007f2a:	4f01      	ldr	r7, [pc, #4]	@ (8007f30 <pow+0xcc>)
 8007f2c:	e7e5      	b.n	8007efa <pow+0x96>
 8007f2e:	bf00      	nop
 8007f30:	3ff00000 	.word	0x3ff00000

08007f34 <finite>:
 8007f34:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8007f38:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007f3c:	0fc0      	lsrs	r0, r0, #31
 8007f3e:	4770      	bx	lr

08007f40 <__ieee754_exp>:
 8007f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f44:	4fae      	ldr	r7, [pc, #696]	@ (8008200 <__ieee754_exp+0x2c0>)
 8007f46:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8007f4a:	42ba      	cmp	r2, r7
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	460d      	mov	r5, r1
 8007f50:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8007f54:	d932      	bls.n	8007fbc <__ieee754_exp+0x7c>
 8007f56:	4fab      	ldr	r7, [pc, #684]	@ (8008204 <__ieee754_exp+0x2c4>)
 8007f58:	42ba      	cmp	r2, r7
 8007f5a:	d912      	bls.n	8007f82 <__ieee754_exp+0x42>
 8007f5c:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8007f60:	4303      	orrs	r3, r0
 8007f62:	4602      	mov	r2, r0
 8007f64:	d005      	beq.n	8007f72 <__ieee754_exp+0x32>
 8007f66:	460b      	mov	r3, r1
 8007f68:	f7f8 f900 	bl	800016c <__adddf3>
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	460d      	mov	r5, r1
 8007f70:	e002      	b.n	8007f78 <__ieee754_exp+0x38>
 8007f72:	2e00      	cmp	r6, #0
 8007f74:	f040 8112 	bne.w	800819c <__ieee754_exp+0x25c>
 8007f78:	4620      	mov	r0, r4
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	b004      	add	sp, #16
 8007f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f82:	a389      	add	r3, pc, #548	@ (adr r3, 80081a8 <__ieee754_exp+0x268>)
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	f7f8 fd36 	bl	80009f8 <__aeabi_dcmpgt>
 8007f8c:	4607      	mov	r7, r0
 8007f8e:	b128      	cbz	r0, 8007f9c <__ieee754_exp+0x5c>
 8007f90:	2000      	movs	r0, #0
 8007f92:	b004      	add	sp, #16
 8007f94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f98:	f000 bf0a 	b.w	8008db0 <__math_oflow>
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	a384      	add	r3, pc, #528	@ (adr r3, 80081b0 <__ieee754_exp+0x270>)
 8007fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	f7f8 fd09 	bl	80009bc <__aeabi_dcmplt>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	f000 8085 	beq.w	80080ba <__ieee754_exp+0x17a>
 8007fb0:	4638      	mov	r0, r7
 8007fb2:	b004      	add	sp, #16
 8007fb4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb8:	f000 bef5 	b.w	8008da6 <__math_uflow>
 8007fbc:	4b92      	ldr	r3, [pc, #584]	@ (8008208 <__ieee754_exp+0x2c8>)
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	f240 80a7 	bls.w	8008112 <__ieee754_exp+0x1d2>
 8007fc4:	4b91      	ldr	r3, [pc, #580]	@ (800820c <__ieee754_exp+0x2cc>)
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d877      	bhi.n	80080ba <__ieee754_exp+0x17a>
 8007fca:	4b91      	ldr	r3, [pc, #580]	@ (8008210 <__ieee754_exp+0x2d0>)
 8007fcc:	00f4      	lsls	r4, r6, #3
 8007fce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd6:	f7f8 f8c7 	bl	8000168 <__aeabi_dsub>
 8007fda:	4680      	mov	r8, r0
 8007fdc:	4689      	mov	r9, r1
 8007fde:	4b8d      	ldr	r3, [pc, #564]	@ (8008214 <__ieee754_exp+0x2d4>)
 8007fe0:	f1c6 0a01 	rsb	sl, r6, #1
 8007fe4:	4423      	add	r3, r4
 8007fe6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007fea:	e9cd 3400 	strd	r3, r4, [sp]
 8007fee:	ebaa 0a06 	sub.w	sl, sl, r6
 8007ff2:	4640      	mov	r0, r8
 8007ff4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ff8:	4649      	mov	r1, r9
 8007ffa:	f7f8 f8b5 	bl	8000168 <__aeabi_dsub>
 8007ffe:	4604      	mov	r4, r0
 8008000:	460d      	mov	r5, r1
 8008002:	4622      	mov	r2, r4
 8008004:	462b      	mov	r3, r5
 8008006:	4620      	mov	r0, r4
 8008008:	4629      	mov	r1, r5
 800800a:	f7f8 fa65 	bl	80004d8 <__aeabi_dmul>
 800800e:	a36a      	add	r3, pc, #424	@ (adr r3, 80081b8 <__ieee754_exp+0x278>)
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	4606      	mov	r6, r0
 8008016:	460f      	mov	r7, r1
 8008018:	f7f8 fa5e 	bl	80004d8 <__aeabi_dmul>
 800801c:	a368      	add	r3, pc, #416	@ (adr r3, 80081c0 <__ieee754_exp+0x280>)
 800801e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008022:	f7f8 f8a1 	bl	8000168 <__aeabi_dsub>
 8008026:	4632      	mov	r2, r6
 8008028:	463b      	mov	r3, r7
 800802a:	f7f8 fa55 	bl	80004d8 <__aeabi_dmul>
 800802e:	a366      	add	r3, pc, #408	@ (adr r3, 80081c8 <__ieee754_exp+0x288>)
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	f7f8 f89a 	bl	800016c <__adddf3>
 8008038:	4632      	mov	r2, r6
 800803a:	463b      	mov	r3, r7
 800803c:	f7f8 fa4c 	bl	80004d8 <__aeabi_dmul>
 8008040:	a363      	add	r3, pc, #396	@ (adr r3, 80081d0 <__ieee754_exp+0x290>)
 8008042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008046:	f7f8 f88f 	bl	8000168 <__aeabi_dsub>
 800804a:	4632      	mov	r2, r6
 800804c:	463b      	mov	r3, r7
 800804e:	f7f8 fa43 	bl	80004d8 <__aeabi_dmul>
 8008052:	a361      	add	r3, pc, #388	@ (adr r3, 80081d8 <__ieee754_exp+0x298>)
 8008054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008058:	f7f8 f888 	bl	800016c <__adddf3>
 800805c:	4632      	mov	r2, r6
 800805e:	463b      	mov	r3, r7
 8008060:	f7f8 fa3a 	bl	80004d8 <__aeabi_dmul>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	4620      	mov	r0, r4
 800806a:	4629      	mov	r1, r5
 800806c:	f7f8 f87c 	bl	8000168 <__aeabi_dsub>
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	4606      	mov	r6, r0
 8008076:	460f      	mov	r7, r1
 8008078:	4620      	mov	r0, r4
 800807a:	4629      	mov	r1, r5
 800807c:	f7f8 fa2c 	bl	80004d8 <__aeabi_dmul>
 8008080:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008084:	f1ba 0f00 	cmp.w	sl, #0
 8008088:	d15a      	bne.n	8008140 <__ieee754_exp+0x200>
 800808a:	2200      	movs	r2, #0
 800808c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008090:	4630      	mov	r0, r6
 8008092:	4639      	mov	r1, r7
 8008094:	f7f8 f868 	bl	8000168 <__aeabi_dsub>
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080a0:	f7f8 fb44 	bl	800072c <__aeabi_ddiv>
 80080a4:	4622      	mov	r2, r4
 80080a6:	462b      	mov	r3, r5
 80080a8:	f7f8 f85e 	bl	8000168 <__aeabi_dsub>
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	2000      	movs	r0, #0
 80080b2:	4959      	ldr	r1, [pc, #356]	@ (8008218 <__ieee754_exp+0x2d8>)
 80080b4:	f7f8 f858 	bl	8000168 <__aeabi_dsub>
 80080b8:	e758      	b.n	8007f6c <__ieee754_exp+0x2c>
 80080ba:	4b58      	ldr	r3, [pc, #352]	@ (800821c <__ieee754_exp+0x2dc>)
 80080bc:	4620      	mov	r0, r4
 80080be:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80080c2:	4629      	mov	r1, r5
 80080c4:	a346      	add	r3, pc, #280	@ (adr r3, 80081e0 <__ieee754_exp+0x2a0>)
 80080c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ca:	f7f8 fa05 	bl	80004d8 <__aeabi_dmul>
 80080ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080d2:	f7f8 f84b 	bl	800016c <__adddf3>
 80080d6:	f7f8 fcaf 	bl	8000a38 <__aeabi_d2iz>
 80080da:	4682      	mov	sl, r0
 80080dc:	f7f8 f992 	bl	8000404 <__aeabi_i2d>
 80080e0:	a341      	add	r3, pc, #260	@ (adr r3, 80081e8 <__ieee754_exp+0x2a8>)
 80080e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e6:	4606      	mov	r6, r0
 80080e8:	460f      	mov	r7, r1
 80080ea:	f7f8 f9f5 	bl	80004d8 <__aeabi_dmul>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	4620      	mov	r0, r4
 80080f4:	4629      	mov	r1, r5
 80080f6:	f7f8 f837 	bl	8000168 <__aeabi_dsub>
 80080fa:	a33d      	add	r3, pc, #244	@ (adr r3, 80081f0 <__ieee754_exp+0x2b0>)
 80080fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008100:	4680      	mov	r8, r0
 8008102:	4689      	mov	r9, r1
 8008104:	4630      	mov	r0, r6
 8008106:	4639      	mov	r1, r7
 8008108:	f7f8 f9e6 	bl	80004d8 <__aeabi_dmul>
 800810c:	e9cd 0100 	strd	r0, r1, [sp]
 8008110:	e76f      	b.n	8007ff2 <__ieee754_exp+0xb2>
 8008112:	4b43      	ldr	r3, [pc, #268]	@ (8008220 <__ieee754_exp+0x2e0>)
 8008114:	429a      	cmp	r2, r3
 8008116:	d80e      	bhi.n	8008136 <__ieee754_exp+0x1f6>
 8008118:	a337      	add	r3, pc, #220	@ (adr r3, 80081f8 <__ieee754_exp+0x2b8>)
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	f7f8 f825 	bl	800016c <__adddf3>
 8008122:	2200      	movs	r2, #0
 8008124:	4b3c      	ldr	r3, [pc, #240]	@ (8008218 <__ieee754_exp+0x2d8>)
 8008126:	f7f8 fc67 	bl	80009f8 <__aeabi_dcmpgt>
 800812a:	b138      	cbz	r0, 800813c <__ieee754_exp+0x1fc>
 800812c:	2200      	movs	r2, #0
 800812e:	4620      	mov	r0, r4
 8008130:	4629      	mov	r1, r5
 8008132:	4b39      	ldr	r3, [pc, #228]	@ (8008218 <__ieee754_exp+0x2d8>)
 8008134:	e718      	b.n	8007f68 <__ieee754_exp+0x28>
 8008136:	f04f 0a00 	mov.w	sl, #0
 800813a:	e762      	b.n	8008002 <__ieee754_exp+0xc2>
 800813c:	4682      	mov	sl, r0
 800813e:	e760      	b.n	8008002 <__ieee754_exp+0xc2>
 8008140:	4632      	mov	r2, r6
 8008142:	463b      	mov	r3, r7
 8008144:	2000      	movs	r0, #0
 8008146:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800814a:	f7f8 f80d 	bl	8000168 <__aeabi_dsub>
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008156:	f7f8 fae9 	bl	800072c <__aeabi_ddiv>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008162:	f7f8 f801 	bl	8000168 <__aeabi_dsub>
 8008166:	4642      	mov	r2, r8
 8008168:	464b      	mov	r3, r9
 800816a:	f7f7 fffd 	bl	8000168 <__aeabi_dsub>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	2000      	movs	r0, #0
 8008174:	4928      	ldr	r1, [pc, #160]	@ (8008218 <__ieee754_exp+0x2d8>)
 8008176:	f7f7 fff7 	bl	8000168 <__aeabi_dsub>
 800817a:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 800817e:	4592      	cmp	sl, r2
 8008180:	db02      	blt.n	8008188 <__ieee754_exp+0x248>
 8008182:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008186:	e6f1      	b.n	8007f6c <__ieee754_exp+0x2c>
 8008188:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 800818c:	2200      	movs	r2, #0
 800818e:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 8008192:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008196:	f7f8 f99f 	bl	80004d8 <__aeabi_dmul>
 800819a:	e6e7      	b.n	8007f6c <__ieee754_exp+0x2c>
 800819c:	2400      	movs	r4, #0
 800819e:	2500      	movs	r5, #0
 80081a0:	e6ea      	b.n	8007f78 <__ieee754_exp+0x38>
 80081a2:	bf00      	nop
 80081a4:	f3af 8000 	nop.w
 80081a8:	fefa39ef 	.word	0xfefa39ef
 80081ac:	40862e42 	.word	0x40862e42
 80081b0:	d52d3051 	.word	0xd52d3051
 80081b4:	c0874910 	.word	0xc0874910
 80081b8:	72bea4d0 	.word	0x72bea4d0
 80081bc:	3e663769 	.word	0x3e663769
 80081c0:	c5d26bf1 	.word	0xc5d26bf1
 80081c4:	3ebbbd41 	.word	0x3ebbbd41
 80081c8:	af25de2c 	.word	0xaf25de2c
 80081cc:	3f11566a 	.word	0x3f11566a
 80081d0:	16bebd93 	.word	0x16bebd93
 80081d4:	3f66c16c 	.word	0x3f66c16c
 80081d8:	5555553e 	.word	0x5555553e
 80081dc:	3fc55555 	.word	0x3fc55555
 80081e0:	652b82fe 	.word	0x652b82fe
 80081e4:	3ff71547 	.word	0x3ff71547
 80081e8:	fee00000 	.word	0xfee00000
 80081ec:	3fe62e42 	.word	0x3fe62e42
 80081f0:	35793c76 	.word	0x35793c76
 80081f4:	3dea39ef 	.word	0x3dea39ef
 80081f8:	8800759c 	.word	0x8800759c
 80081fc:	7e37e43c 	.word	0x7e37e43c
 8008200:	40862e41 	.word	0x40862e41
 8008204:	7fefffff 	.word	0x7fefffff
 8008208:	3fd62e42 	.word	0x3fd62e42
 800820c:	3ff0a2b1 	.word	0x3ff0a2b1
 8008210:	08009390 	.word	0x08009390
 8008214:	08009380 	.word	0x08009380
 8008218:	3ff00000 	.word	0x3ff00000
 800821c:	080093a0 	.word	0x080093a0
 8008220:	3defffff 	.word	0x3defffff
 8008224:	00000000 	.word	0x00000000

08008228 <__ieee754_pow>:
 8008228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822c:	b091      	sub	sp, #68	@ 0x44
 800822e:	e9cd 2300 	strd	r2, r3, [sp]
 8008232:	468b      	mov	fp, r1
 8008234:	e9dd 1800 	ldrd	r1, r8, [sp]
 8008238:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800823c:	4682      	mov	sl, r0
 800823e:	ea57 0001 	orrs.w	r0, r7, r1
 8008242:	d112      	bne.n	800826a <__ieee754_pow+0x42>
 8008244:	4653      	mov	r3, sl
 8008246:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800824a:	18db      	adds	r3, r3, r3
 800824c:	4152      	adcs	r2, r2
 800824e:	4298      	cmp	r0, r3
 8008250:	4b91      	ldr	r3, [pc, #580]	@ (8008498 <__ieee754_pow+0x270>)
 8008252:	4193      	sbcs	r3, r2
 8008254:	f080 84ce 	bcs.w	8008bf4 <__ieee754_pow+0x9cc>
 8008258:	e9dd 2300 	ldrd	r2, r3, [sp]
 800825c:	4650      	mov	r0, sl
 800825e:	4659      	mov	r1, fp
 8008260:	f7f7 ff84 	bl	800016c <__adddf3>
 8008264:	b011      	add	sp, #68	@ 0x44
 8008266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826a:	4b8c      	ldr	r3, [pc, #560]	@ (800849c <__ieee754_pow+0x274>)
 800826c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8008270:	429e      	cmp	r6, r3
 8008272:	465d      	mov	r5, fp
 8008274:	46d1      	mov	r9, sl
 8008276:	d807      	bhi.n	8008288 <__ieee754_pow+0x60>
 8008278:	d102      	bne.n	8008280 <__ieee754_pow+0x58>
 800827a:	f1ba 0f00 	cmp.w	sl, #0
 800827e:	d1eb      	bne.n	8008258 <__ieee754_pow+0x30>
 8008280:	429f      	cmp	r7, r3
 8008282:	d801      	bhi.n	8008288 <__ieee754_pow+0x60>
 8008284:	d10f      	bne.n	80082a6 <__ieee754_pow+0x7e>
 8008286:	b171      	cbz	r1, 80082a6 <__ieee754_pow+0x7e>
 8008288:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800828c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008290:	ea55 0509 	orrs.w	r5, r5, r9
 8008294:	d1e0      	bne.n	8008258 <__ieee754_pow+0x30>
 8008296:	e9dd 3200 	ldrd	r3, r2, [sp]
 800829a:	18db      	adds	r3, r3, r3
 800829c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80082a0:	4152      	adcs	r2, r2
 80082a2:	429d      	cmp	r5, r3
 80082a4:	e7d4      	b.n	8008250 <__ieee754_pow+0x28>
 80082a6:	2d00      	cmp	r5, #0
 80082a8:	4633      	mov	r3, r6
 80082aa:	da39      	bge.n	8008320 <__ieee754_pow+0xf8>
 80082ac:	4a7c      	ldr	r2, [pc, #496]	@ (80084a0 <__ieee754_pow+0x278>)
 80082ae:	4297      	cmp	r7, r2
 80082b0:	d84e      	bhi.n	8008350 <__ieee754_pow+0x128>
 80082b2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80082b6:	4297      	cmp	r7, r2
 80082b8:	f240 84ab 	bls.w	8008c12 <__ieee754_pow+0x9ea>
 80082bc:	153a      	asrs	r2, r7, #20
 80082be:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80082c2:	2a14      	cmp	r2, #20
 80082c4:	dd0f      	ble.n	80082e6 <__ieee754_pow+0xbe>
 80082c6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80082ca:	fa21 f402 	lsr.w	r4, r1, r2
 80082ce:	fa04 f202 	lsl.w	r2, r4, r2
 80082d2:	428a      	cmp	r2, r1
 80082d4:	f040 849d 	bne.w	8008c12 <__ieee754_pow+0x9ea>
 80082d8:	f004 0401 	and.w	r4, r4, #1
 80082dc:	f1c4 0402 	rsb	r4, r4, #2
 80082e0:	2900      	cmp	r1, #0
 80082e2:	d15a      	bne.n	800839a <__ieee754_pow+0x172>
 80082e4:	e00e      	b.n	8008304 <__ieee754_pow+0xdc>
 80082e6:	2900      	cmp	r1, #0
 80082e8:	d156      	bne.n	8008398 <__ieee754_pow+0x170>
 80082ea:	f1c2 0214 	rsb	r2, r2, #20
 80082ee:	fa47 f402 	asr.w	r4, r7, r2
 80082f2:	fa04 f202 	lsl.w	r2, r4, r2
 80082f6:	42ba      	cmp	r2, r7
 80082f8:	f040 8488 	bne.w	8008c0c <__ieee754_pow+0x9e4>
 80082fc:	f004 0401 	and.w	r4, r4, #1
 8008300:	f1c4 0402 	rsb	r4, r4, #2
 8008304:	4a67      	ldr	r2, [pc, #412]	@ (80084a4 <__ieee754_pow+0x27c>)
 8008306:	4297      	cmp	r7, r2
 8008308:	d130      	bne.n	800836c <__ieee754_pow+0x144>
 800830a:	f1b8 0f00 	cmp.w	r8, #0
 800830e:	f280 8479 	bge.w	8008c04 <__ieee754_pow+0x9dc>
 8008312:	4652      	mov	r2, sl
 8008314:	465b      	mov	r3, fp
 8008316:	2000      	movs	r0, #0
 8008318:	4962      	ldr	r1, [pc, #392]	@ (80084a4 <__ieee754_pow+0x27c>)
 800831a:	f7f8 fa07 	bl	800072c <__aeabi_ddiv>
 800831e:	e7a1      	b.n	8008264 <__ieee754_pow+0x3c>
 8008320:	2400      	movs	r4, #0
 8008322:	2900      	cmp	r1, #0
 8008324:	d139      	bne.n	800839a <__ieee754_pow+0x172>
 8008326:	4a5d      	ldr	r2, [pc, #372]	@ (800849c <__ieee754_pow+0x274>)
 8008328:	4297      	cmp	r7, r2
 800832a:	d1eb      	bne.n	8008304 <__ieee754_pow+0xdc>
 800832c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8008330:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8008334:	ea53 0309 	orrs.w	r3, r3, r9
 8008338:	f000 845c 	beq.w	8008bf4 <__ieee754_pow+0x9cc>
 800833c:	4b5a      	ldr	r3, [pc, #360]	@ (80084a8 <__ieee754_pow+0x280>)
 800833e:	429e      	cmp	r6, r3
 8008340:	d908      	bls.n	8008354 <__ieee754_pow+0x12c>
 8008342:	f1b8 0f00 	cmp.w	r8, #0
 8008346:	f2c0 8459 	blt.w	8008bfc <__ieee754_pow+0x9d4>
 800834a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800834e:	e789      	b.n	8008264 <__ieee754_pow+0x3c>
 8008350:	2402      	movs	r4, #2
 8008352:	e7e6      	b.n	8008322 <__ieee754_pow+0xfa>
 8008354:	f1b8 0f00 	cmp.w	r8, #0
 8008358:	f04f 0000 	mov.w	r0, #0
 800835c:	f04f 0100 	mov.w	r1, #0
 8008360:	da80      	bge.n	8008264 <__ieee754_pow+0x3c>
 8008362:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008366:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800836a:	e77b      	b.n	8008264 <__ieee754_pow+0x3c>
 800836c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8008370:	d106      	bne.n	8008380 <__ieee754_pow+0x158>
 8008372:	4652      	mov	r2, sl
 8008374:	465b      	mov	r3, fp
 8008376:	4650      	mov	r0, sl
 8008378:	4659      	mov	r1, fp
 800837a:	f7f8 f8ad 	bl	80004d8 <__aeabi_dmul>
 800837e:	e771      	b.n	8008264 <__ieee754_pow+0x3c>
 8008380:	4a4a      	ldr	r2, [pc, #296]	@ (80084ac <__ieee754_pow+0x284>)
 8008382:	4590      	cmp	r8, r2
 8008384:	d109      	bne.n	800839a <__ieee754_pow+0x172>
 8008386:	2d00      	cmp	r5, #0
 8008388:	db07      	blt.n	800839a <__ieee754_pow+0x172>
 800838a:	4650      	mov	r0, sl
 800838c:	4659      	mov	r1, fp
 800838e:	b011      	add	sp, #68	@ 0x44
 8008390:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008394:	f000 bd12 	b.w	8008dbc <__ieee754_sqrt>
 8008398:	2400      	movs	r4, #0
 800839a:	4650      	mov	r0, sl
 800839c:	4659      	mov	r1, fp
 800839e:	9302      	str	r3, [sp, #8]
 80083a0:	f000 fc6a 	bl	8008c78 <fabs>
 80083a4:	9b02      	ldr	r3, [sp, #8]
 80083a6:	f1b9 0f00 	cmp.w	r9, #0
 80083aa:	d127      	bne.n	80083fc <__ieee754_pow+0x1d4>
 80083ac:	4a3d      	ldr	r2, [pc, #244]	@ (80084a4 <__ieee754_pow+0x27c>)
 80083ae:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 80083b2:	4594      	cmp	ip, r2
 80083b4:	d000      	beq.n	80083b8 <__ieee754_pow+0x190>
 80083b6:	bb0e      	cbnz	r6, 80083fc <__ieee754_pow+0x1d4>
 80083b8:	f1b8 0f00 	cmp.w	r8, #0
 80083bc:	da05      	bge.n	80083ca <__ieee754_pow+0x1a2>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	2000      	movs	r0, #0
 80083c4:	4937      	ldr	r1, [pc, #220]	@ (80084a4 <__ieee754_pow+0x27c>)
 80083c6:	f7f8 f9b1 	bl	800072c <__aeabi_ddiv>
 80083ca:	2d00      	cmp	r5, #0
 80083cc:	f6bf af4a 	bge.w	8008264 <__ieee754_pow+0x3c>
 80083d0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80083d4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80083d8:	4326      	orrs	r6, r4
 80083da:	d108      	bne.n	80083ee <__ieee754_pow+0x1c6>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	4610      	mov	r0, r2
 80083e2:	4619      	mov	r1, r3
 80083e4:	f7f7 fec0 	bl	8000168 <__aeabi_dsub>
 80083e8:	4602      	mov	r2, r0
 80083ea:	460b      	mov	r3, r1
 80083ec:	e795      	b.n	800831a <__ieee754_pow+0xf2>
 80083ee:	2c01      	cmp	r4, #1
 80083f0:	f47f af38 	bne.w	8008264 <__ieee754_pow+0x3c>
 80083f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80083f8:	4619      	mov	r1, r3
 80083fa:	e733      	b.n	8008264 <__ieee754_pow+0x3c>
 80083fc:	0fea      	lsrs	r2, r5, #31
 80083fe:	3a01      	subs	r2, #1
 8008400:	ea52 0c04 	orrs.w	ip, r2, r4
 8008404:	d102      	bne.n	800840c <__ieee754_pow+0x1e4>
 8008406:	4652      	mov	r2, sl
 8008408:	465b      	mov	r3, fp
 800840a:	e7e9      	b.n	80083e0 <__ieee754_pow+0x1b8>
 800840c:	f04f 0900 	mov.w	r9, #0
 8008410:	3c01      	subs	r4, #1
 8008412:	4314      	orrs	r4, r2
 8008414:	bf14      	ite	ne
 8008416:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 80084a4 <__ieee754_pow+0x27c>
 800841a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 80084b0 <__ieee754_pow+0x288>
 800841e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8008422:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8008426:	f240 8107 	bls.w	8008638 <__ieee754_pow+0x410>
 800842a:	4b22      	ldr	r3, [pc, #136]	@ (80084b4 <__ieee754_pow+0x28c>)
 800842c:	429f      	cmp	r7, r3
 800842e:	4b1e      	ldr	r3, [pc, #120]	@ (80084a8 <__ieee754_pow+0x280>)
 8008430:	d913      	bls.n	800845a <__ieee754_pow+0x232>
 8008432:	429e      	cmp	r6, r3
 8008434:	d808      	bhi.n	8008448 <__ieee754_pow+0x220>
 8008436:	f1b8 0f00 	cmp.w	r8, #0
 800843a:	da08      	bge.n	800844e <__ieee754_pow+0x226>
 800843c:	2000      	movs	r0, #0
 800843e:	b011      	add	sp, #68	@ 0x44
 8008440:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	f000 bcb4 	b.w	8008db0 <__math_oflow>
 8008448:	f1b8 0f00 	cmp.w	r8, #0
 800844c:	dcf6      	bgt.n	800843c <__ieee754_pow+0x214>
 800844e:	2000      	movs	r0, #0
 8008450:	b011      	add	sp, #68	@ 0x44
 8008452:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008456:	f000 bca6 	b.w	8008da6 <__math_uflow>
 800845a:	429e      	cmp	r6, r3
 800845c:	d20c      	bcs.n	8008478 <__ieee754_pow+0x250>
 800845e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008462:	2200      	movs	r2, #0
 8008464:	2300      	movs	r3, #0
 8008466:	f7f8 faa9 	bl	80009bc <__aeabi_dcmplt>
 800846a:	3800      	subs	r0, #0
 800846c:	bf18      	it	ne
 800846e:	2001      	movne	r0, #1
 8008470:	f1b8 0f00 	cmp.w	r8, #0
 8008474:	daec      	bge.n	8008450 <__ieee754_pow+0x228>
 8008476:	e7e2      	b.n	800843e <__ieee754_pow+0x216>
 8008478:	4b0a      	ldr	r3, [pc, #40]	@ (80084a4 <__ieee754_pow+0x27c>)
 800847a:	2200      	movs	r2, #0
 800847c:	429e      	cmp	r6, r3
 800847e:	d91b      	bls.n	80084b8 <__ieee754_pow+0x290>
 8008480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008484:	2300      	movs	r3, #0
 8008486:	f7f8 fa99 	bl	80009bc <__aeabi_dcmplt>
 800848a:	3800      	subs	r0, #0
 800848c:	bf18      	it	ne
 800848e:	2001      	movne	r0, #1
 8008490:	f1b8 0f00 	cmp.w	r8, #0
 8008494:	dcd3      	bgt.n	800843e <__ieee754_pow+0x216>
 8008496:	e7db      	b.n	8008450 <__ieee754_pow+0x228>
 8008498:	fff00000 	.word	0xfff00000
 800849c:	7ff00000 	.word	0x7ff00000
 80084a0:	433fffff 	.word	0x433fffff
 80084a4:	3ff00000 	.word	0x3ff00000
 80084a8:	3fefffff 	.word	0x3fefffff
 80084ac:	3fe00000 	.word	0x3fe00000
 80084b0:	bff00000 	.word	0xbff00000
 80084b4:	43f00000 	.word	0x43f00000
 80084b8:	4b5b      	ldr	r3, [pc, #364]	@ (8008628 <__ieee754_pow+0x400>)
 80084ba:	f7f7 fe55 	bl	8000168 <__aeabi_dsub>
 80084be:	a352      	add	r3, pc, #328	@ (adr r3, 8008608 <__ieee754_pow+0x3e0>)
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	4604      	mov	r4, r0
 80084c6:	460d      	mov	r5, r1
 80084c8:	f7f8 f806 	bl	80004d8 <__aeabi_dmul>
 80084cc:	a350      	add	r3, pc, #320	@ (adr r3, 8008610 <__ieee754_pow+0x3e8>)
 80084ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d2:	4606      	mov	r6, r0
 80084d4:	460f      	mov	r7, r1
 80084d6:	4620      	mov	r0, r4
 80084d8:	4629      	mov	r1, r5
 80084da:	f7f7 fffd 	bl	80004d8 <__aeabi_dmul>
 80084de:	2200      	movs	r2, #0
 80084e0:	4682      	mov	sl, r0
 80084e2:	468b      	mov	fp, r1
 80084e4:	4620      	mov	r0, r4
 80084e6:	4629      	mov	r1, r5
 80084e8:	4b50      	ldr	r3, [pc, #320]	@ (800862c <__ieee754_pow+0x404>)
 80084ea:	f7f7 fff5 	bl	80004d8 <__aeabi_dmul>
 80084ee:	4602      	mov	r2, r0
 80084f0:	460b      	mov	r3, r1
 80084f2:	a149      	add	r1, pc, #292	@ (adr r1, 8008618 <__ieee754_pow+0x3f0>)
 80084f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084f8:	f7f7 fe36 	bl	8000168 <__aeabi_dsub>
 80084fc:	4622      	mov	r2, r4
 80084fe:	462b      	mov	r3, r5
 8008500:	f7f7 ffea 	bl	80004d8 <__aeabi_dmul>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	2000      	movs	r0, #0
 800850a:	4949      	ldr	r1, [pc, #292]	@ (8008630 <__ieee754_pow+0x408>)
 800850c:	f7f7 fe2c 	bl	8000168 <__aeabi_dsub>
 8008510:	4622      	mov	r2, r4
 8008512:	4680      	mov	r8, r0
 8008514:	4689      	mov	r9, r1
 8008516:	462b      	mov	r3, r5
 8008518:	4620      	mov	r0, r4
 800851a:	4629      	mov	r1, r5
 800851c:	f7f7 ffdc 	bl	80004d8 <__aeabi_dmul>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4640      	mov	r0, r8
 8008526:	4649      	mov	r1, r9
 8008528:	f7f7 ffd6 	bl	80004d8 <__aeabi_dmul>
 800852c:	a33c      	add	r3, pc, #240	@ (adr r3, 8008620 <__ieee754_pow+0x3f8>)
 800852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008532:	f7f7 ffd1 	bl	80004d8 <__aeabi_dmul>
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	4650      	mov	r0, sl
 800853c:	4659      	mov	r1, fp
 800853e:	f7f7 fe13 	bl	8000168 <__aeabi_dsub>
 8008542:	2400      	movs	r4, #0
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	4680      	mov	r8, r0
 800854a:	4689      	mov	r9, r1
 800854c:	4630      	mov	r0, r6
 800854e:	4639      	mov	r1, r7
 8008550:	f7f7 fe0c 	bl	800016c <__adddf3>
 8008554:	4632      	mov	r2, r6
 8008556:	463b      	mov	r3, r7
 8008558:	4620      	mov	r0, r4
 800855a:	460d      	mov	r5, r1
 800855c:	f7f7 fe04 	bl	8000168 <__aeabi_dsub>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4640      	mov	r0, r8
 8008566:	4649      	mov	r1, r9
 8008568:	f7f7 fdfe 	bl	8000168 <__aeabi_dsub>
 800856c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008570:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008574:	2300      	movs	r3, #0
 8008576:	9304      	str	r3, [sp, #16]
 8008578:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800857c:	4606      	mov	r6, r0
 800857e:	460f      	mov	r7, r1
 8008580:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008584:	4652      	mov	r2, sl
 8008586:	465b      	mov	r3, fp
 8008588:	f7f7 fdee 	bl	8000168 <__aeabi_dsub>
 800858c:	4622      	mov	r2, r4
 800858e:	462b      	mov	r3, r5
 8008590:	f7f7 ffa2 	bl	80004d8 <__aeabi_dmul>
 8008594:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008598:	4680      	mov	r8, r0
 800859a:	4689      	mov	r9, r1
 800859c:	4630      	mov	r0, r6
 800859e:	4639      	mov	r1, r7
 80085a0:	f7f7 ff9a 	bl	80004d8 <__aeabi_dmul>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	4640      	mov	r0, r8
 80085aa:	4649      	mov	r1, r9
 80085ac:	f7f7 fdde 	bl	800016c <__adddf3>
 80085b0:	4652      	mov	r2, sl
 80085b2:	465b      	mov	r3, fp
 80085b4:	4606      	mov	r6, r0
 80085b6:	460f      	mov	r7, r1
 80085b8:	4620      	mov	r0, r4
 80085ba:	4629      	mov	r1, r5
 80085bc:	f7f7 ff8c 	bl	80004d8 <__aeabi_dmul>
 80085c0:	460b      	mov	r3, r1
 80085c2:	4602      	mov	r2, r0
 80085c4:	4680      	mov	r8, r0
 80085c6:	4689      	mov	r9, r1
 80085c8:	4630      	mov	r0, r6
 80085ca:	4639      	mov	r1, r7
 80085cc:	f7f7 fdce 	bl	800016c <__adddf3>
 80085d0:	4b18      	ldr	r3, [pc, #96]	@ (8008634 <__ieee754_pow+0x40c>)
 80085d2:	4604      	mov	r4, r0
 80085d4:	4299      	cmp	r1, r3
 80085d6:	460d      	mov	r5, r1
 80085d8:	468a      	mov	sl, r1
 80085da:	468b      	mov	fp, r1
 80085dc:	f340 82e0 	ble.w	8008ba0 <__ieee754_pow+0x978>
 80085e0:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80085e4:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80085e8:	4303      	orrs	r3, r0
 80085ea:	f000 81df 	beq.w	80089ac <__ieee754_pow+0x784>
 80085ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085f2:	2200      	movs	r2, #0
 80085f4:	2300      	movs	r3, #0
 80085f6:	f7f8 f9e1 	bl	80009bc <__aeabi_dcmplt>
 80085fa:	3800      	subs	r0, #0
 80085fc:	bf18      	it	ne
 80085fe:	2001      	movne	r0, #1
 8008600:	e71d      	b.n	800843e <__ieee754_pow+0x216>
 8008602:	bf00      	nop
 8008604:	f3af 8000 	nop.w
 8008608:	60000000 	.word	0x60000000
 800860c:	3ff71547 	.word	0x3ff71547
 8008610:	f85ddf44 	.word	0xf85ddf44
 8008614:	3e54ae0b 	.word	0x3e54ae0b
 8008618:	55555555 	.word	0x55555555
 800861c:	3fd55555 	.word	0x3fd55555
 8008620:	652b82fe 	.word	0x652b82fe
 8008624:	3ff71547 	.word	0x3ff71547
 8008628:	3ff00000 	.word	0x3ff00000
 800862c:	3fd00000 	.word	0x3fd00000
 8008630:	3fe00000 	.word	0x3fe00000
 8008634:	408fffff 	.word	0x408fffff
 8008638:	4ad3      	ldr	r2, [pc, #844]	@ (8008988 <__ieee754_pow+0x760>)
 800863a:	402a      	ands	r2, r5
 800863c:	2a00      	cmp	r2, #0
 800863e:	f040 817a 	bne.w	8008936 <__ieee754_pow+0x70e>
 8008642:	4bd2      	ldr	r3, [pc, #840]	@ (800898c <__ieee754_pow+0x764>)
 8008644:	2200      	movs	r2, #0
 8008646:	f7f7 ff47 	bl	80004d8 <__aeabi_dmul>
 800864a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800864e:	460b      	mov	r3, r1
 8008650:	151a      	asrs	r2, r3, #20
 8008652:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008656:	4422      	add	r2, r4
 8008658:	920a      	str	r2, [sp, #40]	@ 0x28
 800865a:	4acd      	ldr	r2, [pc, #820]	@ (8008990 <__ieee754_pow+0x768>)
 800865c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008660:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8008664:	4293      	cmp	r3, r2
 8008666:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800866a:	dd08      	ble.n	800867e <__ieee754_pow+0x456>
 800866c:	4ac9      	ldr	r2, [pc, #804]	@ (8008994 <__ieee754_pow+0x76c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	f340 8163 	ble.w	800893a <__ieee754_pow+0x712>
 8008674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008676:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800867a:	3301      	adds	r3, #1
 800867c:	930a      	str	r3, [sp, #40]	@ 0x28
 800867e:	2600      	movs	r6, #0
 8008680:	00f3      	lsls	r3, r6, #3
 8008682:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008684:	4bc4      	ldr	r3, [pc, #784]	@ (8008998 <__ieee754_pow+0x770>)
 8008686:	4629      	mov	r1, r5
 8008688:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800868c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008690:	461a      	mov	r2, r3
 8008692:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008696:	4623      	mov	r3, r4
 8008698:	4682      	mov	sl, r0
 800869a:	f7f7 fd65 	bl	8000168 <__aeabi_dsub>
 800869e:	4652      	mov	r2, sl
 80086a0:	462b      	mov	r3, r5
 80086a2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80086a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80086aa:	f7f7 fd5f 	bl	800016c <__adddf3>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	2000      	movs	r0, #0
 80086b4:	49b9      	ldr	r1, [pc, #740]	@ (800899c <__ieee754_pow+0x774>)
 80086b6:	f7f8 f839 	bl	800072c <__aeabi_ddiv>
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80086c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086c6:	f7f7 ff07 	bl	80004d8 <__aeabi_dmul>
 80086ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80086ce:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80086d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80086d6:	2300      	movs	r3, #0
 80086d8:	2200      	movs	r2, #0
 80086da:	46ab      	mov	fp, r5
 80086dc:	106d      	asrs	r5, r5, #1
 80086de:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80086e2:	9304      	str	r3, [sp, #16]
 80086e4:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80086e8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80086ec:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80086f0:	4640      	mov	r0, r8
 80086f2:	4649      	mov	r1, r9
 80086f4:	4614      	mov	r4, r2
 80086f6:	461d      	mov	r5, r3
 80086f8:	f7f7 feee 	bl	80004d8 <__aeabi_dmul>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008704:	f7f7 fd30 	bl	8000168 <__aeabi_dsub>
 8008708:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800870c:	4606      	mov	r6, r0
 800870e:	460f      	mov	r7, r1
 8008710:	4620      	mov	r0, r4
 8008712:	4629      	mov	r1, r5
 8008714:	f7f7 fd28 	bl	8000168 <__aeabi_dsub>
 8008718:	4602      	mov	r2, r0
 800871a:	460b      	mov	r3, r1
 800871c:	4650      	mov	r0, sl
 800871e:	4659      	mov	r1, fp
 8008720:	f7f7 fd22 	bl	8000168 <__aeabi_dsub>
 8008724:	4642      	mov	r2, r8
 8008726:	464b      	mov	r3, r9
 8008728:	f7f7 fed6 	bl	80004d8 <__aeabi_dmul>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	4630      	mov	r0, r6
 8008732:	4639      	mov	r1, r7
 8008734:	f7f7 fd18 	bl	8000168 <__aeabi_dsub>
 8008738:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800873c:	f7f7 fecc 	bl	80004d8 <__aeabi_dmul>
 8008740:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008744:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008748:	4610      	mov	r0, r2
 800874a:	4619      	mov	r1, r3
 800874c:	f7f7 fec4 	bl	80004d8 <__aeabi_dmul>
 8008750:	a37b      	add	r3, pc, #492	@ (adr r3, 8008940 <__ieee754_pow+0x718>)
 8008752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008756:	4604      	mov	r4, r0
 8008758:	460d      	mov	r5, r1
 800875a:	f7f7 febd 	bl	80004d8 <__aeabi_dmul>
 800875e:	a37a      	add	r3, pc, #488	@ (adr r3, 8008948 <__ieee754_pow+0x720>)
 8008760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008764:	f7f7 fd02 	bl	800016c <__adddf3>
 8008768:	4622      	mov	r2, r4
 800876a:	462b      	mov	r3, r5
 800876c:	f7f7 feb4 	bl	80004d8 <__aeabi_dmul>
 8008770:	a377      	add	r3, pc, #476	@ (adr r3, 8008950 <__ieee754_pow+0x728>)
 8008772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008776:	f7f7 fcf9 	bl	800016c <__adddf3>
 800877a:	4622      	mov	r2, r4
 800877c:	462b      	mov	r3, r5
 800877e:	f7f7 feab 	bl	80004d8 <__aeabi_dmul>
 8008782:	a375      	add	r3, pc, #468	@ (adr r3, 8008958 <__ieee754_pow+0x730>)
 8008784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008788:	f7f7 fcf0 	bl	800016c <__adddf3>
 800878c:	4622      	mov	r2, r4
 800878e:	462b      	mov	r3, r5
 8008790:	f7f7 fea2 	bl	80004d8 <__aeabi_dmul>
 8008794:	a372      	add	r3, pc, #456	@ (adr r3, 8008960 <__ieee754_pow+0x738>)
 8008796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879a:	f7f7 fce7 	bl	800016c <__adddf3>
 800879e:	4622      	mov	r2, r4
 80087a0:	462b      	mov	r3, r5
 80087a2:	f7f7 fe99 	bl	80004d8 <__aeabi_dmul>
 80087a6:	a370      	add	r3, pc, #448	@ (adr r3, 8008968 <__ieee754_pow+0x740>)
 80087a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ac:	f7f7 fcde 	bl	800016c <__adddf3>
 80087b0:	4622      	mov	r2, r4
 80087b2:	4606      	mov	r6, r0
 80087b4:	460f      	mov	r7, r1
 80087b6:	462b      	mov	r3, r5
 80087b8:	4620      	mov	r0, r4
 80087ba:	4629      	mov	r1, r5
 80087bc:	f7f7 fe8c 	bl	80004d8 <__aeabi_dmul>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	4630      	mov	r0, r6
 80087c6:	4639      	mov	r1, r7
 80087c8:	f7f7 fe86 	bl	80004d8 <__aeabi_dmul>
 80087cc:	4604      	mov	r4, r0
 80087ce:	460d      	mov	r5, r1
 80087d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087d4:	4642      	mov	r2, r8
 80087d6:	464b      	mov	r3, r9
 80087d8:	f7f7 fcc8 	bl	800016c <__adddf3>
 80087dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80087e0:	f7f7 fe7a 	bl	80004d8 <__aeabi_dmul>
 80087e4:	4622      	mov	r2, r4
 80087e6:	462b      	mov	r3, r5
 80087e8:	f7f7 fcc0 	bl	800016c <__adddf3>
 80087ec:	4642      	mov	r2, r8
 80087ee:	4682      	mov	sl, r0
 80087f0:	468b      	mov	fp, r1
 80087f2:	464b      	mov	r3, r9
 80087f4:	4640      	mov	r0, r8
 80087f6:	4649      	mov	r1, r9
 80087f8:	f7f7 fe6e 	bl	80004d8 <__aeabi_dmul>
 80087fc:	2200      	movs	r2, #0
 80087fe:	4b68      	ldr	r3, [pc, #416]	@ (80089a0 <__ieee754_pow+0x778>)
 8008800:	4606      	mov	r6, r0
 8008802:	460f      	mov	r7, r1
 8008804:	f7f7 fcb2 	bl	800016c <__adddf3>
 8008808:	4652      	mov	r2, sl
 800880a:	465b      	mov	r3, fp
 800880c:	f7f7 fcae 	bl	800016c <__adddf3>
 8008810:	2400      	movs	r4, #0
 8008812:	460d      	mov	r5, r1
 8008814:	4622      	mov	r2, r4
 8008816:	460b      	mov	r3, r1
 8008818:	4640      	mov	r0, r8
 800881a:	4649      	mov	r1, r9
 800881c:	f7f7 fe5c 	bl	80004d8 <__aeabi_dmul>
 8008820:	2200      	movs	r2, #0
 8008822:	4680      	mov	r8, r0
 8008824:	4689      	mov	r9, r1
 8008826:	4620      	mov	r0, r4
 8008828:	4629      	mov	r1, r5
 800882a:	4b5d      	ldr	r3, [pc, #372]	@ (80089a0 <__ieee754_pow+0x778>)
 800882c:	f7f7 fc9c 	bl	8000168 <__aeabi_dsub>
 8008830:	4632      	mov	r2, r6
 8008832:	463b      	mov	r3, r7
 8008834:	f7f7 fc98 	bl	8000168 <__aeabi_dsub>
 8008838:	4602      	mov	r2, r0
 800883a:	460b      	mov	r3, r1
 800883c:	4650      	mov	r0, sl
 800883e:	4659      	mov	r1, fp
 8008840:	f7f7 fc92 	bl	8000168 <__aeabi_dsub>
 8008844:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008848:	f7f7 fe46 	bl	80004d8 <__aeabi_dmul>
 800884c:	4622      	mov	r2, r4
 800884e:	4606      	mov	r6, r0
 8008850:	460f      	mov	r7, r1
 8008852:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008856:	462b      	mov	r3, r5
 8008858:	f7f7 fe3e 	bl	80004d8 <__aeabi_dmul>
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	4630      	mov	r0, r6
 8008862:	4639      	mov	r1, r7
 8008864:	f7f7 fc82 	bl	800016c <__adddf3>
 8008868:	2400      	movs	r4, #0
 800886a:	4606      	mov	r6, r0
 800886c:	460f      	mov	r7, r1
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	4640      	mov	r0, r8
 8008874:	4649      	mov	r1, r9
 8008876:	f7f7 fc79 	bl	800016c <__adddf3>
 800887a:	a33d      	add	r3, pc, #244	@ (adr r3, 8008970 <__ieee754_pow+0x748>)
 800887c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008880:	4620      	mov	r0, r4
 8008882:	460d      	mov	r5, r1
 8008884:	f7f7 fe28 	bl	80004d8 <__aeabi_dmul>
 8008888:	4642      	mov	r2, r8
 800888a:	464b      	mov	r3, r9
 800888c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008890:	4620      	mov	r0, r4
 8008892:	4629      	mov	r1, r5
 8008894:	f7f7 fc68 	bl	8000168 <__aeabi_dsub>
 8008898:	4602      	mov	r2, r0
 800889a:	460b      	mov	r3, r1
 800889c:	4630      	mov	r0, r6
 800889e:	4639      	mov	r1, r7
 80088a0:	f7f7 fc62 	bl	8000168 <__aeabi_dsub>
 80088a4:	a334      	add	r3, pc, #208	@ (adr r3, 8008978 <__ieee754_pow+0x750>)
 80088a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088aa:	f7f7 fe15 	bl	80004d8 <__aeabi_dmul>
 80088ae:	a334      	add	r3, pc, #208	@ (adr r3, 8008980 <__ieee754_pow+0x758>)
 80088b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b4:	4606      	mov	r6, r0
 80088b6:	460f      	mov	r7, r1
 80088b8:	4620      	mov	r0, r4
 80088ba:	4629      	mov	r1, r5
 80088bc:	f7f7 fe0c 	bl	80004d8 <__aeabi_dmul>
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	4630      	mov	r0, r6
 80088c6:	4639      	mov	r1, r7
 80088c8:	f7f7 fc50 	bl	800016c <__adddf3>
 80088cc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80088ce:	4b35      	ldr	r3, [pc, #212]	@ (80089a4 <__ieee754_pow+0x77c>)
 80088d0:	2400      	movs	r4, #0
 80088d2:	4413      	add	r3, r2
 80088d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d8:	f7f7 fc48 	bl	800016c <__adddf3>
 80088dc:	4682      	mov	sl, r0
 80088de:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80088e0:	468b      	mov	fp, r1
 80088e2:	f7f7 fd8f 	bl	8000404 <__aeabi_i2d>
 80088e6:	4606      	mov	r6, r0
 80088e8:	460f      	mov	r7, r1
 80088ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80088ec:	4b2e      	ldr	r3, [pc, #184]	@ (80089a8 <__ieee754_pow+0x780>)
 80088ee:	4413      	add	r3, r2
 80088f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088f4:	4652      	mov	r2, sl
 80088f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088fa:	465b      	mov	r3, fp
 80088fc:	f7f7 fc36 	bl	800016c <__adddf3>
 8008900:	4642      	mov	r2, r8
 8008902:	464b      	mov	r3, r9
 8008904:	f7f7 fc32 	bl	800016c <__adddf3>
 8008908:	4632      	mov	r2, r6
 800890a:	463b      	mov	r3, r7
 800890c:	f7f7 fc2e 	bl	800016c <__adddf3>
 8008910:	4632      	mov	r2, r6
 8008912:	463b      	mov	r3, r7
 8008914:	4620      	mov	r0, r4
 8008916:	460d      	mov	r5, r1
 8008918:	f7f7 fc26 	bl	8000168 <__aeabi_dsub>
 800891c:	4642      	mov	r2, r8
 800891e:	464b      	mov	r3, r9
 8008920:	f7f7 fc22 	bl	8000168 <__aeabi_dsub>
 8008924:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008928:	f7f7 fc1e 	bl	8000168 <__aeabi_dsub>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4650      	mov	r0, sl
 8008932:	4659      	mov	r1, fp
 8008934:	e618      	b.n	8008568 <__ieee754_pow+0x340>
 8008936:	2400      	movs	r4, #0
 8008938:	e68a      	b.n	8008650 <__ieee754_pow+0x428>
 800893a:	2601      	movs	r6, #1
 800893c:	e6a0      	b.n	8008680 <__ieee754_pow+0x458>
 800893e:	bf00      	nop
 8008940:	4a454eef 	.word	0x4a454eef
 8008944:	3fca7e28 	.word	0x3fca7e28
 8008948:	93c9db65 	.word	0x93c9db65
 800894c:	3fcd864a 	.word	0x3fcd864a
 8008950:	a91d4101 	.word	0xa91d4101
 8008954:	3fd17460 	.word	0x3fd17460
 8008958:	518f264d 	.word	0x518f264d
 800895c:	3fd55555 	.word	0x3fd55555
 8008960:	db6fabff 	.word	0xdb6fabff
 8008964:	3fdb6db6 	.word	0x3fdb6db6
 8008968:	33333303 	.word	0x33333303
 800896c:	3fe33333 	.word	0x3fe33333
 8008970:	e0000000 	.word	0xe0000000
 8008974:	3feec709 	.word	0x3feec709
 8008978:	dc3a03fd 	.word	0xdc3a03fd
 800897c:	3feec709 	.word	0x3feec709
 8008980:	145b01f5 	.word	0x145b01f5
 8008984:	be3e2fe0 	.word	0xbe3e2fe0
 8008988:	7ff00000 	.word	0x7ff00000
 800898c:	43400000 	.word	0x43400000
 8008990:	0003988e 	.word	0x0003988e
 8008994:	000bb679 	.word	0x000bb679
 8008998:	080093d0 	.word	0x080093d0
 800899c:	3ff00000 	.word	0x3ff00000
 80089a0:	40080000 	.word	0x40080000
 80089a4:	080093b0 	.word	0x080093b0
 80089a8:	080093c0 	.word	0x080093c0
 80089ac:	a39a      	add	r3, pc, #616	@ (adr r3, 8008c18 <__ieee754_pow+0x9f0>)
 80089ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b2:	4630      	mov	r0, r6
 80089b4:	4639      	mov	r1, r7
 80089b6:	f7f7 fbd9 	bl	800016c <__adddf3>
 80089ba:	4642      	mov	r2, r8
 80089bc:	e9cd 0100 	strd	r0, r1, [sp]
 80089c0:	464b      	mov	r3, r9
 80089c2:	4620      	mov	r0, r4
 80089c4:	4629      	mov	r1, r5
 80089c6:	f7f7 fbcf 	bl	8000168 <__aeabi_dsub>
 80089ca:	4602      	mov	r2, r0
 80089cc:	460b      	mov	r3, r1
 80089ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089d2:	f7f8 f811 	bl	80009f8 <__aeabi_dcmpgt>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	f47f ae09 	bne.w	80085ee <__ieee754_pow+0x3c6>
 80089dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80089e0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80089e4:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80089e8:	fa43 fa0a 	asr.w	sl, r3, sl
 80089ec:	44da      	add	sl, fp
 80089ee:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80089f2:	489b      	ldr	r0, [pc, #620]	@ (8008c60 <__ieee754_pow+0xa38>)
 80089f4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80089f8:	4108      	asrs	r0, r1
 80089fa:	ea00 030a 	and.w	r3, r0, sl
 80089fe:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008a02:	f1c1 0114 	rsb	r1, r1, #20
 8008a06:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008a0a:	4640      	mov	r0, r8
 8008a0c:	fa4a fa01 	asr.w	sl, sl, r1
 8008a10:	f1bb 0f00 	cmp.w	fp, #0
 8008a14:	4649      	mov	r1, r9
 8008a16:	f04f 0200 	mov.w	r2, #0
 8008a1a:	bfb8      	it	lt
 8008a1c:	f1ca 0a00 	rsblt	sl, sl, #0
 8008a20:	f7f7 fba2 	bl	8000168 <__aeabi_dsub>
 8008a24:	4680      	mov	r8, r0
 8008a26:	4689      	mov	r9, r1
 8008a28:	2400      	movs	r4, #0
 8008a2a:	4632      	mov	r2, r6
 8008a2c:	463b      	mov	r3, r7
 8008a2e:	4640      	mov	r0, r8
 8008a30:	4649      	mov	r1, r9
 8008a32:	f7f7 fb9b 	bl	800016c <__adddf3>
 8008a36:	a37a      	add	r3, pc, #488	@ (adr r3, 8008c20 <__ieee754_pow+0x9f8>)
 8008a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	460d      	mov	r5, r1
 8008a40:	f7f7 fd4a 	bl	80004d8 <__aeabi_dmul>
 8008a44:	4642      	mov	r2, r8
 8008a46:	464b      	mov	r3, r9
 8008a48:	e9cd 0100 	strd	r0, r1, [sp]
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	4629      	mov	r1, r5
 8008a50:	f7f7 fb8a 	bl	8000168 <__aeabi_dsub>
 8008a54:	4602      	mov	r2, r0
 8008a56:	460b      	mov	r3, r1
 8008a58:	4630      	mov	r0, r6
 8008a5a:	4639      	mov	r1, r7
 8008a5c:	f7f7 fb84 	bl	8000168 <__aeabi_dsub>
 8008a60:	a371      	add	r3, pc, #452	@ (adr r3, 8008c28 <__ieee754_pow+0xa00>)
 8008a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a66:	f7f7 fd37 	bl	80004d8 <__aeabi_dmul>
 8008a6a:	a371      	add	r3, pc, #452	@ (adr r3, 8008c30 <__ieee754_pow+0xa08>)
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	4680      	mov	r8, r0
 8008a72:	4689      	mov	r9, r1
 8008a74:	4620      	mov	r0, r4
 8008a76:	4629      	mov	r1, r5
 8008a78:	f7f7 fd2e 	bl	80004d8 <__aeabi_dmul>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	4640      	mov	r0, r8
 8008a82:	4649      	mov	r1, r9
 8008a84:	f7f7 fb72 	bl	800016c <__adddf3>
 8008a88:	4604      	mov	r4, r0
 8008a8a:	460d      	mov	r5, r1
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a94:	f7f7 fb6a 	bl	800016c <__adddf3>
 8008a98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a9c:	4680      	mov	r8, r0
 8008a9e:	4689      	mov	r9, r1
 8008aa0:	f7f7 fb62 	bl	8000168 <__aeabi_dsub>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	4629      	mov	r1, r5
 8008aac:	f7f7 fb5c 	bl	8000168 <__aeabi_dsub>
 8008ab0:	4642      	mov	r2, r8
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	460f      	mov	r7, r1
 8008ab6:	464b      	mov	r3, r9
 8008ab8:	4640      	mov	r0, r8
 8008aba:	4649      	mov	r1, r9
 8008abc:	f7f7 fd0c 	bl	80004d8 <__aeabi_dmul>
 8008ac0:	a35d      	add	r3, pc, #372	@ (adr r3, 8008c38 <__ieee754_pow+0xa10>)
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	460d      	mov	r5, r1
 8008aca:	f7f7 fd05 	bl	80004d8 <__aeabi_dmul>
 8008ace:	a35c      	add	r3, pc, #368	@ (adr r3, 8008c40 <__ieee754_pow+0xa18>)
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	f7f7 fb48 	bl	8000168 <__aeabi_dsub>
 8008ad8:	4622      	mov	r2, r4
 8008ada:	462b      	mov	r3, r5
 8008adc:	f7f7 fcfc 	bl	80004d8 <__aeabi_dmul>
 8008ae0:	a359      	add	r3, pc, #356	@ (adr r3, 8008c48 <__ieee754_pow+0xa20>)
 8008ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae6:	f7f7 fb41 	bl	800016c <__adddf3>
 8008aea:	4622      	mov	r2, r4
 8008aec:	462b      	mov	r3, r5
 8008aee:	f7f7 fcf3 	bl	80004d8 <__aeabi_dmul>
 8008af2:	a357      	add	r3, pc, #348	@ (adr r3, 8008c50 <__ieee754_pow+0xa28>)
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	f7f7 fb36 	bl	8000168 <__aeabi_dsub>
 8008afc:	4622      	mov	r2, r4
 8008afe:	462b      	mov	r3, r5
 8008b00:	f7f7 fcea 	bl	80004d8 <__aeabi_dmul>
 8008b04:	a354      	add	r3, pc, #336	@ (adr r3, 8008c58 <__ieee754_pow+0xa30>)
 8008b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0a:	f7f7 fb2f 	bl	800016c <__adddf3>
 8008b0e:	4622      	mov	r2, r4
 8008b10:	462b      	mov	r3, r5
 8008b12:	f7f7 fce1 	bl	80004d8 <__aeabi_dmul>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	4640      	mov	r0, r8
 8008b1c:	4649      	mov	r1, r9
 8008b1e:	f7f7 fb23 	bl	8000168 <__aeabi_dsub>
 8008b22:	4604      	mov	r4, r0
 8008b24:	460d      	mov	r5, r1
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4640      	mov	r0, r8
 8008b2c:	4649      	mov	r1, r9
 8008b2e:	f7f7 fcd3 	bl	80004d8 <__aeabi_dmul>
 8008b32:	2200      	movs	r2, #0
 8008b34:	e9cd 0100 	strd	r0, r1, [sp]
 8008b38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	4629      	mov	r1, r5
 8008b40:	f7f7 fb12 	bl	8000168 <__aeabi_dsub>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b4c:	f7f7 fdee 	bl	800072c <__aeabi_ddiv>
 8008b50:	4632      	mov	r2, r6
 8008b52:	4604      	mov	r4, r0
 8008b54:	460d      	mov	r5, r1
 8008b56:	463b      	mov	r3, r7
 8008b58:	4640      	mov	r0, r8
 8008b5a:	4649      	mov	r1, r9
 8008b5c:	f7f7 fcbc 	bl	80004d8 <__aeabi_dmul>
 8008b60:	4632      	mov	r2, r6
 8008b62:	463b      	mov	r3, r7
 8008b64:	f7f7 fb02 	bl	800016c <__adddf3>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	4629      	mov	r1, r5
 8008b70:	f7f7 fafa 	bl	8000168 <__aeabi_dsub>
 8008b74:	4642      	mov	r2, r8
 8008b76:	464b      	mov	r3, r9
 8008b78:	f7f7 faf6 	bl	8000168 <__aeabi_dsub>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	2000      	movs	r0, #0
 8008b82:	4938      	ldr	r1, [pc, #224]	@ (8008c64 <__ieee754_pow+0xa3c>)
 8008b84:	f7f7 faf0 	bl	8000168 <__aeabi_dsub>
 8008b88:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008b8c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8008b90:	da2e      	bge.n	8008bf0 <__ieee754_pow+0x9c8>
 8008b92:	4652      	mov	r2, sl
 8008b94:	f000 f874 	bl	8008c80 <scalbn>
 8008b98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b9c:	f7ff bbed 	b.w	800837a <__ieee754_pow+0x152>
 8008ba0:	4c31      	ldr	r4, [pc, #196]	@ (8008c68 <__ieee754_pow+0xa40>)
 8008ba2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008ba6:	42a3      	cmp	r3, r4
 8008ba8:	d91a      	bls.n	8008be0 <__ieee754_pow+0x9b8>
 8008baa:	4b30      	ldr	r3, [pc, #192]	@ (8008c6c <__ieee754_pow+0xa44>)
 8008bac:	440b      	add	r3, r1
 8008bae:	4303      	orrs	r3, r0
 8008bb0:	d009      	beq.n	8008bc6 <__ieee754_pow+0x99e>
 8008bb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	2300      	movs	r3, #0
 8008bba:	f7f7 feff 	bl	80009bc <__aeabi_dcmplt>
 8008bbe:	3800      	subs	r0, #0
 8008bc0:	bf18      	it	ne
 8008bc2:	2001      	movne	r0, #1
 8008bc4:	e444      	b.n	8008450 <__ieee754_pow+0x228>
 8008bc6:	4642      	mov	r2, r8
 8008bc8:	464b      	mov	r3, r9
 8008bca:	f7f7 facd 	bl	8000168 <__aeabi_dsub>
 8008bce:	4632      	mov	r2, r6
 8008bd0:	463b      	mov	r3, r7
 8008bd2:	f7f7 ff07 	bl	80009e4 <__aeabi_dcmpge>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	d1eb      	bne.n	8008bb2 <__ieee754_pow+0x98a>
 8008bda:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8008c70 <__ieee754_pow+0xa48>
 8008bde:	e6fd      	b.n	80089dc <__ieee754_pow+0x7b4>
 8008be0:	469a      	mov	sl, r3
 8008be2:	4b24      	ldr	r3, [pc, #144]	@ (8008c74 <__ieee754_pow+0xa4c>)
 8008be4:	459a      	cmp	sl, r3
 8008be6:	f63f aef9 	bhi.w	80089dc <__ieee754_pow+0x7b4>
 8008bea:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008bee:	e71b      	b.n	8008a28 <__ieee754_pow+0x800>
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	e7d1      	b.n	8008b98 <__ieee754_pow+0x970>
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	491b      	ldr	r1, [pc, #108]	@ (8008c64 <__ieee754_pow+0xa3c>)
 8008bf8:	f7ff bb34 	b.w	8008264 <__ieee754_pow+0x3c>
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	2100      	movs	r1, #0
 8008c00:	f7ff bb30 	b.w	8008264 <__ieee754_pow+0x3c>
 8008c04:	4650      	mov	r0, sl
 8008c06:	4659      	mov	r1, fp
 8008c08:	f7ff bb2c 	b.w	8008264 <__ieee754_pow+0x3c>
 8008c0c:	460c      	mov	r4, r1
 8008c0e:	f7ff bb79 	b.w	8008304 <__ieee754_pow+0xdc>
 8008c12:	2400      	movs	r4, #0
 8008c14:	f7ff bb64 	b.w	80082e0 <__ieee754_pow+0xb8>
 8008c18:	652b82fe 	.word	0x652b82fe
 8008c1c:	3c971547 	.word	0x3c971547
 8008c20:	00000000 	.word	0x00000000
 8008c24:	3fe62e43 	.word	0x3fe62e43
 8008c28:	fefa39ef 	.word	0xfefa39ef
 8008c2c:	3fe62e42 	.word	0x3fe62e42
 8008c30:	0ca86c39 	.word	0x0ca86c39
 8008c34:	be205c61 	.word	0xbe205c61
 8008c38:	72bea4d0 	.word	0x72bea4d0
 8008c3c:	3e663769 	.word	0x3e663769
 8008c40:	c5d26bf1 	.word	0xc5d26bf1
 8008c44:	3ebbbd41 	.word	0x3ebbbd41
 8008c48:	af25de2c 	.word	0xaf25de2c
 8008c4c:	3f11566a 	.word	0x3f11566a
 8008c50:	16bebd93 	.word	0x16bebd93
 8008c54:	3f66c16c 	.word	0x3f66c16c
 8008c58:	5555553e 	.word	0x5555553e
 8008c5c:	3fc55555 	.word	0x3fc55555
 8008c60:	fff00000 	.word	0xfff00000
 8008c64:	3ff00000 	.word	0x3ff00000
 8008c68:	4090cbff 	.word	0x4090cbff
 8008c6c:	3f6f3400 	.word	0x3f6f3400
 8008c70:	4090cc00 	.word	0x4090cc00
 8008c74:	3fe00000 	.word	0x3fe00000

08008c78 <fabs>:
 8008c78:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4770      	bx	lr

08008c80 <scalbn>:
 8008c80:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8008c84:	4616      	mov	r6, r2
 8008c86:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008c8a:	4683      	mov	fp, r0
 8008c8c:	468c      	mov	ip, r1
 8008c8e:	460b      	mov	r3, r1
 8008c90:	b982      	cbnz	r2, 8008cb4 <scalbn+0x34>
 8008c92:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008c96:	4303      	orrs	r3, r0
 8008c98:	d039      	beq.n	8008d0e <scalbn+0x8e>
 8008c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8008d58 <scalbn+0xd8>)
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f7f7 fc1b 	bl	80004d8 <__aeabi_dmul>
 8008ca2:	4b2e      	ldr	r3, [pc, #184]	@ (8008d5c <scalbn+0xdc>)
 8008ca4:	4683      	mov	fp, r0
 8008ca6:	429e      	cmp	r6, r3
 8008ca8:	468c      	mov	ip, r1
 8008caa:	da0d      	bge.n	8008cc8 <scalbn+0x48>
 8008cac:	a326      	add	r3, pc, #152	@ (adr r3, 8008d48 <scalbn+0xc8>)
 8008cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb2:	e01b      	b.n	8008cec <scalbn+0x6c>
 8008cb4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8008cb8:	42ba      	cmp	r2, r7
 8008cba:	d109      	bne.n	8008cd0 <scalbn+0x50>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	f7f7 fa55 	bl	800016c <__adddf3>
 8008cc2:	4683      	mov	fp, r0
 8008cc4:	468c      	mov	ip, r1
 8008cc6:	e022      	b.n	8008d0e <scalbn+0x8e>
 8008cc8:	460b      	mov	r3, r1
 8008cca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008cce:	3a36      	subs	r2, #54	@ 0x36
 8008cd0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008cd4:	428e      	cmp	r6, r1
 8008cd6:	dd0c      	ble.n	8008cf2 <scalbn+0x72>
 8008cd8:	a31d      	add	r3, pc, #116	@ (adr r3, 8008d50 <scalbn+0xd0>)
 8008cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cde:	461c      	mov	r4, r3
 8008ce0:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8008ce4:	f361 74df 	bfi	r4, r1, #31, #1
 8008ce8:	4621      	mov	r1, r4
 8008cea:	481d      	ldr	r0, [pc, #116]	@ (8008d60 <scalbn+0xe0>)
 8008cec:	f7f7 fbf4 	bl	80004d8 <__aeabi_dmul>
 8008cf0:	e7e7      	b.n	8008cc2 <scalbn+0x42>
 8008cf2:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008cf6:	4432      	add	r2, r6
 8008cf8:	428a      	cmp	r2, r1
 8008cfa:	dced      	bgt.n	8008cd8 <scalbn+0x58>
 8008cfc:	2a00      	cmp	r2, #0
 8008cfe:	dd0a      	ble.n	8008d16 <scalbn+0x96>
 8008d00:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008d04:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008d08:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008d0c:	46ac      	mov	ip, r5
 8008d0e:	4658      	mov	r0, fp
 8008d10:	4661      	mov	r1, ip
 8008d12:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8008d16:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008d1a:	da09      	bge.n	8008d30 <scalbn+0xb0>
 8008d1c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8008d20:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8008d24:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8008d28:	480e      	ldr	r0, [pc, #56]	@ (8008d64 <scalbn+0xe4>)
 8008d2a:	f041 011f 	orr.w	r1, r1, #31
 8008d2e:	e7bd      	b.n	8008cac <scalbn+0x2c>
 8008d30:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008d34:	3236      	adds	r2, #54	@ 0x36
 8008d36:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008d3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008d3e:	4658      	mov	r0, fp
 8008d40:	4629      	mov	r1, r5
 8008d42:	2200      	movs	r2, #0
 8008d44:	4b08      	ldr	r3, [pc, #32]	@ (8008d68 <scalbn+0xe8>)
 8008d46:	e7d1      	b.n	8008cec <scalbn+0x6c>
 8008d48:	c2f8f359 	.word	0xc2f8f359
 8008d4c:	01a56e1f 	.word	0x01a56e1f
 8008d50:	8800759c 	.word	0x8800759c
 8008d54:	7e37e43c 	.word	0x7e37e43c
 8008d58:	43500000 	.word	0x43500000
 8008d5c:	ffff3cb0 	.word	0xffff3cb0
 8008d60:	8800759c 	.word	0x8800759c
 8008d64:	c2f8f359 	.word	0xc2f8f359
 8008d68:	3c900000 	.word	0x3c900000

08008d6c <with_errno>:
 8008d6c:	b570      	push	{r4, r5, r6, lr}
 8008d6e:	4604      	mov	r4, r0
 8008d70:	460d      	mov	r5, r1
 8008d72:	4616      	mov	r6, r2
 8008d74:	f7fd f964 	bl	8006040 <__errno>
 8008d78:	4629      	mov	r1, r5
 8008d7a:	6006      	str	r6, [r0, #0]
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	bd70      	pop	{r4, r5, r6, pc}

08008d80 <xflow>:
 8008d80:	b513      	push	{r0, r1, r4, lr}
 8008d82:	4604      	mov	r4, r0
 8008d84:	4619      	mov	r1, r3
 8008d86:	4610      	mov	r0, r2
 8008d88:	b10c      	cbz	r4, 8008d8e <xflow+0xe>
 8008d8a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008d8e:	e9cd 2300 	strd	r2, r3, [sp]
 8008d92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d96:	f7f7 fb9f 	bl	80004d8 <__aeabi_dmul>
 8008d9a:	2222      	movs	r2, #34	@ 0x22
 8008d9c:	b002      	add	sp, #8
 8008d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008da2:	f7ff bfe3 	b.w	8008d6c <with_errno>

08008da6 <__math_uflow>:
 8008da6:	2200      	movs	r2, #0
 8008da8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008dac:	f7ff bfe8 	b.w	8008d80 <xflow>

08008db0 <__math_oflow>:
 8008db0:	2200      	movs	r2, #0
 8008db2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8008db6:	f7ff bfe3 	b.w	8008d80 <xflow>
	...

08008dbc <__ieee754_sqrt>:
 8008dbc:	4a67      	ldr	r2, [pc, #412]	@ (8008f5c <__ieee754_sqrt+0x1a0>)
 8008dbe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc2:	438a      	bics	r2, r1
 8008dc4:	4606      	mov	r6, r0
 8008dc6:	460f      	mov	r7, r1
 8008dc8:	460b      	mov	r3, r1
 8008dca:	4604      	mov	r4, r0
 8008dcc:	d10e      	bne.n	8008dec <__ieee754_sqrt+0x30>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	f7f7 fb82 	bl	80004d8 <__aeabi_dmul>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4630      	mov	r0, r6
 8008dda:	4639      	mov	r1, r7
 8008ddc:	f7f7 f9c6 	bl	800016c <__adddf3>
 8008de0:	4606      	mov	r6, r0
 8008de2:	460f      	mov	r7, r1
 8008de4:	4630      	mov	r0, r6
 8008de6:	4639      	mov	r1, r7
 8008de8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dec:	2900      	cmp	r1, #0
 8008dee:	dc0c      	bgt.n	8008e0a <__ieee754_sqrt+0x4e>
 8008df0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8008df4:	4302      	orrs	r2, r0
 8008df6:	d0f5      	beq.n	8008de4 <__ieee754_sqrt+0x28>
 8008df8:	b189      	cbz	r1, 8008e1e <__ieee754_sqrt+0x62>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	f7f7 f9b4 	bl	8000168 <__aeabi_dsub>
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	f7f7 fc92 	bl	800072c <__aeabi_ddiv>
 8008e08:	e7ea      	b.n	8008de0 <__ieee754_sqrt+0x24>
 8008e0a:	150a      	asrs	r2, r1, #20
 8008e0c:	d115      	bne.n	8008e3a <__ieee754_sqrt+0x7e>
 8008e0e:	2100      	movs	r1, #0
 8008e10:	e009      	b.n	8008e26 <__ieee754_sqrt+0x6a>
 8008e12:	0ae3      	lsrs	r3, r4, #11
 8008e14:	3a15      	subs	r2, #21
 8008e16:	0564      	lsls	r4, r4, #21
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d0fa      	beq.n	8008e12 <__ieee754_sqrt+0x56>
 8008e1c:	e7f7      	b.n	8008e0e <__ieee754_sqrt+0x52>
 8008e1e:	460a      	mov	r2, r1
 8008e20:	e7fa      	b.n	8008e18 <__ieee754_sqrt+0x5c>
 8008e22:	005b      	lsls	r3, r3, #1
 8008e24:	3101      	adds	r1, #1
 8008e26:	02d8      	lsls	r0, r3, #11
 8008e28:	d5fb      	bpl.n	8008e22 <__ieee754_sqrt+0x66>
 8008e2a:	1e48      	subs	r0, r1, #1
 8008e2c:	1a12      	subs	r2, r2, r0
 8008e2e:	f1c1 0020 	rsb	r0, r1, #32
 8008e32:	fa24 f000 	lsr.w	r0, r4, r0
 8008e36:	4303      	orrs	r3, r0
 8008e38:	408c      	lsls	r4, r1
 8008e3a:	2600      	movs	r6, #0
 8008e3c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8008e40:	2116      	movs	r1, #22
 8008e42:	07d2      	lsls	r2, r2, #31
 8008e44:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008e48:	4632      	mov	r2, r6
 8008e4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e52:	bf5c      	itt	pl
 8008e54:	005b      	lslpl	r3, r3, #1
 8008e56:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8008e5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008e5e:	bf58      	it	pl
 8008e60:	0064      	lslpl	r4, r4, #1
 8008e62:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008e66:	107f      	asrs	r7, r7, #1
 8008e68:	0064      	lsls	r4, r4, #1
 8008e6a:	1815      	adds	r5, r2, r0
 8008e6c:	429d      	cmp	r5, r3
 8008e6e:	bfde      	ittt	le
 8008e70:	182a      	addle	r2, r5, r0
 8008e72:	1b5b      	suble	r3, r3, r5
 8008e74:	1836      	addle	r6, r6, r0
 8008e76:	0fe5      	lsrs	r5, r4, #31
 8008e78:	3901      	subs	r1, #1
 8008e7a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008e7e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008e82:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008e86:	d1f0      	bne.n	8008e6a <__ieee754_sqrt+0xae>
 8008e88:	460d      	mov	r5, r1
 8008e8a:	f04f 0a20 	mov.w	sl, #32
 8008e8e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008e92:	429a      	cmp	r2, r3
 8008e94:	eb01 0c00 	add.w	ip, r1, r0
 8008e98:	db02      	blt.n	8008ea0 <__ieee754_sqrt+0xe4>
 8008e9a:	d113      	bne.n	8008ec4 <__ieee754_sqrt+0x108>
 8008e9c:	45a4      	cmp	ip, r4
 8008e9e:	d811      	bhi.n	8008ec4 <__ieee754_sqrt+0x108>
 8008ea0:	f1bc 0f00 	cmp.w	ip, #0
 8008ea4:	eb0c 0100 	add.w	r1, ip, r0
 8008ea8:	da42      	bge.n	8008f30 <__ieee754_sqrt+0x174>
 8008eaa:	2900      	cmp	r1, #0
 8008eac:	db40      	blt.n	8008f30 <__ieee754_sqrt+0x174>
 8008eae:	f102 0e01 	add.w	lr, r2, #1
 8008eb2:	1a9b      	subs	r3, r3, r2
 8008eb4:	4672      	mov	r2, lr
 8008eb6:	45a4      	cmp	ip, r4
 8008eb8:	bf88      	it	hi
 8008eba:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8008ebe:	eba4 040c 	sub.w	r4, r4, ip
 8008ec2:	4405      	add	r5, r0
 8008ec4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8008ec8:	f1ba 0a01 	subs.w	sl, sl, #1
 8008ecc:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8008ed0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008ed4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008ed8:	d1db      	bne.n	8008e92 <__ieee754_sqrt+0xd6>
 8008eda:	431c      	orrs	r4, r3
 8008edc:	d01a      	beq.n	8008f14 <__ieee754_sqrt+0x158>
 8008ede:	4c20      	ldr	r4, [pc, #128]	@ (8008f60 <__ieee754_sqrt+0x1a4>)
 8008ee0:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8008f64 <__ieee754_sqrt+0x1a8>
 8008ee4:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008ee8:	e9db 2300 	ldrd	r2, r3, [fp]
 8008eec:	f7f7 f93c 	bl	8000168 <__aeabi_dsub>
 8008ef0:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	4640      	mov	r0, r8
 8008efa:	4649      	mov	r1, r9
 8008efc:	f7f7 fd68 	bl	80009d0 <__aeabi_dcmple>
 8008f00:	b140      	cbz	r0, 8008f14 <__ieee754_sqrt+0x158>
 8008f02:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008f06:	e9db 2300 	ldrd	r2, r3, [fp]
 8008f0a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8008f0e:	d111      	bne.n	8008f34 <__ieee754_sqrt+0x178>
 8008f10:	4655      	mov	r5, sl
 8008f12:	3601      	adds	r6, #1
 8008f14:	1072      	asrs	r2, r6, #1
 8008f16:	086b      	lsrs	r3, r5, #1
 8008f18:	07f1      	lsls	r1, r6, #31
 8008f1a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008f1e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008f22:	bf48      	it	mi
 8008f24:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008f28:	4618      	mov	r0, r3
 8008f2a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8008f2e:	e757      	b.n	8008de0 <__ieee754_sqrt+0x24>
 8008f30:	4696      	mov	lr, r2
 8008f32:	e7be      	b.n	8008eb2 <__ieee754_sqrt+0xf6>
 8008f34:	f7f7 f91a 	bl	800016c <__adddf3>
 8008f38:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	460b      	mov	r3, r1
 8008f40:	4640      	mov	r0, r8
 8008f42:	4649      	mov	r1, r9
 8008f44:	f7f7 fd3a 	bl	80009bc <__aeabi_dcmplt>
 8008f48:	b120      	cbz	r0, 8008f54 <__ieee754_sqrt+0x198>
 8008f4a:	1ca8      	adds	r0, r5, #2
 8008f4c:	bf08      	it	eq
 8008f4e:	3601      	addeq	r6, #1
 8008f50:	3502      	adds	r5, #2
 8008f52:	e7df      	b.n	8008f14 <__ieee754_sqrt+0x158>
 8008f54:	1c6b      	adds	r3, r5, #1
 8008f56:	f023 0501 	bic.w	r5, r3, #1
 8008f5a:	e7db      	b.n	8008f14 <__ieee754_sqrt+0x158>
 8008f5c:	7ff00000 	.word	0x7ff00000
 8008f60:	200001e0 	.word	0x200001e0
 8008f64:	200001d8 	.word	0x200001d8

08008f68 <_init>:
 8008f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6a:	bf00      	nop
 8008f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f6e:	bc08      	pop	{r3}
 8008f70:	469e      	mov	lr, r3
 8008f72:	4770      	bx	lr

08008f74 <_fini>:
 8008f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f76:	bf00      	nop
 8008f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7a:	bc08      	pop	{r3}
 8008f7c:	469e      	mov	lr, r3
 8008f7e:	4770      	bx	lr
