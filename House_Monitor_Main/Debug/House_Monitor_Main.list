
House_Monitor_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083b8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  080084c8  080084c8  000094c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008910  08008910  0000a1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008910  08008910  00009910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008918  08008918  0000a1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008918  08008918  00009918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800891c  0800891c  0000991c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08008920  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200001e8  08008b08  0000a1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08008b08  0000a424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c86d  00000000  00000000  0000a211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a9  00000000  00000000  00016a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  00019028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000923  00000000  00000000  00019c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019525  00000000  00000000  0001a52b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010061  00000000  00000000  00033a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bf90  00000000  00000000  00043ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfa41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004304  00000000  00000000  000cfa84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000d3d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080084b0 	.word	0x080084b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080084b0 	.word	0x080084b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <MX_ADC1_Init+0x74>)
 8000ff6:	4a19      	ldr	r2, [pc, #100]	@ (800105c <MX_ADC1_Init+0x78>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <MX_ADC1_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001000:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <MX_ADC1_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001006:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <MX_ADC1_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <MX_ADC1_Init+0x74>)
 800100e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001012:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001014:	4b10      	ldr	r3, [pc, #64]	@ (8001058 <MX_ADC1_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <MX_ADC1_Init+0x74>)
 800101c:	2201      	movs	r2, #1
 800101e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001020:	480d      	ldr	r0, [pc, #52]	@ (8001058 <MX_ADC1_Init+0x74>)
 8001022:	f000 fd71 	bl	8001b08 <HAL_ADC_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800102c:	f000 fb20 	bl	8001670 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001034:	2301      	movs	r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	@ (8001058 <MX_ADC1_Init+0x74>)
 8001042:	f000 fff9 	bl	8002038 <HAL_ADC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800104c:	f000 fb10 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000204 	.word	0x20000204
 800105c:	40012400 	.word	0x40012400

08001060 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a14      	ldr	r2, [pc, #80]	@ (80010cc <HAL_ADC_MspInit+0x6c>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d121      	bne.n	80010c4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001080:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a0c      	ldr	r2, [pc, #48]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010b0:	2301      	movs	r3, #1
 80010b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b4:	2303      	movs	r3, #3
 80010b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4619      	mov	r1, r3
 80010be:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <HAL_ADC_MspInit+0x74>)
 80010c0:	f001 fae0 	bl	8002684 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40012400 	.word	0x40012400
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010800 	.word	0x40010800

080010d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ec:	4b23      	ldr	r3, [pc, #140]	@ (800117c <MX_GPIO_Init+0xa4>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a22      	ldr	r2, [pc, #136]	@ (800117c <MX_GPIO_Init+0xa4>)
 80010f2:	f043 0310 	orr.w	r3, r3, #16
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b20      	ldr	r3, [pc, #128]	@ (800117c <MX_GPIO_Init+0xa4>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b1d      	ldr	r3, [pc, #116]	@ (800117c <MX_GPIO_Init+0xa4>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a1c      	ldr	r2, [pc, #112]	@ (800117c <MX_GPIO_Init+0xa4>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b1a      	ldr	r3, [pc, #104]	@ (800117c <MX_GPIO_Init+0xa4>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111c:	4b17      	ldr	r3, [pc, #92]	@ (800117c <MX_GPIO_Init+0xa4>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a16      	ldr	r2, [pc, #88]	@ (800117c <MX_GPIO_Init+0xa4>)
 8001122:	f043 0308 	orr.w	r3, r3, #8
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b14      	ldr	r3, [pc, #80]	@ (800117c <MX_GPIO_Init+0xa4>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2120      	movs	r1, #32
 8001138:	4811      	ldr	r0, [pc, #68]	@ (8001180 <MX_GPIO_Init+0xa8>)
 800113a:	f001 fc3e 	bl	80029ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800113e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4619      	mov	r1, r3
 8001152:	480c      	ldr	r0, [pc, #48]	@ (8001184 <MX_GPIO_Init+0xac>)
 8001154:	f001 fa96 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001158:	2320      	movs	r3, #32
 800115a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	2301      	movs	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2302      	movs	r3, #2
 8001166:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	4619      	mov	r1, r3
 800116e:	4804      	ldr	r0, [pc, #16]	@ (8001180 <MX_GPIO_Init+0xa8>)
 8001170:	f001 fa88 	bl	8002684 <HAL_GPIO_Init>

}
 8001174:	bf00      	nop
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40021000 	.word	0x40021000
 8001180:	40010800 	.word	0x40010800
 8001184:	40011000 	.word	0x40011000

08001188 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800118c:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <MX_I2C1_Init+0x50>)
 800118e:	4a13      	ldr	r2, [pc, #76]	@ (80011dc <MX_I2C1_Init+0x54>)
 8001190:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_I2C1_Init+0x50>)
 8001194:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <MX_I2C1_Init+0x58>)
 8001196:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001198:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <MX_I2C1_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b8:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011c6:	f001 fc11 	bl	80029ec <HAL_I2C_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011d0:	f000 fa4e 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000234 	.word	0x20000234
 80011dc:	40005400 	.word	0x40005400
 80011e0:	000186a0 	.word	0x000186a0

080011e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a15      	ldr	r2, [pc, #84]	@ (8001254 <HAL_I2C_MspInit+0x70>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d123      	bne.n	800124c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <HAL_I2C_MspInit+0x74>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a13      	ldr	r2, [pc, #76]	@ (8001258 <HAL_I2C_MspInit+0x74>)
 800120a:	f043 0308 	orr.w	r3, r3, #8
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <HAL_I2C_MspInit+0x74>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800121c:	23c0      	movs	r3, #192	@ 0xc0
 800121e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001220:	2312      	movs	r3, #18
 8001222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4619      	mov	r1, r3
 800122e:	480b      	ldr	r0, [pc, #44]	@ (800125c <HAL_I2C_MspInit+0x78>)
 8001230:	f001 fa28 	bl	8002684 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <HAL_I2C_MspInit+0x74>)
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	4a07      	ldr	r2, [pc, #28]	@ (8001258 <HAL_I2C_MspInit+0x74>)
 800123a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800123e:	61d3      	str	r3, [r2, #28]
 8001240:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <HAL_I2C_MspInit+0x74>)
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40005400 	.word	0x40005400
 8001258:	40021000 	.word	0x40021000
 800125c:	40010c00 	.word	0x40010c00

08001260 <LPS_Read_Register>:
#define TIMEOUT 100
#define HEIGHT_OVER_SEE_LEVEL 247
#define PRESSURE_CONSTANT 0.034162608734308

static uint8_t LPS_Read_Register(uint8_t reg)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af04      	add	r7, sp, #16
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
	uint8_t val = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1, LPS_ADDR, reg, 1, &val, sizeof(val), TIMEOUT);
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	b29a      	uxth	r2, r3
 8001272:	2364      	movs	r3, #100	@ 0x64
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	2301      	movs	r3, #1
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	f107 030f 	add.w	r3, r7, #15
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2301      	movs	r3, #1
 8001282:	21ba      	movs	r1, #186	@ 0xba
 8001284:	4803      	ldr	r0, [pc, #12]	@ (8001294 <LPS_Read_Register+0x34>)
 8001286:	f001 fdef 	bl	8002e68 <HAL_I2C_Mem_Read>
	return val;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000234 	.word	0x20000234

08001298 <LPS_Write_Register>:

static void LPS_Write_Register(uint8_t reg, uint8_t value)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af04      	add	r7, sp, #16
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, LPS_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	2364      	movs	r3, #100	@ 0x64
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	2301      	movs	r3, #1
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	1dbb      	adds	r3, r7, #6
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2301      	movs	r3, #1
 80012ba:	21ba      	movs	r1, #186	@ 0xba
 80012bc:	4803      	ldr	r0, [pc, #12]	@ (80012cc <LPS_Write_Register+0x34>)
 80012be:	f001 fcd9 	bl	8002c74 <HAL_I2C_Mem_Write>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000234 	.word	0x20000234

080012d0 <LPS_Init>:

HAL_StatusTypeDef LPS_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	if (LPS_Read_Register(WHO_AM_I) != 0xBD)
 80012d4:	200f      	movs	r0, #15
 80012d6:	f7ff ffc3 	bl	8001260 <LPS_Read_Register>
 80012da:	4603      	mov	r3, r0
 80012dc:	2bbd      	cmp	r3, #189	@ 0xbd
 80012de:	d001      	beq.n	80012e4 <LPS_Init+0x14>
		return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e004      	b.n	80012ee <LPS_Init+0x1e>

	LPS_Write_Register(CTRL_REG1, 0xC0);
 80012e4:	21c0      	movs	r1, #192	@ 0xc0
 80012e6:	2020      	movs	r0, #32
 80012e8:	f7ff ffd6 	bl	8001298 <LPS_Write_Register>
	return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <LPS_Calibrate>:

void LPS_Calibrate(uint16_t value)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	80fb      	strh	r3, [r7, #6]
	LPS_Write_Register(RPDS_L, value);
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	4619      	mov	r1, r3
 8001302:	2039      	movs	r0, #57	@ 0x39
 8001304:	f7ff ffc8 	bl	8001298 <LPS_Write_Register>
	LPS_Write_Register(RPDS_H, value >> 8);
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	b29b      	uxth	r3, r3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	4619      	mov	r1, r3
 8001312:	203a      	movs	r0, #58	@ 0x3a
 8001314:	f7ff ffc0 	bl	8001298 <LPS_Write_Register>
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <LPS_Read_Temp>:

float LPS_Read_Temp(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af04      	add	r7, sp, #16
	int16_t temp = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	80fb      	strh	r3, [r7, #6]

	if (HAL_I2C_Mem_Read(&hi2c1, LPS_ADDR, TEMP_OUT_L | 0x80, 1, (uint8_t*)&temp, 2, TIMEOUT) != HAL_OK)
 800132a:	2364      	movs	r3, #100	@ 0x64
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	2302      	movs	r3, #2
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	1dbb      	adds	r3, r7, #6
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	22ab      	movs	r2, #171	@ 0xab
 800133a:	21ba      	movs	r1, #186	@ 0xba
 800133c:	480d      	ldr	r0, [pc, #52]	@ (8001374 <LPS_Read_Temp+0x54>)
 800133e:	f001 fd93 	bl	8002e68 <HAL_I2C_Mem_Read>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <LPS_Read_Temp+0x2c>
		Error_Handler();
 8001348:	f000 f992 	bl	8001670 <Error_Handler>

	return 42.5f + temp / 480.0f;
 800134c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fca3 	bl	8000c9c <__aeabi_i2f>
 8001356:	4603      	mov	r3, r0
 8001358:	4907      	ldr	r1, [pc, #28]	@ (8001378 <LPS_Read_Temp+0x58>)
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fda6 	bl	8000eac <__aeabi_fdiv>
 8001360:	4603      	mov	r3, r0
 8001362:	4906      	ldr	r1, [pc, #24]	@ (800137c <LPS_Read_Temp+0x5c>)
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fbe5 	bl	8000b34 <__addsf3>
 800136a:	4603      	mov	r3, r0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000234 	.word	0x20000234
 8001378:	43f00000 	.word	0x43f00000
 800137c:	422a0000 	.word	0x422a0000

08001380 <LPS_Read_Pressure>:

float LPS_Read_Pressure(void)
{
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af04      	add	r7, sp, #16
	int32_t value = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]

	if (HAL_I2C_Mem_Read(&hi2c1, LPS_ADDR, PRESS_OUT_XL | 0x80, 1, (uint8_t*)&value, 3, TIMEOUT) != HAL_OK)
 800138a:	2364      	movs	r3, #100	@ 0x64
 800138c:	9302      	str	r3, [sp, #8]
 800138e:	2303      	movs	r3, #3
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	463b      	mov	r3, r7
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	2301      	movs	r3, #1
 8001398:	22a8      	movs	r2, #168	@ 0xa8
 800139a:	21ba      	movs	r1, #186	@ 0xba
 800139c:	4824      	ldr	r0, [pc, #144]	@ (8001430 <LPS_Read_Pressure+0xb0>)
 800139e:	f001 fd63 	bl	8002e68 <HAL_I2C_Mem_Read>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <LPS_Read_Pressure+0x2c>
		Error_Handler();
 80013a8:	f000 f962 	bl	8001670 <Error_Handler>

	float read_pressure = value / 4096.0f;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fc74 	bl	8000c9c <__aeabi_i2f>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fd76 	bl	8000eac <__aeabi_fdiv>
 80013c0:	4603      	mov	r3, r0
 80013c2:	60fb      	str	r3, [r7, #12]
	float temp = LPS_Read_Temp() + 273.15f;
 80013c4:	f7ff ffac 	bl	8001320 <LPS_Read_Temp>
 80013c8:	4603      	mov	r3, r0
 80013ca:	491a      	ldr	r1, [pc, #104]	@ (8001434 <LPS_Read_Pressure+0xb4>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fbb1 	bl	8000b34 <__addsf3>
 80013d2:	4603      	mov	r3, r0
 80013d4:	60bb      	str	r3, [r7, #8]
	float actual_pressure = read_pressure * exp(PRESSURE_CONSTANT * HEIGHT_OVER_SEE_LEVEL / temp);
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f7ff f826 	bl	8000428 <__aeabi_f2d>
 80013dc:	4604      	mov	r4, r0
 80013de:	460d      	mov	r5, r1
 80013e0:	68b8      	ldr	r0, [r7, #8]
 80013e2:	f7ff f821 	bl	8000428 <__aeabi_f2d>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	a10f      	add	r1, pc, #60	@ (adr r1, 8001428 <LPS_Read_Pressure+0xa8>)
 80013ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013f0:	f7ff f99c 	bl	800072c <__aeabi_ddiv>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f005 ff9c 	bl	8007338 <exp>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4620      	mov	r0, r4
 8001406:	4629      	mov	r1, r5
 8001408:	f7ff f866 	bl	80004d8 <__aeabi_dmul>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4610      	mov	r0, r2
 8001412:	4619      	mov	r1, r3
 8001414:	f7ff fb38 	bl	8000a88 <__aeabi_d2f>
 8001418:	4603      	mov	r3, r0
 800141a:	607b      	str	r3, [r7, #4]
	return actual_pressure;
 800141c:	687b      	ldr	r3, [r7, #4]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bdb0      	pop	{r4, r5, r7, pc}
 8001426:	bf00      	nop
 8001428:	14226397 	.word	0x14226397
 800142c:	4020e057 	.word	0x4020e057
 8001430:	20000234 	.word	0x20000234
 8001434:	43889333 	.word	0x43889333

08001438 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Redirecting chars in printf statements to USART2
int __io_putchar(int ch)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b0a      	cmp	r3, #10
 8001444:	d102      	bne.n	800144c <__io_putchar+0x14>
		__io_putchar('\r');
 8001446:	200d      	movs	r0, #13
 8001448:	f7ff fff6 	bl	8001438 <__io_putchar>

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800144c:	1d39      	adds	r1, r7, #4
 800144e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001452:	2201      	movs	r2, #1
 8001454:	4803      	ldr	r0, [pc, #12]	@ (8001464 <__io_putchar+0x2c>)
 8001456:	f003 f8fb 	bl	8004650 <HAL_UART_Transmit>
	return 1;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2000028c 	.word	0x2000028c

08001468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800146c:	b08c      	sub	sp, #48	@ 0x30
 800146e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001470:	f000 fac4 	bl	80019fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001474:	f000 f8ac 	bl	80015d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001478:	f7ff fe2e 	bl	80010d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800147c:	f000 fa24 	bl	80018c8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001480:	f7ff fdb0 	bl	8000fe4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001484:	f7ff fe80 	bl	8001188 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001488:	484b      	ldr	r0, [pc, #300]	@ (80015b8 <main+0x150>)
 800148a:	f000 ff69 	bl	8002360 <HAL_ADCEx_Calibration_Start>
  if (LPS_Init() != HAL_OK)
 800148e:	f7ff ff1f 	bl	80012d0 <LPS_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <main+0x34>
	  Error_Handler();
 8001498:	f000 f8ea 	bl	8001670 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(100);
 800149c:	2064      	movs	r0, #100	@ 0x64
 800149e:	f000 fb0f 	bl	8001ac0 <HAL_Delay>
  LPS_Calibrate(32);
 80014a2:	2020      	movs	r0, #32
 80014a4:	f7ff ff25 	bl	80012f2 <LPS_Calibrate>
  while (1)
  {
	  if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET)
 80014a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014ac:	4843      	ldr	r0, [pc, #268]	@ (80015bc <main+0x154>)
 80014ae:	f001 fa6d 	bl	800298c <HAL_GPIO_ReadPin>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f7      	bne.n	80014a8 <main+0x40>
	  {
		  HAL_ADC_Start(&hadc1);
 80014b8:	483f      	ldr	r0, [pc, #252]	@ (80015b8 <main+0x150>)
 80014ba:	f000 fbfd 	bl	8001cb8 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80014be:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014c2:	483d      	ldr	r0, [pc, #244]	@ (80015b8 <main+0x150>)
 80014c4:	f000 fca6 	bl	8001e14 <HAL_ADC_PollForConversion>

		  float photoresistor_voltage = HAL_ADC_GetValue(&hadc1) * SUPPLIED_VOLTAGE / 4096.0f;
 80014c8:	483b      	ldr	r0, [pc, #236]	@ (80015b8 <main+0x150>)
 80014ca:	f000 fda9 	bl	8002020 <HAL_ADC_GetValue>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fbdf 	bl	8000c94 <__aeabi_ui2f>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4939      	ldr	r1, [pc, #228]	@ (80015c0 <main+0x158>)
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fc32 	bl	8000d44 <__aeabi_fmul>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fce0 	bl	8000eac <__aeabi_fdiv>
 80014ec:	4603      	mov	r3, r0
 80014ee:	617b      	str	r3, [r7, #20]
		  float photoresistor_resistance = FIXED_PHOTORESISTOR_RESISTANCE * (SUPPLIED_VOLTAGE / photoresistor_voltage - 1);
 80014f0:	6979      	ldr	r1, [r7, #20]
 80014f2:	4833      	ldr	r0, [pc, #204]	@ (80015c0 <main+0x158>)
 80014f4:	f7ff fcda 	bl	8000eac <__aeabi_fdiv>
 80014f8:	4603      	mov	r3, r0
 80014fa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fb16 	bl	8000b30 <__aeabi_fsub>
 8001504:	4603      	mov	r3, r0
 8001506:	492f      	ldr	r1, [pc, #188]	@ (80015c4 <main+0x15c>)
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fc1b 	bl	8000d44 <__aeabi_fmul>
 800150e:	4603      	mov	r3, r0
 8001510:	613b      	str	r3, [r7, #16]

		  float lux_level = PHOTORESISTOR_MULTIPLIER / pow(photoresistor_resistance, PHOTORESISTOR_EXPONENT);
 8001512:	6938      	ldr	r0, [r7, #16]
 8001514:	f7fe ff88 	bl	8000428 <__aeabi_f2d>
 8001518:	a323      	add	r3, pc, #140	@ (adr r3, 80015a8 <main+0x140>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	f005 ff45 	bl	80073ac <pow>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	a122      	add	r1, pc, #136	@ (adr r1, 80015b0 <main+0x148>)
 8001528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800152c:	f7ff f8fe 	bl	800072c <__aeabi_ddiv>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff faa6 	bl	8000a88 <__aeabi_d2f>
 800153c:	4603      	mov	r3, r0
 800153e:	60fb      	str	r3, [r7, #12]
		  float light_percentage = photoresistor_voltage * 100.0f / SUPPLIED_VOLTAGE;
 8001540:	4921      	ldr	r1, [pc, #132]	@ (80015c8 <main+0x160>)
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f7ff fbfe 	bl	8000d44 <__aeabi_fmul>
 8001548:	4603      	mov	r3, r0
 800154a:	491d      	ldr	r1, [pc, #116]	@ (80015c0 <main+0x158>)
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fcad 	bl	8000eac <__aeabi_fdiv>
 8001552:	4603      	mov	r3, r0
 8001554:	60bb      	str	r3, [r7, #8]

		  float temp = LPS_Read_Temp();
 8001556:	f7ff fee3 	bl	8001320 <LPS_Read_Temp>
 800155a:	6078      	str	r0, [r7, #4]
		  float pressure = LPS_Read_Pressure();
 800155c:	f7ff ff10 	bl	8001380 <LPS_Read_Pressure>
 8001560:	6038      	str	r0, [r7, #0]

		  printf("P = %.2f %%, L = %.2f lux, T = %.1f C, p = %.1f hPa\n", light_percentage, lux_level, temp, pressure);
 8001562:	68b8      	ldr	r0, [r7, #8]
 8001564:	f7fe ff60 	bl	8000428 <__aeabi_f2d>
 8001568:	4682      	mov	sl, r0
 800156a:	468b      	mov	fp, r1
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f7fe ff5b 	bl	8000428 <__aeabi_f2d>
 8001572:	4604      	mov	r4, r0
 8001574:	460d      	mov	r5, r1
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7fe ff56 	bl	8000428 <__aeabi_f2d>
 800157c:	4680      	mov	r8, r0
 800157e:	4689      	mov	r9, r1
 8001580:	6838      	ldr	r0, [r7, #0]
 8001582:	f7fe ff51 	bl	8000428 <__aeabi_f2d>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800158e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001592:	e9cd 4500 	strd	r4, r5, [sp]
 8001596:	4652      	mov	r2, sl
 8001598:	465b      	mov	r3, fp
 800159a:	480c      	ldr	r0, [pc, #48]	@ (80015cc <main+0x164>)
 800159c:	f003 ff4a 	bl	8005434 <iprintf>
		  HAL_Delay(250);
 80015a0:	20fa      	movs	r0, #250	@ 0xfa
 80015a2:	f000 fa8d 	bl	8001ac0 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET)
 80015a6:	e77f      	b.n	80014a8 <main+0x40>
 80015a8:	60000000 	.word	0x60000000
 80015ac:	3fee6666 	.word	0x3fee6666
 80015b0:	00000000 	.word	0x00000000
 80015b4:	415ab3f0 	.word	0x415ab3f0
 80015b8:	20000204 	.word	0x20000204
 80015bc:	40011000 	.word	0x40011000
 80015c0:	40533333 	.word	0x40533333
 80015c4:	447a0000 	.word	0x447a0000
 80015c8:	42c80000 	.word	0x42c80000
 80015cc:	080084c8 	.word	0x080084c8

080015d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b094      	sub	sp, #80	@ 0x50
 80015d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015da:	2228      	movs	r2, #40	@ 0x28
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 ff7d 	bl	80054de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001600:	2302      	movs	r3, #2
 8001602:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001604:	2301      	movs	r3, #1
 8001606:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001608:	2310      	movs	r3, #16
 800160a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800160c:	2300      	movs	r3, #0
 800160e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001610:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001614:	4618      	mov	r0, r3
 8001616:	f002 fa4f 	bl	8003ab8 <HAL_RCC_OscConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001620:	f000 f826 	bl	8001670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001624:	230f      	movs	r3, #15
 8001626:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001628:	2300      	movs	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f002 fcbc 	bl	8003fbc <HAL_RCC_ClockConfig>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800164a:	f000 f811 	bl	8001670 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800164e:	2302      	movs	r3, #2
 8001650:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	4618      	mov	r0, r3
 800165a:	f002 fe3d 	bl	80042d8 <HAL_RCCEx_PeriphCLKConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001664:	f000 f804 	bl	8001670 <Error_Handler>
  }
}
 8001668:	bf00      	nop
 800166a:	3750      	adds	r7, #80	@ 0x50
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <Error_Handler+0x8>

0800167c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <HAL_MspInit+0x5c>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	4a14      	ldr	r2, [pc, #80]	@ (80016d8 <HAL_MspInit+0x5c>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6193      	str	r3, [r2, #24]
 800168e:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <HAL_MspInit+0x5c>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <HAL_MspInit+0x5c>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	4a0e      	ldr	r2, [pc, #56]	@ (80016d8 <HAL_MspInit+0x5c>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a4:	61d3      	str	r3, [r2, #28]
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <HAL_MspInit+0x5c>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <HAL_MspInit+0x60>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	4a04      	ldr	r2, [pc, #16]	@ (80016dc <HAL_MspInit+0x60>)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40010000 	.word	0x40010000

080016e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <NMI_Handler+0x4>

080016e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <MemManage_Handler+0x4>

080016f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <UsageFault_Handler+0x4>

08001708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001730:	f000 f9aa 	bl	8001a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}

08001738 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return 1;
 800173c:	2301      	movs	r3, #1
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <_kill>:

int _kill(int pid, int sig)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001750:	f003 ff18 	bl	8005584 <__errno>
 8001754:	4603      	mov	r3, r0
 8001756:	2216      	movs	r2, #22
 8001758:	601a      	str	r2, [r3, #0]
  return -1;
 800175a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <_exit>:

void _exit (int status)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800176e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ffe7 	bl	8001746 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <_exit+0x12>

0800177c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	e00a      	b.n	80017a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800178e:	f3af 8000 	nop.w
 8001792:	4601      	mov	r1, r0
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	60ba      	str	r2, [r7, #8]
 800179a:	b2ca      	uxtb	r2, r1
 800179c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	3301      	adds	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	dbf0      	blt.n	800178e <_read+0x12>
  }

  return len;
 80017ac:	687b      	ldr	r3, [r7, #4]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	60f8      	str	r0, [r7, #12]
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	e009      	b.n	80017dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	60ba      	str	r2, [r7, #8]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fe31 	bl	8001438 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3301      	adds	r3, #1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	dbf1      	blt.n	80017c8 <_write+0x12>
  }
  return len;
 80017e4:	687b      	ldr	r3, [r7, #4]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <_close>:

int _close(int file)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001814:	605a      	str	r2, [r3, #4]
  return 0;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <_isatty>:

int _isatty(int file)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800182a:	2301      	movs	r3, #1
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001836:	b480      	push	{r7}
 8001838:	b085      	sub	sp, #20
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
	...

08001850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001858:	4a14      	ldr	r2, [pc, #80]	@ (80018ac <_sbrk+0x5c>)
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <_sbrk+0x60>)
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001864:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	@ (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001880:	f003 fe80 	bl	8005584 <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4a05      	ldr	r2, [pc, #20]	@ (80018b4 <_sbrk+0x64>)
 80018a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20005000 	.word	0x20005000
 80018b0:	00000400 	.word	0x00000400
 80018b4:	20000288 	.word	0x20000288
 80018b8:	20000428 	.word	0x20000428

080018bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	@ (8001918 <MX_USART2_UART_Init+0x50>)
 80018d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018ec:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018ee:	220c      	movs	r2, #12
 80018f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f2:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 8001900:	f002 fe56 	bl	80045b0 <HAL_UART_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800190a:	f7ff feb1 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	2000028c 	.word	0x2000028c
 8001918:	40004400 	.word	0x40004400

0800191c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0310 	add.w	r3, r7, #16
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a1b      	ldr	r2, [pc, #108]	@ (80019a4 <HAL_UART_MspInit+0x88>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d12f      	bne.n	800199c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800193c:	4b1a      	ldr	r3, [pc, #104]	@ (80019a8 <HAL_UART_MspInit+0x8c>)
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	4a19      	ldr	r2, [pc, #100]	@ (80019a8 <HAL_UART_MspInit+0x8c>)
 8001942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001946:	61d3      	str	r3, [r2, #28]
 8001948:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <HAL_UART_MspInit+0x8c>)
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001954:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <HAL_UART_MspInit+0x8c>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4a13      	ldr	r2, [pc, #76]	@ (80019a8 <HAL_UART_MspInit+0x8c>)
 800195a:	f043 0304 	orr.w	r3, r3, #4
 800195e:	6193      	str	r3, [r2, #24]
 8001960:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <HAL_UART_MspInit+0x8c>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800196c:	2304      	movs	r3, #4
 800196e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001978:	f107 0310 	add.w	r3, r7, #16
 800197c:	4619      	mov	r1, r3
 800197e:	480b      	ldr	r0, [pc, #44]	@ (80019ac <HAL_UART_MspInit+0x90>)
 8001980:	f000 fe80 	bl	8002684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001984:	2308      	movs	r3, #8
 8001986:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	4619      	mov	r1, r3
 8001996:	4805      	ldr	r0, [pc, #20]	@ (80019ac <HAL_UART_MspInit+0x90>)
 8001998:	f000 fe74 	bl	8002684 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800199c:	bf00      	nop
 800199e:	3720      	adds	r7, #32
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40004400 	.word	0x40004400
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40010800 	.word	0x40010800

080019b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b0:	f7ff ff84 	bl	80018bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b4:	480b      	ldr	r0, [pc, #44]	@ (80019e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019b6:	490c      	ldr	r1, [pc, #48]	@ (80019e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019b8:	4a0c      	ldr	r2, [pc, #48]	@ (80019ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a09      	ldr	r2, [pc, #36]	@ (80019f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019cc:	4c09      	ldr	r4, [pc, #36]	@ (80019f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019da:	f003 fdd9 	bl	8005590 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019de:	f7ff fd43 	bl	8001468 <main>
  bx lr
 80019e2:	4770      	bx	lr
  ldr r0, =_sdata
 80019e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80019ec:	08008920 	.word	0x08008920
  ldr r2, =_sbss
 80019f0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80019f4:	20000424 	.word	0x20000424

080019f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC1_2_IRQHandler>
	...

080019fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a00:	4b08      	ldr	r3, [pc, #32]	@ (8001a24 <HAL_Init+0x28>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a07      	ldr	r2, [pc, #28]	@ (8001a24 <HAL_Init+0x28>)
 8001a06:	f043 0310 	orr.w	r3, r3, #16
 8001a0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a0c:	2003      	movs	r0, #3
 8001a0e:	f000 fe05 	bl	800261c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a12:	200f      	movs	r0, #15
 8001a14:	f000 f808 	bl	8001a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a18:	f7ff fe30 	bl	800167c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40022000 	.word	0x40022000

08001a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a30:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <HAL_InitTick+0x54>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <HAL_InitTick+0x58>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 fe0f 	bl	800266a <HAL_SYSTICK_Config>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00e      	b.n	8001a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d80a      	bhi.n	8001a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a64:	f000 fde5 	bl	8002632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a68:	4a06      	ldr	r2, [pc, #24]	@ (8001a84 <HAL_InitTick+0x5c>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	20000008 	.word	0x20000008
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a8c:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <HAL_IncTick+0x1c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <HAL_IncTick+0x20>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a03      	ldr	r2, [pc, #12]	@ (8001aa8 <HAL_IncTick+0x20>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	20000008 	.word	0x20000008
 8001aa8:	200002d4 	.word	0x200002d4

08001aac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab0:	4b02      	ldr	r3, [pc, #8]	@ (8001abc <HAL_GetTick+0x10>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	200002d4 	.word	0x200002d4

08001ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac8:	f7ff fff0 	bl	8001aac <HAL_GetTick>
 8001acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ad8:	d005      	beq.n	8001ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ada:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <HAL_Delay+0x44>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ae6:	bf00      	nop
 8001ae8:	f7ff ffe0 	bl	8001aac <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d8f7      	bhi.n	8001ae8 <HAL_Delay+0x28>
  {
  }
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000008 	.word	0x20000008

08001b08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e0be      	b.n	8001ca8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d109      	bne.n	8001b4c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fa8a 	bl	8001060 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 fbc5 	bl	80022dc <ADC_ConversionStop_Disable>
 8001b52:	4603      	mov	r3, r0
 8001b54:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f040 8099 	bne.w	8001c96 <HAL_ADC_Init+0x18e>
 8001b64:	7dfb      	ldrb	r3, [r7, #23]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f040 8095 	bne.w	8001c96 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b70:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b74:	f023 0302 	bic.w	r3, r3, #2
 8001b78:	f043 0202 	orr.w	r2, r3, #2
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b88:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	7b1b      	ldrb	r3, [r3, #12]
 8001b8e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b90:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ba0:	d003      	beq.n	8001baa <HAL_ADC_Init+0xa2>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d102      	bne.n	8001bb0 <HAL_ADC_Init+0xa8>
 8001baa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bae:	e000      	b.n	8001bb2 <HAL_ADC_Init+0xaa>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	7d1b      	ldrb	r3, [r3, #20]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d119      	bne.n	8001bf4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	7b1b      	ldrb	r3, [r3, #12]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d109      	bne.n	8001bdc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	035a      	lsls	r2, r3, #13
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	e00b      	b.n	8001bf4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be0:	f043 0220 	orr.w	r2, r3, #32
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bec:	f043 0201 	orr.w	r2, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	4b28      	ldr	r3, [pc, #160]	@ (8001cb0 <HAL_ADC_Init+0x1a8>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	68b9      	ldr	r1, [r7, #8]
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c24:	d003      	beq.n	8001c2e <HAL_ADC_Init+0x126>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d104      	bne.n	8001c38 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	051b      	lsls	r3, r3, #20
 8001c36:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <HAL_ADC_Init+0x1ac>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d10b      	bne.n	8001c74 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c66:	f023 0303 	bic.w	r3, r3, #3
 8001c6a:	f043 0201 	orr.w	r2, r3, #1
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c72:	e018      	b.n	8001ca6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c78:	f023 0312 	bic.w	r3, r3, #18
 8001c7c:	f043 0210 	orr.w	r2, r3, #16
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c88:	f043 0201 	orr.w	r2, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c94:	e007      	b.n	8001ca6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c9a:	f043 0210 	orr.w	r2, r3, #16
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	ffe1f7fd 	.word	0xffe1f7fd
 8001cb4:	ff1f0efe 	.word	0xff1f0efe

08001cb8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADC_Start+0x1a>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e098      	b.n	8001e04 <HAL_ADC_Start+0x14c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 faa4 	bl	8002228 <ADC_Enable>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f040 8087 	bne.w	8001dfa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a41      	ldr	r2, [pc, #260]	@ (8001e0c <HAL_ADC_Start+0x154>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d105      	bne.n	8001d16 <HAL_ADC_Start+0x5e>
 8001d0a:	4b41      	ldr	r3, [pc, #260]	@ (8001e10 <HAL_ADC_Start+0x158>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d115      	bne.n	8001d42 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d026      	beq.n	8001d7e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d34:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d38:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d40:	e01d      	b.n	8001d7e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d46:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a2f      	ldr	r2, [pc, #188]	@ (8001e10 <HAL_ADC_Start+0x158>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d004      	beq.n	8001d62 <HAL_ADC_Start+0xaa>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e0c <HAL_ADC_Start+0x154>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d10d      	bne.n	8001d7e <HAL_ADC_Start+0xc6>
 8001d62:	4b2b      	ldr	r3, [pc, #172]	@ (8001e10 <HAL_ADC_Start+0x158>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d007      	beq.n	8001d7e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d72:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d76:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d006      	beq.n	8001d98 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8e:	f023 0206 	bic.w	r2, r3, #6
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d96:	e002      	b.n	8001d9e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f06f 0202 	mvn.w	r2, #2
 8001dae:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001dba:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001dbe:	d113      	bne.n	8001de8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001dc4:	4a11      	ldr	r2, [pc, #68]	@ (8001e0c <HAL_ADC_Start+0x154>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d105      	bne.n	8001dd6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001dca:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <HAL_ADC_Start+0x158>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d108      	bne.n	8001de8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	e00c      	b.n	8001e02 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	e003      	b.n	8001e02 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40012800 	.word	0x40012800
 8001e10:	40012400 	.word	0x40012400

08001e14 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e2a:	f7ff fe3f 	bl	8001aac <HAL_GetTick>
 8001e2e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00b      	beq.n	8001e56 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e42:	f043 0220 	orr.w	r2, r3, #32
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0d3      	b.n	8001ffe <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d131      	bne.n	8001ec8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d12a      	bne.n	8001ec8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e72:	e021      	b.n	8001eb8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e7a:	d01d      	beq.n	8001eb8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d007      	beq.n	8001e92 <HAL_ADC_PollForConversion+0x7e>
 8001e82:	f7ff fe13 	bl	8001aac <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d212      	bcs.n	8001eb8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10b      	bne.n	8001eb8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea4:	f043 0204 	orr.w	r2, r3, #4
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e0a2      	b.n	8001ffe <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0d6      	beq.n	8001e74 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ec6:	e070      	b.n	8001faa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ec8:	4b4f      	ldr	r3, [pc, #316]	@ (8002008 <HAL_ADC_PollForConversion+0x1f4>)
 8001eca:	681c      	ldr	r4, [r3, #0]
 8001ecc:	2002      	movs	r0, #2
 8001ece:	f002 fab9 	bl	8004444 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6919      	ldr	r1, [r3, #16]
 8001ede:	4b4b      	ldr	r3, [pc, #300]	@ (800200c <HAL_ADC_PollForConversion+0x1f8>)
 8001ee0:	400b      	ands	r3, r1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d118      	bne.n	8001f18 <HAL_ADC_PollForConversion+0x104>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68d9      	ldr	r1, [r3, #12]
 8001eec:	4b48      	ldr	r3, [pc, #288]	@ (8002010 <HAL_ADC_PollForConversion+0x1fc>)
 8001eee:	400b      	ands	r3, r1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d111      	bne.n	8001f18 <HAL_ADC_PollForConversion+0x104>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6919      	ldr	r1, [r3, #16]
 8001efa:	4b46      	ldr	r3, [pc, #280]	@ (8002014 <HAL_ADC_PollForConversion+0x200>)
 8001efc:	400b      	ands	r3, r1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d108      	bne.n	8001f14 <HAL_ADC_PollForConversion+0x100>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68d9      	ldr	r1, [r3, #12]
 8001f08:	4b43      	ldr	r3, [pc, #268]	@ (8002018 <HAL_ADC_PollForConversion+0x204>)
 8001f0a:	400b      	ands	r3, r1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_PollForConversion+0x100>
 8001f10:	2314      	movs	r3, #20
 8001f12:	e020      	b.n	8001f56 <HAL_ADC_PollForConversion+0x142>
 8001f14:	2329      	movs	r3, #41	@ 0x29
 8001f16:	e01e      	b.n	8001f56 <HAL_ADC_PollForConversion+0x142>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6919      	ldr	r1, [r3, #16]
 8001f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002014 <HAL_ADC_PollForConversion+0x200>)
 8001f20:	400b      	ands	r3, r1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_ADC_PollForConversion+0x120>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68d9      	ldr	r1, [r3, #12]
 8001f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8002018 <HAL_ADC_PollForConversion+0x204>)
 8001f2e:	400b      	ands	r3, r1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00d      	beq.n	8001f50 <HAL_ADC_PollForConversion+0x13c>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6919      	ldr	r1, [r3, #16]
 8001f3a:	4b38      	ldr	r3, [pc, #224]	@ (800201c <HAL_ADC_PollForConversion+0x208>)
 8001f3c:	400b      	ands	r3, r1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d108      	bne.n	8001f54 <HAL_ADC_PollForConversion+0x140>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68d9      	ldr	r1, [r3, #12]
 8001f48:	4b34      	ldr	r3, [pc, #208]	@ (800201c <HAL_ADC_PollForConversion+0x208>)
 8001f4a:	400b      	ands	r3, r1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_ADC_PollForConversion+0x140>
 8001f50:	2354      	movs	r3, #84	@ 0x54
 8001f52:	e000      	b.n	8001f56 <HAL_ADC_PollForConversion+0x142>
 8001f54:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001f56:	fb02 f303 	mul.w	r3, r2, r3
 8001f5a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f5c:	e021      	b.n	8001fa2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f64:	d01a      	beq.n	8001f9c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d007      	beq.n	8001f7c <HAL_ADC_PollForConversion+0x168>
 8001f6c:	f7ff fd9e 	bl	8001aac <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d20f      	bcs.n	8001f9c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d90b      	bls.n	8001f9c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f88:	f043 0204 	orr.w	r2, r3, #4
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e030      	b.n	8001ffe <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d8d9      	bhi.n	8001f5e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f06f 0212 	mvn.w	r2, #18
 8001fb2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001fca:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001fce:	d115      	bne.n	8001ffc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d111      	bne.n	8001ffc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d105      	bne.n	8001ffc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff4:	f043 0201 	orr.w	r2, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	371c      	adds	r7, #28
 8002002:	46bd      	mov	sp, r7
 8002004:	bd90      	pop	{r4, r7, pc}
 8002006:	bf00      	nop
 8002008:	20000000 	.word	0x20000000
 800200c:	24924924 	.word	0x24924924
 8002010:	00924924 	.word	0x00924924
 8002014:	12492492 	.word	0x12492492
 8002018:	00492492 	.word	0x00492492
 800201c:	00249249 	.word	0x00249249

08002020 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x20>
 8002054:	2302      	movs	r3, #2
 8002056:	e0dc      	b.n	8002212 <HAL_ADC_ConfigChannel+0x1da>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b06      	cmp	r3, #6
 8002066:	d81c      	bhi.n	80020a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	3b05      	subs	r3, #5
 800207a:	221f      	movs	r2, #31
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	4019      	ands	r1, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	3b05      	subs	r3, #5
 8002094:	fa00 f203 	lsl.w	r2, r0, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	635a      	str	r2, [r3, #52]	@ 0x34
 80020a0:	e03c      	b.n	800211c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b0c      	cmp	r3, #12
 80020a8:	d81c      	bhi.n	80020e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	3b23      	subs	r3, #35	@ 0x23
 80020bc:	221f      	movs	r2, #31
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	4019      	ands	r1, r3
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	3b23      	subs	r3, #35	@ 0x23
 80020d6:	fa00 f203 	lsl.w	r2, r0, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80020e2:	e01b      	b.n	800211c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	3b41      	subs	r3, #65	@ 0x41
 80020f6:	221f      	movs	r2, #31
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	4019      	ands	r1, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	3b41      	subs	r3, #65	@ 0x41
 8002110:	fa00 f203 	lsl.w	r2, r0, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b09      	cmp	r3, #9
 8002122:	d91c      	bls.n	800215e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68d9      	ldr	r1, [r3, #12]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4613      	mov	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4413      	add	r3, r2
 8002134:	3b1e      	subs	r3, #30
 8002136:	2207      	movs	r2, #7
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	4019      	ands	r1, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	6898      	ldr	r0, [r3, #8]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4613      	mov	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4413      	add	r3, r2
 800214e:	3b1e      	subs	r3, #30
 8002150:	fa00 f203 	lsl.w	r2, r0, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	60da      	str	r2, [r3, #12]
 800215c:	e019      	b.n	8002192 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6919      	ldr	r1, [r3, #16]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	2207      	movs	r2, #7
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	4019      	ands	r1, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	6898      	ldr	r0, [r3, #8]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	fa00 f203 	lsl.w	r2, r0, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b10      	cmp	r3, #16
 8002198:	d003      	beq.n	80021a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800219e:	2b11      	cmp	r3, #17
 80021a0:	d132      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a1d      	ldr	r2, [pc, #116]	@ (800221c <HAL_ADC_ConfigChannel+0x1e4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d125      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d126      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80021c8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b10      	cmp	r3, #16
 80021d0:	d11a      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021d2:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <HAL_ADC_ConfigChannel+0x1e8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a13      	ldr	r2, [pc, #76]	@ (8002224 <HAL_ADC_ConfigChannel+0x1ec>)
 80021d8:	fba2 2303 	umull	r2, r3, r2, r3
 80021dc:	0c9a      	lsrs	r2, r3, #18
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021e8:	e002      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f9      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x1b2>
 80021f6:	e007      	b.n	8002208 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fc:	f043 0220 	orr.w	r2, r3, #32
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	40012400 	.word	0x40012400
 8002220:	20000000 	.word	0x20000000
 8002224:	431bde83 	.word	0x431bde83

08002228 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d040      	beq.n	80022c8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0201 	orr.w	r2, r2, #1
 8002254:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002256:	4b1f      	ldr	r3, [pc, #124]	@ (80022d4 <ADC_Enable+0xac>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1f      	ldr	r2, [pc, #124]	@ (80022d8 <ADC_Enable+0xb0>)
 800225c:	fba2 2303 	umull	r2, r3, r2, r3
 8002260:	0c9b      	lsrs	r3, r3, #18
 8002262:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002264:	e002      	b.n	800226c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	3b01      	subs	r3, #1
 800226a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f9      	bne.n	8002266 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002272:	f7ff fc1b 	bl	8001aac <HAL_GetTick>
 8002276:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002278:	e01f      	b.n	80022ba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800227a:	f7ff fc17 	bl	8001aac <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d918      	bls.n	80022ba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b01      	cmp	r3, #1
 8002294:	d011      	beq.n	80022ba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229a:	f043 0210 	orr.w	r2, r3, #16
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a6:	f043 0201 	orr.w	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e007      	b.n	80022ca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d1d8      	bne.n	800227a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000000 	.word	0x20000000
 80022d8:	431bde83 	.word	0x431bde83

080022dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d12e      	bne.n	8002354 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0201 	bic.w	r2, r2, #1
 8002304:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002306:	f7ff fbd1 	bl	8001aac <HAL_GetTick>
 800230a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800230c:	e01b      	b.n	8002346 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800230e:	f7ff fbcd 	bl	8001aac <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d914      	bls.n	8002346 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b01      	cmp	r3, #1
 8002328:	d10d      	bne.n	8002346 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232e:	f043 0210 	orr.w	r2, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233a:	f043 0201 	orr.w	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e007      	b.n	8002356 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b01      	cmp	r3, #1
 8002352:	d0dc      	beq.n	800230e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_ADCEx_Calibration_Start+0x1e>
 800237a:	2302      	movs	r3, #2
 800237c:	e097      	b.n	80024ae <HAL_ADCEx_Calibration_Start+0x14e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff ffa8 	bl	80022dc <ADC_ConversionStop_Disable>
 800238c:	4603      	mov	r3, r0
 800238e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ff49 	bl	8002228 <ADC_Enable>
 8002396:	4603      	mov	r3, r0
 8002398:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800239a:	7dfb      	ldrb	r3, [r7, #23]
 800239c:	2b00      	cmp	r3, #0
 800239e:	f040 8081 	bne.w	80024a4 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023aa:	f023 0302 	bic.w	r3, r3, #2
 80023ae:	f043 0202 	orr.w	r2, r3, #2
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80023b6:	4b40      	ldr	r3, [pc, #256]	@ (80024b8 <HAL_ADCEx_Calibration_Start+0x158>)
 80023b8:	681c      	ldr	r4, [r3, #0]
 80023ba:	2002      	movs	r0, #2
 80023bc:	f002 f842 	bl	8004444 <HAL_RCCEx_GetPeriphCLKFreq>
 80023c0:	4603      	mov	r3, r0
 80023c2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80023c6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80023c8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80023ca:	e002      	b.n	80023d2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f9      	bne.n	80023cc <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0208 	orr.w	r2, r2, #8
 80023e6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80023e8:	f7ff fb60 	bl	8001aac <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80023ee:	e01b      	b.n	8002428 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80023f0:	f7ff fb5c 	bl	8001aac <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b0a      	cmp	r3, #10
 80023fc:	d914      	bls.n	8002428 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00d      	beq.n	8002428 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002410:	f023 0312 	bic.w	r3, r3, #18
 8002414:	f043 0210 	orr.w	r2, r3, #16
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e042      	b.n	80024ae <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1dc      	bne.n	80023f0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0204 	orr.w	r2, r2, #4
 8002444:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002446:	f7ff fb31 	bl	8001aac <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800244c:	e01b      	b.n	8002486 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800244e:	f7ff fb2d 	bl	8001aac <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b0a      	cmp	r3, #10
 800245a:	d914      	bls.n	8002486 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00d      	beq.n	8002486 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246e:	f023 0312 	bic.w	r3, r3, #18
 8002472:	f043 0210 	orr.w	r2, r3, #16
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e013      	b.n	80024ae <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1dc      	bne.n	800244e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002498:	f023 0303 	bic.w	r3, r3, #3
 800249c:	f043 0201 	orr.w	r2, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd90      	pop	{r4, r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000000 	.word	0x20000000

080024bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024d8:	4013      	ands	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ee:	4a04      	ldr	r2, [pc, #16]	@ (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	60d3      	str	r3, [r2, #12]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002508:	4b04      	ldr	r3, [pc, #16]	@ (800251c <__NVIC_GetPriorityGrouping+0x18>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	f003 0307 	and.w	r3, r3, #7
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	2b00      	cmp	r3, #0
 8002532:	db0a      	blt.n	800254a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	490c      	ldr	r1, [pc, #48]	@ (800256c <__NVIC_SetPriority+0x4c>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	0112      	lsls	r2, r2, #4
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	440b      	add	r3, r1
 8002544:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002548:	e00a      	b.n	8002560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4908      	ldr	r1, [pc, #32]	@ (8002570 <__NVIC_SetPriority+0x50>)
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	3b04      	subs	r3, #4
 8002558:	0112      	lsls	r2, r2, #4
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	440b      	add	r3, r1
 800255e:	761a      	strb	r2, [r3, #24]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000e100 	.word	0xe000e100
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	@ 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f1c3 0307 	rsb	r3, r3, #7
 800258e:	2b04      	cmp	r3, #4
 8002590:	bf28      	it	cs
 8002592:	2304      	movcs	r3, #4
 8002594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3304      	adds	r3, #4
 800259a:	2b06      	cmp	r3, #6
 800259c:	d902      	bls.n	80025a4 <NVIC_EncodePriority+0x30>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3b03      	subs	r3, #3
 80025a2:	e000      	b.n	80025a6 <NVIC_EncodePriority+0x32>
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	401a      	ands	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	43d9      	mvns	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	4313      	orrs	r3, r2
         );
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3724      	adds	r7, #36	@ 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025e8:	d301      	bcc.n	80025ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ea:	2301      	movs	r3, #1
 80025ec:	e00f      	b.n	800260e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002618 <SysTick_Config+0x40>)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025f6:	210f      	movs	r1, #15
 80025f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025fc:	f7ff ff90 	bl	8002520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002600:	4b05      	ldr	r3, [pc, #20]	@ (8002618 <SysTick_Config+0x40>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002606:	4b04      	ldr	r3, [pc, #16]	@ (8002618 <SysTick_Config+0x40>)
 8002608:	2207      	movs	r2, #7
 800260a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	e000e010 	.word	0xe000e010

0800261c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff ff49 	bl	80024bc <__NVIC_SetPriorityGrouping>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002632:	b580      	push	{r7, lr}
 8002634:	b086      	sub	sp, #24
 8002636:	af00      	add	r7, sp, #0
 8002638:	4603      	mov	r3, r0
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002644:	f7ff ff5e 	bl	8002504 <__NVIC_GetPriorityGrouping>
 8002648:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	6978      	ldr	r0, [r7, #20]
 8002650:	f7ff ff90 	bl	8002574 <NVIC_EncodePriority>
 8002654:	4602      	mov	r2, r0
 8002656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff5f 	bl	8002520 <__NVIC_SetPriority>
}
 8002662:	bf00      	nop
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff ffb0 	bl	80025d8 <SysTick_Config>
 8002678:	4603      	mov	r3, r0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002684:	b480      	push	{r7}
 8002686:	b08b      	sub	sp, #44	@ 0x2c
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002692:	2300      	movs	r3, #0
 8002694:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002696:	e169      	b.n	800296c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002698:	2201      	movs	r2, #1
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	69fa      	ldr	r2, [r7, #28]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	f040 8158 	bne.w	8002966 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4a9a      	ldr	r2, [pc, #616]	@ (8002924 <HAL_GPIO_Init+0x2a0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d05e      	beq.n	800277e <HAL_GPIO_Init+0xfa>
 80026c0:	4a98      	ldr	r2, [pc, #608]	@ (8002924 <HAL_GPIO_Init+0x2a0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d875      	bhi.n	80027b2 <HAL_GPIO_Init+0x12e>
 80026c6:	4a98      	ldr	r2, [pc, #608]	@ (8002928 <HAL_GPIO_Init+0x2a4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d058      	beq.n	800277e <HAL_GPIO_Init+0xfa>
 80026cc:	4a96      	ldr	r2, [pc, #600]	@ (8002928 <HAL_GPIO_Init+0x2a4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d86f      	bhi.n	80027b2 <HAL_GPIO_Init+0x12e>
 80026d2:	4a96      	ldr	r2, [pc, #600]	@ (800292c <HAL_GPIO_Init+0x2a8>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d052      	beq.n	800277e <HAL_GPIO_Init+0xfa>
 80026d8:	4a94      	ldr	r2, [pc, #592]	@ (800292c <HAL_GPIO_Init+0x2a8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d869      	bhi.n	80027b2 <HAL_GPIO_Init+0x12e>
 80026de:	4a94      	ldr	r2, [pc, #592]	@ (8002930 <HAL_GPIO_Init+0x2ac>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d04c      	beq.n	800277e <HAL_GPIO_Init+0xfa>
 80026e4:	4a92      	ldr	r2, [pc, #584]	@ (8002930 <HAL_GPIO_Init+0x2ac>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d863      	bhi.n	80027b2 <HAL_GPIO_Init+0x12e>
 80026ea:	4a92      	ldr	r2, [pc, #584]	@ (8002934 <HAL_GPIO_Init+0x2b0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d046      	beq.n	800277e <HAL_GPIO_Init+0xfa>
 80026f0:	4a90      	ldr	r2, [pc, #576]	@ (8002934 <HAL_GPIO_Init+0x2b0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d85d      	bhi.n	80027b2 <HAL_GPIO_Init+0x12e>
 80026f6:	2b12      	cmp	r3, #18
 80026f8:	d82a      	bhi.n	8002750 <HAL_GPIO_Init+0xcc>
 80026fa:	2b12      	cmp	r3, #18
 80026fc:	d859      	bhi.n	80027b2 <HAL_GPIO_Init+0x12e>
 80026fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002704 <HAL_GPIO_Init+0x80>)
 8002700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002704:	0800277f 	.word	0x0800277f
 8002708:	08002759 	.word	0x08002759
 800270c:	0800276b 	.word	0x0800276b
 8002710:	080027ad 	.word	0x080027ad
 8002714:	080027b3 	.word	0x080027b3
 8002718:	080027b3 	.word	0x080027b3
 800271c:	080027b3 	.word	0x080027b3
 8002720:	080027b3 	.word	0x080027b3
 8002724:	080027b3 	.word	0x080027b3
 8002728:	080027b3 	.word	0x080027b3
 800272c:	080027b3 	.word	0x080027b3
 8002730:	080027b3 	.word	0x080027b3
 8002734:	080027b3 	.word	0x080027b3
 8002738:	080027b3 	.word	0x080027b3
 800273c:	080027b3 	.word	0x080027b3
 8002740:	080027b3 	.word	0x080027b3
 8002744:	080027b3 	.word	0x080027b3
 8002748:	08002761 	.word	0x08002761
 800274c:	08002775 	.word	0x08002775
 8002750:	4a79      	ldr	r2, [pc, #484]	@ (8002938 <HAL_GPIO_Init+0x2b4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002756:	e02c      	b.n	80027b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	623b      	str	r3, [r7, #32]
          break;
 800275e:	e029      	b.n	80027b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	3304      	adds	r3, #4
 8002766:	623b      	str	r3, [r7, #32]
          break;
 8002768:	e024      	b.n	80027b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	3308      	adds	r3, #8
 8002770:	623b      	str	r3, [r7, #32]
          break;
 8002772:	e01f      	b.n	80027b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	330c      	adds	r3, #12
 800277a:	623b      	str	r3, [r7, #32]
          break;
 800277c:	e01a      	b.n	80027b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d102      	bne.n	800278c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002786:	2304      	movs	r3, #4
 8002788:	623b      	str	r3, [r7, #32]
          break;
 800278a:	e013      	b.n	80027b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d105      	bne.n	80027a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002794:	2308      	movs	r3, #8
 8002796:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	611a      	str	r2, [r3, #16]
          break;
 800279e:	e009      	b.n	80027b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027a0:	2308      	movs	r3, #8
 80027a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	615a      	str	r2, [r3, #20]
          break;
 80027aa:	e003      	b.n	80027b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027ac:	2300      	movs	r3, #0
 80027ae:	623b      	str	r3, [r7, #32]
          break;
 80027b0:	e000      	b.n	80027b4 <HAL_GPIO_Init+0x130>
          break;
 80027b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2bff      	cmp	r3, #255	@ 0xff
 80027b8:	d801      	bhi.n	80027be <HAL_GPIO_Init+0x13a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	e001      	b.n	80027c2 <HAL_GPIO_Init+0x13e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3304      	adds	r3, #4
 80027c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	2bff      	cmp	r3, #255	@ 0xff
 80027c8:	d802      	bhi.n	80027d0 <HAL_GPIO_Init+0x14c>
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	e002      	b.n	80027d6 <HAL_GPIO_Init+0x152>
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	3b08      	subs	r3, #8
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	210f      	movs	r1, #15
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	fa01 f303 	lsl.w	r3, r1, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	401a      	ands	r2, r3
 80027e8:	6a39      	ldr	r1, [r7, #32]
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	431a      	orrs	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 80b1 	beq.w	8002966 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002804:	4b4d      	ldr	r3, [pc, #308]	@ (800293c <HAL_GPIO_Init+0x2b8>)
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	4a4c      	ldr	r2, [pc, #304]	@ (800293c <HAL_GPIO_Init+0x2b8>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6193      	str	r3, [r2, #24]
 8002810:	4b4a      	ldr	r3, [pc, #296]	@ (800293c <HAL_GPIO_Init+0x2b8>)
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800281c:	4a48      	ldr	r2, [pc, #288]	@ (8002940 <HAL_GPIO_Init+0x2bc>)
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	089b      	lsrs	r3, r3, #2
 8002822:	3302      	adds	r3, #2
 8002824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002828:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	220f      	movs	r2, #15
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4013      	ands	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a40      	ldr	r2, [pc, #256]	@ (8002944 <HAL_GPIO_Init+0x2c0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d013      	beq.n	8002870 <HAL_GPIO_Init+0x1ec>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a3f      	ldr	r2, [pc, #252]	@ (8002948 <HAL_GPIO_Init+0x2c4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d00d      	beq.n	800286c <HAL_GPIO_Init+0x1e8>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a3e      	ldr	r2, [pc, #248]	@ (800294c <HAL_GPIO_Init+0x2c8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d007      	beq.n	8002868 <HAL_GPIO_Init+0x1e4>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a3d      	ldr	r2, [pc, #244]	@ (8002950 <HAL_GPIO_Init+0x2cc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d101      	bne.n	8002864 <HAL_GPIO_Init+0x1e0>
 8002860:	2303      	movs	r3, #3
 8002862:	e006      	b.n	8002872 <HAL_GPIO_Init+0x1ee>
 8002864:	2304      	movs	r3, #4
 8002866:	e004      	b.n	8002872 <HAL_GPIO_Init+0x1ee>
 8002868:	2302      	movs	r3, #2
 800286a:	e002      	b.n	8002872 <HAL_GPIO_Init+0x1ee>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <HAL_GPIO_Init+0x1ee>
 8002870:	2300      	movs	r3, #0
 8002872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002874:	f002 0203 	and.w	r2, r2, #3
 8002878:	0092      	lsls	r2, r2, #2
 800287a:	4093      	lsls	r3, r2
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002882:	492f      	ldr	r1, [pc, #188]	@ (8002940 <HAL_GPIO_Init+0x2bc>)
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	089b      	lsrs	r3, r3, #2
 8002888:	3302      	adds	r3, #2
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d006      	beq.n	80028aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800289c:	4b2d      	ldr	r3, [pc, #180]	@ (8002954 <HAL_GPIO_Init+0x2d0>)
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	492c      	ldr	r1, [pc, #176]	@ (8002954 <HAL_GPIO_Init+0x2d0>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	608b      	str	r3, [r1, #8]
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002954 <HAL_GPIO_Init+0x2d0>)
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	4928      	ldr	r1, [pc, #160]	@ (8002954 <HAL_GPIO_Init+0x2d0>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d006      	beq.n	80028d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028c4:	4b23      	ldr	r3, [pc, #140]	@ (8002954 <HAL_GPIO_Init+0x2d0>)
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	4922      	ldr	r1, [pc, #136]	@ (8002954 <HAL_GPIO_Init+0x2d0>)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60cb      	str	r3, [r1, #12]
 80028d0:	e006      	b.n	80028e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028d2:	4b20      	ldr	r3, [pc, #128]	@ (8002954 <HAL_GPIO_Init+0x2d0>)
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	43db      	mvns	r3, r3
 80028da:	491e      	ldr	r1, [pc, #120]	@ (8002954 <HAL_GPIO_Init+0x2d0>)
 80028dc:	4013      	ands	r3, r2
 80028de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d006      	beq.n	80028fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028ec:	4b19      	ldr	r3, [pc, #100]	@ (8002954 <HAL_GPIO_Init+0x2d0>)
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	4918      	ldr	r1, [pc, #96]	@ (8002954 <HAL_GPIO_Init+0x2d0>)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]
 80028f8:	e006      	b.n	8002908 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028fa:	4b16      	ldr	r3, [pc, #88]	@ (8002954 <HAL_GPIO_Init+0x2d0>)
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	43db      	mvns	r3, r3
 8002902:	4914      	ldr	r1, [pc, #80]	@ (8002954 <HAL_GPIO_Init+0x2d0>)
 8002904:	4013      	ands	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d021      	beq.n	8002958 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002914:	4b0f      	ldr	r3, [pc, #60]	@ (8002954 <HAL_GPIO_Init+0x2d0>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	490e      	ldr	r1, [pc, #56]	@ (8002954 <HAL_GPIO_Init+0x2d0>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	600b      	str	r3, [r1, #0]
 8002920:	e021      	b.n	8002966 <HAL_GPIO_Init+0x2e2>
 8002922:	bf00      	nop
 8002924:	10320000 	.word	0x10320000
 8002928:	10310000 	.word	0x10310000
 800292c:	10220000 	.word	0x10220000
 8002930:	10210000 	.word	0x10210000
 8002934:	10120000 	.word	0x10120000
 8002938:	10110000 	.word	0x10110000
 800293c:	40021000 	.word	0x40021000
 8002940:	40010000 	.word	0x40010000
 8002944:	40010800 	.word	0x40010800
 8002948:	40010c00 	.word	0x40010c00
 800294c:	40011000 	.word	0x40011000
 8002950:	40011400 	.word	0x40011400
 8002954:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002958:	4b0b      	ldr	r3, [pc, #44]	@ (8002988 <HAL_GPIO_Init+0x304>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	43db      	mvns	r3, r3
 8002960:	4909      	ldr	r1, [pc, #36]	@ (8002988 <HAL_GPIO_Init+0x304>)
 8002962:	4013      	ands	r3, r2
 8002964:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	3301      	adds	r3, #1
 800296a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002972:	fa22 f303 	lsr.w	r3, r2, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	f47f ae8e 	bne.w	8002698 <HAL_GPIO_Init+0x14>
  }
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	372c      	adds	r7, #44	@ 0x2c
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	40010400 	.word	0x40010400

0800298c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	887b      	ldrh	r3, [r7, #2]
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
 80029a8:	e001      	b.n	80029ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029aa:	2300      	movs	r3, #0
 80029ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr

080029ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	807b      	strh	r3, [r7, #2]
 80029c6:	4613      	mov	r3, r2
 80029c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029ca:	787b      	ldrb	r3, [r7, #1]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029d0:	887a      	ldrh	r2, [r7, #2]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029d6:	e003      	b.n	80029e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029d8:	887b      	ldrh	r3, [r7, #2]
 80029da:	041a      	lsls	r2, r3, #16
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	611a      	str	r2, [r3, #16]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr
	...

080029ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e12b      	b.n	8002c56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d106      	bne.n	8002a18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7fe fbe6 	bl	80011e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2224      	movs	r2, #36	@ 0x24
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a50:	f001 fbfc 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8002a54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4a81      	ldr	r2, [pc, #516]	@ (8002c60 <HAL_I2C_Init+0x274>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d807      	bhi.n	8002a70 <HAL_I2C_Init+0x84>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4a80      	ldr	r2, [pc, #512]	@ (8002c64 <HAL_I2C_Init+0x278>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	bf94      	ite	ls
 8002a68:	2301      	movls	r3, #1
 8002a6a:	2300      	movhi	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	e006      	b.n	8002a7e <HAL_I2C_Init+0x92>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4a7d      	ldr	r2, [pc, #500]	@ (8002c68 <HAL_I2C_Init+0x27c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	bf94      	ite	ls
 8002a78:	2301      	movls	r3, #1
 8002a7a:	2300      	movhi	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e0e7      	b.n	8002c56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4a78      	ldr	r2, [pc, #480]	@ (8002c6c <HAL_I2C_Init+0x280>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	0c9b      	lsrs	r3, r3, #18
 8002a90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4a6a      	ldr	r2, [pc, #424]	@ (8002c60 <HAL_I2C_Init+0x274>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d802      	bhi.n	8002ac0 <HAL_I2C_Init+0xd4>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	3301      	adds	r3, #1
 8002abe:	e009      	b.n	8002ad4 <HAL_I2C_Init+0xe8>
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ac6:	fb02 f303 	mul.w	r3, r2, r3
 8002aca:	4a69      	ldr	r2, [pc, #420]	@ (8002c70 <HAL_I2C_Init+0x284>)
 8002acc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad0:	099b      	lsrs	r3, r3, #6
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ae6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	495c      	ldr	r1, [pc, #368]	@ (8002c60 <HAL_I2C_Init+0x274>)
 8002af0:	428b      	cmp	r3, r1
 8002af2:	d819      	bhi.n	8002b28 <HAL_I2C_Init+0x13c>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1e59      	subs	r1, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b02:	1c59      	adds	r1, r3, #1
 8002b04:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b08:	400b      	ands	r3, r1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_I2C_Init+0x138>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1e59      	subs	r1, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b22:	e051      	b.n	8002bc8 <HAL_I2C_Init+0x1dc>
 8002b24:	2304      	movs	r3, #4
 8002b26:	e04f      	b.n	8002bc8 <HAL_I2C_Init+0x1dc>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d111      	bne.n	8002b54 <HAL_I2C_Init+0x168>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	1e58      	subs	r0, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6859      	ldr	r1, [r3, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	440b      	add	r3, r1
 8002b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b42:	3301      	adds	r3, #1
 8002b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	e012      	b.n	8002b7a <HAL_I2C_Init+0x18e>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1e58      	subs	r0, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6859      	ldr	r1, [r3, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	0099      	lsls	r1, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_I2C_Init+0x196>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e022      	b.n	8002bc8 <HAL_I2C_Init+0x1dc>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10e      	bne.n	8002ba8 <HAL_I2C_Init+0x1bc>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1e58      	subs	r0, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6859      	ldr	r1, [r3, #4]
 8002b92:	460b      	mov	r3, r1
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	440b      	add	r3, r1
 8002b98:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ba6:	e00f      	b.n	8002bc8 <HAL_I2C_Init+0x1dc>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	1e58      	subs	r0, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6859      	ldr	r1, [r3, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	0099      	lsls	r1, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	6809      	ldr	r1, [r1, #0]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69da      	ldr	r2, [r3, #28]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bf6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6911      	ldr	r1, [r2, #16]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68d2      	ldr	r2, [r2, #12]
 8002c02:	4311      	orrs	r1, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	000186a0 	.word	0x000186a0
 8002c64:	001e847f 	.word	0x001e847f
 8002c68:	003d08ff 	.word	0x003d08ff
 8002c6c:	431bde83 	.word	0x431bde83
 8002c70:	10624dd3 	.word	0x10624dd3

08002c74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	4608      	mov	r0, r1
 8002c7e:	4611      	mov	r1, r2
 8002c80:	461a      	mov	r2, r3
 8002c82:	4603      	mov	r3, r0
 8002c84:	817b      	strh	r3, [r7, #10]
 8002c86:	460b      	mov	r3, r1
 8002c88:	813b      	strh	r3, [r7, #8]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c8e:	f7fe ff0d 	bl	8001aac <HAL_GetTick>
 8002c92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	f040 80d9 	bne.w	8002e54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	2319      	movs	r3, #25
 8002ca8:	2201      	movs	r2, #1
 8002caa:	496d      	ldr	r1, [pc, #436]	@ (8002e60 <HAL_I2C_Mem_Write+0x1ec>)
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 fccd 	bl	800364c <I2C_WaitOnFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e0cc      	b.n	8002e56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_I2C_Mem_Write+0x56>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e0c5      	b.n	8002e56 <HAL_I2C_Mem_Write+0x1e2>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d007      	beq.n	8002cf0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2221      	movs	r2, #33	@ 0x21
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2240      	movs	r2, #64	@ 0x40
 8002d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a3a      	ldr	r2, [r7, #32]
 8002d1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4a4d      	ldr	r2, [pc, #308]	@ (8002e64 <HAL_I2C_Mem_Write+0x1f0>)
 8002d30:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d32:	88f8      	ldrh	r0, [r7, #6]
 8002d34:	893a      	ldrh	r2, [r7, #8]
 8002d36:	8979      	ldrh	r1, [r7, #10]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	9301      	str	r3, [sp, #4]
 8002d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	4603      	mov	r3, r0
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 fb04 	bl	8003350 <I2C_RequestMemoryWrite>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d052      	beq.n	8002df4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e081      	b.n	8002e56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 fd92 	bl	8003880 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00d      	beq.n	8002d7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d107      	bne.n	8002d7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e06b      	b.n	8002e56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d82:	781a      	ldrb	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d11b      	bne.n	8002df4 <HAL_I2C_Mem_Write+0x180>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d017      	beq.n	8002df4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc8:	781a      	ldrb	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1aa      	bne.n	8002d52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 fd85 	bl	8003910 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00d      	beq.n	8002e28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d107      	bne.n	8002e24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e016      	b.n	8002e56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	e000      	b.n	8002e56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e54:	2302      	movs	r3, #2
  }
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	00100002 	.word	0x00100002
 8002e64:	ffff0000 	.word	0xffff0000

08002e68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08c      	sub	sp, #48	@ 0x30
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	4608      	mov	r0, r1
 8002e72:	4611      	mov	r1, r2
 8002e74:	461a      	mov	r2, r3
 8002e76:	4603      	mov	r3, r0
 8002e78:	817b      	strh	r3, [r7, #10]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	813b      	strh	r3, [r7, #8]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e86:	f7fe fe11 	bl	8001aac <HAL_GetTick>
 8002e8a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	f040 8250 	bne.w	800333a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	2319      	movs	r3, #25
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	4982      	ldr	r1, [pc, #520]	@ (80030ac <HAL_I2C_Mem_Read+0x244>)
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fbd1 	bl	800364c <I2C_WaitOnFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e243      	b.n	800333c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_I2C_Mem_Read+0x5a>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e23c      	b.n	800333c <HAL_I2C_Mem_Read+0x4d4>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d007      	beq.n	8002ee8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ef6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2222      	movs	r2, #34	@ 0x22
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2240      	movs	r2, #64	@ 0x40
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002f18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4a62      	ldr	r2, [pc, #392]	@ (80030b0 <HAL_I2C_Mem_Read+0x248>)
 8002f28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f2a:	88f8      	ldrh	r0, [r7, #6]
 8002f2c:	893a      	ldrh	r2, [r7, #8]
 8002f2e:	8979      	ldrh	r1, [r7, #10]
 8002f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f32:	9301      	str	r3, [sp, #4]
 8002f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	4603      	mov	r3, r0
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fa9e 	bl	800347c <I2C_RequestMemoryRead>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e1f8      	b.n	800333c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d113      	bne.n	8002f7a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	e1cc      	b.n	8003314 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d11e      	bne.n	8002fc0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f92:	b672      	cpsid	i
}
 8002f94:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f96:	2300      	movs	r3, #0
 8002f98:	61bb      	str	r3, [r7, #24]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fbc:	b662      	cpsie	i
}
 8002fbe:	e035      	b.n	800302c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d11e      	bne.n	8003006 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fd8:	b672      	cpsid	i
}
 8002fda:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003000:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003002:	b662      	cpsie	i
}
 8003004:	e012      	b.n	800302c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003014:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800302c:	e172      	b.n	8003314 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003032:	2b03      	cmp	r3, #3
 8003034:	f200 811f 	bhi.w	8003276 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800303c:	2b01      	cmp	r3, #1
 800303e:	d123      	bne.n	8003088 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003042:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 fcab 	bl	80039a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e173      	b.n	800333c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003086:	e145      	b.n	8003314 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800308c:	2b02      	cmp	r3, #2
 800308e:	d152      	bne.n	8003136 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003096:	2200      	movs	r2, #0
 8003098:	4906      	ldr	r1, [pc, #24]	@ (80030b4 <HAL_I2C_Mem_Read+0x24c>)
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fad6 	bl	800364c <I2C_WaitOnFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e148      	b.n	800333c <HAL_I2C_Mem_Read+0x4d4>
 80030aa:	bf00      	nop
 80030ac:	00100002 	.word	0x00100002
 80030b0:	ffff0000 	.word	0xffff0000
 80030b4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80030b8:	b672      	cpsid	i
}
 80030ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80030fe:	b662      	cpsie	i
}
 8003100:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003134:	e0ee      	b.n	8003314 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800313c:	2200      	movs	r2, #0
 800313e:	4981      	ldr	r1, [pc, #516]	@ (8003344 <HAL_I2C_Mem_Read+0x4dc>)
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 fa83 	bl	800364c <I2C_WaitOnFlagUntilTimeout>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0f5      	b.n	800333c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800315e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003160:	b672      	cpsid	i
}
 8003162:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003196:	4b6c      	ldr	r3, [pc, #432]	@ (8003348 <HAL_I2C_Mem_Read+0x4e0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	08db      	lsrs	r3, r3, #3
 800319c:	4a6b      	ldr	r2, [pc, #428]	@ (800334c <HAL_I2C_Mem_Read+0x4e4>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	0a1a      	lsrs	r2, r3, #8
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	00da      	lsls	r2, r3, #3
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d118      	bne.n	80031ee <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	f043 0220 	orr.w	r2, r3, #32
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80031de:	b662      	cpsie	i
}
 80031e0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e0a6      	b.n	800333c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d1d9      	bne.n	80031b0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800320a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	691a      	ldr	r2, [r3, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003234:	b29b      	uxth	r3, r3
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800323e:	b662      	cpsie	i
}
 8003240:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003274:	e04e      	b.n	8003314 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003278:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fb90 	bl	80039a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e058      	b.n	800333c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d124      	bne.n	8003314 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d107      	bne.n	80032e2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032e0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003318:	2b00      	cmp	r3, #0
 800331a:	f47f ae88 	bne.w	800302e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	e000      	b.n	800333c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800333a:	2302      	movs	r3, #2
  }
}
 800333c:	4618      	mov	r0, r3
 800333e:	3728      	adds	r7, #40	@ 0x28
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	00010004 	.word	0x00010004
 8003348:	20000000 	.word	0x20000000
 800334c:	14f8b589 	.word	0x14f8b589

08003350 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	4608      	mov	r0, r1
 800335a:	4611      	mov	r1, r2
 800335c:	461a      	mov	r2, r3
 800335e:	4603      	mov	r3, r0
 8003360:	817b      	strh	r3, [r7, #10]
 8003362:	460b      	mov	r3, r1
 8003364:	813b      	strh	r3, [r7, #8]
 8003366:	4613      	mov	r3, r2
 8003368:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003378:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	2200      	movs	r2, #0
 8003382:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f960 	bl	800364c <I2C_WaitOnFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00d      	beq.n	80033ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033a0:	d103      	bne.n	80033aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e05f      	b.n	800346e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033ae:	897b      	ldrh	r3, [r7, #10]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	461a      	mov	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c0:	6a3a      	ldr	r2, [r7, #32]
 80033c2:	492d      	ldr	r1, [pc, #180]	@ (8003478 <I2C_RequestMemoryWrite+0x128>)
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 f9bb 	bl	8003740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e04c      	b.n	800346e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ec:	6a39      	ldr	r1, [r7, #32]
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 fa46 	bl	8003880 <I2C_WaitOnTXEFlagUntilTimeout>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00d      	beq.n	8003416 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d107      	bne.n	8003412 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003410:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e02b      	b.n	800346e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d105      	bne.n	8003428 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800341c:	893b      	ldrh	r3, [r7, #8]
 800341e:	b2da      	uxtb	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	611a      	str	r2, [r3, #16]
 8003426:	e021      	b.n	800346c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003428:	893b      	ldrh	r3, [r7, #8]
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	b29b      	uxth	r3, r3
 800342e:	b2da      	uxtb	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003438:	6a39      	ldr	r1, [r7, #32]
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 fa20 	bl	8003880 <I2C_WaitOnTXEFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00d      	beq.n	8003462 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344a:	2b04      	cmp	r3, #4
 800344c:	d107      	bne.n	800345e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800345c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e005      	b.n	800346e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003462:	893b      	ldrh	r3, [r7, #8]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	00010002 	.word	0x00010002

0800347c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	4608      	mov	r0, r1
 8003486:	4611      	mov	r1, r2
 8003488:	461a      	mov	r2, r3
 800348a:	4603      	mov	r3, r0
 800348c:	817b      	strh	r3, [r7, #10]
 800348e:	460b      	mov	r3, r1
 8003490:	813b      	strh	r3, [r7, #8]
 8003492:	4613      	mov	r3, r2
 8003494:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	2200      	movs	r2, #0
 80034be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f8c2 	bl	800364c <I2C_WaitOnFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00d      	beq.n	80034ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034dc:	d103      	bne.n	80034e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e0aa      	b.n	8003640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034ea:	897b      	ldrh	r3, [r7, #10]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	461a      	mov	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fc:	6a3a      	ldr	r2, [r7, #32]
 80034fe:	4952      	ldr	r1, [pc, #328]	@ (8003648 <I2C_RequestMemoryRead+0x1cc>)
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f91d 	bl	8003740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e097      	b.n	8003640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003528:	6a39      	ldr	r1, [r7, #32]
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f9a8 	bl	8003880 <I2C_WaitOnTXEFlagUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00d      	beq.n	8003552 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	2b04      	cmp	r3, #4
 800353c:	d107      	bne.n	800354e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800354c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e076      	b.n	8003640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d105      	bne.n	8003564 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003558:	893b      	ldrh	r3, [r7, #8]
 800355a:	b2da      	uxtb	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	611a      	str	r2, [r3, #16]
 8003562:	e021      	b.n	80035a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003564:	893b      	ldrh	r3, [r7, #8]
 8003566:	0a1b      	lsrs	r3, r3, #8
 8003568:	b29b      	uxth	r3, r3
 800356a:	b2da      	uxtb	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003574:	6a39      	ldr	r1, [r7, #32]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f982 	bl	8003880 <I2C_WaitOnTXEFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00d      	beq.n	800359e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	2b04      	cmp	r3, #4
 8003588:	d107      	bne.n	800359a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003598:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e050      	b.n	8003640 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800359e:	893b      	ldrh	r3, [r7, #8]
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035aa:	6a39      	ldr	r1, [r7, #32]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f967 	bl	8003880 <I2C_WaitOnTXEFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00d      	beq.n	80035d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d107      	bne.n	80035d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e035      	b.n	8003640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f82b 	bl	800364c <I2C_WaitOnFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00d      	beq.n	8003618 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800360a:	d103      	bne.n	8003614 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e013      	b.n	8003640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003618:	897b      	ldrh	r3, [r7, #10]
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	b2da      	uxtb	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362a:	6a3a      	ldr	r2, [r7, #32]
 800362c:	4906      	ldr	r1, [pc, #24]	@ (8003648 <I2C_RequestMemoryRead+0x1cc>)
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f886 	bl	8003740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	00010002 	.word	0x00010002

0800364c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	4613      	mov	r3, r2
 800365a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800365c:	e048      	b.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003664:	d044      	beq.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003666:	f7fe fa21 	bl	8001aac <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d302      	bcc.n	800367c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d139      	bne.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	0c1b      	lsrs	r3, r3, #16
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b01      	cmp	r3, #1
 8003684:	d10d      	bne.n	80036a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	43da      	mvns	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	4013      	ands	r3, r2
 8003692:	b29b      	uxth	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf0c      	ite	eq
 8003698:	2301      	moveq	r3, #1
 800369a:	2300      	movne	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	e00c      	b.n	80036bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	43da      	mvns	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4013      	ands	r3, r2
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	bf0c      	ite	eq
 80036b4:	2301      	moveq	r3, #1
 80036b6:	2300      	movne	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d116      	bne.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e023      	b.n	8003738 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	0c1b      	lsrs	r3, r3, #16
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d10d      	bne.n	8003716 <I2C_WaitOnFlagUntilTimeout+0xca>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	43da      	mvns	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4013      	ands	r3, r2
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	e00c      	b.n	8003730 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	43da      	mvns	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4013      	ands	r3, r2
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	bf0c      	ite	eq
 8003728:	2301      	moveq	r3, #1
 800372a:	2300      	movne	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	461a      	mov	r2, r3
 8003730:	79fb      	ldrb	r3, [r7, #7]
 8003732:	429a      	cmp	r2, r3
 8003734:	d093      	beq.n	800365e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800374e:	e071      	b.n	8003834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800375a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800375e:	d123      	bne.n	80037a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800376e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003778:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	f043 0204 	orr.w	r2, r3, #4
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e067      	b.n	8003878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037ae:	d041      	beq.n	8003834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b0:	f7fe f97c 	bl	8001aac <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d302      	bcc.n	80037c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d136      	bne.n	8003834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	0c1b      	lsrs	r3, r3, #16
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d10c      	bne.n	80037ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	43da      	mvns	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4013      	ands	r3, r2
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bf14      	ite	ne
 80037e2:	2301      	movne	r3, #1
 80037e4:	2300      	moveq	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	e00b      	b.n	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	43da      	mvns	r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	4013      	ands	r3, r2
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	bf14      	ite	ne
 80037fc:	2301      	movne	r3, #1
 80037fe:	2300      	moveq	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d016      	beq.n	8003834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003820:	f043 0220 	orr.w	r2, r3, #32
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e021      	b.n	8003878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	0c1b      	lsrs	r3, r3, #16
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b01      	cmp	r3, #1
 800383c:	d10c      	bne.n	8003858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	43da      	mvns	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	4013      	ands	r3, r2
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	bf14      	ite	ne
 8003850:	2301      	movne	r3, #1
 8003852:	2300      	moveq	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	e00b      	b.n	8003870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	43da      	mvns	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4013      	ands	r3, r2
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	bf14      	ite	ne
 800386a:	2301      	movne	r3, #1
 800386c:	2300      	moveq	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	f47f af6d 	bne.w	8003750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800388c:	e034      	b.n	80038f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f8e3 	bl	8003a5a <I2C_IsAcknowledgeFailed>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e034      	b.n	8003908 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038a4:	d028      	beq.n	80038f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a6:	f7fe f901 	bl	8001aac <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d302      	bcc.n	80038bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d11d      	bne.n	80038f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c6:	2b80      	cmp	r3, #128	@ 0x80
 80038c8:	d016      	beq.n	80038f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e4:	f043 0220 	orr.w	r2, r3, #32
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e007      	b.n	8003908 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003902:	2b80      	cmp	r3, #128	@ 0x80
 8003904:	d1c3      	bne.n	800388e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800391c:	e034      	b.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f89b 	bl	8003a5a <I2C_IsAcknowledgeFailed>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e034      	b.n	8003998 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003934:	d028      	beq.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003936:	f7fe f8b9 	bl	8001aac <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d11d      	bne.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b04      	cmp	r3, #4
 8003958:	d016      	beq.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003974:	f043 0220 	orr.w	r2, r3, #32
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e007      	b.n	8003998 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b04      	cmp	r3, #4
 8003994:	d1c3      	bne.n	800391e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039ac:	e049      	b.n	8003a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b10      	cmp	r3, #16
 80039ba:	d119      	bne.n	80039f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0210 	mvn.w	r2, #16
 80039c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e030      	b.n	8003a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f0:	f7fe f85c 	bl	8001aac <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d302      	bcc.n	8003a06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11d      	bne.n	8003a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a10:	2b40      	cmp	r3, #64	@ 0x40
 8003a12:	d016      	beq.n	8003a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	f043 0220 	orr.w	r2, r3, #32
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e007      	b.n	8003a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a4c:	2b40      	cmp	r3, #64	@ 0x40
 8003a4e:	d1ae      	bne.n	80039ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a70:	d11b      	bne.n	8003aaa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a7a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	f043 0204 	orr.w	r2, r3, #4
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr
	...

08003ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e272      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 8087 	beq.w	8003be6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ad8:	4b92      	ldr	r3, [pc, #584]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 030c 	and.w	r3, r3, #12
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d00c      	beq.n	8003afe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ae4:	4b8f      	ldr	r3, [pc, #572]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 030c 	and.w	r3, r3, #12
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d112      	bne.n	8003b16 <HAL_RCC_OscConfig+0x5e>
 8003af0:	4b8c      	ldr	r3, [pc, #560]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003afc:	d10b      	bne.n	8003b16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003afe:	4b89      	ldr	r3, [pc, #548]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d06c      	beq.n	8003be4 <HAL_RCC_OscConfig+0x12c>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d168      	bne.n	8003be4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e24c      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b1e:	d106      	bne.n	8003b2e <HAL_RCC_OscConfig+0x76>
 8003b20:	4b80      	ldr	r3, [pc, #512]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a7f      	ldr	r2, [pc, #508]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	e02e      	b.n	8003b8c <HAL_RCC_OscConfig+0xd4>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCC_OscConfig+0x98>
 8003b36:	4b7b      	ldr	r3, [pc, #492]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a7a      	ldr	r2, [pc, #488]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	4b78      	ldr	r3, [pc, #480]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a77      	ldr	r2, [pc, #476]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	e01d      	b.n	8003b8c <HAL_RCC_OscConfig+0xd4>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCC_OscConfig+0xbc>
 8003b5a:	4b72      	ldr	r3, [pc, #456]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a71      	ldr	r2, [pc, #452]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	4b6f      	ldr	r3, [pc, #444]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a6e      	ldr	r2, [pc, #440]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	e00b      	b.n	8003b8c <HAL_RCC_OscConfig+0xd4>
 8003b74:	4b6b      	ldr	r3, [pc, #428]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a6a      	ldr	r2, [pc, #424]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	4b68      	ldr	r3, [pc, #416]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a67      	ldr	r2, [pc, #412]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003b86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d013      	beq.n	8003bbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fd ff8a 	bl	8001aac <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b9c:	f7fd ff86 	bl	8001aac <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b64      	cmp	r3, #100	@ 0x64
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e200      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bae:	4b5d      	ldr	r3, [pc, #372]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0xe4>
 8003bba:	e014      	b.n	8003be6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbc:	f7fd ff76 	bl	8001aac <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc4:	f7fd ff72 	bl	8001aac <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	@ 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e1ec      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bd6:	4b53      	ldr	r3, [pc, #332]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x10c>
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d063      	beq.n	8003cba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bf2:	4b4c      	ldr	r3, [pc, #304]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00b      	beq.n	8003c16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bfe:	4b49      	ldr	r3, [pc, #292]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f003 030c 	and.w	r3, r3, #12
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d11c      	bne.n	8003c44 <HAL_RCC_OscConfig+0x18c>
 8003c0a:	4b46      	ldr	r3, [pc, #280]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d116      	bne.n	8003c44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c16:	4b43      	ldr	r3, [pc, #268]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_RCC_OscConfig+0x176>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d001      	beq.n	8003c2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e1c0      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4939      	ldr	r1, [pc, #228]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c42:	e03a      	b.n	8003cba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d020      	beq.n	8003c8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c4c:	4b36      	ldr	r3, [pc, #216]	@ (8003d28 <HAL_RCC_OscConfig+0x270>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c52:	f7fd ff2b 	bl	8001aac <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c5a:	f7fd ff27 	bl	8001aac <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e1a1      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c78:	4b2a      	ldr	r3, [pc, #168]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	4927      	ldr	r1, [pc, #156]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	600b      	str	r3, [r1, #0]
 8003c8c:	e015      	b.n	8003cba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c8e:	4b26      	ldr	r3, [pc, #152]	@ (8003d28 <HAL_RCC_OscConfig+0x270>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fd ff0a 	bl	8001aac <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9c:	f7fd ff06 	bl	8001aac <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e180      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cae:	4b1d      	ldr	r3, [pc, #116]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d03a      	beq.n	8003d3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d019      	beq.n	8003d02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cce:	4b17      	ldr	r3, [pc, #92]	@ (8003d2c <HAL_RCC_OscConfig+0x274>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd4:	f7fd feea 	bl	8001aac <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cdc:	f7fd fee6 	bl	8001aac <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e160      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cee:	4b0d      	ldr	r3, [pc, #52]	@ (8003d24 <HAL_RCC_OscConfig+0x26c>)
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cfa:	2001      	movs	r0, #1
 8003cfc:	f000 face 	bl	800429c <RCC_Delay>
 8003d00:	e01c      	b.n	8003d3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d02:	4b0a      	ldr	r3, [pc, #40]	@ (8003d2c <HAL_RCC_OscConfig+0x274>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d08:	f7fd fed0 	bl	8001aac <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d0e:	e00f      	b.n	8003d30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d10:	f7fd fecc 	bl	8001aac <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d908      	bls.n	8003d30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e146      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
 8003d22:	bf00      	nop
 8003d24:	40021000 	.word	0x40021000
 8003d28:	42420000 	.word	0x42420000
 8003d2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d30:	4b92      	ldr	r3, [pc, #584]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1e9      	bne.n	8003d10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 80a6 	beq.w	8003e96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d4e:	4b8b      	ldr	r3, [pc, #556]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10d      	bne.n	8003d76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d5a:	4b88      	ldr	r3, [pc, #544]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	4a87      	ldr	r2, [pc, #540]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d64:	61d3      	str	r3, [r2, #28]
 8003d66:	4b85      	ldr	r3, [pc, #532]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d72:	2301      	movs	r3, #1
 8003d74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d76:	4b82      	ldr	r3, [pc, #520]	@ (8003f80 <HAL_RCC_OscConfig+0x4c8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d118      	bne.n	8003db4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d82:	4b7f      	ldr	r3, [pc, #508]	@ (8003f80 <HAL_RCC_OscConfig+0x4c8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a7e      	ldr	r2, [pc, #504]	@ (8003f80 <HAL_RCC_OscConfig+0x4c8>)
 8003d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8e:	f7fd fe8d 	bl	8001aac <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d96:	f7fd fe89 	bl	8001aac <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b64      	cmp	r3, #100	@ 0x64
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e103      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da8:	4b75      	ldr	r3, [pc, #468]	@ (8003f80 <HAL_RCC_OscConfig+0x4c8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d106      	bne.n	8003dca <HAL_RCC_OscConfig+0x312>
 8003dbc:	4b6f      	ldr	r3, [pc, #444]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	4a6e      	ldr	r2, [pc, #440]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	6213      	str	r3, [r2, #32]
 8003dc8:	e02d      	b.n	8003e26 <HAL_RCC_OscConfig+0x36e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10c      	bne.n	8003dec <HAL_RCC_OscConfig+0x334>
 8003dd2:	4b6a      	ldr	r3, [pc, #424]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	4a69      	ldr	r2, [pc, #420]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003dd8:	f023 0301 	bic.w	r3, r3, #1
 8003ddc:	6213      	str	r3, [r2, #32]
 8003dde:	4b67      	ldr	r3, [pc, #412]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	4a66      	ldr	r2, [pc, #408]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003de4:	f023 0304 	bic.w	r3, r3, #4
 8003de8:	6213      	str	r3, [r2, #32]
 8003dea:	e01c      	b.n	8003e26 <HAL_RCC_OscConfig+0x36e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2b05      	cmp	r3, #5
 8003df2:	d10c      	bne.n	8003e0e <HAL_RCC_OscConfig+0x356>
 8003df4:	4b61      	ldr	r3, [pc, #388]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	4a60      	ldr	r2, [pc, #384]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003dfa:	f043 0304 	orr.w	r3, r3, #4
 8003dfe:	6213      	str	r3, [r2, #32]
 8003e00:	4b5e      	ldr	r3, [pc, #376]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	4a5d      	ldr	r2, [pc, #372]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	6213      	str	r3, [r2, #32]
 8003e0c:	e00b      	b.n	8003e26 <HAL_RCC_OscConfig+0x36e>
 8003e0e:	4b5b      	ldr	r3, [pc, #364]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	4a5a      	ldr	r2, [pc, #360]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	6213      	str	r3, [r2, #32]
 8003e1a:	4b58      	ldr	r3, [pc, #352]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	4a57      	ldr	r2, [pc, #348]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003e20:	f023 0304 	bic.w	r3, r3, #4
 8003e24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d015      	beq.n	8003e5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e2e:	f7fd fe3d 	bl	8001aac <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e34:	e00a      	b.n	8003e4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e36:	f7fd fe39 	bl	8001aac <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e0b1      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0ee      	beq.n	8003e36 <HAL_RCC_OscConfig+0x37e>
 8003e58:	e014      	b.n	8003e84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e5a:	f7fd fe27 	bl	8001aac <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e60:	e00a      	b.n	8003e78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e62:	f7fd fe23 	bl	8001aac <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e09b      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e78:	4b40      	ldr	r3, [pc, #256]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1ee      	bne.n	8003e62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e84:	7dfb      	ldrb	r3, [r7, #23]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d105      	bne.n	8003e96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e8a:	4b3c      	ldr	r3, [pc, #240]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	4a3b      	ldr	r2, [pc, #236]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003e90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 8087 	beq.w	8003fae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ea0:	4b36      	ldr	r3, [pc, #216]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f003 030c 	and.w	r3, r3, #12
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d061      	beq.n	8003f70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d146      	bne.n	8003f42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb4:	4b33      	ldr	r3, [pc, #204]	@ (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eba:	f7fd fdf7 	bl	8001aac <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec2:	f7fd fdf3 	bl	8001aac <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e06d      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ed4:	4b29      	ldr	r3, [pc, #164]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f0      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ee8:	d108      	bne.n	8003efc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003eea:	4b24      	ldr	r3, [pc, #144]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	4921      	ldr	r1, [pc, #132]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003efc:	4b1f      	ldr	r3, [pc, #124]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a19      	ldr	r1, [r3, #32]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	491b      	ldr	r1, [pc, #108]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f14:	4b1b      	ldr	r3, [pc, #108]	@ (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003f16:	2201      	movs	r2, #1
 8003f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1a:	f7fd fdc7 	bl	8001aac <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f22:	f7fd fdc3 	bl	8001aac <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e03d      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f34:	4b11      	ldr	r3, [pc, #68]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0f0      	beq.n	8003f22 <HAL_RCC_OscConfig+0x46a>
 8003f40:	e035      	b.n	8003fae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f42:	4b10      	ldr	r3, [pc, #64]	@ (8003f84 <HAL_RCC_OscConfig+0x4cc>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f48:	f7fd fdb0 	bl	8001aac <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f50:	f7fd fdac 	bl	8001aac <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e026      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f62:	4b06      	ldr	r3, [pc, #24]	@ (8003f7c <HAL_RCC_OscConfig+0x4c4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0x498>
 8003f6e:	e01e      	b.n	8003fae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d107      	bne.n	8003f88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e019      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40007000 	.word	0x40007000
 8003f84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f88:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb8 <HAL_RCC_OscConfig+0x500>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d106      	bne.n	8003faa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d001      	beq.n	8003fae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40021000 	.word	0x40021000

08003fbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0d0      	b.n	8004172 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd0:	4b6a      	ldr	r3, [pc, #424]	@ (800417c <HAL_RCC_ClockConfig+0x1c0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d910      	bls.n	8004000 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fde:	4b67      	ldr	r3, [pc, #412]	@ (800417c <HAL_RCC_ClockConfig+0x1c0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f023 0207 	bic.w	r2, r3, #7
 8003fe6:	4965      	ldr	r1, [pc, #404]	@ (800417c <HAL_RCC_ClockConfig+0x1c0>)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fee:	4b63      	ldr	r3, [pc, #396]	@ (800417c <HAL_RCC_ClockConfig+0x1c0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0b8      	b.n	8004172 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d020      	beq.n	800404e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004018:	4b59      	ldr	r3, [pc, #356]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4a58      	ldr	r2, [pc, #352]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004022:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004030:	4b53      	ldr	r3, [pc, #332]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	4a52      	ldr	r2, [pc, #328]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8004036:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800403a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800403c:	4b50      	ldr	r3, [pc, #320]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	494d      	ldr	r1, [pc, #308]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 800404a:	4313      	orrs	r3, r2
 800404c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d040      	beq.n	80040dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d107      	bne.n	8004072 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004062:	4b47      	ldr	r3, [pc, #284]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d115      	bne.n	800409a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e07f      	b.n	8004172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d107      	bne.n	800408a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407a:	4b41      	ldr	r3, [pc, #260]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e073      	b.n	8004172 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408a:	4b3d      	ldr	r3, [pc, #244]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e06b      	b.n	8004172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800409a:	4b39      	ldr	r3, [pc, #228]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f023 0203 	bic.w	r2, r3, #3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	4936      	ldr	r1, [pc, #216]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040ac:	f7fd fcfe 	bl	8001aac <HAL_GetTick>
 80040b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b2:	e00a      	b.n	80040ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b4:	f7fd fcfa 	bl	8001aac <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e053      	b.n	8004172 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ca:	4b2d      	ldr	r3, [pc, #180]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f003 020c 	and.w	r2, r3, #12
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	429a      	cmp	r2, r3
 80040da:	d1eb      	bne.n	80040b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040dc:	4b27      	ldr	r3, [pc, #156]	@ (800417c <HAL_RCC_ClockConfig+0x1c0>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d210      	bcs.n	800410c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ea:	4b24      	ldr	r3, [pc, #144]	@ (800417c <HAL_RCC_ClockConfig+0x1c0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f023 0207 	bic.w	r2, r3, #7
 80040f2:	4922      	ldr	r1, [pc, #136]	@ (800417c <HAL_RCC_ClockConfig+0x1c0>)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fa:	4b20      	ldr	r3, [pc, #128]	@ (800417c <HAL_RCC_ClockConfig+0x1c0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d001      	beq.n	800410c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e032      	b.n	8004172 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004118:	4b19      	ldr	r3, [pc, #100]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	4916      	ldr	r1, [pc, #88]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8004126:	4313      	orrs	r3, r2
 8004128:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004136:	4b12      	ldr	r3, [pc, #72]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	490e      	ldr	r1, [pc, #56]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8004146:	4313      	orrs	r3, r2
 8004148:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800414a:	f000 f821 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 800414e:	4602      	mov	r2, r0
 8004150:	4b0b      	ldr	r3, [pc, #44]	@ (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	091b      	lsrs	r3, r3, #4
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	490a      	ldr	r1, [pc, #40]	@ (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 800415c:	5ccb      	ldrb	r3, [r1, r3]
 800415e:	fa22 f303 	lsr.w	r3, r2, r3
 8004162:	4a09      	ldr	r2, [pc, #36]	@ (8004188 <HAL_RCC_ClockConfig+0x1cc>)
 8004164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004166:	4b09      	ldr	r3, [pc, #36]	@ (800418c <HAL_RCC_ClockConfig+0x1d0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7fd fc5c 	bl	8001a28 <HAL_InitTick>

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40022000 	.word	0x40022000
 8004180:	40021000 	.word	0x40021000
 8004184:	08008500 	.word	0x08008500
 8004188:	20000000 	.word	0x20000000
 800418c:	20000004 	.word	0x20000004

08004190 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	2300      	movs	r3, #0
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	2300      	movs	r3, #0
 80041a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x94>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d002      	beq.n	80041c0 <HAL_RCC_GetSysClockFreq+0x30>
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d003      	beq.n	80041c6 <HAL_RCC_GetSysClockFreq+0x36>
 80041be:	e027      	b.n	8004210 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041c0:	4b19      	ldr	r3, [pc, #100]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x98>)
 80041c2:	613b      	str	r3, [r7, #16]
      break;
 80041c4:	e027      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	0c9b      	lsrs	r3, r3, #18
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	4a17      	ldr	r2, [pc, #92]	@ (800422c <HAL_RCC_GetSysClockFreq+0x9c>)
 80041d0:	5cd3      	ldrb	r3, [r2, r3]
 80041d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d010      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041de:	4b11      	ldr	r3, [pc, #68]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x94>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	0c5b      	lsrs	r3, r3, #17
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	4a11      	ldr	r2, [pc, #68]	@ (8004230 <HAL_RCC_GetSysClockFreq+0xa0>)
 80041ea:	5cd3      	ldrb	r3, [r2, r3]
 80041ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x98>)
 80041f2:	fb03 f202 	mul.w	r2, r3, r2
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	e004      	b.n	800420a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a0c      	ldr	r2, [pc, #48]	@ (8004234 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004204:	fb02 f303 	mul.w	r3, r2, r3
 8004208:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	613b      	str	r3, [r7, #16]
      break;
 800420e:	e002      	b.n	8004216 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004210:	4b05      	ldr	r3, [pc, #20]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x98>)
 8004212:	613b      	str	r3, [r7, #16]
      break;
 8004214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004216:	693b      	ldr	r3, [r7, #16]
}
 8004218:	4618      	mov	r0, r3
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40021000 	.word	0x40021000
 8004228:	007a1200 	.word	0x007a1200
 800422c:	08008518 	.word	0x08008518
 8004230:	08008528 	.word	0x08008528
 8004234:	003d0900 	.word	0x003d0900

08004238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800423c:	4b02      	ldr	r3, [pc, #8]	@ (8004248 <HAL_RCC_GetHCLKFreq+0x10>)
 800423e:	681b      	ldr	r3, [r3, #0]
}
 8004240:	4618      	mov	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr
 8004248:	20000000 	.word	0x20000000

0800424c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004250:	f7ff fff2 	bl	8004238 <HAL_RCC_GetHCLKFreq>
 8004254:	4602      	mov	r2, r0
 8004256:	4b05      	ldr	r3, [pc, #20]	@ (800426c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	0a1b      	lsrs	r3, r3, #8
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	4903      	ldr	r1, [pc, #12]	@ (8004270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004262:	5ccb      	ldrb	r3, [r1, r3]
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004268:	4618      	mov	r0, r3
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40021000 	.word	0x40021000
 8004270:	08008510 	.word	0x08008510

08004274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004278:	f7ff ffde 	bl	8004238 <HAL_RCC_GetHCLKFreq>
 800427c:	4602      	mov	r2, r0
 800427e:	4b05      	ldr	r3, [pc, #20]	@ (8004294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	0adb      	lsrs	r3, r3, #11
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	4903      	ldr	r1, [pc, #12]	@ (8004298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800428a:	5ccb      	ldrb	r3, [r1, r3]
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004290:	4618      	mov	r0, r3
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000
 8004298:	08008510 	.word	0x08008510

0800429c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042a4:	4b0a      	ldr	r3, [pc, #40]	@ (80042d0 <RCC_Delay+0x34>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a0a      	ldr	r2, [pc, #40]	@ (80042d4 <RCC_Delay+0x38>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	0a5b      	lsrs	r3, r3, #9
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	fb02 f303 	mul.w	r3, r2, r3
 80042b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042b8:	bf00      	nop
  }
  while (Delay --);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	1e5a      	subs	r2, r3, #1
 80042be:	60fa      	str	r2, [r7, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1f9      	bne.n	80042b8 <RCC_Delay+0x1c>
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr
 80042d0:	20000000 	.word	0x20000000
 80042d4:	10624dd3 	.word	0x10624dd3

080042d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	613b      	str	r3, [r7, #16]
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d07d      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80042f4:	2300      	movs	r3, #0
 80042f6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042f8:	4b4f      	ldr	r3, [pc, #316]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10d      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004304:	4b4c      	ldr	r3, [pc, #304]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	4a4b      	ldr	r2, [pc, #300]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800430a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800430e:	61d3      	str	r3, [r2, #28]
 8004310:	4b49      	ldr	r3, [pc, #292]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800431c:	2301      	movs	r3, #1
 800431e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004320:	4b46      	ldr	r3, [pc, #280]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004328:	2b00      	cmp	r3, #0
 800432a:	d118      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800432c:	4b43      	ldr	r3, [pc, #268]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a42      	ldr	r2, [pc, #264]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004336:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004338:	f7fd fbb8 	bl	8001aac <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433e:	e008      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004340:	f7fd fbb4 	bl	8001aac <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b64      	cmp	r3, #100	@ 0x64
 800434c:	d901      	bls.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e06d      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004352:	4b3a      	ldr	r3, [pc, #232]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800435e:	4b36      	ldr	r3, [pc, #216]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004366:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d02e      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	429a      	cmp	r2, r3
 800437a:	d027      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800437c:	4b2e      	ldr	r3, [pc, #184]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004384:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004386:	4b2e      	ldr	r3, [pc, #184]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004388:	2201      	movs	r2, #1
 800438a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800438c:	4b2c      	ldr	r3, [pc, #176]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004392:	4a29      	ldr	r2, [pc, #164]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d014      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a2:	f7fd fb83 	bl	8001aac <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a8:	e00a      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043aa:	f7fd fb7f 	bl	8001aac <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e036      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0ee      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	4917      	ldr	r1, [pc, #92]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043de:	7dfb      	ldrb	r3, [r7, #23]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d105      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043e4:	4b14      	ldr	r3, [pc, #80]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	4a13      	ldr	r2, [pc, #76]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d008      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	490b      	ldr	r1, [pc, #44]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800440a:	4313      	orrs	r3, r2
 800440c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b00      	cmp	r3, #0
 8004418:	d008      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800441a:	4b07      	ldr	r3, [pc, #28]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	4904      	ldr	r1, [pc, #16]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004428:	4313      	orrs	r3, r2
 800442a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40021000 	.word	0x40021000
 800443c:	40007000 	.word	0x40007000
 8004440:	42420440 	.word	0x42420440

08004444 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	2300      	movs	r3, #0
 8004452:	61fb      	str	r3, [r7, #28]
 8004454:	2300      	movs	r3, #0
 8004456:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	2300      	movs	r3, #0
 800445e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b10      	cmp	r3, #16
 8004464:	d00a      	beq.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b10      	cmp	r3, #16
 800446a:	f200 808a 	bhi.w	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d045      	beq.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d075      	beq.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800447a:	e082      	b.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800447c:	4b46      	ldr	r3, [pc, #280]	@ (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004482:	4b45      	ldr	r3, [pc, #276]	@ (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d07b      	beq.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	0c9b      	lsrs	r3, r3, #18
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	4a41      	ldr	r2, [pc, #260]	@ (800459c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004498:	5cd3      	ldrb	r3, [r2, r3]
 800449a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d015      	beq.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044a6:	4b3c      	ldr	r3, [pc, #240]	@ (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	0c5b      	lsrs	r3, r3, #17
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	4a3b      	ldr	r2, [pc, #236]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80044b2:	5cd3      	ldrb	r3, [r2, r3]
 80044b4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00d      	beq.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80044c0:	4a38      	ldr	r2, [pc, #224]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	fb02 f303 	mul.w	r3, r2, r3
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	e004      	b.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4a34      	ldr	r2, [pc, #208]	@ (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80044d6:	fb02 f303 	mul.w	r3, r2, r3
 80044da:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80044dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044e8:	d102      	bne.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	61bb      	str	r3, [r7, #24]
      break;
 80044ee:	e04a      	b.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	4a2d      	ldr	r2, [pc, #180]	@ (80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	085b      	lsrs	r3, r3, #1
 80044fc:	61bb      	str	r3, [r7, #24]
      break;
 80044fe:	e042      	b.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004500:	4b25      	ldr	r3, [pc, #148]	@ (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800450c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004510:	d108      	bne.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800451c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	e01f      	b.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800452a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800452e:	d109      	bne.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004530:	4b19      	ldr	r3, [pc, #100]	@ (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800453c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	e00f      	b.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800454a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800454e:	d11c      	bne.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004550:	4b11      	ldr	r3, [pc, #68]	@ (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d016      	beq.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800455c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004560:	61bb      	str	r3, [r7, #24]
      break;
 8004562:	e012      	b.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004564:	e011      	b.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004566:	f7ff fe85 	bl	8004274 <HAL_RCC_GetPCLK2Freq>
 800456a:	4602      	mov	r2, r0
 800456c:	4b0a      	ldr	r3, [pc, #40]	@ (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	0b9b      	lsrs	r3, r3, #14
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	3301      	adds	r3, #1
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	fbb2 f3f3 	udiv	r3, r2, r3
 800457e:	61bb      	str	r3, [r7, #24]
      break;
 8004580:	e004      	b.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004582:	bf00      	nop
 8004584:	e002      	b.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004586:	bf00      	nop
 8004588:	e000      	b.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800458a:	bf00      	nop
    }
  }
  return (frequency);
 800458c:	69bb      	ldr	r3, [r7, #24]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3720      	adds	r7, #32
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40021000 	.word	0x40021000
 800459c:	0800852c 	.word	0x0800852c
 80045a0:	0800853c 	.word	0x0800853c
 80045a4:	007a1200 	.word	0x007a1200
 80045a8:	003d0900 	.word	0x003d0900
 80045ac:	aaaaaaab 	.word	0xaaaaaaab

080045b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e042      	b.n	8004648 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fd f9a0 	bl	800191c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2224      	movs	r2, #36	@ 0x24
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f971 	bl	80048dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004608:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695a      	ldr	r2, [r3, #20]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004618:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004628:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08a      	sub	sp, #40	@ 0x28
 8004654:	af02      	add	r7, sp, #8
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	603b      	str	r3, [r7, #0]
 800465c:	4613      	mov	r3, r2
 800465e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b20      	cmp	r3, #32
 800466e:	d175      	bne.n	800475c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <HAL_UART_Transmit+0x2c>
 8004676:	88fb      	ldrh	r3, [r7, #6]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e06e      	b.n	800475e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2221      	movs	r2, #33	@ 0x21
 800468a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800468e:	f7fd fa0d 	bl	8001aac <HAL_GetTick>
 8004692:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	88fa      	ldrh	r2, [r7, #6]
 8004698:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	88fa      	ldrh	r2, [r7, #6]
 800469e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046a8:	d108      	bne.n	80046bc <HAL_UART_Transmit+0x6c>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d104      	bne.n	80046bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	e003      	b.n	80046c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046c4:	e02e      	b.n	8004724 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2200      	movs	r2, #0
 80046ce:	2180      	movs	r1, #128	@ 0x80
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f848 	bl	8004766 <UART_WaitOnFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e03a      	b.n	800475e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10b      	bne.n	8004706 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	3302      	adds	r3, #2
 8004702:	61bb      	str	r3, [r7, #24]
 8004704:	e007      	b.n	8004716 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	781a      	ldrb	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	3301      	adds	r3, #1
 8004714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1cb      	bne.n	80046c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2200      	movs	r2, #0
 8004736:	2140      	movs	r1, #64	@ 0x40
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 f814 	bl	8004766 <UART_WaitOnFlagUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e006      	b.n	800475e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	e000      	b.n	800475e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800475c:	2302      	movs	r3, #2
  }
}
 800475e:	4618      	mov	r0, r3
 8004760:	3720      	adds	r7, #32
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b086      	sub	sp, #24
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	603b      	str	r3, [r7, #0]
 8004772:	4613      	mov	r3, r2
 8004774:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004776:	e03b      	b.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800477e:	d037      	beq.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004780:	f7fd f994 	bl	8001aac <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	6a3a      	ldr	r2, [r7, #32]
 800478c:	429a      	cmp	r2, r3
 800478e:	d302      	bcc.n	8004796 <UART_WaitOnFlagUntilTimeout+0x30>
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e03a      	b.n	8004810 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d023      	beq.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b80      	cmp	r3, #128	@ 0x80
 80047ac:	d020      	beq.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b40      	cmp	r3, #64	@ 0x40
 80047b2:	d01d      	beq.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d116      	bne.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80047c2:	2300      	movs	r3, #0
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	617b      	str	r3, [r7, #20]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 f81d 	bl	8004818 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2208      	movs	r2, #8
 80047e2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e00f      	b.n	8004810 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4013      	ands	r3, r2
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	bf0c      	ite	eq
 8004800:	2301      	moveq	r3, #1
 8004802:	2300      	movne	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	461a      	mov	r2, r3
 8004808:	79fb      	ldrb	r3, [r7, #7]
 800480a:	429a      	cmp	r2, r3
 800480c:	d0b4      	beq.n	8004778 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004818:	b480      	push	{r7}
 800481a:	b095      	sub	sp, #84	@ 0x54
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	330c      	adds	r3, #12
 8004826:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800482a:	e853 3f00 	ldrex	r3, [r3]
 800482e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004832:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	330c      	adds	r3, #12
 800483e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004840:	643a      	str	r2, [r7, #64]	@ 0x40
 8004842:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004846:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004848:	e841 2300 	strex	r3, r2, [r1]
 800484c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800484e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1e5      	bne.n	8004820 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3314      	adds	r3, #20
 800485a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	e853 3f00 	ldrex	r3, [r3]
 8004862:	61fb      	str	r3, [r7, #28]
   return(result);
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f023 0301 	bic.w	r3, r3, #1
 800486a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3314      	adds	r3, #20
 8004872:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004874:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004876:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004878:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800487a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800487c:	e841 2300 	strex	r3, r2, [r1]
 8004880:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e5      	bne.n	8004854 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488c:	2b01      	cmp	r3, #1
 800488e:	d119      	bne.n	80048c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	330c      	adds	r3, #12
 8004896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	e853 3f00 	ldrex	r3, [r3]
 800489e:	60bb      	str	r3, [r7, #8]
   return(result);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f023 0310 	bic.w	r3, r3, #16
 80048a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	330c      	adds	r3, #12
 80048ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048b0:	61ba      	str	r2, [r7, #24]
 80048b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b4:	6979      	ldr	r1, [r7, #20]
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	e841 2300 	strex	r3, r2, [r1]
 80048bc:	613b      	str	r3, [r7, #16]
   return(result);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1e5      	bne.n	8004890 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048d2:	bf00      	nop
 80048d4:	3754      	adds	r7, #84	@ 0x54
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr

080048dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	4313      	orrs	r3, r2
 800490a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004916:	f023 030c 	bic.w	r3, r3, #12
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6812      	ldr	r2, [r2, #0]
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	430b      	orrs	r3, r1
 8004922:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a2c      	ldr	r2, [pc, #176]	@ (80049f0 <UART_SetConfig+0x114>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d103      	bne.n	800494c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004944:	f7ff fc96 	bl	8004274 <HAL_RCC_GetPCLK2Freq>
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	e002      	b.n	8004952 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800494c:	f7ff fc7e 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8004950:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	009a      	lsls	r2, r3, #2
 800495c:	441a      	add	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	4a22      	ldr	r2, [pc, #136]	@ (80049f4 <UART_SetConfig+0x118>)
 800496a:	fba2 2303 	umull	r2, r3, r2, r3
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	0119      	lsls	r1, r3, #4
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	4613      	mov	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	009a      	lsls	r2, r3, #2
 800497c:	441a      	add	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	fbb2 f2f3 	udiv	r2, r2, r3
 8004988:	4b1a      	ldr	r3, [pc, #104]	@ (80049f4 <UART_SetConfig+0x118>)
 800498a:	fba3 0302 	umull	r0, r3, r3, r2
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	2064      	movs	r0, #100	@ 0x64
 8004992:	fb00 f303 	mul.w	r3, r0, r3
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	3332      	adds	r3, #50	@ 0x32
 800499c:	4a15      	ldr	r2, [pc, #84]	@ (80049f4 <UART_SetConfig+0x118>)
 800499e:	fba2 2303 	umull	r2, r3, r2, r3
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049a8:	4419      	add	r1, r3
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	009a      	lsls	r2, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80049c0:	4b0c      	ldr	r3, [pc, #48]	@ (80049f4 <UART_SetConfig+0x118>)
 80049c2:	fba3 0302 	umull	r0, r3, r3, r2
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	2064      	movs	r0, #100	@ 0x64
 80049ca:	fb00 f303 	mul.w	r3, r0, r3
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	3332      	adds	r3, #50	@ 0x32
 80049d4:	4a07      	ldr	r2, [pc, #28]	@ (80049f4 <UART_SetConfig+0x118>)
 80049d6:	fba2 2303 	umull	r2, r3, r2, r3
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	f003 020f 	and.w	r2, r3, #15
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	440a      	add	r2, r1
 80049e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40013800 	.word	0x40013800
 80049f4:	51eb851f 	.word	0x51eb851f

080049f8 <__cvt>:
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049fe:	461d      	mov	r5, r3
 8004a00:	bfbb      	ittet	lt
 8004a02:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004a06:	461d      	movlt	r5, r3
 8004a08:	2300      	movge	r3, #0
 8004a0a:	232d      	movlt	r3, #45	@ 0x2d
 8004a0c:	b088      	sub	sp, #32
 8004a0e:	4614      	mov	r4, r2
 8004a10:	bfb8      	it	lt
 8004a12:	4614      	movlt	r4, r2
 8004a14:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004a16:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004a18:	7013      	strb	r3, [r2, #0]
 8004a1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004a1c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004a20:	f023 0820 	bic.w	r8, r3, #32
 8004a24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a28:	d005      	beq.n	8004a36 <__cvt+0x3e>
 8004a2a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004a2e:	d100      	bne.n	8004a32 <__cvt+0x3a>
 8004a30:	3601      	adds	r6, #1
 8004a32:	2302      	movs	r3, #2
 8004a34:	e000      	b.n	8004a38 <__cvt+0x40>
 8004a36:	2303      	movs	r3, #3
 8004a38:	aa07      	add	r2, sp, #28
 8004a3a:	9204      	str	r2, [sp, #16]
 8004a3c:	aa06      	add	r2, sp, #24
 8004a3e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a42:	e9cd 3600 	strd	r3, r6, [sp]
 8004a46:	4622      	mov	r2, r4
 8004a48:	462b      	mov	r3, r5
 8004a4a:	f000 fe61 	bl	8005710 <_dtoa_r>
 8004a4e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004a52:	4607      	mov	r7, r0
 8004a54:	d119      	bne.n	8004a8a <__cvt+0x92>
 8004a56:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004a58:	07db      	lsls	r3, r3, #31
 8004a5a:	d50e      	bpl.n	8004a7a <__cvt+0x82>
 8004a5c:	eb00 0906 	add.w	r9, r0, r6
 8004a60:	2200      	movs	r2, #0
 8004a62:	2300      	movs	r3, #0
 8004a64:	4620      	mov	r0, r4
 8004a66:	4629      	mov	r1, r5
 8004a68:	f7fb ff9e 	bl	80009a8 <__aeabi_dcmpeq>
 8004a6c:	b108      	cbz	r0, 8004a72 <__cvt+0x7a>
 8004a6e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a72:	2230      	movs	r2, #48	@ 0x30
 8004a74:	9b07      	ldr	r3, [sp, #28]
 8004a76:	454b      	cmp	r3, r9
 8004a78:	d31e      	bcc.n	8004ab8 <__cvt+0xc0>
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	9b07      	ldr	r3, [sp, #28]
 8004a7e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004a80:	1bdb      	subs	r3, r3, r7
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	b008      	add	sp, #32
 8004a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a8a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a8e:	eb00 0906 	add.w	r9, r0, r6
 8004a92:	d1e5      	bne.n	8004a60 <__cvt+0x68>
 8004a94:	7803      	ldrb	r3, [r0, #0]
 8004a96:	2b30      	cmp	r3, #48	@ 0x30
 8004a98:	d10a      	bne.n	8004ab0 <__cvt+0xb8>
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	f7fb ff81 	bl	80009a8 <__aeabi_dcmpeq>
 8004aa6:	b918      	cbnz	r0, 8004ab0 <__cvt+0xb8>
 8004aa8:	f1c6 0601 	rsb	r6, r6, #1
 8004aac:	f8ca 6000 	str.w	r6, [sl]
 8004ab0:	f8da 3000 	ldr.w	r3, [sl]
 8004ab4:	4499      	add	r9, r3
 8004ab6:	e7d3      	b.n	8004a60 <__cvt+0x68>
 8004ab8:	1c59      	adds	r1, r3, #1
 8004aba:	9107      	str	r1, [sp, #28]
 8004abc:	701a      	strb	r2, [r3, #0]
 8004abe:	e7d9      	b.n	8004a74 <__cvt+0x7c>

08004ac0 <__exponent>:
 8004ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ac2:	2900      	cmp	r1, #0
 8004ac4:	bfb6      	itet	lt
 8004ac6:	232d      	movlt	r3, #45	@ 0x2d
 8004ac8:	232b      	movge	r3, #43	@ 0x2b
 8004aca:	4249      	neglt	r1, r1
 8004acc:	2909      	cmp	r1, #9
 8004ace:	7002      	strb	r2, [r0, #0]
 8004ad0:	7043      	strb	r3, [r0, #1]
 8004ad2:	dd29      	ble.n	8004b28 <__exponent+0x68>
 8004ad4:	f10d 0307 	add.w	r3, sp, #7
 8004ad8:	461d      	mov	r5, r3
 8004ada:	270a      	movs	r7, #10
 8004adc:	fbb1 f6f7 	udiv	r6, r1, r7
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	fb07 1416 	mls	r4, r7, r6, r1
 8004ae6:	3430      	adds	r4, #48	@ 0x30
 8004ae8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004aec:	460c      	mov	r4, r1
 8004aee:	2c63      	cmp	r4, #99	@ 0x63
 8004af0:	4631      	mov	r1, r6
 8004af2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004af6:	dcf1      	bgt.n	8004adc <__exponent+0x1c>
 8004af8:	3130      	adds	r1, #48	@ 0x30
 8004afa:	1e94      	subs	r4, r2, #2
 8004afc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004b00:	4623      	mov	r3, r4
 8004b02:	1c41      	adds	r1, r0, #1
 8004b04:	42ab      	cmp	r3, r5
 8004b06:	d30a      	bcc.n	8004b1e <__exponent+0x5e>
 8004b08:	f10d 0309 	add.w	r3, sp, #9
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	42ac      	cmp	r4, r5
 8004b10:	bf88      	it	hi
 8004b12:	2300      	movhi	r3, #0
 8004b14:	3302      	adds	r3, #2
 8004b16:	4403      	add	r3, r0
 8004b18:	1a18      	subs	r0, r3, r0
 8004b1a:	b003      	add	sp, #12
 8004b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b1e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004b22:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004b26:	e7ed      	b.n	8004b04 <__exponent+0x44>
 8004b28:	2330      	movs	r3, #48	@ 0x30
 8004b2a:	3130      	adds	r1, #48	@ 0x30
 8004b2c:	7083      	strb	r3, [r0, #2]
 8004b2e:	70c1      	strb	r1, [r0, #3]
 8004b30:	1d03      	adds	r3, r0, #4
 8004b32:	e7f1      	b.n	8004b18 <__exponent+0x58>

08004b34 <_printf_float>:
 8004b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b38:	b091      	sub	sp, #68	@ 0x44
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004b40:	4616      	mov	r6, r2
 8004b42:	461f      	mov	r7, r3
 8004b44:	4605      	mov	r5, r0
 8004b46:	f000 fcd3 	bl	80054f0 <_localeconv_r>
 8004b4a:	6803      	ldr	r3, [r0, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	9308      	str	r3, [sp, #32]
 8004b50:	f7fb fafe 	bl	8000150 <strlen>
 8004b54:	2300      	movs	r3, #0
 8004b56:	930e      	str	r3, [sp, #56]	@ 0x38
 8004b58:	f8d8 3000 	ldr.w	r3, [r8]
 8004b5c:	9009      	str	r0, [sp, #36]	@ 0x24
 8004b5e:	3307      	adds	r3, #7
 8004b60:	f023 0307 	bic.w	r3, r3, #7
 8004b64:	f103 0208 	add.w	r2, r3, #8
 8004b68:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004b6c:	f8d4 b000 	ldr.w	fp, [r4]
 8004b70:	f8c8 2000 	str.w	r2, [r8]
 8004b74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b78:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004b7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b7e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004b82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004b8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004b8e:	4b9c      	ldr	r3, [pc, #624]	@ (8004e00 <_printf_float+0x2cc>)
 8004b90:	f7fb ff3c 	bl	8000a0c <__aeabi_dcmpun>
 8004b94:	bb70      	cbnz	r0, 8004bf4 <_printf_float+0xc0>
 8004b96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004b9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b9e:	4b98      	ldr	r3, [pc, #608]	@ (8004e00 <_printf_float+0x2cc>)
 8004ba0:	f7fb ff16 	bl	80009d0 <__aeabi_dcmple>
 8004ba4:	bb30      	cbnz	r0, 8004bf4 <_printf_float+0xc0>
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	2300      	movs	r3, #0
 8004baa:	4640      	mov	r0, r8
 8004bac:	4649      	mov	r1, r9
 8004bae:	f7fb ff05 	bl	80009bc <__aeabi_dcmplt>
 8004bb2:	b110      	cbz	r0, 8004bba <_printf_float+0x86>
 8004bb4:	232d      	movs	r3, #45	@ 0x2d
 8004bb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bba:	4a92      	ldr	r2, [pc, #584]	@ (8004e04 <_printf_float+0x2d0>)
 8004bbc:	4b92      	ldr	r3, [pc, #584]	@ (8004e08 <_printf_float+0x2d4>)
 8004bbe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004bc2:	bf94      	ite	ls
 8004bc4:	4690      	movls	r8, r2
 8004bc6:	4698      	movhi	r8, r3
 8004bc8:	2303      	movs	r3, #3
 8004bca:	f04f 0900 	mov.w	r9, #0
 8004bce:	6123      	str	r3, [r4, #16]
 8004bd0:	f02b 0304 	bic.w	r3, fp, #4
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	4633      	mov	r3, r6
 8004bd8:	4621      	mov	r1, r4
 8004bda:	4628      	mov	r0, r5
 8004bdc:	9700      	str	r7, [sp, #0]
 8004bde:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004be0:	f000 f9d4 	bl	8004f8c <_printf_common>
 8004be4:	3001      	adds	r0, #1
 8004be6:	f040 8090 	bne.w	8004d0a <_printf_float+0x1d6>
 8004bea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bee:	b011      	add	sp, #68	@ 0x44
 8004bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	464b      	mov	r3, r9
 8004bf8:	4640      	mov	r0, r8
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	f7fb ff06 	bl	8000a0c <__aeabi_dcmpun>
 8004c00:	b148      	cbz	r0, 8004c16 <_printf_float+0xe2>
 8004c02:	464b      	mov	r3, r9
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	bfb8      	it	lt
 8004c08:	232d      	movlt	r3, #45	@ 0x2d
 8004c0a:	4a80      	ldr	r2, [pc, #512]	@ (8004e0c <_printf_float+0x2d8>)
 8004c0c:	bfb8      	it	lt
 8004c0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004c12:	4b7f      	ldr	r3, [pc, #508]	@ (8004e10 <_printf_float+0x2dc>)
 8004c14:	e7d3      	b.n	8004bbe <_printf_float+0x8a>
 8004c16:	6863      	ldr	r3, [r4, #4]
 8004c18:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	d13f      	bne.n	8004ca0 <_printf_float+0x16c>
 8004c20:	2306      	movs	r3, #6
 8004c22:	6063      	str	r3, [r4, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004c2a:	6023      	str	r3, [r4, #0]
 8004c2c:	9206      	str	r2, [sp, #24]
 8004c2e:	aa0e      	add	r2, sp, #56	@ 0x38
 8004c30:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004c34:	aa0d      	add	r2, sp, #52	@ 0x34
 8004c36:	9203      	str	r2, [sp, #12]
 8004c38:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004c3c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004c40:	6863      	ldr	r3, [r4, #4]
 8004c42:	4642      	mov	r2, r8
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	4628      	mov	r0, r5
 8004c48:	464b      	mov	r3, r9
 8004c4a:	910a      	str	r1, [sp, #40]	@ 0x28
 8004c4c:	f7ff fed4 	bl	80049f8 <__cvt>
 8004c50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004c52:	4680      	mov	r8, r0
 8004c54:	2947      	cmp	r1, #71	@ 0x47
 8004c56:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004c58:	d128      	bne.n	8004cac <_printf_float+0x178>
 8004c5a:	1cc8      	adds	r0, r1, #3
 8004c5c:	db02      	blt.n	8004c64 <_printf_float+0x130>
 8004c5e:	6863      	ldr	r3, [r4, #4]
 8004c60:	4299      	cmp	r1, r3
 8004c62:	dd40      	ble.n	8004ce6 <_printf_float+0x1b2>
 8004c64:	f1aa 0a02 	sub.w	sl, sl, #2
 8004c68:	fa5f fa8a 	uxtb.w	sl, sl
 8004c6c:	4652      	mov	r2, sl
 8004c6e:	3901      	subs	r1, #1
 8004c70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004c74:	910d      	str	r1, [sp, #52]	@ 0x34
 8004c76:	f7ff ff23 	bl	8004ac0 <__exponent>
 8004c7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c7c:	4681      	mov	r9, r0
 8004c7e:	1813      	adds	r3, r2, r0
 8004c80:	2a01      	cmp	r2, #1
 8004c82:	6123      	str	r3, [r4, #16]
 8004c84:	dc02      	bgt.n	8004c8c <_printf_float+0x158>
 8004c86:	6822      	ldr	r2, [r4, #0]
 8004c88:	07d2      	lsls	r2, r2, #31
 8004c8a:	d501      	bpl.n	8004c90 <_printf_float+0x15c>
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	6123      	str	r3, [r4, #16]
 8004c90:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d09e      	beq.n	8004bd6 <_printf_float+0xa2>
 8004c98:	232d      	movs	r3, #45	@ 0x2d
 8004c9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c9e:	e79a      	b.n	8004bd6 <_printf_float+0xa2>
 8004ca0:	2947      	cmp	r1, #71	@ 0x47
 8004ca2:	d1bf      	bne.n	8004c24 <_printf_float+0xf0>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1bd      	bne.n	8004c24 <_printf_float+0xf0>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e7ba      	b.n	8004c22 <_printf_float+0xee>
 8004cac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004cb0:	d9dc      	bls.n	8004c6c <_printf_float+0x138>
 8004cb2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004cb6:	d118      	bne.n	8004cea <_printf_float+0x1b6>
 8004cb8:	2900      	cmp	r1, #0
 8004cba:	6863      	ldr	r3, [r4, #4]
 8004cbc:	dd0b      	ble.n	8004cd6 <_printf_float+0x1a2>
 8004cbe:	6121      	str	r1, [r4, #16]
 8004cc0:	b913      	cbnz	r3, 8004cc8 <_printf_float+0x194>
 8004cc2:	6822      	ldr	r2, [r4, #0]
 8004cc4:	07d0      	lsls	r0, r2, #31
 8004cc6:	d502      	bpl.n	8004cce <_printf_float+0x19a>
 8004cc8:	3301      	adds	r3, #1
 8004cca:	440b      	add	r3, r1
 8004ccc:	6123      	str	r3, [r4, #16]
 8004cce:	f04f 0900 	mov.w	r9, #0
 8004cd2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004cd4:	e7dc      	b.n	8004c90 <_printf_float+0x15c>
 8004cd6:	b913      	cbnz	r3, 8004cde <_printf_float+0x1aa>
 8004cd8:	6822      	ldr	r2, [r4, #0]
 8004cda:	07d2      	lsls	r2, r2, #31
 8004cdc:	d501      	bpl.n	8004ce2 <_printf_float+0x1ae>
 8004cde:	3302      	adds	r3, #2
 8004ce0:	e7f4      	b.n	8004ccc <_printf_float+0x198>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e7f2      	b.n	8004ccc <_printf_float+0x198>
 8004ce6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004cea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004cec:	4299      	cmp	r1, r3
 8004cee:	db05      	blt.n	8004cfc <_printf_float+0x1c8>
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	6121      	str	r1, [r4, #16]
 8004cf4:	07d8      	lsls	r0, r3, #31
 8004cf6:	d5ea      	bpl.n	8004cce <_printf_float+0x19a>
 8004cf8:	1c4b      	adds	r3, r1, #1
 8004cfa:	e7e7      	b.n	8004ccc <_printf_float+0x198>
 8004cfc:	2900      	cmp	r1, #0
 8004cfe:	bfcc      	ite	gt
 8004d00:	2201      	movgt	r2, #1
 8004d02:	f1c1 0202 	rsble	r2, r1, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	e7e0      	b.n	8004ccc <_printf_float+0x198>
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	055a      	lsls	r2, r3, #21
 8004d0e:	d407      	bmi.n	8004d20 <_printf_float+0x1ec>
 8004d10:	6923      	ldr	r3, [r4, #16]
 8004d12:	4642      	mov	r2, r8
 8004d14:	4631      	mov	r1, r6
 8004d16:	4628      	mov	r0, r5
 8004d18:	47b8      	blx	r7
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	d12b      	bne.n	8004d76 <_printf_float+0x242>
 8004d1e:	e764      	b.n	8004bea <_printf_float+0xb6>
 8004d20:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d24:	f240 80dc 	bls.w	8004ee0 <_printf_float+0x3ac>
 8004d28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2300      	movs	r3, #0
 8004d30:	f7fb fe3a 	bl	80009a8 <__aeabi_dcmpeq>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	d033      	beq.n	8004da0 <_printf_float+0x26c>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	4631      	mov	r1, r6
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	4a35      	ldr	r2, [pc, #212]	@ (8004e14 <_printf_float+0x2e0>)
 8004d40:	47b8      	blx	r7
 8004d42:	3001      	adds	r0, #1
 8004d44:	f43f af51 	beq.w	8004bea <_printf_float+0xb6>
 8004d48:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004d4c:	4543      	cmp	r3, r8
 8004d4e:	db02      	blt.n	8004d56 <_printf_float+0x222>
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	07d8      	lsls	r0, r3, #31
 8004d54:	d50f      	bpl.n	8004d76 <_printf_float+0x242>
 8004d56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d5a:	4631      	mov	r1, r6
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	47b8      	blx	r7
 8004d60:	3001      	adds	r0, #1
 8004d62:	f43f af42 	beq.w	8004bea <_printf_float+0xb6>
 8004d66:	f04f 0900 	mov.w	r9, #0
 8004d6a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004d6e:	f104 0a1a 	add.w	sl, r4, #26
 8004d72:	45c8      	cmp	r8, r9
 8004d74:	dc09      	bgt.n	8004d8a <_printf_float+0x256>
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	079b      	lsls	r3, r3, #30
 8004d7a:	f100 8102 	bmi.w	8004f82 <_printf_float+0x44e>
 8004d7e:	68e0      	ldr	r0, [r4, #12]
 8004d80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d82:	4298      	cmp	r0, r3
 8004d84:	bfb8      	it	lt
 8004d86:	4618      	movlt	r0, r3
 8004d88:	e731      	b.n	8004bee <_printf_float+0xba>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	4652      	mov	r2, sl
 8004d8e:	4631      	mov	r1, r6
 8004d90:	4628      	mov	r0, r5
 8004d92:	47b8      	blx	r7
 8004d94:	3001      	adds	r0, #1
 8004d96:	f43f af28 	beq.w	8004bea <_printf_float+0xb6>
 8004d9a:	f109 0901 	add.w	r9, r9, #1
 8004d9e:	e7e8      	b.n	8004d72 <_printf_float+0x23e>
 8004da0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	dc38      	bgt.n	8004e18 <_printf_float+0x2e4>
 8004da6:	2301      	movs	r3, #1
 8004da8:	4631      	mov	r1, r6
 8004daa:	4628      	mov	r0, r5
 8004dac:	4a19      	ldr	r2, [pc, #100]	@ (8004e14 <_printf_float+0x2e0>)
 8004dae:	47b8      	blx	r7
 8004db0:	3001      	adds	r0, #1
 8004db2:	f43f af1a 	beq.w	8004bea <_printf_float+0xb6>
 8004db6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004dba:	ea59 0303 	orrs.w	r3, r9, r3
 8004dbe:	d102      	bne.n	8004dc6 <_printf_float+0x292>
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	07d9      	lsls	r1, r3, #31
 8004dc4:	d5d7      	bpl.n	8004d76 <_printf_float+0x242>
 8004dc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004dca:	4631      	mov	r1, r6
 8004dcc:	4628      	mov	r0, r5
 8004dce:	47b8      	blx	r7
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	f43f af0a 	beq.w	8004bea <_printf_float+0xb6>
 8004dd6:	f04f 0a00 	mov.w	sl, #0
 8004dda:	f104 0b1a 	add.w	fp, r4, #26
 8004dde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004de0:	425b      	negs	r3, r3
 8004de2:	4553      	cmp	r3, sl
 8004de4:	dc01      	bgt.n	8004dea <_printf_float+0x2b6>
 8004de6:	464b      	mov	r3, r9
 8004de8:	e793      	b.n	8004d12 <_printf_float+0x1de>
 8004dea:	2301      	movs	r3, #1
 8004dec:	465a      	mov	r2, fp
 8004dee:	4631      	mov	r1, r6
 8004df0:	4628      	mov	r0, r5
 8004df2:	47b8      	blx	r7
 8004df4:	3001      	adds	r0, #1
 8004df6:	f43f aef8 	beq.w	8004bea <_printf_float+0xb6>
 8004dfa:	f10a 0a01 	add.w	sl, sl, #1
 8004dfe:	e7ee      	b.n	8004dde <_printf_float+0x2aa>
 8004e00:	7fefffff 	.word	0x7fefffff
 8004e04:	0800853e 	.word	0x0800853e
 8004e08:	08008542 	.word	0x08008542
 8004e0c:	08008546 	.word	0x08008546
 8004e10:	0800854a 	.word	0x0800854a
 8004e14:	0800854e 	.word	0x0800854e
 8004e18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e1a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004e1e:	4553      	cmp	r3, sl
 8004e20:	bfa8      	it	ge
 8004e22:	4653      	movge	r3, sl
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	4699      	mov	r9, r3
 8004e28:	dc36      	bgt.n	8004e98 <_printf_float+0x364>
 8004e2a:	f04f 0b00 	mov.w	fp, #0
 8004e2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e32:	f104 021a 	add.w	r2, r4, #26
 8004e36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e38:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e3a:	eba3 0309 	sub.w	r3, r3, r9
 8004e3e:	455b      	cmp	r3, fp
 8004e40:	dc31      	bgt.n	8004ea6 <_printf_float+0x372>
 8004e42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e44:	459a      	cmp	sl, r3
 8004e46:	dc3a      	bgt.n	8004ebe <_printf_float+0x38a>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	07da      	lsls	r2, r3, #31
 8004e4c:	d437      	bmi.n	8004ebe <_printf_float+0x38a>
 8004e4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e50:	ebaa 0903 	sub.w	r9, sl, r3
 8004e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e56:	ebaa 0303 	sub.w	r3, sl, r3
 8004e5a:	4599      	cmp	r9, r3
 8004e5c:	bfa8      	it	ge
 8004e5e:	4699      	movge	r9, r3
 8004e60:	f1b9 0f00 	cmp.w	r9, #0
 8004e64:	dc33      	bgt.n	8004ece <_printf_float+0x39a>
 8004e66:	f04f 0800 	mov.w	r8, #0
 8004e6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e6e:	f104 0b1a 	add.w	fp, r4, #26
 8004e72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e74:	ebaa 0303 	sub.w	r3, sl, r3
 8004e78:	eba3 0309 	sub.w	r3, r3, r9
 8004e7c:	4543      	cmp	r3, r8
 8004e7e:	f77f af7a 	ble.w	8004d76 <_printf_float+0x242>
 8004e82:	2301      	movs	r3, #1
 8004e84:	465a      	mov	r2, fp
 8004e86:	4631      	mov	r1, r6
 8004e88:	4628      	mov	r0, r5
 8004e8a:	47b8      	blx	r7
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	f43f aeac 	beq.w	8004bea <_printf_float+0xb6>
 8004e92:	f108 0801 	add.w	r8, r8, #1
 8004e96:	e7ec      	b.n	8004e72 <_printf_float+0x33e>
 8004e98:	4642      	mov	r2, r8
 8004e9a:	4631      	mov	r1, r6
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	47b8      	blx	r7
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d1c2      	bne.n	8004e2a <_printf_float+0x2f6>
 8004ea4:	e6a1      	b.n	8004bea <_printf_float+0xb6>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	4631      	mov	r1, r6
 8004eaa:	4628      	mov	r0, r5
 8004eac:	920a      	str	r2, [sp, #40]	@ 0x28
 8004eae:	47b8      	blx	r7
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	f43f ae9a 	beq.w	8004bea <_printf_float+0xb6>
 8004eb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004eb8:	f10b 0b01 	add.w	fp, fp, #1
 8004ebc:	e7bb      	b.n	8004e36 <_printf_float+0x302>
 8004ebe:	4631      	mov	r1, r6
 8004ec0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	47b8      	blx	r7
 8004ec8:	3001      	adds	r0, #1
 8004eca:	d1c0      	bne.n	8004e4e <_printf_float+0x31a>
 8004ecc:	e68d      	b.n	8004bea <_printf_float+0xb6>
 8004ece:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ed0:	464b      	mov	r3, r9
 8004ed2:	4631      	mov	r1, r6
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	4442      	add	r2, r8
 8004ed8:	47b8      	blx	r7
 8004eda:	3001      	adds	r0, #1
 8004edc:	d1c3      	bne.n	8004e66 <_printf_float+0x332>
 8004ede:	e684      	b.n	8004bea <_printf_float+0xb6>
 8004ee0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004ee4:	f1ba 0f01 	cmp.w	sl, #1
 8004ee8:	dc01      	bgt.n	8004eee <_printf_float+0x3ba>
 8004eea:	07db      	lsls	r3, r3, #31
 8004eec:	d536      	bpl.n	8004f5c <_printf_float+0x428>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	4642      	mov	r2, r8
 8004ef2:	4631      	mov	r1, r6
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	47b8      	blx	r7
 8004ef8:	3001      	adds	r0, #1
 8004efa:	f43f ae76 	beq.w	8004bea <_printf_float+0xb6>
 8004efe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f02:	4631      	mov	r1, r6
 8004f04:	4628      	mov	r0, r5
 8004f06:	47b8      	blx	r7
 8004f08:	3001      	adds	r0, #1
 8004f0a:	f43f ae6e 	beq.w	8004bea <_printf_float+0xb6>
 8004f0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f12:	2200      	movs	r2, #0
 8004f14:	2300      	movs	r3, #0
 8004f16:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004f1a:	f7fb fd45 	bl	80009a8 <__aeabi_dcmpeq>
 8004f1e:	b9c0      	cbnz	r0, 8004f52 <_printf_float+0x41e>
 8004f20:	4653      	mov	r3, sl
 8004f22:	f108 0201 	add.w	r2, r8, #1
 8004f26:	4631      	mov	r1, r6
 8004f28:	4628      	mov	r0, r5
 8004f2a:	47b8      	blx	r7
 8004f2c:	3001      	adds	r0, #1
 8004f2e:	d10c      	bne.n	8004f4a <_printf_float+0x416>
 8004f30:	e65b      	b.n	8004bea <_printf_float+0xb6>
 8004f32:	2301      	movs	r3, #1
 8004f34:	465a      	mov	r2, fp
 8004f36:	4631      	mov	r1, r6
 8004f38:	4628      	mov	r0, r5
 8004f3a:	47b8      	blx	r7
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	f43f ae54 	beq.w	8004bea <_printf_float+0xb6>
 8004f42:	f108 0801 	add.w	r8, r8, #1
 8004f46:	45d0      	cmp	r8, sl
 8004f48:	dbf3      	blt.n	8004f32 <_printf_float+0x3fe>
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004f50:	e6e0      	b.n	8004d14 <_printf_float+0x1e0>
 8004f52:	f04f 0800 	mov.w	r8, #0
 8004f56:	f104 0b1a 	add.w	fp, r4, #26
 8004f5a:	e7f4      	b.n	8004f46 <_printf_float+0x412>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	4642      	mov	r2, r8
 8004f60:	e7e1      	b.n	8004f26 <_printf_float+0x3f2>
 8004f62:	2301      	movs	r3, #1
 8004f64:	464a      	mov	r2, r9
 8004f66:	4631      	mov	r1, r6
 8004f68:	4628      	mov	r0, r5
 8004f6a:	47b8      	blx	r7
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	f43f ae3c 	beq.w	8004bea <_printf_float+0xb6>
 8004f72:	f108 0801 	add.w	r8, r8, #1
 8004f76:	68e3      	ldr	r3, [r4, #12]
 8004f78:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004f7a:	1a5b      	subs	r3, r3, r1
 8004f7c:	4543      	cmp	r3, r8
 8004f7e:	dcf0      	bgt.n	8004f62 <_printf_float+0x42e>
 8004f80:	e6fd      	b.n	8004d7e <_printf_float+0x24a>
 8004f82:	f04f 0800 	mov.w	r8, #0
 8004f86:	f104 0919 	add.w	r9, r4, #25
 8004f8a:	e7f4      	b.n	8004f76 <_printf_float+0x442>

08004f8c <_printf_common>:
 8004f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f90:	4616      	mov	r6, r2
 8004f92:	4698      	mov	r8, r3
 8004f94:	688a      	ldr	r2, [r1, #8]
 8004f96:	690b      	ldr	r3, [r1, #16]
 8004f98:	4607      	mov	r7, r0
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	bfb8      	it	lt
 8004f9e:	4613      	movlt	r3, r2
 8004fa0:	6033      	str	r3, [r6, #0]
 8004fa2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fac:	b10a      	cbz	r2, 8004fb2 <_printf_common+0x26>
 8004fae:	3301      	adds	r3, #1
 8004fb0:	6033      	str	r3, [r6, #0]
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	0699      	lsls	r1, r3, #26
 8004fb6:	bf42      	ittt	mi
 8004fb8:	6833      	ldrmi	r3, [r6, #0]
 8004fba:	3302      	addmi	r3, #2
 8004fbc:	6033      	strmi	r3, [r6, #0]
 8004fbe:	6825      	ldr	r5, [r4, #0]
 8004fc0:	f015 0506 	ands.w	r5, r5, #6
 8004fc4:	d106      	bne.n	8004fd4 <_printf_common+0x48>
 8004fc6:	f104 0a19 	add.w	sl, r4, #25
 8004fca:	68e3      	ldr	r3, [r4, #12]
 8004fcc:	6832      	ldr	r2, [r6, #0]
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	42ab      	cmp	r3, r5
 8004fd2:	dc2b      	bgt.n	800502c <_printf_common+0xa0>
 8004fd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fd8:	6822      	ldr	r2, [r4, #0]
 8004fda:	3b00      	subs	r3, #0
 8004fdc:	bf18      	it	ne
 8004fde:	2301      	movne	r3, #1
 8004fe0:	0692      	lsls	r2, r2, #26
 8004fe2:	d430      	bmi.n	8005046 <_printf_common+0xba>
 8004fe4:	4641      	mov	r1, r8
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fec:	47c8      	blx	r9
 8004fee:	3001      	adds	r0, #1
 8004ff0:	d023      	beq.n	800503a <_printf_common+0xae>
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	6922      	ldr	r2, [r4, #16]
 8004ff6:	f003 0306 	and.w	r3, r3, #6
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	bf14      	ite	ne
 8004ffe:	2500      	movne	r5, #0
 8005000:	6833      	ldreq	r3, [r6, #0]
 8005002:	f04f 0600 	mov.w	r6, #0
 8005006:	bf08      	it	eq
 8005008:	68e5      	ldreq	r5, [r4, #12]
 800500a:	f104 041a 	add.w	r4, r4, #26
 800500e:	bf08      	it	eq
 8005010:	1aed      	subeq	r5, r5, r3
 8005012:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005016:	bf08      	it	eq
 8005018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800501c:	4293      	cmp	r3, r2
 800501e:	bfc4      	itt	gt
 8005020:	1a9b      	subgt	r3, r3, r2
 8005022:	18ed      	addgt	r5, r5, r3
 8005024:	42b5      	cmp	r5, r6
 8005026:	d11a      	bne.n	800505e <_printf_common+0xd2>
 8005028:	2000      	movs	r0, #0
 800502a:	e008      	b.n	800503e <_printf_common+0xb2>
 800502c:	2301      	movs	r3, #1
 800502e:	4652      	mov	r2, sl
 8005030:	4641      	mov	r1, r8
 8005032:	4638      	mov	r0, r7
 8005034:	47c8      	blx	r9
 8005036:	3001      	adds	r0, #1
 8005038:	d103      	bne.n	8005042 <_printf_common+0xb6>
 800503a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800503e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005042:	3501      	adds	r5, #1
 8005044:	e7c1      	b.n	8004fca <_printf_common+0x3e>
 8005046:	2030      	movs	r0, #48	@ 0x30
 8005048:	18e1      	adds	r1, r4, r3
 800504a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005054:	4422      	add	r2, r4
 8005056:	3302      	adds	r3, #2
 8005058:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800505c:	e7c2      	b.n	8004fe4 <_printf_common+0x58>
 800505e:	2301      	movs	r3, #1
 8005060:	4622      	mov	r2, r4
 8005062:	4641      	mov	r1, r8
 8005064:	4638      	mov	r0, r7
 8005066:	47c8      	blx	r9
 8005068:	3001      	adds	r0, #1
 800506a:	d0e6      	beq.n	800503a <_printf_common+0xae>
 800506c:	3601      	adds	r6, #1
 800506e:	e7d9      	b.n	8005024 <_printf_common+0x98>

08005070 <_printf_i>:
 8005070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005074:	7e0f      	ldrb	r7, [r1, #24]
 8005076:	4691      	mov	r9, r2
 8005078:	2f78      	cmp	r7, #120	@ 0x78
 800507a:	4680      	mov	r8, r0
 800507c:	460c      	mov	r4, r1
 800507e:	469a      	mov	sl, r3
 8005080:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005082:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005086:	d807      	bhi.n	8005098 <_printf_i+0x28>
 8005088:	2f62      	cmp	r7, #98	@ 0x62
 800508a:	d80a      	bhi.n	80050a2 <_printf_i+0x32>
 800508c:	2f00      	cmp	r7, #0
 800508e:	f000 80d3 	beq.w	8005238 <_printf_i+0x1c8>
 8005092:	2f58      	cmp	r7, #88	@ 0x58
 8005094:	f000 80ba 	beq.w	800520c <_printf_i+0x19c>
 8005098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800509c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050a0:	e03a      	b.n	8005118 <_printf_i+0xa8>
 80050a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050a6:	2b15      	cmp	r3, #21
 80050a8:	d8f6      	bhi.n	8005098 <_printf_i+0x28>
 80050aa:	a101      	add	r1, pc, #4	@ (adr r1, 80050b0 <_printf_i+0x40>)
 80050ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050b0:	08005109 	.word	0x08005109
 80050b4:	0800511d 	.word	0x0800511d
 80050b8:	08005099 	.word	0x08005099
 80050bc:	08005099 	.word	0x08005099
 80050c0:	08005099 	.word	0x08005099
 80050c4:	08005099 	.word	0x08005099
 80050c8:	0800511d 	.word	0x0800511d
 80050cc:	08005099 	.word	0x08005099
 80050d0:	08005099 	.word	0x08005099
 80050d4:	08005099 	.word	0x08005099
 80050d8:	08005099 	.word	0x08005099
 80050dc:	0800521f 	.word	0x0800521f
 80050e0:	08005147 	.word	0x08005147
 80050e4:	080051d9 	.word	0x080051d9
 80050e8:	08005099 	.word	0x08005099
 80050ec:	08005099 	.word	0x08005099
 80050f0:	08005241 	.word	0x08005241
 80050f4:	08005099 	.word	0x08005099
 80050f8:	08005147 	.word	0x08005147
 80050fc:	08005099 	.word	0x08005099
 8005100:	08005099 	.word	0x08005099
 8005104:	080051e1 	.word	0x080051e1
 8005108:	6833      	ldr	r3, [r6, #0]
 800510a:	1d1a      	adds	r2, r3, #4
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6032      	str	r2, [r6, #0]
 8005110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005114:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005118:	2301      	movs	r3, #1
 800511a:	e09e      	b.n	800525a <_printf_i+0x1ea>
 800511c:	6833      	ldr	r3, [r6, #0]
 800511e:	6820      	ldr	r0, [r4, #0]
 8005120:	1d19      	adds	r1, r3, #4
 8005122:	6031      	str	r1, [r6, #0]
 8005124:	0606      	lsls	r6, r0, #24
 8005126:	d501      	bpl.n	800512c <_printf_i+0xbc>
 8005128:	681d      	ldr	r5, [r3, #0]
 800512a:	e003      	b.n	8005134 <_printf_i+0xc4>
 800512c:	0645      	lsls	r5, r0, #25
 800512e:	d5fb      	bpl.n	8005128 <_printf_i+0xb8>
 8005130:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005134:	2d00      	cmp	r5, #0
 8005136:	da03      	bge.n	8005140 <_printf_i+0xd0>
 8005138:	232d      	movs	r3, #45	@ 0x2d
 800513a:	426d      	negs	r5, r5
 800513c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005140:	230a      	movs	r3, #10
 8005142:	4859      	ldr	r0, [pc, #356]	@ (80052a8 <_printf_i+0x238>)
 8005144:	e011      	b.n	800516a <_printf_i+0xfa>
 8005146:	6821      	ldr	r1, [r4, #0]
 8005148:	6833      	ldr	r3, [r6, #0]
 800514a:	0608      	lsls	r0, r1, #24
 800514c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005150:	d402      	bmi.n	8005158 <_printf_i+0xe8>
 8005152:	0649      	lsls	r1, r1, #25
 8005154:	bf48      	it	mi
 8005156:	b2ad      	uxthmi	r5, r5
 8005158:	2f6f      	cmp	r7, #111	@ 0x6f
 800515a:	6033      	str	r3, [r6, #0]
 800515c:	bf14      	ite	ne
 800515e:	230a      	movne	r3, #10
 8005160:	2308      	moveq	r3, #8
 8005162:	4851      	ldr	r0, [pc, #324]	@ (80052a8 <_printf_i+0x238>)
 8005164:	2100      	movs	r1, #0
 8005166:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800516a:	6866      	ldr	r6, [r4, #4]
 800516c:	2e00      	cmp	r6, #0
 800516e:	bfa8      	it	ge
 8005170:	6821      	ldrge	r1, [r4, #0]
 8005172:	60a6      	str	r6, [r4, #8]
 8005174:	bfa4      	itt	ge
 8005176:	f021 0104 	bicge.w	r1, r1, #4
 800517a:	6021      	strge	r1, [r4, #0]
 800517c:	b90d      	cbnz	r5, 8005182 <_printf_i+0x112>
 800517e:	2e00      	cmp	r6, #0
 8005180:	d04b      	beq.n	800521a <_printf_i+0x1aa>
 8005182:	4616      	mov	r6, r2
 8005184:	fbb5 f1f3 	udiv	r1, r5, r3
 8005188:	fb03 5711 	mls	r7, r3, r1, r5
 800518c:	5dc7      	ldrb	r7, [r0, r7]
 800518e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005192:	462f      	mov	r7, r5
 8005194:	42bb      	cmp	r3, r7
 8005196:	460d      	mov	r5, r1
 8005198:	d9f4      	bls.n	8005184 <_printf_i+0x114>
 800519a:	2b08      	cmp	r3, #8
 800519c:	d10b      	bne.n	80051b6 <_printf_i+0x146>
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	07df      	lsls	r7, r3, #31
 80051a2:	d508      	bpl.n	80051b6 <_printf_i+0x146>
 80051a4:	6923      	ldr	r3, [r4, #16]
 80051a6:	6861      	ldr	r1, [r4, #4]
 80051a8:	4299      	cmp	r1, r3
 80051aa:	bfde      	ittt	le
 80051ac:	2330      	movle	r3, #48	@ 0x30
 80051ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051b2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80051b6:	1b92      	subs	r2, r2, r6
 80051b8:	6122      	str	r2, [r4, #16]
 80051ba:	464b      	mov	r3, r9
 80051bc:	4621      	mov	r1, r4
 80051be:	4640      	mov	r0, r8
 80051c0:	f8cd a000 	str.w	sl, [sp]
 80051c4:	aa03      	add	r2, sp, #12
 80051c6:	f7ff fee1 	bl	8004f8c <_printf_common>
 80051ca:	3001      	adds	r0, #1
 80051cc:	d14a      	bne.n	8005264 <_printf_i+0x1f4>
 80051ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051d2:	b004      	add	sp, #16
 80051d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	f043 0320 	orr.w	r3, r3, #32
 80051de:	6023      	str	r3, [r4, #0]
 80051e0:	2778      	movs	r7, #120	@ 0x78
 80051e2:	4832      	ldr	r0, [pc, #200]	@ (80052ac <_printf_i+0x23c>)
 80051e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	6831      	ldr	r1, [r6, #0]
 80051ec:	061f      	lsls	r7, r3, #24
 80051ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80051f2:	d402      	bmi.n	80051fa <_printf_i+0x18a>
 80051f4:	065f      	lsls	r7, r3, #25
 80051f6:	bf48      	it	mi
 80051f8:	b2ad      	uxthmi	r5, r5
 80051fa:	6031      	str	r1, [r6, #0]
 80051fc:	07d9      	lsls	r1, r3, #31
 80051fe:	bf44      	itt	mi
 8005200:	f043 0320 	orrmi.w	r3, r3, #32
 8005204:	6023      	strmi	r3, [r4, #0]
 8005206:	b11d      	cbz	r5, 8005210 <_printf_i+0x1a0>
 8005208:	2310      	movs	r3, #16
 800520a:	e7ab      	b.n	8005164 <_printf_i+0xf4>
 800520c:	4826      	ldr	r0, [pc, #152]	@ (80052a8 <_printf_i+0x238>)
 800520e:	e7e9      	b.n	80051e4 <_printf_i+0x174>
 8005210:	6823      	ldr	r3, [r4, #0]
 8005212:	f023 0320 	bic.w	r3, r3, #32
 8005216:	6023      	str	r3, [r4, #0]
 8005218:	e7f6      	b.n	8005208 <_printf_i+0x198>
 800521a:	4616      	mov	r6, r2
 800521c:	e7bd      	b.n	800519a <_printf_i+0x12a>
 800521e:	6833      	ldr	r3, [r6, #0]
 8005220:	6825      	ldr	r5, [r4, #0]
 8005222:	1d18      	adds	r0, r3, #4
 8005224:	6961      	ldr	r1, [r4, #20]
 8005226:	6030      	str	r0, [r6, #0]
 8005228:	062e      	lsls	r6, r5, #24
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	d501      	bpl.n	8005232 <_printf_i+0x1c2>
 800522e:	6019      	str	r1, [r3, #0]
 8005230:	e002      	b.n	8005238 <_printf_i+0x1c8>
 8005232:	0668      	lsls	r0, r5, #25
 8005234:	d5fb      	bpl.n	800522e <_printf_i+0x1be>
 8005236:	8019      	strh	r1, [r3, #0]
 8005238:	2300      	movs	r3, #0
 800523a:	4616      	mov	r6, r2
 800523c:	6123      	str	r3, [r4, #16]
 800523e:	e7bc      	b.n	80051ba <_printf_i+0x14a>
 8005240:	6833      	ldr	r3, [r6, #0]
 8005242:	2100      	movs	r1, #0
 8005244:	1d1a      	adds	r2, r3, #4
 8005246:	6032      	str	r2, [r6, #0]
 8005248:	681e      	ldr	r6, [r3, #0]
 800524a:	6862      	ldr	r2, [r4, #4]
 800524c:	4630      	mov	r0, r6
 800524e:	f000 f9c6 	bl	80055de <memchr>
 8005252:	b108      	cbz	r0, 8005258 <_printf_i+0x1e8>
 8005254:	1b80      	subs	r0, r0, r6
 8005256:	6060      	str	r0, [r4, #4]
 8005258:	6863      	ldr	r3, [r4, #4]
 800525a:	6123      	str	r3, [r4, #16]
 800525c:	2300      	movs	r3, #0
 800525e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005262:	e7aa      	b.n	80051ba <_printf_i+0x14a>
 8005264:	4632      	mov	r2, r6
 8005266:	4649      	mov	r1, r9
 8005268:	4640      	mov	r0, r8
 800526a:	6923      	ldr	r3, [r4, #16]
 800526c:	47d0      	blx	sl
 800526e:	3001      	adds	r0, #1
 8005270:	d0ad      	beq.n	80051ce <_printf_i+0x15e>
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	079b      	lsls	r3, r3, #30
 8005276:	d413      	bmi.n	80052a0 <_printf_i+0x230>
 8005278:	68e0      	ldr	r0, [r4, #12]
 800527a:	9b03      	ldr	r3, [sp, #12]
 800527c:	4298      	cmp	r0, r3
 800527e:	bfb8      	it	lt
 8005280:	4618      	movlt	r0, r3
 8005282:	e7a6      	b.n	80051d2 <_printf_i+0x162>
 8005284:	2301      	movs	r3, #1
 8005286:	4632      	mov	r2, r6
 8005288:	4649      	mov	r1, r9
 800528a:	4640      	mov	r0, r8
 800528c:	47d0      	blx	sl
 800528e:	3001      	adds	r0, #1
 8005290:	d09d      	beq.n	80051ce <_printf_i+0x15e>
 8005292:	3501      	adds	r5, #1
 8005294:	68e3      	ldr	r3, [r4, #12]
 8005296:	9903      	ldr	r1, [sp, #12]
 8005298:	1a5b      	subs	r3, r3, r1
 800529a:	42ab      	cmp	r3, r5
 800529c:	dcf2      	bgt.n	8005284 <_printf_i+0x214>
 800529e:	e7eb      	b.n	8005278 <_printf_i+0x208>
 80052a0:	2500      	movs	r5, #0
 80052a2:	f104 0619 	add.w	r6, r4, #25
 80052a6:	e7f5      	b.n	8005294 <_printf_i+0x224>
 80052a8:	08008550 	.word	0x08008550
 80052ac:	08008561 	.word	0x08008561

080052b0 <std>:
 80052b0:	2300      	movs	r3, #0
 80052b2:	b510      	push	{r4, lr}
 80052b4:	4604      	mov	r4, r0
 80052b6:	e9c0 3300 	strd	r3, r3, [r0]
 80052ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052be:	6083      	str	r3, [r0, #8]
 80052c0:	8181      	strh	r1, [r0, #12]
 80052c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80052c4:	81c2      	strh	r2, [r0, #14]
 80052c6:	6183      	str	r3, [r0, #24]
 80052c8:	4619      	mov	r1, r3
 80052ca:	2208      	movs	r2, #8
 80052cc:	305c      	adds	r0, #92	@ 0x5c
 80052ce:	f000 f906 	bl	80054de <memset>
 80052d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005308 <std+0x58>)
 80052d4:	6224      	str	r4, [r4, #32]
 80052d6:	6263      	str	r3, [r4, #36]	@ 0x24
 80052d8:	4b0c      	ldr	r3, [pc, #48]	@ (800530c <std+0x5c>)
 80052da:	62a3      	str	r3, [r4, #40]	@ 0x28
 80052dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005310 <std+0x60>)
 80052de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80052e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <std+0x64>)
 80052e2:	6323      	str	r3, [r4, #48]	@ 0x30
 80052e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005318 <std+0x68>)
 80052e6:	429c      	cmp	r4, r3
 80052e8:	d006      	beq.n	80052f8 <std+0x48>
 80052ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80052ee:	4294      	cmp	r4, r2
 80052f0:	d002      	beq.n	80052f8 <std+0x48>
 80052f2:	33d0      	adds	r3, #208	@ 0xd0
 80052f4:	429c      	cmp	r4, r3
 80052f6:	d105      	bne.n	8005304 <std+0x54>
 80052f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80052fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005300:	f000 b96a 	b.w	80055d8 <__retarget_lock_init_recursive>
 8005304:	bd10      	pop	{r4, pc}
 8005306:	bf00      	nop
 8005308:	08005459 	.word	0x08005459
 800530c:	0800547b 	.word	0x0800547b
 8005310:	080054b3 	.word	0x080054b3
 8005314:	080054d7 	.word	0x080054d7
 8005318:	200002d8 	.word	0x200002d8

0800531c <stdio_exit_handler>:
 800531c:	4a02      	ldr	r2, [pc, #8]	@ (8005328 <stdio_exit_handler+0xc>)
 800531e:	4903      	ldr	r1, [pc, #12]	@ (800532c <stdio_exit_handler+0x10>)
 8005320:	4803      	ldr	r0, [pc, #12]	@ (8005330 <stdio_exit_handler+0x14>)
 8005322:	f000 b869 	b.w	80053f8 <_fwalk_sglue>
 8005326:	bf00      	nop
 8005328:	2000000c 	.word	0x2000000c
 800532c:	08006f1d 	.word	0x08006f1d
 8005330:	2000001c 	.word	0x2000001c

08005334 <cleanup_stdio>:
 8005334:	6841      	ldr	r1, [r0, #4]
 8005336:	4b0c      	ldr	r3, [pc, #48]	@ (8005368 <cleanup_stdio+0x34>)
 8005338:	b510      	push	{r4, lr}
 800533a:	4299      	cmp	r1, r3
 800533c:	4604      	mov	r4, r0
 800533e:	d001      	beq.n	8005344 <cleanup_stdio+0x10>
 8005340:	f001 fdec 	bl	8006f1c <_fflush_r>
 8005344:	68a1      	ldr	r1, [r4, #8]
 8005346:	4b09      	ldr	r3, [pc, #36]	@ (800536c <cleanup_stdio+0x38>)
 8005348:	4299      	cmp	r1, r3
 800534a:	d002      	beq.n	8005352 <cleanup_stdio+0x1e>
 800534c:	4620      	mov	r0, r4
 800534e:	f001 fde5 	bl	8006f1c <_fflush_r>
 8005352:	68e1      	ldr	r1, [r4, #12]
 8005354:	4b06      	ldr	r3, [pc, #24]	@ (8005370 <cleanup_stdio+0x3c>)
 8005356:	4299      	cmp	r1, r3
 8005358:	d004      	beq.n	8005364 <cleanup_stdio+0x30>
 800535a:	4620      	mov	r0, r4
 800535c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005360:	f001 bddc 	b.w	8006f1c <_fflush_r>
 8005364:	bd10      	pop	{r4, pc}
 8005366:	bf00      	nop
 8005368:	200002d8 	.word	0x200002d8
 800536c:	20000340 	.word	0x20000340
 8005370:	200003a8 	.word	0x200003a8

08005374 <global_stdio_init.part.0>:
 8005374:	b510      	push	{r4, lr}
 8005376:	4b0b      	ldr	r3, [pc, #44]	@ (80053a4 <global_stdio_init.part.0+0x30>)
 8005378:	4c0b      	ldr	r4, [pc, #44]	@ (80053a8 <global_stdio_init.part.0+0x34>)
 800537a:	4a0c      	ldr	r2, [pc, #48]	@ (80053ac <global_stdio_init.part.0+0x38>)
 800537c:	4620      	mov	r0, r4
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	2104      	movs	r1, #4
 8005382:	2200      	movs	r2, #0
 8005384:	f7ff ff94 	bl	80052b0 <std>
 8005388:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800538c:	2201      	movs	r2, #1
 800538e:	2109      	movs	r1, #9
 8005390:	f7ff ff8e 	bl	80052b0 <std>
 8005394:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005398:	2202      	movs	r2, #2
 800539a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800539e:	2112      	movs	r1, #18
 80053a0:	f7ff bf86 	b.w	80052b0 <std>
 80053a4:	20000410 	.word	0x20000410
 80053a8:	200002d8 	.word	0x200002d8
 80053ac:	0800531d 	.word	0x0800531d

080053b0 <__sfp_lock_acquire>:
 80053b0:	4801      	ldr	r0, [pc, #4]	@ (80053b8 <__sfp_lock_acquire+0x8>)
 80053b2:	f000 b912 	b.w	80055da <__retarget_lock_acquire_recursive>
 80053b6:	bf00      	nop
 80053b8:	20000419 	.word	0x20000419

080053bc <__sfp_lock_release>:
 80053bc:	4801      	ldr	r0, [pc, #4]	@ (80053c4 <__sfp_lock_release+0x8>)
 80053be:	f000 b90d 	b.w	80055dc <__retarget_lock_release_recursive>
 80053c2:	bf00      	nop
 80053c4:	20000419 	.word	0x20000419

080053c8 <__sinit>:
 80053c8:	b510      	push	{r4, lr}
 80053ca:	4604      	mov	r4, r0
 80053cc:	f7ff fff0 	bl	80053b0 <__sfp_lock_acquire>
 80053d0:	6a23      	ldr	r3, [r4, #32]
 80053d2:	b11b      	cbz	r3, 80053dc <__sinit+0x14>
 80053d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053d8:	f7ff bff0 	b.w	80053bc <__sfp_lock_release>
 80053dc:	4b04      	ldr	r3, [pc, #16]	@ (80053f0 <__sinit+0x28>)
 80053de:	6223      	str	r3, [r4, #32]
 80053e0:	4b04      	ldr	r3, [pc, #16]	@ (80053f4 <__sinit+0x2c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1f5      	bne.n	80053d4 <__sinit+0xc>
 80053e8:	f7ff ffc4 	bl	8005374 <global_stdio_init.part.0>
 80053ec:	e7f2      	b.n	80053d4 <__sinit+0xc>
 80053ee:	bf00      	nop
 80053f0:	08005335 	.word	0x08005335
 80053f4:	20000410 	.word	0x20000410

080053f8 <_fwalk_sglue>:
 80053f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053fc:	4607      	mov	r7, r0
 80053fe:	4688      	mov	r8, r1
 8005400:	4614      	mov	r4, r2
 8005402:	2600      	movs	r6, #0
 8005404:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005408:	f1b9 0901 	subs.w	r9, r9, #1
 800540c:	d505      	bpl.n	800541a <_fwalk_sglue+0x22>
 800540e:	6824      	ldr	r4, [r4, #0]
 8005410:	2c00      	cmp	r4, #0
 8005412:	d1f7      	bne.n	8005404 <_fwalk_sglue+0xc>
 8005414:	4630      	mov	r0, r6
 8005416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800541a:	89ab      	ldrh	r3, [r5, #12]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d907      	bls.n	8005430 <_fwalk_sglue+0x38>
 8005420:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005424:	3301      	adds	r3, #1
 8005426:	d003      	beq.n	8005430 <_fwalk_sglue+0x38>
 8005428:	4629      	mov	r1, r5
 800542a:	4638      	mov	r0, r7
 800542c:	47c0      	blx	r8
 800542e:	4306      	orrs	r6, r0
 8005430:	3568      	adds	r5, #104	@ 0x68
 8005432:	e7e9      	b.n	8005408 <_fwalk_sglue+0x10>

08005434 <iprintf>:
 8005434:	b40f      	push	{r0, r1, r2, r3}
 8005436:	b507      	push	{r0, r1, r2, lr}
 8005438:	4906      	ldr	r1, [pc, #24]	@ (8005454 <iprintf+0x20>)
 800543a:	ab04      	add	r3, sp, #16
 800543c:	6808      	ldr	r0, [r1, #0]
 800543e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005442:	6881      	ldr	r1, [r0, #8]
 8005444:	9301      	str	r3, [sp, #4]
 8005446:	f001 fbd1 	bl	8006bec <_vfiprintf_r>
 800544a:	b003      	add	sp, #12
 800544c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005450:	b004      	add	sp, #16
 8005452:	4770      	bx	lr
 8005454:	20000018 	.word	0x20000018

08005458 <__sread>:
 8005458:	b510      	push	{r4, lr}
 800545a:	460c      	mov	r4, r1
 800545c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005460:	f000 f86c 	bl	800553c <_read_r>
 8005464:	2800      	cmp	r0, #0
 8005466:	bfab      	itete	ge
 8005468:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800546a:	89a3      	ldrhlt	r3, [r4, #12]
 800546c:	181b      	addge	r3, r3, r0
 800546e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005472:	bfac      	ite	ge
 8005474:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005476:	81a3      	strhlt	r3, [r4, #12]
 8005478:	bd10      	pop	{r4, pc}

0800547a <__swrite>:
 800547a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800547e:	461f      	mov	r7, r3
 8005480:	898b      	ldrh	r3, [r1, #12]
 8005482:	4605      	mov	r5, r0
 8005484:	05db      	lsls	r3, r3, #23
 8005486:	460c      	mov	r4, r1
 8005488:	4616      	mov	r6, r2
 800548a:	d505      	bpl.n	8005498 <__swrite+0x1e>
 800548c:	2302      	movs	r3, #2
 800548e:	2200      	movs	r2, #0
 8005490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005494:	f000 f840 	bl	8005518 <_lseek_r>
 8005498:	89a3      	ldrh	r3, [r4, #12]
 800549a:	4632      	mov	r2, r6
 800549c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054a0:	81a3      	strh	r3, [r4, #12]
 80054a2:	4628      	mov	r0, r5
 80054a4:	463b      	mov	r3, r7
 80054a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054ae:	f000 b857 	b.w	8005560 <_write_r>

080054b2 <__sseek>:
 80054b2:	b510      	push	{r4, lr}
 80054b4:	460c      	mov	r4, r1
 80054b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ba:	f000 f82d 	bl	8005518 <_lseek_r>
 80054be:	1c43      	adds	r3, r0, #1
 80054c0:	89a3      	ldrh	r3, [r4, #12]
 80054c2:	bf15      	itete	ne
 80054c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80054ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80054ce:	81a3      	strheq	r3, [r4, #12]
 80054d0:	bf18      	it	ne
 80054d2:	81a3      	strhne	r3, [r4, #12]
 80054d4:	bd10      	pop	{r4, pc}

080054d6 <__sclose>:
 80054d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054da:	f000 b80d 	b.w	80054f8 <_close_r>

080054de <memset>:
 80054de:	4603      	mov	r3, r0
 80054e0:	4402      	add	r2, r0
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d100      	bne.n	80054e8 <memset+0xa>
 80054e6:	4770      	bx	lr
 80054e8:	f803 1b01 	strb.w	r1, [r3], #1
 80054ec:	e7f9      	b.n	80054e2 <memset+0x4>
	...

080054f0 <_localeconv_r>:
 80054f0:	4800      	ldr	r0, [pc, #0]	@ (80054f4 <_localeconv_r+0x4>)
 80054f2:	4770      	bx	lr
 80054f4:	20000158 	.word	0x20000158

080054f8 <_close_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	2300      	movs	r3, #0
 80054fc:	4d05      	ldr	r5, [pc, #20]	@ (8005514 <_close_r+0x1c>)
 80054fe:	4604      	mov	r4, r0
 8005500:	4608      	mov	r0, r1
 8005502:	602b      	str	r3, [r5, #0]
 8005504:	f7fc f973 	bl	80017ee <_close>
 8005508:	1c43      	adds	r3, r0, #1
 800550a:	d102      	bne.n	8005512 <_close_r+0x1a>
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	b103      	cbz	r3, 8005512 <_close_r+0x1a>
 8005510:	6023      	str	r3, [r4, #0]
 8005512:	bd38      	pop	{r3, r4, r5, pc}
 8005514:	20000414 	.word	0x20000414

08005518 <_lseek_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4604      	mov	r4, r0
 800551c:	4608      	mov	r0, r1
 800551e:	4611      	mov	r1, r2
 8005520:	2200      	movs	r2, #0
 8005522:	4d05      	ldr	r5, [pc, #20]	@ (8005538 <_lseek_r+0x20>)
 8005524:	602a      	str	r2, [r5, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	f7fc f985 	bl	8001836 <_lseek>
 800552c:	1c43      	adds	r3, r0, #1
 800552e:	d102      	bne.n	8005536 <_lseek_r+0x1e>
 8005530:	682b      	ldr	r3, [r5, #0]
 8005532:	b103      	cbz	r3, 8005536 <_lseek_r+0x1e>
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	bd38      	pop	{r3, r4, r5, pc}
 8005538:	20000414 	.word	0x20000414

0800553c <_read_r>:
 800553c:	b538      	push	{r3, r4, r5, lr}
 800553e:	4604      	mov	r4, r0
 8005540:	4608      	mov	r0, r1
 8005542:	4611      	mov	r1, r2
 8005544:	2200      	movs	r2, #0
 8005546:	4d05      	ldr	r5, [pc, #20]	@ (800555c <_read_r+0x20>)
 8005548:	602a      	str	r2, [r5, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	f7fc f916 	bl	800177c <_read>
 8005550:	1c43      	adds	r3, r0, #1
 8005552:	d102      	bne.n	800555a <_read_r+0x1e>
 8005554:	682b      	ldr	r3, [r5, #0]
 8005556:	b103      	cbz	r3, 800555a <_read_r+0x1e>
 8005558:	6023      	str	r3, [r4, #0]
 800555a:	bd38      	pop	{r3, r4, r5, pc}
 800555c:	20000414 	.word	0x20000414

08005560 <_write_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	4604      	mov	r4, r0
 8005564:	4608      	mov	r0, r1
 8005566:	4611      	mov	r1, r2
 8005568:	2200      	movs	r2, #0
 800556a:	4d05      	ldr	r5, [pc, #20]	@ (8005580 <_write_r+0x20>)
 800556c:	602a      	str	r2, [r5, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	f7fc f921 	bl	80017b6 <_write>
 8005574:	1c43      	adds	r3, r0, #1
 8005576:	d102      	bne.n	800557e <_write_r+0x1e>
 8005578:	682b      	ldr	r3, [r5, #0]
 800557a:	b103      	cbz	r3, 800557e <_write_r+0x1e>
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	bd38      	pop	{r3, r4, r5, pc}
 8005580:	20000414 	.word	0x20000414

08005584 <__errno>:
 8005584:	4b01      	ldr	r3, [pc, #4]	@ (800558c <__errno+0x8>)
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	20000018 	.word	0x20000018

08005590 <__libc_init_array>:
 8005590:	b570      	push	{r4, r5, r6, lr}
 8005592:	2600      	movs	r6, #0
 8005594:	4d0c      	ldr	r5, [pc, #48]	@ (80055c8 <__libc_init_array+0x38>)
 8005596:	4c0d      	ldr	r4, [pc, #52]	@ (80055cc <__libc_init_array+0x3c>)
 8005598:	1b64      	subs	r4, r4, r5
 800559a:	10a4      	asrs	r4, r4, #2
 800559c:	42a6      	cmp	r6, r4
 800559e:	d109      	bne.n	80055b4 <__libc_init_array+0x24>
 80055a0:	f002 ff86 	bl	80084b0 <_init>
 80055a4:	2600      	movs	r6, #0
 80055a6:	4d0a      	ldr	r5, [pc, #40]	@ (80055d0 <__libc_init_array+0x40>)
 80055a8:	4c0a      	ldr	r4, [pc, #40]	@ (80055d4 <__libc_init_array+0x44>)
 80055aa:	1b64      	subs	r4, r4, r5
 80055ac:	10a4      	asrs	r4, r4, #2
 80055ae:	42a6      	cmp	r6, r4
 80055b0:	d105      	bne.n	80055be <__libc_init_array+0x2e>
 80055b2:	bd70      	pop	{r4, r5, r6, pc}
 80055b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b8:	4798      	blx	r3
 80055ba:	3601      	adds	r6, #1
 80055bc:	e7ee      	b.n	800559c <__libc_init_array+0xc>
 80055be:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c2:	4798      	blx	r3
 80055c4:	3601      	adds	r6, #1
 80055c6:	e7f2      	b.n	80055ae <__libc_init_array+0x1e>
 80055c8:	08008918 	.word	0x08008918
 80055cc:	08008918 	.word	0x08008918
 80055d0:	08008918 	.word	0x08008918
 80055d4:	0800891c 	.word	0x0800891c

080055d8 <__retarget_lock_init_recursive>:
 80055d8:	4770      	bx	lr

080055da <__retarget_lock_acquire_recursive>:
 80055da:	4770      	bx	lr

080055dc <__retarget_lock_release_recursive>:
 80055dc:	4770      	bx	lr

080055de <memchr>:
 80055de:	4603      	mov	r3, r0
 80055e0:	b510      	push	{r4, lr}
 80055e2:	b2c9      	uxtb	r1, r1
 80055e4:	4402      	add	r2, r0
 80055e6:	4293      	cmp	r3, r2
 80055e8:	4618      	mov	r0, r3
 80055ea:	d101      	bne.n	80055f0 <memchr+0x12>
 80055ec:	2000      	movs	r0, #0
 80055ee:	e003      	b.n	80055f8 <memchr+0x1a>
 80055f0:	7804      	ldrb	r4, [r0, #0]
 80055f2:	3301      	adds	r3, #1
 80055f4:	428c      	cmp	r4, r1
 80055f6:	d1f6      	bne.n	80055e6 <memchr+0x8>
 80055f8:	bd10      	pop	{r4, pc}

080055fa <quorem>:
 80055fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055fe:	6903      	ldr	r3, [r0, #16]
 8005600:	690c      	ldr	r4, [r1, #16]
 8005602:	4607      	mov	r7, r0
 8005604:	42a3      	cmp	r3, r4
 8005606:	db7e      	blt.n	8005706 <quorem+0x10c>
 8005608:	3c01      	subs	r4, #1
 800560a:	00a3      	lsls	r3, r4, #2
 800560c:	f100 0514 	add.w	r5, r0, #20
 8005610:	f101 0814 	add.w	r8, r1, #20
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800561a:	9301      	str	r3, [sp, #4]
 800561c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005620:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005624:	3301      	adds	r3, #1
 8005626:	429a      	cmp	r2, r3
 8005628:	fbb2 f6f3 	udiv	r6, r2, r3
 800562c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005630:	d32e      	bcc.n	8005690 <quorem+0x96>
 8005632:	f04f 0a00 	mov.w	sl, #0
 8005636:	46c4      	mov	ip, r8
 8005638:	46ae      	mov	lr, r5
 800563a:	46d3      	mov	fp, sl
 800563c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005640:	b298      	uxth	r0, r3
 8005642:	fb06 a000 	mla	r0, r6, r0, sl
 8005646:	0c1b      	lsrs	r3, r3, #16
 8005648:	0c02      	lsrs	r2, r0, #16
 800564a:	fb06 2303 	mla	r3, r6, r3, r2
 800564e:	f8de 2000 	ldr.w	r2, [lr]
 8005652:	b280      	uxth	r0, r0
 8005654:	b292      	uxth	r2, r2
 8005656:	1a12      	subs	r2, r2, r0
 8005658:	445a      	add	r2, fp
 800565a:	f8de 0000 	ldr.w	r0, [lr]
 800565e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005662:	b29b      	uxth	r3, r3
 8005664:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005668:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800566c:	b292      	uxth	r2, r2
 800566e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005672:	45e1      	cmp	r9, ip
 8005674:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005678:	f84e 2b04 	str.w	r2, [lr], #4
 800567c:	d2de      	bcs.n	800563c <quorem+0x42>
 800567e:	9b00      	ldr	r3, [sp, #0]
 8005680:	58eb      	ldr	r3, [r5, r3]
 8005682:	b92b      	cbnz	r3, 8005690 <quorem+0x96>
 8005684:	9b01      	ldr	r3, [sp, #4]
 8005686:	3b04      	subs	r3, #4
 8005688:	429d      	cmp	r5, r3
 800568a:	461a      	mov	r2, r3
 800568c:	d32f      	bcc.n	80056ee <quorem+0xf4>
 800568e:	613c      	str	r4, [r7, #16]
 8005690:	4638      	mov	r0, r7
 8005692:	f001 f97b 	bl	800698c <__mcmp>
 8005696:	2800      	cmp	r0, #0
 8005698:	db25      	blt.n	80056e6 <quorem+0xec>
 800569a:	4629      	mov	r1, r5
 800569c:	2000      	movs	r0, #0
 800569e:	f858 2b04 	ldr.w	r2, [r8], #4
 80056a2:	f8d1 c000 	ldr.w	ip, [r1]
 80056a6:	fa1f fe82 	uxth.w	lr, r2
 80056aa:	fa1f f38c 	uxth.w	r3, ip
 80056ae:	eba3 030e 	sub.w	r3, r3, lr
 80056b2:	4403      	add	r3, r0
 80056b4:	0c12      	lsrs	r2, r2, #16
 80056b6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80056ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80056be:	b29b      	uxth	r3, r3
 80056c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056c4:	45c1      	cmp	r9, r8
 80056c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80056ca:	f841 3b04 	str.w	r3, [r1], #4
 80056ce:	d2e6      	bcs.n	800569e <quorem+0xa4>
 80056d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056d8:	b922      	cbnz	r2, 80056e4 <quorem+0xea>
 80056da:	3b04      	subs	r3, #4
 80056dc:	429d      	cmp	r5, r3
 80056de:	461a      	mov	r2, r3
 80056e0:	d30b      	bcc.n	80056fa <quorem+0x100>
 80056e2:	613c      	str	r4, [r7, #16]
 80056e4:	3601      	adds	r6, #1
 80056e6:	4630      	mov	r0, r6
 80056e8:	b003      	add	sp, #12
 80056ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ee:	6812      	ldr	r2, [r2, #0]
 80056f0:	3b04      	subs	r3, #4
 80056f2:	2a00      	cmp	r2, #0
 80056f4:	d1cb      	bne.n	800568e <quorem+0x94>
 80056f6:	3c01      	subs	r4, #1
 80056f8:	e7c6      	b.n	8005688 <quorem+0x8e>
 80056fa:	6812      	ldr	r2, [r2, #0]
 80056fc:	3b04      	subs	r3, #4
 80056fe:	2a00      	cmp	r2, #0
 8005700:	d1ef      	bne.n	80056e2 <quorem+0xe8>
 8005702:	3c01      	subs	r4, #1
 8005704:	e7ea      	b.n	80056dc <quorem+0xe2>
 8005706:	2000      	movs	r0, #0
 8005708:	e7ee      	b.n	80056e8 <quorem+0xee>
 800570a:	0000      	movs	r0, r0
 800570c:	0000      	movs	r0, r0
	...

08005710 <_dtoa_r>:
 8005710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005714:	4614      	mov	r4, r2
 8005716:	461d      	mov	r5, r3
 8005718:	69c7      	ldr	r7, [r0, #28]
 800571a:	b097      	sub	sp, #92	@ 0x5c
 800571c:	4683      	mov	fp, r0
 800571e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005722:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005724:	b97f      	cbnz	r7, 8005746 <_dtoa_r+0x36>
 8005726:	2010      	movs	r0, #16
 8005728:	f000 fe02 	bl	8006330 <malloc>
 800572c:	4602      	mov	r2, r0
 800572e:	f8cb 001c 	str.w	r0, [fp, #28]
 8005732:	b920      	cbnz	r0, 800573e <_dtoa_r+0x2e>
 8005734:	21ef      	movs	r1, #239	@ 0xef
 8005736:	4ba8      	ldr	r3, [pc, #672]	@ (80059d8 <_dtoa_r+0x2c8>)
 8005738:	48a8      	ldr	r0, [pc, #672]	@ (80059dc <_dtoa_r+0x2cc>)
 800573a:	f001 fcc9 	bl	80070d0 <__assert_func>
 800573e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005742:	6007      	str	r7, [r0, #0]
 8005744:	60c7      	str	r7, [r0, #12]
 8005746:	f8db 301c 	ldr.w	r3, [fp, #28]
 800574a:	6819      	ldr	r1, [r3, #0]
 800574c:	b159      	cbz	r1, 8005766 <_dtoa_r+0x56>
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	2301      	movs	r3, #1
 8005752:	4093      	lsls	r3, r2
 8005754:	604a      	str	r2, [r1, #4]
 8005756:	608b      	str	r3, [r1, #8]
 8005758:	4658      	mov	r0, fp
 800575a:	f000 fedf 	bl	800651c <_Bfree>
 800575e:	2200      	movs	r2, #0
 8005760:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	1e2b      	subs	r3, r5, #0
 8005768:	bfaf      	iteee	ge
 800576a:	2300      	movge	r3, #0
 800576c:	2201      	movlt	r2, #1
 800576e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005772:	9303      	strlt	r3, [sp, #12]
 8005774:	bfa8      	it	ge
 8005776:	6033      	strge	r3, [r6, #0]
 8005778:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800577c:	4b98      	ldr	r3, [pc, #608]	@ (80059e0 <_dtoa_r+0x2d0>)
 800577e:	bfb8      	it	lt
 8005780:	6032      	strlt	r2, [r6, #0]
 8005782:	ea33 0308 	bics.w	r3, r3, r8
 8005786:	d112      	bne.n	80057ae <_dtoa_r+0x9e>
 8005788:	f242 730f 	movw	r3, #9999	@ 0x270f
 800578c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005794:	4323      	orrs	r3, r4
 8005796:	f000 8550 	beq.w	800623a <_dtoa_r+0xb2a>
 800579a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800579c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80059e4 <_dtoa_r+0x2d4>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 8552 	beq.w	800624a <_dtoa_r+0xb3a>
 80057a6:	f10a 0303 	add.w	r3, sl, #3
 80057aa:	f000 bd4c 	b.w	8006246 <_dtoa_r+0xb36>
 80057ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80057b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057ba:	2200      	movs	r2, #0
 80057bc:	2300      	movs	r3, #0
 80057be:	f7fb f8f3 	bl	80009a8 <__aeabi_dcmpeq>
 80057c2:	4607      	mov	r7, r0
 80057c4:	b158      	cbz	r0, 80057de <_dtoa_r+0xce>
 80057c6:	2301      	movs	r3, #1
 80057c8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80057ce:	b113      	cbz	r3, 80057d6 <_dtoa_r+0xc6>
 80057d0:	4b85      	ldr	r3, [pc, #532]	@ (80059e8 <_dtoa_r+0x2d8>)
 80057d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80059ec <_dtoa_r+0x2dc>
 80057da:	f000 bd36 	b.w	800624a <_dtoa_r+0xb3a>
 80057de:	ab14      	add	r3, sp, #80	@ 0x50
 80057e0:	9301      	str	r3, [sp, #4]
 80057e2:	ab15      	add	r3, sp, #84	@ 0x54
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	4658      	mov	r0, fp
 80057e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80057ec:	f001 f97e 	bl	8006aec <__d2b>
 80057f0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80057f4:	4681      	mov	r9, r0
 80057f6:	2e00      	cmp	r6, #0
 80057f8:	d077      	beq.n	80058ea <_dtoa_r+0x1da>
 80057fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005800:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005808:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800580c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005810:	9712      	str	r7, [sp, #72]	@ 0x48
 8005812:	4619      	mov	r1, r3
 8005814:	2200      	movs	r2, #0
 8005816:	4b76      	ldr	r3, [pc, #472]	@ (80059f0 <_dtoa_r+0x2e0>)
 8005818:	f7fa fca6 	bl	8000168 <__aeabi_dsub>
 800581c:	a368      	add	r3, pc, #416	@ (adr r3, 80059c0 <_dtoa_r+0x2b0>)
 800581e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005822:	f7fa fe59 	bl	80004d8 <__aeabi_dmul>
 8005826:	a368      	add	r3, pc, #416	@ (adr r3, 80059c8 <_dtoa_r+0x2b8>)
 8005828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582c:	f7fa fc9e 	bl	800016c <__adddf3>
 8005830:	4604      	mov	r4, r0
 8005832:	4630      	mov	r0, r6
 8005834:	460d      	mov	r5, r1
 8005836:	f7fa fde5 	bl	8000404 <__aeabi_i2d>
 800583a:	a365      	add	r3, pc, #404	@ (adr r3, 80059d0 <_dtoa_r+0x2c0>)
 800583c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005840:	f7fa fe4a 	bl	80004d8 <__aeabi_dmul>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4620      	mov	r0, r4
 800584a:	4629      	mov	r1, r5
 800584c:	f7fa fc8e 	bl	800016c <__adddf3>
 8005850:	4604      	mov	r4, r0
 8005852:	460d      	mov	r5, r1
 8005854:	f7fb f8f0 	bl	8000a38 <__aeabi_d2iz>
 8005858:	2200      	movs	r2, #0
 800585a:	4607      	mov	r7, r0
 800585c:	2300      	movs	r3, #0
 800585e:	4620      	mov	r0, r4
 8005860:	4629      	mov	r1, r5
 8005862:	f7fb f8ab 	bl	80009bc <__aeabi_dcmplt>
 8005866:	b140      	cbz	r0, 800587a <_dtoa_r+0x16a>
 8005868:	4638      	mov	r0, r7
 800586a:	f7fa fdcb 	bl	8000404 <__aeabi_i2d>
 800586e:	4622      	mov	r2, r4
 8005870:	462b      	mov	r3, r5
 8005872:	f7fb f899 	bl	80009a8 <__aeabi_dcmpeq>
 8005876:	b900      	cbnz	r0, 800587a <_dtoa_r+0x16a>
 8005878:	3f01      	subs	r7, #1
 800587a:	2f16      	cmp	r7, #22
 800587c:	d853      	bhi.n	8005926 <_dtoa_r+0x216>
 800587e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005882:	4b5c      	ldr	r3, [pc, #368]	@ (80059f4 <_dtoa_r+0x2e4>)
 8005884:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588c:	f7fb f896 	bl	80009bc <__aeabi_dcmplt>
 8005890:	2800      	cmp	r0, #0
 8005892:	d04a      	beq.n	800592a <_dtoa_r+0x21a>
 8005894:	2300      	movs	r3, #0
 8005896:	3f01      	subs	r7, #1
 8005898:	930f      	str	r3, [sp, #60]	@ 0x3c
 800589a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800589c:	1b9b      	subs	r3, r3, r6
 800589e:	1e5a      	subs	r2, r3, #1
 80058a0:	bf46      	itte	mi
 80058a2:	f1c3 0801 	rsbmi	r8, r3, #1
 80058a6:	2300      	movmi	r3, #0
 80058a8:	f04f 0800 	movpl.w	r8, #0
 80058ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80058ae:	bf48      	it	mi
 80058b0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80058b2:	2f00      	cmp	r7, #0
 80058b4:	db3b      	blt.n	800592e <_dtoa_r+0x21e>
 80058b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058b8:	970e      	str	r7, [sp, #56]	@ 0x38
 80058ba:	443b      	add	r3, r7
 80058bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80058be:	2300      	movs	r3, #0
 80058c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80058c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058c4:	2b09      	cmp	r3, #9
 80058c6:	d866      	bhi.n	8005996 <_dtoa_r+0x286>
 80058c8:	2b05      	cmp	r3, #5
 80058ca:	bfc4      	itt	gt
 80058cc:	3b04      	subgt	r3, #4
 80058ce:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80058d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058d2:	bfc8      	it	gt
 80058d4:	2400      	movgt	r4, #0
 80058d6:	f1a3 0302 	sub.w	r3, r3, #2
 80058da:	bfd8      	it	le
 80058dc:	2401      	movle	r4, #1
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d864      	bhi.n	80059ac <_dtoa_r+0x29c>
 80058e2:	e8df f003 	tbb	[pc, r3]
 80058e6:	382b      	.short	0x382b
 80058e8:	5636      	.short	0x5636
 80058ea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80058ee:	441e      	add	r6, r3
 80058f0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	bfc1      	itttt	gt
 80058f8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80058fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8005900:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005904:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005908:	bfd6      	itet	le
 800590a:	f1c3 0320 	rsble	r3, r3, #32
 800590e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005912:	fa04 f003 	lslle.w	r0, r4, r3
 8005916:	f7fa fd65 	bl	80003e4 <__aeabi_ui2d>
 800591a:	2201      	movs	r2, #1
 800591c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005920:	3e01      	subs	r6, #1
 8005922:	9212      	str	r2, [sp, #72]	@ 0x48
 8005924:	e775      	b.n	8005812 <_dtoa_r+0x102>
 8005926:	2301      	movs	r3, #1
 8005928:	e7b6      	b.n	8005898 <_dtoa_r+0x188>
 800592a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800592c:	e7b5      	b.n	800589a <_dtoa_r+0x18a>
 800592e:	427b      	negs	r3, r7
 8005930:	930a      	str	r3, [sp, #40]	@ 0x28
 8005932:	2300      	movs	r3, #0
 8005934:	eba8 0807 	sub.w	r8, r8, r7
 8005938:	930e      	str	r3, [sp, #56]	@ 0x38
 800593a:	e7c2      	b.n	80058c2 <_dtoa_r+0x1b2>
 800593c:	2300      	movs	r3, #0
 800593e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005940:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005942:	2b00      	cmp	r3, #0
 8005944:	dc35      	bgt.n	80059b2 <_dtoa_r+0x2a2>
 8005946:	2301      	movs	r3, #1
 8005948:	461a      	mov	r2, r3
 800594a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800594e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005950:	e00b      	b.n	800596a <_dtoa_r+0x25a>
 8005952:	2301      	movs	r3, #1
 8005954:	e7f3      	b.n	800593e <_dtoa_r+0x22e>
 8005956:	2300      	movs	r3, #0
 8005958:	930b      	str	r3, [sp, #44]	@ 0x2c
 800595a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800595c:	18fb      	adds	r3, r7, r3
 800595e:	9308      	str	r3, [sp, #32]
 8005960:	3301      	adds	r3, #1
 8005962:	2b01      	cmp	r3, #1
 8005964:	9307      	str	r3, [sp, #28]
 8005966:	bfb8      	it	lt
 8005968:	2301      	movlt	r3, #1
 800596a:	2100      	movs	r1, #0
 800596c:	2204      	movs	r2, #4
 800596e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005972:	f102 0514 	add.w	r5, r2, #20
 8005976:	429d      	cmp	r5, r3
 8005978:	d91f      	bls.n	80059ba <_dtoa_r+0x2aa>
 800597a:	6041      	str	r1, [r0, #4]
 800597c:	4658      	mov	r0, fp
 800597e:	f000 fd8d 	bl	800649c <_Balloc>
 8005982:	4682      	mov	sl, r0
 8005984:	2800      	cmp	r0, #0
 8005986:	d139      	bne.n	80059fc <_dtoa_r+0x2ec>
 8005988:	4602      	mov	r2, r0
 800598a:	f240 11af 	movw	r1, #431	@ 0x1af
 800598e:	4b1a      	ldr	r3, [pc, #104]	@ (80059f8 <_dtoa_r+0x2e8>)
 8005990:	e6d2      	b.n	8005738 <_dtoa_r+0x28>
 8005992:	2301      	movs	r3, #1
 8005994:	e7e0      	b.n	8005958 <_dtoa_r+0x248>
 8005996:	2401      	movs	r4, #1
 8005998:	2300      	movs	r3, #0
 800599a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800599c:	9320      	str	r3, [sp, #128]	@ 0x80
 800599e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059a2:	2200      	movs	r2, #0
 80059a4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80059a8:	2312      	movs	r3, #18
 80059aa:	e7d0      	b.n	800594e <_dtoa_r+0x23e>
 80059ac:	2301      	movs	r3, #1
 80059ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059b0:	e7f5      	b.n	800599e <_dtoa_r+0x28e>
 80059b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80059b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80059b8:	e7d7      	b.n	800596a <_dtoa_r+0x25a>
 80059ba:	3101      	adds	r1, #1
 80059bc:	0052      	lsls	r2, r2, #1
 80059be:	e7d8      	b.n	8005972 <_dtoa_r+0x262>
 80059c0:	636f4361 	.word	0x636f4361
 80059c4:	3fd287a7 	.word	0x3fd287a7
 80059c8:	8b60c8b3 	.word	0x8b60c8b3
 80059cc:	3fc68a28 	.word	0x3fc68a28
 80059d0:	509f79fb 	.word	0x509f79fb
 80059d4:	3fd34413 	.word	0x3fd34413
 80059d8:	0800857f 	.word	0x0800857f
 80059dc:	08008596 	.word	0x08008596
 80059e0:	7ff00000 	.word	0x7ff00000
 80059e4:	0800857b 	.word	0x0800857b
 80059e8:	0800854f 	.word	0x0800854f
 80059ec:	0800854e 	.word	0x0800854e
 80059f0:	3ff80000 	.word	0x3ff80000
 80059f4:	08008690 	.word	0x08008690
 80059f8:	080085ee 	.word	0x080085ee
 80059fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005a00:	6018      	str	r0, [r3, #0]
 8005a02:	9b07      	ldr	r3, [sp, #28]
 8005a04:	2b0e      	cmp	r3, #14
 8005a06:	f200 80a4 	bhi.w	8005b52 <_dtoa_r+0x442>
 8005a0a:	2c00      	cmp	r4, #0
 8005a0c:	f000 80a1 	beq.w	8005b52 <_dtoa_r+0x442>
 8005a10:	2f00      	cmp	r7, #0
 8005a12:	dd33      	ble.n	8005a7c <_dtoa_r+0x36c>
 8005a14:	4b86      	ldr	r3, [pc, #536]	@ (8005c30 <_dtoa_r+0x520>)
 8005a16:	f007 020f 	and.w	r2, r7, #15
 8005a1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a1e:	05f8      	lsls	r0, r7, #23
 8005a20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a24:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005a2c:	d516      	bpl.n	8005a5c <_dtoa_r+0x34c>
 8005a2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a32:	4b80      	ldr	r3, [pc, #512]	@ (8005c34 <_dtoa_r+0x524>)
 8005a34:	2603      	movs	r6, #3
 8005a36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a3a:	f7fa fe77 	bl	800072c <__aeabi_ddiv>
 8005a3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a42:	f004 040f 	and.w	r4, r4, #15
 8005a46:	4d7b      	ldr	r5, [pc, #492]	@ (8005c34 <_dtoa_r+0x524>)
 8005a48:	b954      	cbnz	r4, 8005a60 <_dtoa_r+0x350>
 8005a4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a52:	f7fa fe6b 	bl	800072c <__aeabi_ddiv>
 8005a56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a5a:	e028      	b.n	8005aae <_dtoa_r+0x39e>
 8005a5c:	2602      	movs	r6, #2
 8005a5e:	e7f2      	b.n	8005a46 <_dtoa_r+0x336>
 8005a60:	07e1      	lsls	r1, r4, #31
 8005a62:	d508      	bpl.n	8005a76 <_dtoa_r+0x366>
 8005a64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a6c:	f7fa fd34 	bl	80004d8 <__aeabi_dmul>
 8005a70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a74:	3601      	adds	r6, #1
 8005a76:	1064      	asrs	r4, r4, #1
 8005a78:	3508      	adds	r5, #8
 8005a7a:	e7e5      	b.n	8005a48 <_dtoa_r+0x338>
 8005a7c:	f000 80d2 	beq.w	8005c24 <_dtoa_r+0x514>
 8005a80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a84:	427c      	negs	r4, r7
 8005a86:	4b6a      	ldr	r3, [pc, #424]	@ (8005c30 <_dtoa_r+0x520>)
 8005a88:	f004 020f 	and.w	r2, r4, #15
 8005a8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a94:	f7fa fd20 	bl	80004d8 <__aeabi_dmul>
 8005a98:	2602      	movs	r6, #2
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005aa0:	4d64      	ldr	r5, [pc, #400]	@ (8005c34 <_dtoa_r+0x524>)
 8005aa2:	1124      	asrs	r4, r4, #4
 8005aa4:	2c00      	cmp	r4, #0
 8005aa6:	f040 80b2 	bne.w	8005c0e <_dtoa_r+0x4fe>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1d3      	bne.n	8005a56 <_dtoa_r+0x346>
 8005aae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ab2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 80b7 	beq.w	8005c28 <_dtoa_r+0x518>
 8005aba:	2200      	movs	r2, #0
 8005abc:	4620      	mov	r0, r4
 8005abe:	4629      	mov	r1, r5
 8005ac0:	4b5d      	ldr	r3, [pc, #372]	@ (8005c38 <_dtoa_r+0x528>)
 8005ac2:	f7fa ff7b 	bl	80009bc <__aeabi_dcmplt>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	f000 80ae 	beq.w	8005c28 <_dtoa_r+0x518>
 8005acc:	9b07      	ldr	r3, [sp, #28]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 80aa 	beq.w	8005c28 <_dtoa_r+0x518>
 8005ad4:	9b08      	ldr	r3, [sp, #32]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	dd37      	ble.n	8005b4a <_dtoa_r+0x43a>
 8005ada:	1e7b      	subs	r3, r7, #1
 8005adc:	4620      	mov	r0, r4
 8005ade:	9304      	str	r3, [sp, #16]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	4629      	mov	r1, r5
 8005ae4:	4b55      	ldr	r3, [pc, #340]	@ (8005c3c <_dtoa_r+0x52c>)
 8005ae6:	f7fa fcf7 	bl	80004d8 <__aeabi_dmul>
 8005aea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005aee:	9c08      	ldr	r4, [sp, #32]
 8005af0:	3601      	adds	r6, #1
 8005af2:	4630      	mov	r0, r6
 8005af4:	f7fa fc86 	bl	8000404 <__aeabi_i2d>
 8005af8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005afc:	f7fa fcec 	bl	80004d8 <__aeabi_dmul>
 8005b00:	2200      	movs	r2, #0
 8005b02:	4b4f      	ldr	r3, [pc, #316]	@ (8005c40 <_dtoa_r+0x530>)
 8005b04:	f7fa fb32 	bl	800016c <__adddf3>
 8005b08:	4605      	mov	r5, r0
 8005b0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005b0e:	2c00      	cmp	r4, #0
 8005b10:	f040 809a 	bne.w	8005c48 <_dtoa_r+0x538>
 8005b14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8005c44 <_dtoa_r+0x534>)
 8005b1c:	f7fa fb24 	bl	8000168 <__aeabi_dsub>
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b28:	462a      	mov	r2, r5
 8005b2a:	4633      	mov	r3, r6
 8005b2c:	f7fa ff64 	bl	80009f8 <__aeabi_dcmpgt>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	f040 828e 	bne.w	8006052 <_dtoa_r+0x942>
 8005b36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b3a:	462a      	mov	r2, r5
 8005b3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005b40:	f7fa ff3c 	bl	80009bc <__aeabi_dcmplt>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	f040 8127 	bne.w	8005d98 <_dtoa_r+0x688>
 8005b4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005b4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005b52:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f2c0 8163 	blt.w	8005e20 <_dtoa_r+0x710>
 8005b5a:	2f0e      	cmp	r7, #14
 8005b5c:	f300 8160 	bgt.w	8005e20 <_dtoa_r+0x710>
 8005b60:	4b33      	ldr	r3, [pc, #204]	@ (8005c30 <_dtoa_r+0x520>)
 8005b62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005b6e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	da03      	bge.n	8005b7c <_dtoa_r+0x46c>
 8005b74:	9b07      	ldr	r3, [sp, #28]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f340 8100 	ble.w	8005d7c <_dtoa_r+0x66c>
 8005b7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b80:	4656      	mov	r6, sl
 8005b82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b86:	4620      	mov	r0, r4
 8005b88:	4629      	mov	r1, r5
 8005b8a:	f7fa fdcf 	bl	800072c <__aeabi_ddiv>
 8005b8e:	f7fa ff53 	bl	8000a38 <__aeabi_d2iz>
 8005b92:	4680      	mov	r8, r0
 8005b94:	f7fa fc36 	bl	8000404 <__aeabi_i2d>
 8005b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b9c:	f7fa fc9c 	bl	80004d8 <__aeabi_dmul>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	4629      	mov	r1, r5
 8005ba8:	f7fa fade 	bl	8000168 <__aeabi_dsub>
 8005bac:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005bb0:	9d07      	ldr	r5, [sp, #28]
 8005bb2:	f806 4b01 	strb.w	r4, [r6], #1
 8005bb6:	eba6 040a 	sub.w	r4, r6, sl
 8005bba:	42a5      	cmp	r5, r4
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	f040 8116 	bne.w	8005df0 <_dtoa_r+0x6e0>
 8005bc4:	f7fa fad2 	bl	800016c <__adddf3>
 8005bc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bcc:	4604      	mov	r4, r0
 8005bce:	460d      	mov	r5, r1
 8005bd0:	f7fa ff12 	bl	80009f8 <__aeabi_dcmpgt>
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	f040 80f8 	bne.w	8005dca <_dtoa_r+0x6ba>
 8005bda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bde:	4620      	mov	r0, r4
 8005be0:	4629      	mov	r1, r5
 8005be2:	f7fa fee1 	bl	80009a8 <__aeabi_dcmpeq>
 8005be6:	b118      	cbz	r0, 8005bf0 <_dtoa_r+0x4e0>
 8005be8:	f018 0f01 	tst.w	r8, #1
 8005bec:	f040 80ed 	bne.w	8005dca <_dtoa_r+0x6ba>
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	4658      	mov	r0, fp
 8005bf4:	f000 fc92 	bl	800651c <_Bfree>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	7033      	strb	r3, [r6, #0]
 8005bfc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005bfe:	3701      	adds	r7, #1
 8005c00:	601f      	str	r7, [r3, #0]
 8005c02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 8320 	beq.w	800624a <_dtoa_r+0xb3a>
 8005c0a:	601e      	str	r6, [r3, #0]
 8005c0c:	e31d      	b.n	800624a <_dtoa_r+0xb3a>
 8005c0e:	07e2      	lsls	r2, r4, #31
 8005c10:	d505      	bpl.n	8005c1e <_dtoa_r+0x50e>
 8005c12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c16:	f7fa fc5f 	bl	80004d8 <__aeabi_dmul>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	3601      	adds	r6, #1
 8005c1e:	1064      	asrs	r4, r4, #1
 8005c20:	3508      	adds	r5, #8
 8005c22:	e73f      	b.n	8005aa4 <_dtoa_r+0x394>
 8005c24:	2602      	movs	r6, #2
 8005c26:	e742      	b.n	8005aae <_dtoa_r+0x39e>
 8005c28:	9c07      	ldr	r4, [sp, #28]
 8005c2a:	9704      	str	r7, [sp, #16]
 8005c2c:	e761      	b.n	8005af2 <_dtoa_r+0x3e2>
 8005c2e:	bf00      	nop
 8005c30:	08008690 	.word	0x08008690
 8005c34:	08008668 	.word	0x08008668
 8005c38:	3ff00000 	.word	0x3ff00000
 8005c3c:	40240000 	.word	0x40240000
 8005c40:	401c0000 	.word	0x401c0000
 8005c44:	40140000 	.word	0x40140000
 8005c48:	4b70      	ldr	r3, [pc, #448]	@ (8005e0c <_dtoa_r+0x6fc>)
 8005c4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c54:	4454      	add	r4, sl
 8005c56:	2900      	cmp	r1, #0
 8005c58:	d045      	beq.n	8005ce6 <_dtoa_r+0x5d6>
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	496c      	ldr	r1, [pc, #432]	@ (8005e10 <_dtoa_r+0x700>)
 8005c5e:	f7fa fd65 	bl	800072c <__aeabi_ddiv>
 8005c62:	4633      	mov	r3, r6
 8005c64:	462a      	mov	r2, r5
 8005c66:	f7fa fa7f 	bl	8000168 <__aeabi_dsub>
 8005c6a:	4656      	mov	r6, sl
 8005c6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c74:	f7fa fee0 	bl	8000a38 <__aeabi_d2iz>
 8005c78:	4605      	mov	r5, r0
 8005c7a:	f7fa fbc3 	bl	8000404 <__aeabi_i2d>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c86:	f7fa fa6f 	bl	8000168 <__aeabi_dsub>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	3530      	adds	r5, #48	@ 0x30
 8005c90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c98:	f806 5b01 	strb.w	r5, [r6], #1
 8005c9c:	f7fa fe8e 	bl	80009bc <__aeabi_dcmplt>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d163      	bne.n	8005d6c <_dtoa_r+0x65c>
 8005ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ca8:	2000      	movs	r0, #0
 8005caa:	495a      	ldr	r1, [pc, #360]	@ (8005e14 <_dtoa_r+0x704>)
 8005cac:	f7fa fa5c 	bl	8000168 <__aeabi_dsub>
 8005cb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005cb4:	f7fa fe82 	bl	80009bc <__aeabi_dcmplt>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	f040 8087 	bne.w	8005dcc <_dtoa_r+0x6bc>
 8005cbe:	42a6      	cmp	r6, r4
 8005cc0:	f43f af43 	beq.w	8005b4a <_dtoa_r+0x43a>
 8005cc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4b53      	ldr	r3, [pc, #332]	@ (8005e18 <_dtoa_r+0x708>)
 8005ccc:	f7fa fc04 	bl	80004d8 <__aeabi_dmul>
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cda:	4b4f      	ldr	r3, [pc, #316]	@ (8005e18 <_dtoa_r+0x708>)
 8005cdc:	f7fa fbfc 	bl	80004d8 <__aeabi_dmul>
 8005ce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ce4:	e7c4      	b.n	8005c70 <_dtoa_r+0x560>
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f7fa fbf5 	bl	80004d8 <__aeabi_dmul>
 8005cee:	4656      	mov	r6, sl
 8005cf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005cf4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cfa:	f7fa fe9d 	bl	8000a38 <__aeabi_d2iz>
 8005cfe:	4605      	mov	r5, r0
 8005d00:	f7fa fb80 	bl	8000404 <__aeabi_i2d>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d0c:	f7fa fa2c 	bl	8000168 <__aeabi_dsub>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	3530      	adds	r5, #48	@ 0x30
 8005d16:	f806 5b01 	strb.w	r5, [r6], #1
 8005d1a:	42a6      	cmp	r6, r4
 8005d1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	d124      	bne.n	8005d70 <_dtoa_r+0x660>
 8005d26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d2a:	4b39      	ldr	r3, [pc, #228]	@ (8005e10 <_dtoa_r+0x700>)
 8005d2c:	f7fa fa1e 	bl	800016c <__adddf3>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d38:	f7fa fe5e 	bl	80009f8 <__aeabi_dcmpgt>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	d145      	bne.n	8005dcc <_dtoa_r+0x6bc>
 8005d40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d44:	2000      	movs	r0, #0
 8005d46:	4932      	ldr	r1, [pc, #200]	@ (8005e10 <_dtoa_r+0x700>)
 8005d48:	f7fa fa0e 	bl	8000168 <__aeabi_dsub>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d54:	f7fa fe32 	bl	80009bc <__aeabi_dcmplt>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	f43f aef6 	beq.w	8005b4a <_dtoa_r+0x43a>
 8005d5e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005d60:	1e73      	subs	r3, r6, #1
 8005d62:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005d64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005d68:	2b30      	cmp	r3, #48	@ 0x30
 8005d6a:	d0f8      	beq.n	8005d5e <_dtoa_r+0x64e>
 8005d6c:	9f04      	ldr	r7, [sp, #16]
 8005d6e:	e73f      	b.n	8005bf0 <_dtoa_r+0x4e0>
 8005d70:	4b29      	ldr	r3, [pc, #164]	@ (8005e18 <_dtoa_r+0x708>)
 8005d72:	f7fa fbb1 	bl	80004d8 <__aeabi_dmul>
 8005d76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d7a:	e7bc      	b.n	8005cf6 <_dtoa_r+0x5e6>
 8005d7c:	d10c      	bne.n	8005d98 <_dtoa_r+0x688>
 8005d7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d82:	2200      	movs	r2, #0
 8005d84:	4b25      	ldr	r3, [pc, #148]	@ (8005e1c <_dtoa_r+0x70c>)
 8005d86:	f7fa fba7 	bl	80004d8 <__aeabi_dmul>
 8005d8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d8e:	f7fa fe29 	bl	80009e4 <__aeabi_dcmpge>
 8005d92:	2800      	cmp	r0, #0
 8005d94:	f000 815b 	beq.w	800604e <_dtoa_r+0x93e>
 8005d98:	2400      	movs	r4, #0
 8005d9a:	4625      	mov	r5, r4
 8005d9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d9e:	4656      	mov	r6, sl
 8005da0:	43db      	mvns	r3, r3
 8005da2:	9304      	str	r3, [sp, #16]
 8005da4:	2700      	movs	r7, #0
 8005da6:	4621      	mov	r1, r4
 8005da8:	4658      	mov	r0, fp
 8005daa:	f000 fbb7 	bl	800651c <_Bfree>
 8005dae:	2d00      	cmp	r5, #0
 8005db0:	d0dc      	beq.n	8005d6c <_dtoa_r+0x65c>
 8005db2:	b12f      	cbz	r7, 8005dc0 <_dtoa_r+0x6b0>
 8005db4:	42af      	cmp	r7, r5
 8005db6:	d003      	beq.n	8005dc0 <_dtoa_r+0x6b0>
 8005db8:	4639      	mov	r1, r7
 8005dba:	4658      	mov	r0, fp
 8005dbc:	f000 fbae 	bl	800651c <_Bfree>
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	4658      	mov	r0, fp
 8005dc4:	f000 fbaa 	bl	800651c <_Bfree>
 8005dc8:	e7d0      	b.n	8005d6c <_dtoa_r+0x65c>
 8005dca:	9704      	str	r7, [sp, #16]
 8005dcc:	4633      	mov	r3, r6
 8005dce:	461e      	mov	r6, r3
 8005dd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dd4:	2a39      	cmp	r2, #57	@ 0x39
 8005dd6:	d107      	bne.n	8005de8 <_dtoa_r+0x6d8>
 8005dd8:	459a      	cmp	sl, r3
 8005dda:	d1f8      	bne.n	8005dce <_dtoa_r+0x6be>
 8005ddc:	9a04      	ldr	r2, [sp, #16]
 8005dde:	3201      	adds	r2, #1
 8005de0:	9204      	str	r2, [sp, #16]
 8005de2:	2230      	movs	r2, #48	@ 0x30
 8005de4:	f88a 2000 	strb.w	r2, [sl]
 8005de8:	781a      	ldrb	r2, [r3, #0]
 8005dea:	3201      	adds	r2, #1
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	e7bd      	b.n	8005d6c <_dtoa_r+0x65c>
 8005df0:	2200      	movs	r2, #0
 8005df2:	4b09      	ldr	r3, [pc, #36]	@ (8005e18 <_dtoa_r+0x708>)
 8005df4:	f7fa fb70 	bl	80004d8 <__aeabi_dmul>
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	460d      	mov	r5, r1
 8005e00:	f7fa fdd2 	bl	80009a8 <__aeabi_dcmpeq>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	f43f aebc 	beq.w	8005b82 <_dtoa_r+0x472>
 8005e0a:	e6f1      	b.n	8005bf0 <_dtoa_r+0x4e0>
 8005e0c:	08008690 	.word	0x08008690
 8005e10:	3fe00000 	.word	0x3fe00000
 8005e14:	3ff00000 	.word	0x3ff00000
 8005e18:	40240000 	.word	0x40240000
 8005e1c:	40140000 	.word	0x40140000
 8005e20:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005e22:	2a00      	cmp	r2, #0
 8005e24:	f000 80db 	beq.w	8005fde <_dtoa_r+0x8ce>
 8005e28:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005e2a:	2a01      	cmp	r2, #1
 8005e2c:	f300 80bf 	bgt.w	8005fae <_dtoa_r+0x89e>
 8005e30:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005e32:	2a00      	cmp	r2, #0
 8005e34:	f000 80b7 	beq.w	8005fa6 <_dtoa_r+0x896>
 8005e38:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005e3c:	4646      	mov	r6, r8
 8005e3e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005e40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e42:	2101      	movs	r1, #1
 8005e44:	441a      	add	r2, r3
 8005e46:	4658      	mov	r0, fp
 8005e48:	4498      	add	r8, r3
 8005e4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e4c:	f000 fc1a 	bl	8006684 <__i2b>
 8005e50:	4605      	mov	r5, r0
 8005e52:	b15e      	cbz	r6, 8005e6c <_dtoa_r+0x75c>
 8005e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	dd08      	ble.n	8005e6c <_dtoa_r+0x75c>
 8005e5a:	42b3      	cmp	r3, r6
 8005e5c:	bfa8      	it	ge
 8005e5e:	4633      	movge	r3, r6
 8005e60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e62:	eba8 0803 	sub.w	r8, r8, r3
 8005e66:	1af6      	subs	r6, r6, r3
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e6e:	b1f3      	cbz	r3, 8005eae <_dtoa_r+0x79e>
 8005e70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 80b7 	beq.w	8005fe6 <_dtoa_r+0x8d6>
 8005e78:	b18c      	cbz	r4, 8005e9e <_dtoa_r+0x78e>
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	4622      	mov	r2, r4
 8005e7e:	4658      	mov	r0, fp
 8005e80:	f000 fcbe 	bl	8006800 <__pow5mult>
 8005e84:	464a      	mov	r2, r9
 8005e86:	4601      	mov	r1, r0
 8005e88:	4605      	mov	r5, r0
 8005e8a:	4658      	mov	r0, fp
 8005e8c:	f000 fc10 	bl	80066b0 <__multiply>
 8005e90:	4649      	mov	r1, r9
 8005e92:	9004      	str	r0, [sp, #16]
 8005e94:	4658      	mov	r0, fp
 8005e96:	f000 fb41 	bl	800651c <_Bfree>
 8005e9a:	9b04      	ldr	r3, [sp, #16]
 8005e9c:	4699      	mov	r9, r3
 8005e9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ea0:	1b1a      	subs	r2, r3, r4
 8005ea2:	d004      	beq.n	8005eae <_dtoa_r+0x79e>
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	4658      	mov	r0, fp
 8005ea8:	f000 fcaa 	bl	8006800 <__pow5mult>
 8005eac:	4681      	mov	r9, r0
 8005eae:	2101      	movs	r1, #1
 8005eb0:	4658      	mov	r0, fp
 8005eb2:	f000 fbe7 	bl	8006684 <__i2b>
 8005eb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005eb8:	4604      	mov	r4, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 81c9 	beq.w	8006252 <_dtoa_r+0xb42>
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	4601      	mov	r1, r0
 8005ec4:	4658      	mov	r0, fp
 8005ec6:	f000 fc9b 	bl	8006800 <__pow5mult>
 8005eca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ecc:	4604      	mov	r4, r0
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	f300 808f 	bgt.w	8005ff2 <_dtoa_r+0x8e2>
 8005ed4:	9b02      	ldr	r3, [sp, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f040 8087 	bne.w	8005fea <_dtoa_r+0x8da>
 8005edc:	9b03      	ldr	r3, [sp, #12]
 8005ede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f040 8083 	bne.w	8005fee <_dtoa_r+0x8de>
 8005ee8:	9b03      	ldr	r3, [sp, #12]
 8005eea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005eee:	0d1b      	lsrs	r3, r3, #20
 8005ef0:	051b      	lsls	r3, r3, #20
 8005ef2:	b12b      	cbz	r3, 8005f00 <_dtoa_r+0x7f0>
 8005ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ef6:	f108 0801 	add.w	r8, r8, #1
 8005efa:	3301      	adds	r3, #1
 8005efc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005efe:	2301      	movs	r3, #1
 8005f00:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 81aa 	beq.w	800625e <_dtoa_r+0xb4e>
 8005f0a:	6923      	ldr	r3, [r4, #16]
 8005f0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f10:	6918      	ldr	r0, [r3, #16]
 8005f12:	f000 fb6b 	bl	80065ec <__hi0bits>
 8005f16:	f1c0 0020 	rsb	r0, r0, #32
 8005f1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f1c:	4418      	add	r0, r3
 8005f1e:	f010 001f 	ands.w	r0, r0, #31
 8005f22:	d071      	beq.n	8006008 <_dtoa_r+0x8f8>
 8005f24:	f1c0 0320 	rsb	r3, r0, #32
 8005f28:	2b04      	cmp	r3, #4
 8005f2a:	dd65      	ble.n	8005ff8 <_dtoa_r+0x8e8>
 8005f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f2e:	f1c0 001c 	rsb	r0, r0, #28
 8005f32:	4403      	add	r3, r0
 8005f34:	4480      	add	r8, r0
 8005f36:	4406      	add	r6, r0
 8005f38:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f3a:	f1b8 0f00 	cmp.w	r8, #0
 8005f3e:	dd05      	ble.n	8005f4c <_dtoa_r+0x83c>
 8005f40:	4649      	mov	r1, r9
 8005f42:	4642      	mov	r2, r8
 8005f44:	4658      	mov	r0, fp
 8005f46:	f000 fcb5 	bl	80068b4 <__lshift>
 8005f4a:	4681      	mov	r9, r0
 8005f4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	dd05      	ble.n	8005f5e <_dtoa_r+0x84e>
 8005f52:	4621      	mov	r1, r4
 8005f54:	461a      	mov	r2, r3
 8005f56:	4658      	mov	r0, fp
 8005f58:	f000 fcac 	bl	80068b4 <__lshift>
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d053      	beq.n	800600c <_dtoa_r+0x8fc>
 8005f64:	4621      	mov	r1, r4
 8005f66:	4648      	mov	r0, r9
 8005f68:	f000 fd10 	bl	800698c <__mcmp>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	da4d      	bge.n	800600c <_dtoa_r+0x8fc>
 8005f70:	1e7b      	subs	r3, r7, #1
 8005f72:	4649      	mov	r1, r9
 8005f74:	9304      	str	r3, [sp, #16]
 8005f76:	220a      	movs	r2, #10
 8005f78:	2300      	movs	r3, #0
 8005f7a:	4658      	mov	r0, fp
 8005f7c:	f000 faf0 	bl	8006560 <__multadd>
 8005f80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f82:	4681      	mov	r9, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 816c 	beq.w	8006262 <_dtoa_r+0xb52>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	4629      	mov	r1, r5
 8005f8e:	220a      	movs	r2, #10
 8005f90:	4658      	mov	r0, fp
 8005f92:	f000 fae5 	bl	8006560 <__multadd>
 8005f96:	9b08      	ldr	r3, [sp, #32]
 8005f98:	4605      	mov	r5, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	dc61      	bgt.n	8006062 <_dtoa_r+0x952>
 8005f9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	dc3b      	bgt.n	800601c <_dtoa_r+0x90c>
 8005fa4:	e05d      	b.n	8006062 <_dtoa_r+0x952>
 8005fa6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005fa8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005fac:	e746      	b.n	8005e3c <_dtoa_r+0x72c>
 8005fae:	9b07      	ldr	r3, [sp, #28]
 8005fb0:	1e5c      	subs	r4, r3, #1
 8005fb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fb4:	42a3      	cmp	r3, r4
 8005fb6:	bfbf      	itttt	lt
 8005fb8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005fba:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005fbc:	1ae3      	sublt	r3, r4, r3
 8005fbe:	18d2      	addlt	r2, r2, r3
 8005fc0:	bfa8      	it	ge
 8005fc2:	1b1c      	subge	r4, r3, r4
 8005fc4:	9b07      	ldr	r3, [sp, #28]
 8005fc6:	bfbe      	ittt	lt
 8005fc8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005fca:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005fcc:	2400      	movlt	r4, #0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	bfb5      	itete	lt
 8005fd2:	eba8 0603 	sublt.w	r6, r8, r3
 8005fd6:	4646      	movge	r6, r8
 8005fd8:	2300      	movlt	r3, #0
 8005fda:	9b07      	ldrge	r3, [sp, #28]
 8005fdc:	e730      	b.n	8005e40 <_dtoa_r+0x730>
 8005fde:	4646      	mov	r6, r8
 8005fe0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005fe2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005fe4:	e735      	b.n	8005e52 <_dtoa_r+0x742>
 8005fe6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fe8:	e75c      	b.n	8005ea4 <_dtoa_r+0x794>
 8005fea:	2300      	movs	r3, #0
 8005fec:	e788      	b.n	8005f00 <_dtoa_r+0x7f0>
 8005fee:	9b02      	ldr	r3, [sp, #8]
 8005ff0:	e786      	b.n	8005f00 <_dtoa_r+0x7f0>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ff6:	e788      	b.n	8005f0a <_dtoa_r+0x7fa>
 8005ff8:	d09f      	beq.n	8005f3a <_dtoa_r+0x82a>
 8005ffa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ffc:	331c      	adds	r3, #28
 8005ffe:	441a      	add	r2, r3
 8006000:	4498      	add	r8, r3
 8006002:	441e      	add	r6, r3
 8006004:	9209      	str	r2, [sp, #36]	@ 0x24
 8006006:	e798      	b.n	8005f3a <_dtoa_r+0x82a>
 8006008:	4603      	mov	r3, r0
 800600a:	e7f6      	b.n	8005ffa <_dtoa_r+0x8ea>
 800600c:	9b07      	ldr	r3, [sp, #28]
 800600e:	9704      	str	r7, [sp, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	dc20      	bgt.n	8006056 <_dtoa_r+0x946>
 8006014:	9308      	str	r3, [sp, #32]
 8006016:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006018:	2b02      	cmp	r3, #2
 800601a:	dd1e      	ble.n	800605a <_dtoa_r+0x94a>
 800601c:	9b08      	ldr	r3, [sp, #32]
 800601e:	2b00      	cmp	r3, #0
 8006020:	f47f aebc 	bne.w	8005d9c <_dtoa_r+0x68c>
 8006024:	4621      	mov	r1, r4
 8006026:	2205      	movs	r2, #5
 8006028:	4658      	mov	r0, fp
 800602a:	f000 fa99 	bl	8006560 <__multadd>
 800602e:	4601      	mov	r1, r0
 8006030:	4604      	mov	r4, r0
 8006032:	4648      	mov	r0, r9
 8006034:	f000 fcaa 	bl	800698c <__mcmp>
 8006038:	2800      	cmp	r0, #0
 800603a:	f77f aeaf 	ble.w	8005d9c <_dtoa_r+0x68c>
 800603e:	2331      	movs	r3, #49	@ 0x31
 8006040:	4656      	mov	r6, sl
 8006042:	f806 3b01 	strb.w	r3, [r6], #1
 8006046:	9b04      	ldr	r3, [sp, #16]
 8006048:	3301      	adds	r3, #1
 800604a:	9304      	str	r3, [sp, #16]
 800604c:	e6aa      	b.n	8005da4 <_dtoa_r+0x694>
 800604e:	9c07      	ldr	r4, [sp, #28]
 8006050:	9704      	str	r7, [sp, #16]
 8006052:	4625      	mov	r5, r4
 8006054:	e7f3      	b.n	800603e <_dtoa_r+0x92e>
 8006056:	9b07      	ldr	r3, [sp, #28]
 8006058:	9308      	str	r3, [sp, #32]
 800605a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 8104 	beq.w	800626a <_dtoa_r+0xb5a>
 8006062:	2e00      	cmp	r6, #0
 8006064:	dd05      	ble.n	8006072 <_dtoa_r+0x962>
 8006066:	4629      	mov	r1, r5
 8006068:	4632      	mov	r2, r6
 800606a:	4658      	mov	r0, fp
 800606c:	f000 fc22 	bl	80068b4 <__lshift>
 8006070:	4605      	mov	r5, r0
 8006072:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006074:	2b00      	cmp	r3, #0
 8006076:	d05a      	beq.n	800612e <_dtoa_r+0xa1e>
 8006078:	4658      	mov	r0, fp
 800607a:	6869      	ldr	r1, [r5, #4]
 800607c:	f000 fa0e 	bl	800649c <_Balloc>
 8006080:	4606      	mov	r6, r0
 8006082:	b928      	cbnz	r0, 8006090 <_dtoa_r+0x980>
 8006084:	4602      	mov	r2, r0
 8006086:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800608a:	4b83      	ldr	r3, [pc, #524]	@ (8006298 <_dtoa_r+0xb88>)
 800608c:	f7ff bb54 	b.w	8005738 <_dtoa_r+0x28>
 8006090:	692a      	ldr	r2, [r5, #16]
 8006092:	f105 010c 	add.w	r1, r5, #12
 8006096:	3202      	adds	r2, #2
 8006098:	0092      	lsls	r2, r2, #2
 800609a:	300c      	adds	r0, #12
 800609c:	f001 f80a 	bl	80070b4 <memcpy>
 80060a0:	2201      	movs	r2, #1
 80060a2:	4631      	mov	r1, r6
 80060a4:	4658      	mov	r0, fp
 80060a6:	f000 fc05 	bl	80068b4 <__lshift>
 80060aa:	462f      	mov	r7, r5
 80060ac:	4605      	mov	r5, r0
 80060ae:	f10a 0301 	add.w	r3, sl, #1
 80060b2:	9307      	str	r3, [sp, #28]
 80060b4:	9b08      	ldr	r3, [sp, #32]
 80060b6:	4453      	add	r3, sl
 80060b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060ba:	9b02      	ldr	r3, [sp, #8]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80060c2:	9b07      	ldr	r3, [sp, #28]
 80060c4:	4621      	mov	r1, r4
 80060c6:	3b01      	subs	r3, #1
 80060c8:	4648      	mov	r0, r9
 80060ca:	9302      	str	r3, [sp, #8]
 80060cc:	f7ff fa95 	bl	80055fa <quorem>
 80060d0:	4639      	mov	r1, r7
 80060d2:	9008      	str	r0, [sp, #32]
 80060d4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80060d8:	4648      	mov	r0, r9
 80060da:	f000 fc57 	bl	800698c <__mcmp>
 80060de:	462a      	mov	r2, r5
 80060e0:	9009      	str	r0, [sp, #36]	@ 0x24
 80060e2:	4621      	mov	r1, r4
 80060e4:	4658      	mov	r0, fp
 80060e6:	f000 fc6d 	bl	80069c4 <__mdiff>
 80060ea:	68c2      	ldr	r2, [r0, #12]
 80060ec:	4606      	mov	r6, r0
 80060ee:	bb02      	cbnz	r2, 8006132 <_dtoa_r+0xa22>
 80060f0:	4601      	mov	r1, r0
 80060f2:	4648      	mov	r0, r9
 80060f4:	f000 fc4a 	bl	800698c <__mcmp>
 80060f8:	4602      	mov	r2, r0
 80060fa:	4631      	mov	r1, r6
 80060fc:	4658      	mov	r0, fp
 80060fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8006100:	f000 fa0c 	bl	800651c <_Bfree>
 8006104:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006106:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006108:	9e07      	ldr	r6, [sp, #28]
 800610a:	ea43 0102 	orr.w	r1, r3, r2
 800610e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006110:	4319      	orrs	r1, r3
 8006112:	d110      	bne.n	8006136 <_dtoa_r+0xa26>
 8006114:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006118:	d029      	beq.n	800616e <_dtoa_r+0xa5e>
 800611a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800611c:	2b00      	cmp	r3, #0
 800611e:	dd02      	ble.n	8006126 <_dtoa_r+0xa16>
 8006120:	9b08      	ldr	r3, [sp, #32]
 8006122:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006126:	9b02      	ldr	r3, [sp, #8]
 8006128:	f883 8000 	strb.w	r8, [r3]
 800612c:	e63b      	b.n	8005da6 <_dtoa_r+0x696>
 800612e:	4628      	mov	r0, r5
 8006130:	e7bb      	b.n	80060aa <_dtoa_r+0x99a>
 8006132:	2201      	movs	r2, #1
 8006134:	e7e1      	b.n	80060fa <_dtoa_r+0x9ea>
 8006136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006138:	2b00      	cmp	r3, #0
 800613a:	db04      	blt.n	8006146 <_dtoa_r+0xa36>
 800613c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800613e:	430b      	orrs	r3, r1
 8006140:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006142:	430b      	orrs	r3, r1
 8006144:	d120      	bne.n	8006188 <_dtoa_r+0xa78>
 8006146:	2a00      	cmp	r2, #0
 8006148:	dded      	ble.n	8006126 <_dtoa_r+0xa16>
 800614a:	4649      	mov	r1, r9
 800614c:	2201      	movs	r2, #1
 800614e:	4658      	mov	r0, fp
 8006150:	f000 fbb0 	bl	80068b4 <__lshift>
 8006154:	4621      	mov	r1, r4
 8006156:	4681      	mov	r9, r0
 8006158:	f000 fc18 	bl	800698c <__mcmp>
 800615c:	2800      	cmp	r0, #0
 800615e:	dc03      	bgt.n	8006168 <_dtoa_r+0xa58>
 8006160:	d1e1      	bne.n	8006126 <_dtoa_r+0xa16>
 8006162:	f018 0f01 	tst.w	r8, #1
 8006166:	d0de      	beq.n	8006126 <_dtoa_r+0xa16>
 8006168:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800616c:	d1d8      	bne.n	8006120 <_dtoa_r+0xa10>
 800616e:	2339      	movs	r3, #57	@ 0x39
 8006170:	9a02      	ldr	r2, [sp, #8]
 8006172:	7013      	strb	r3, [r2, #0]
 8006174:	4633      	mov	r3, r6
 8006176:	461e      	mov	r6, r3
 8006178:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800617c:	3b01      	subs	r3, #1
 800617e:	2a39      	cmp	r2, #57	@ 0x39
 8006180:	d052      	beq.n	8006228 <_dtoa_r+0xb18>
 8006182:	3201      	adds	r2, #1
 8006184:	701a      	strb	r2, [r3, #0]
 8006186:	e60e      	b.n	8005da6 <_dtoa_r+0x696>
 8006188:	2a00      	cmp	r2, #0
 800618a:	dd07      	ble.n	800619c <_dtoa_r+0xa8c>
 800618c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006190:	d0ed      	beq.n	800616e <_dtoa_r+0xa5e>
 8006192:	9a02      	ldr	r2, [sp, #8]
 8006194:	f108 0301 	add.w	r3, r8, #1
 8006198:	7013      	strb	r3, [r2, #0]
 800619a:	e604      	b.n	8005da6 <_dtoa_r+0x696>
 800619c:	9b07      	ldr	r3, [sp, #28]
 800619e:	9a07      	ldr	r2, [sp, #28]
 80061a0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80061a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d028      	beq.n	80061fc <_dtoa_r+0xaec>
 80061aa:	4649      	mov	r1, r9
 80061ac:	2300      	movs	r3, #0
 80061ae:	220a      	movs	r2, #10
 80061b0:	4658      	mov	r0, fp
 80061b2:	f000 f9d5 	bl	8006560 <__multadd>
 80061b6:	42af      	cmp	r7, r5
 80061b8:	4681      	mov	r9, r0
 80061ba:	f04f 0300 	mov.w	r3, #0
 80061be:	f04f 020a 	mov.w	r2, #10
 80061c2:	4639      	mov	r1, r7
 80061c4:	4658      	mov	r0, fp
 80061c6:	d107      	bne.n	80061d8 <_dtoa_r+0xac8>
 80061c8:	f000 f9ca 	bl	8006560 <__multadd>
 80061cc:	4607      	mov	r7, r0
 80061ce:	4605      	mov	r5, r0
 80061d0:	9b07      	ldr	r3, [sp, #28]
 80061d2:	3301      	adds	r3, #1
 80061d4:	9307      	str	r3, [sp, #28]
 80061d6:	e774      	b.n	80060c2 <_dtoa_r+0x9b2>
 80061d8:	f000 f9c2 	bl	8006560 <__multadd>
 80061dc:	4629      	mov	r1, r5
 80061de:	4607      	mov	r7, r0
 80061e0:	2300      	movs	r3, #0
 80061e2:	220a      	movs	r2, #10
 80061e4:	4658      	mov	r0, fp
 80061e6:	f000 f9bb 	bl	8006560 <__multadd>
 80061ea:	4605      	mov	r5, r0
 80061ec:	e7f0      	b.n	80061d0 <_dtoa_r+0xac0>
 80061ee:	9b08      	ldr	r3, [sp, #32]
 80061f0:	2700      	movs	r7, #0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	bfcc      	ite	gt
 80061f6:	461e      	movgt	r6, r3
 80061f8:	2601      	movle	r6, #1
 80061fa:	4456      	add	r6, sl
 80061fc:	4649      	mov	r1, r9
 80061fe:	2201      	movs	r2, #1
 8006200:	4658      	mov	r0, fp
 8006202:	f000 fb57 	bl	80068b4 <__lshift>
 8006206:	4621      	mov	r1, r4
 8006208:	4681      	mov	r9, r0
 800620a:	f000 fbbf 	bl	800698c <__mcmp>
 800620e:	2800      	cmp	r0, #0
 8006210:	dcb0      	bgt.n	8006174 <_dtoa_r+0xa64>
 8006212:	d102      	bne.n	800621a <_dtoa_r+0xb0a>
 8006214:	f018 0f01 	tst.w	r8, #1
 8006218:	d1ac      	bne.n	8006174 <_dtoa_r+0xa64>
 800621a:	4633      	mov	r3, r6
 800621c:	461e      	mov	r6, r3
 800621e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006222:	2a30      	cmp	r2, #48	@ 0x30
 8006224:	d0fa      	beq.n	800621c <_dtoa_r+0xb0c>
 8006226:	e5be      	b.n	8005da6 <_dtoa_r+0x696>
 8006228:	459a      	cmp	sl, r3
 800622a:	d1a4      	bne.n	8006176 <_dtoa_r+0xa66>
 800622c:	9b04      	ldr	r3, [sp, #16]
 800622e:	3301      	adds	r3, #1
 8006230:	9304      	str	r3, [sp, #16]
 8006232:	2331      	movs	r3, #49	@ 0x31
 8006234:	f88a 3000 	strb.w	r3, [sl]
 8006238:	e5b5      	b.n	8005da6 <_dtoa_r+0x696>
 800623a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800623c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800629c <_dtoa_r+0xb8c>
 8006240:	b11b      	cbz	r3, 800624a <_dtoa_r+0xb3a>
 8006242:	f10a 0308 	add.w	r3, sl, #8
 8006246:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	4650      	mov	r0, sl
 800624c:	b017      	add	sp, #92	@ 0x5c
 800624e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006252:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006254:	2b01      	cmp	r3, #1
 8006256:	f77f ae3d 	ble.w	8005ed4 <_dtoa_r+0x7c4>
 800625a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800625c:	930a      	str	r3, [sp, #40]	@ 0x28
 800625e:	2001      	movs	r0, #1
 8006260:	e65b      	b.n	8005f1a <_dtoa_r+0x80a>
 8006262:	9b08      	ldr	r3, [sp, #32]
 8006264:	2b00      	cmp	r3, #0
 8006266:	f77f aed6 	ble.w	8006016 <_dtoa_r+0x906>
 800626a:	4656      	mov	r6, sl
 800626c:	4621      	mov	r1, r4
 800626e:	4648      	mov	r0, r9
 8006270:	f7ff f9c3 	bl	80055fa <quorem>
 8006274:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006278:	9b08      	ldr	r3, [sp, #32]
 800627a:	f806 8b01 	strb.w	r8, [r6], #1
 800627e:	eba6 020a 	sub.w	r2, r6, sl
 8006282:	4293      	cmp	r3, r2
 8006284:	ddb3      	ble.n	80061ee <_dtoa_r+0xade>
 8006286:	4649      	mov	r1, r9
 8006288:	2300      	movs	r3, #0
 800628a:	220a      	movs	r2, #10
 800628c:	4658      	mov	r0, fp
 800628e:	f000 f967 	bl	8006560 <__multadd>
 8006292:	4681      	mov	r9, r0
 8006294:	e7ea      	b.n	800626c <_dtoa_r+0xb5c>
 8006296:	bf00      	nop
 8006298:	080085ee 	.word	0x080085ee
 800629c:	08008572 	.word	0x08008572

080062a0 <_free_r>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	4605      	mov	r5, r0
 80062a4:	2900      	cmp	r1, #0
 80062a6:	d040      	beq.n	800632a <_free_r+0x8a>
 80062a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062ac:	1f0c      	subs	r4, r1, #4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	bfb8      	it	lt
 80062b2:	18e4      	addlt	r4, r4, r3
 80062b4:	f000 f8e6 	bl	8006484 <__malloc_lock>
 80062b8:	4a1c      	ldr	r2, [pc, #112]	@ (800632c <_free_r+0x8c>)
 80062ba:	6813      	ldr	r3, [r2, #0]
 80062bc:	b933      	cbnz	r3, 80062cc <_free_r+0x2c>
 80062be:	6063      	str	r3, [r4, #4]
 80062c0:	6014      	str	r4, [r2, #0]
 80062c2:	4628      	mov	r0, r5
 80062c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062c8:	f000 b8e2 	b.w	8006490 <__malloc_unlock>
 80062cc:	42a3      	cmp	r3, r4
 80062ce:	d908      	bls.n	80062e2 <_free_r+0x42>
 80062d0:	6820      	ldr	r0, [r4, #0]
 80062d2:	1821      	adds	r1, r4, r0
 80062d4:	428b      	cmp	r3, r1
 80062d6:	bf01      	itttt	eq
 80062d8:	6819      	ldreq	r1, [r3, #0]
 80062da:	685b      	ldreq	r3, [r3, #4]
 80062dc:	1809      	addeq	r1, r1, r0
 80062de:	6021      	streq	r1, [r4, #0]
 80062e0:	e7ed      	b.n	80062be <_free_r+0x1e>
 80062e2:	461a      	mov	r2, r3
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	b10b      	cbz	r3, 80062ec <_free_r+0x4c>
 80062e8:	42a3      	cmp	r3, r4
 80062ea:	d9fa      	bls.n	80062e2 <_free_r+0x42>
 80062ec:	6811      	ldr	r1, [r2, #0]
 80062ee:	1850      	adds	r0, r2, r1
 80062f0:	42a0      	cmp	r0, r4
 80062f2:	d10b      	bne.n	800630c <_free_r+0x6c>
 80062f4:	6820      	ldr	r0, [r4, #0]
 80062f6:	4401      	add	r1, r0
 80062f8:	1850      	adds	r0, r2, r1
 80062fa:	4283      	cmp	r3, r0
 80062fc:	6011      	str	r1, [r2, #0]
 80062fe:	d1e0      	bne.n	80062c2 <_free_r+0x22>
 8006300:	6818      	ldr	r0, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	4408      	add	r0, r1
 8006306:	6010      	str	r0, [r2, #0]
 8006308:	6053      	str	r3, [r2, #4]
 800630a:	e7da      	b.n	80062c2 <_free_r+0x22>
 800630c:	d902      	bls.n	8006314 <_free_r+0x74>
 800630e:	230c      	movs	r3, #12
 8006310:	602b      	str	r3, [r5, #0]
 8006312:	e7d6      	b.n	80062c2 <_free_r+0x22>
 8006314:	6820      	ldr	r0, [r4, #0]
 8006316:	1821      	adds	r1, r4, r0
 8006318:	428b      	cmp	r3, r1
 800631a:	bf01      	itttt	eq
 800631c:	6819      	ldreq	r1, [r3, #0]
 800631e:	685b      	ldreq	r3, [r3, #4]
 8006320:	1809      	addeq	r1, r1, r0
 8006322:	6021      	streq	r1, [r4, #0]
 8006324:	6063      	str	r3, [r4, #4]
 8006326:	6054      	str	r4, [r2, #4]
 8006328:	e7cb      	b.n	80062c2 <_free_r+0x22>
 800632a:	bd38      	pop	{r3, r4, r5, pc}
 800632c:	20000420 	.word	0x20000420

08006330 <malloc>:
 8006330:	4b02      	ldr	r3, [pc, #8]	@ (800633c <malloc+0xc>)
 8006332:	4601      	mov	r1, r0
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	f000 b825 	b.w	8006384 <_malloc_r>
 800633a:	bf00      	nop
 800633c:	20000018 	.word	0x20000018

08006340 <sbrk_aligned>:
 8006340:	b570      	push	{r4, r5, r6, lr}
 8006342:	4e0f      	ldr	r6, [pc, #60]	@ (8006380 <sbrk_aligned+0x40>)
 8006344:	460c      	mov	r4, r1
 8006346:	6831      	ldr	r1, [r6, #0]
 8006348:	4605      	mov	r5, r0
 800634a:	b911      	cbnz	r1, 8006352 <sbrk_aligned+0x12>
 800634c:	f000 fea2 	bl	8007094 <_sbrk_r>
 8006350:	6030      	str	r0, [r6, #0]
 8006352:	4621      	mov	r1, r4
 8006354:	4628      	mov	r0, r5
 8006356:	f000 fe9d 	bl	8007094 <_sbrk_r>
 800635a:	1c43      	adds	r3, r0, #1
 800635c:	d103      	bne.n	8006366 <sbrk_aligned+0x26>
 800635e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006362:	4620      	mov	r0, r4
 8006364:	bd70      	pop	{r4, r5, r6, pc}
 8006366:	1cc4      	adds	r4, r0, #3
 8006368:	f024 0403 	bic.w	r4, r4, #3
 800636c:	42a0      	cmp	r0, r4
 800636e:	d0f8      	beq.n	8006362 <sbrk_aligned+0x22>
 8006370:	1a21      	subs	r1, r4, r0
 8006372:	4628      	mov	r0, r5
 8006374:	f000 fe8e 	bl	8007094 <_sbrk_r>
 8006378:	3001      	adds	r0, #1
 800637a:	d1f2      	bne.n	8006362 <sbrk_aligned+0x22>
 800637c:	e7ef      	b.n	800635e <sbrk_aligned+0x1e>
 800637e:	bf00      	nop
 8006380:	2000041c 	.word	0x2000041c

08006384 <_malloc_r>:
 8006384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006388:	1ccd      	adds	r5, r1, #3
 800638a:	f025 0503 	bic.w	r5, r5, #3
 800638e:	3508      	adds	r5, #8
 8006390:	2d0c      	cmp	r5, #12
 8006392:	bf38      	it	cc
 8006394:	250c      	movcc	r5, #12
 8006396:	2d00      	cmp	r5, #0
 8006398:	4606      	mov	r6, r0
 800639a:	db01      	blt.n	80063a0 <_malloc_r+0x1c>
 800639c:	42a9      	cmp	r1, r5
 800639e:	d904      	bls.n	80063aa <_malloc_r+0x26>
 80063a0:	230c      	movs	r3, #12
 80063a2:	6033      	str	r3, [r6, #0]
 80063a4:	2000      	movs	r0, #0
 80063a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006480 <_malloc_r+0xfc>
 80063ae:	f000 f869 	bl	8006484 <__malloc_lock>
 80063b2:	f8d8 3000 	ldr.w	r3, [r8]
 80063b6:	461c      	mov	r4, r3
 80063b8:	bb44      	cbnz	r4, 800640c <_malloc_r+0x88>
 80063ba:	4629      	mov	r1, r5
 80063bc:	4630      	mov	r0, r6
 80063be:	f7ff ffbf 	bl	8006340 <sbrk_aligned>
 80063c2:	1c43      	adds	r3, r0, #1
 80063c4:	4604      	mov	r4, r0
 80063c6:	d158      	bne.n	800647a <_malloc_r+0xf6>
 80063c8:	f8d8 4000 	ldr.w	r4, [r8]
 80063cc:	4627      	mov	r7, r4
 80063ce:	2f00      	cmp	r7, #0
 80063d0:	d143      	bne.n	800645a <_malloc_r+0xd6>
 80063d2:	2c00      	cmp	r4, #0
 80063d4:	d04b      	beq.n	800646e <_malloc_r+0xea>
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	4639      	mov	r1, r7
 80063da:	4630      	mov	r0, r6
 80063dc:	eb04 0903 	add.w	r9, r4, r3
 80063e0:	f000 fe58 	bl	8007094 <_sbrk_r>
 80063e4:	4581      	cmp	r9, r0
 80063e6:	d142      	bne.n	800646e <_malloc_r+0xea>
 80063e8:	6821      	ldr	r1, [r4, #0]
 80063ea:	4630      	mov	r0, r6
 80063ec:	1a6d      	subs	r5, r5, r1
 80063ee:	4629      	mov	r1, r5
 80063f0:	f7ff ffa6 	bl	8006340 <sbrk_aligned>
 80063f4:	3001      	adds	r0, #1
 80063f6:	d03a      	beq.n	800646e <_malloc_r+0xea>
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	442b      	add	r3, r5
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	f8d8 3000 	ldr.w	r3, [r8]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	bb62      	cbnz	r2, 8006460 <_malloc_r+0xdc>
 8006406:	f8c8 7000 	str.w	r7, [r8]
 800640a:	e00f      	b.n	800642c <_malloc_r+0xa8>
 800640c:	6822      	ldr	r2, [r4, #0]
 800640e:	1b52      	subs	r2, r2, r5
 8006410:	d420      	bmi.n	8006454 <_malloc_r+0xd0>
 8006412:	2a0b      	cmp	r2, #11
 8006414:	d917      	bls.n	8006446 <_malloc_r+0xc2>
 8006416:	1961      	adds	r1, r4, r5
 8006418:	42a3      	cmp	r3, r4
 800641a:	6025      	str	r5, [r4, #0]
 800641c:	bf18      	it	ne
 800641e:	6059      	strne	r1, [r3, #4]
 8006420:	6863      	ldr	r3, [r4, #4]
 8006422:	bf08      	it	eq
 8006424:	f8c8 1000 	streq.w	r1, [r8]
 8006428:	5162      	str	r2, [r4, r5]
 800642a:	604b      	str	r3, [r1, #4]
 800642c:	4630      	mov	r0, r6
 800642e:	f000 f82f 	bl	8006490 <__malloc_unlock>
 8006432:	f104 000b 	add.w	r0, r4, #11
 8006436:	1d23      	adds	r3, r4, #4
 8006438:	f020 0007 	bic.w	r0, r0, #7
 800643c:	1ac2      	subs	r2, r0, r3
 800643e:	bf1c      	itt	ne
 8006440:	1a1b      	subne	r3, r3, r0
 8006442:	50a3      	strne	r3, [r4, r2]
 8006444:	e7af      	b.n	80063a6 <_malloc_r+0x22>
 8006446:	6862      	ldr	r2, [r4, #4]
 8006448:	42a3      	cmp	r3, r4
 800644a:	bf0c      	ite	eq
 800644c:	f8c8 2000 	streq.w	r2, [r8]
 8006450:	605a      	strne	r2, [r3, #4]
 8006452:	e7eb      	b.n	800642c <_malloc_r+0xa8>
 8006454:	4623      	mov	r3, r4
 8006456:	6864      	ldr	r4, [r4, #4]
 8006458:	e7ae      	b.n	80063b8 <_malloc_r+0x34>
 800645a:	463c      	mov	r4, r7
 800645c:	687f      	ldr	r7, [r7, #4]
 800645e:	e7b6      	b.n	80063ce <_malloc_r+0x4a>
 8006460:	461a      	mov	r2, r3
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	42a3      	cmp	r3, r4
 8006466:	d1fb      	bne.n	8006460 <_malloc_r+0xdc>
 8006468:	2300      	movs	r3, #0
 800646a:	6053      	str	r3, [r2, #4]
 800646c:	e7de      	b.n	800642c <_malloc_r+0xa8>
 800646e:	230c      	movs	r3, #12
 8006470:	4630      	mov	r0, r6
 8006472:	6033      	str	r3, [r6, #0]
 8006474:	f000 f80c 	bl	8006490 <__malloc_unlock>
 8006478:	e794      	b.n	80063a4 <_malloc_r+0x20>
 800647a:	6005      	str	r5, [r0, #0]
 800647c:	e7d6      	b.n	800642c <_malloc_r+0xa8>
 800647e:	bf00      	nop
 8006480:	20000420 	.word	0x20000420

08006484 <__malloc_lock>:
 8006484:	4801      	ldr	r0, [pc, #4]	@ (800648c <__malloc_lock+0x8>)
 8006486:	f7ff b8a8 	b.w	80055da <__retarget_lock_acquire_recursive>
 800648a:	bf00      	nop
 800648c:	20000418 	.word	0x20000418

08006490 <__malloc_unlock>:
 8006490:	4801      	ldr	r0, [pc, #4]	@ (8006498 <__malloc_unlock+0x8>)
 8006492:	f7ff b8a3 	b.w	80055dc <__retarget_lock_release_recursive>
 8006496:	bf00      	nop
 8006498:	20000418 	.word	0x20000418

0800649c <_Balloc>:
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	69c6      	ldr	r6, [r0, #28]
 80064a0:	4604      	mov	r4, r0
 80064a2:	460d      	mov	r5, r1
 80064a4:	b976      	cbnz	r6, 80064c4 <_Balloc+0x28>
 80064a6:	2010      	movs	r0, #16
 80064a8:	f7ff ff42 	bl	8006330 <malloc>
 80064ac:	4602      	mov	r2, r0
 80064ae:	61e0      	str	r0, [r4, #28]
 80064b0:	b920      	cbnz	r0, 80064bc <_Balloc+0x20>
 80064b2:	216b      	movs	r1, #107	@ 0x6b
 80064b4:	4b17      	ldr	r3, [pc, #92]	@ (8006514 <_Balloc+0x78>)
 80064b6:	4818      	ldr	r0, [pc, #96]	@ (8006518 <_Balloc+0x7c>)
 80064b8:	f000 fe0a 	bl	80070d0 <__assert_func>
 80064bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064c0:	6006      	str	r6, [r0, #0]
 80064c2:	60c6      	str	r6, [r0, #12]
 80064c4:	69e6      	ldr	r6, [r4, #28]
 80064c6:	68f3      	ldr	r3, [r6, #12]
 80064c8:	b183      	cbz	r3, 80064ec <_Balloc+0x50>
 80064ca:	69e3      	ldr	r3, [r4, #28]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064d2:	b9b8      	cbnz	r0, 8006504 <_Balloc+0x68>
 80064d4:	2101      	movs	r1, #1
 80064d6:	fa01 f605 	lsl.w	r6, r1, r5
 80064da:	1d72      	adds	r2, r6, #5
 80064dc:	4620      	mov	r0, r4
 80064de:	0092      	lsls	r2, r2, #2
 80064e0:	f000 fe14 	bl	800710c <_calloc_r>
 80064e4:	b160      	cbz	r0, 8006500 <_Balloc+0x64>
 80064e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064ea:	e00e      	b.n	800650a <_Balloc+0x6e>
 80064ec:	2221      	movs	r2, #33	@ 0x21
 80064ee:	2104      	movs	r1, #4
 80064f0:	4620      	mov	r0, r4
 80064f2:	f000 fe0b 	bl	800710c <_calloc_r>
 80064f6:	69e3      	ldr	r3, [r4, #28]
 80064f8:	60f0      	str	r0, [r6, #12]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e4      	bne.n	80064ca <_Balloc+0x2e>
 8006500:	2000      	movs	r0, #0
 8006502:	bd70      	pop	{r4, r5, r6, pc}
 8006504:	6802      	ldr	r2, [r0, #0]
 8006506:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800650a:	2300      	movs	r3, #0
 800650c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006510:	e7f7      	b.n	8006502 <_Balloc+0x66>
 8006512:	bf00      	nop
 8006514:	0800857f 	.word	0x0800857f
 8006518:	080085ff 	.word	0x080085ff

0800651c <_Bfree>:
 800651c:	b570      	push	{r4, r5, r6, lr}
 800651e:	69c6      	ldr	r6, [r0, #28]
 8006520:	4605      	mov	r5, r0
 8006522:	460c      	mov	r4, r1
 8006524:	b976      	cbnz	r6, 8006544 <_Bfree+0x28>
 8006526:	2010      	movs	r0, #16
 8006528:	f7ff ff02 	bl	8006330 <malloc>
 800652c:	4602      	mov	r2, r0
 800652e:	61e8      	str	r0, [r5, #28]
 8006530:	b920      	cbnz	r0, 800653c <_Bfree+0x20>
 8006532:	218f      	movs	r1, #143	@ 0x8f
 8006534:	4b08      	ldr	r3, [pc, #32]	@ (8006558 <_Bfree+0x3c>)
 8006536:	4809      	ldr	r0, [pc, #36]	@ (800655c <_Bfree+0x40>)
 8006538:	f000 fdca 	bl	80070d0 <__assert_func>
 800653c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006540:	6006      	str	r6, [r0, #0]
 8006542:	60c6      	str	r6, [r0, #12]
 8006544:	b13c      	cbz	r4, 8006556 <_Bfree+0x3a>
 8006546:	69eb      	ldr	r3, [r5, #28]
 8006548:	6862      	ldr	r2, [r4, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006550:	6021      	str	r1, [r4, #0]
 8006552:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006556:	bd70      	pop	{r4, r5, r6, pc}
 8006558:	0800857f 	.word	0x0800857f
 800655c:	080085ff 	.word	0x080085ff

08006560 <__multadd>:
 8006560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006564:	4607      	mov	r7, r0
 8006566:	460c      	mov	r4, r1
 8006568:	461e      	mov	r6, r3
 800656a:	2000      	movs	r0, #0
 800656c:	690d      	ldr	r5, [r1, #16]
 800656e:	f101 0c14 	add.w	ip, r1, #20
 8006572:	f8dc 3000 	ldr.w	r3, [ip]
 8006576:	3001      	adds	r0, #1
 8006578:	b299      	uxth	r1, r3
 800657a:	fb02 6101 	mla	r1, r2, r1, r6
 800657e:	0c1e      	lsrs	r6, r3, #16
 8006580:	0c0b      	lsrs	r3, r1, #16
 8006582:	fb02 3306 	mla	r3, r2, r6, r3
 8006586:	b289      	uxth	r1, r1
 8006588:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800658c:	4285      	cmp	r5, r0
 800658e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006592:	f84c 1b04 	str.w	r1, [ip], #4
 8006596:	dcec      	bgt.n	8006572 <__multadd+0x12>
 8006598:	b30e      	cbz	r6, 80065de <__multadd+0x7e>
 800659a:	68a3      	ldr	r3, [r4, #8]
 800659c:	42ab      	cmp	r3, r5
 800659e:	dc19      	bgt.n	80065d4 <__multadd+0x74>
 80065a0:	6861      	ldr	r1, [r4, #4]
 80065a2:	4638      	mov	r0, r7
 80065a4:	3101      	adds	r1, #1
 80065a6:	f7ff ff79 	bl	800649c <_Balloc>
 80065aa:	4680      	mov	r8, r0
 80065ac:	b928      	cbnz	r0, 80065ba <__multadd+0x5a>
 80065ae:	4602      	mov	r2, r0
 80065b0:	21ba      	movs	r1, #186	@ 0xba
 80065b2:	4b0c      	ldr	r3, [pc, #48]	@ (80065e4 <__multadd+0x84>)
 80065b4:	480c      	ldr	r0, [pc, #48]	@ (80065e8 <__multadd+0x88>)
 80065b6:	f000 fd8b 	bl	80070d0 <__assert_func>
 80065ba:	6922      	ldr	r2, [r4, #16]
 80065bc:	f104 010c 	add.w	r1, r4, #12
 80065c0:	3202      	adds	r2, #2
 80065c2:	0092      	lsls	r2, r2, #2
 80065c4:	300c      	adds	r0, #12
 80065c6:	f000 fd75 	bl	80070b4 <memcpy>
 80065ca:	4621      	mov	r1, r4
 80065cc:	4638      	mov	r0, r7
 80065ce:	f7ff ffa5 	bl	800651c <_Bfree>
 80065d2:	4644      	mov	r4, r8
 80065d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065d8:	3501      	adds	r5, #1
 80065da:	615e      	str	r6, [r3, #20]
 80065dc:	6125      	str	r5, [r4, #16]
 80065de:	4620      	mov	r0, r4
 80065e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e4:	080085ee 	.word	0x080085ee
 80065e8:	080085ff 	.word	0x080085ff

080065ec <__hi0bits>:
 80065ec:	4603      	mov	r3, r0
 80065ee:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80065f2:	bf3a      	itte	cc
 80065f4:	0403      	lslcc	r3, r0, #16
 80065f6:	2010      	movcc	r0, #16
 80065f8:	2000      	movcs	r0, #0
 80065fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065fe:	bf3c      	itt	cc
 8006600:	021b      	lslcc	r3, r3, #8
 8006602:	3008      	addcc	r0, #8
 8006604:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006608:	bf3c      	itt	cc
 800660a:	011b      	lslcc	r3, r3, #4
 800660c:	3004      	addcc	r0, #4
 800660e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006612:	bf3c      	itt	cc
 8006614:	009b      	lslcc	r3, r3, #2
 8006616:	3002      	addcc	r0, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	db05      	blt.n	8006628 <__hi0bits+0x3c>
 800661c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006620:	f100 0001 	add.w	r0, r0, #1
 8006624:	bf08      	it	eq
 8006626:	2020      	moveq	r0, #32
 8006628:	4770      	bx	lr

0800662a <__lo0bits>:
 800662a:	6803      	ldr	r3, [r0, #0]
 800662c:	4602      	mov	r2, r0
 800662e:	f013 0007 	ands.w	r0, r3, #7
 8006632:	d00b      	beq.n	800664c <__lo0bits+0x22>
 8006634:	07d9      	lsls	r1, r3, #31
 8006636:	d421      	bmi.n	800667c <__lo0bits+0x52>
 8006638:	0798      	lsls	r0, r3, #30
 800663a:	bf49      	itett	mi
 800663c:	085b      	lsrmi	r3, r3, #1
 800663e:	089b      	lsrpl	r3, r3, #2
 8006640:	2001      	movmi	r0, #1
 8006642:	6013      	strmi	r3, [r2, #0]
 8006644:	bf5c      	itt	pl
 8006646:	2002      	movpl	r0, #2
 8006648:	6013      	strpl	r3, [r2, #0]
 800664a:	4770      	bx	lr
 800664c:	b299      	uxth	r1, r3
 800664e:	b909      	cbnz	r1, 8006654 <__lo0bits+0x2a>
 8006650:	2010      	movs	r0, #16
 8006652:	0c1b      	lsrs	r3, r3, #16
 8006654:	b2d9      	uxtb	r1, r3
 8006656:	b909      	cbnz	r1, 800665c <__lo0bits+0x32>
 8006658:	3008      	adds	r0, #8
 800665a:	0a1b      	lsrs	r3, r3, #8
 800665c:	0719      	lsls	r1, r3, #28
 800665e:	bf04      	itt	eq
 8006660:	091b      	lsreq	r3, r3, #4
 8006662:	3004      	addeq	r0, #4
 8006664:	0799      	lsls	r1, r3, #30
 8006666:	bf04      	itt	eq
 8006668:	089b      	lsreq	r3, r3, #2
 800666a:	3002      	addeq	r0, #2
 800666c:	07d9      	lsls	r1, r3, #31
 800666e:	d403      	bmi.n	8006678 <__lo0bits+0x4e>
 8006670:	085b      	lsrs	r3, r3, #1
 8006672:	f100 0001 	add.w	r0, r0, #1
 8006676:	d003      	beq.n	8006680 <__lo0bits+0x56>
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	4770      	bx	lr
 800667c:	2000      	movs	r0, #0
 800667e:	4770      	bx	lr
 8006680:	2020      	movs	r0, #32
 8006682:	4770      	bx	lr

08006684 <__i2b>:
 8006684:	b510      	push	{r4, lr}
 8006686:	460c      	mov	r4, r1
 8006688:	2101      	movs	r1, #1
 800668a:	f7ff ff07 	bl	800649c <_Balloc>
 800668e:	4602      	mov	r2, r0
 8006690:	b928      	cbnz	r0, 800669e <__i2b+0x1a>
 8006692:	f240 1145 	movw	r1, #325	@ 0x145
 8006696:	4b04      	ldr	r3, [pc, #16]	@ (80066a8 <__i2b+0x24>)
 8006698:	4804      	ldr	r0, [pc, #16]	@ (80066ac <__i2b+0x28>)
 800669a:	f000 fd19 	bl	80070d0 <__assert_func>
 800669e:	2301      	movs	r3, #1
 80066a0:	6144      	str	r4, [r0, #20]
 80066a2:	6103      	str	r3, [r0, #16]
 80066a4:	bd10      	pop	{r4, pc}
 80066a6:	bf00      	nop
 80066a8:	080085ee 	.word	0x080085ee
 80066ac:	080085ff 	.word	0x080085ff

080066b0 <__multiply>:
 80066b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b4:	4614      	mov	r4, r2
 80066b6:	690a      	ldr	r2, [r1, #16]
 80066b8:	6923      	ldr	r3, [r4, #16]
 80066ba:	460f      	mov	r7, r1
 80066bc:	429a      	cmp	r2, r3
 80066be:	bfa2      	ittt	ge
 80066c0:	4623      	movge	r3, r4
 80066c2:	460c      	movge	r4, r1
 80066c4:	461f      	movge	r7, r3
 80066c6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80066ca:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80066ce:	68a3      	ldr	r3, [r4, #8]
 80066d0:	6861      	ldr	r1, [r4, #4]
 80066d2:	eb0a 0609 	add.w	r6, sl, r9
 80066d6:	42b3      	cmp	r3, r6
 80066d8:	b085      	sub	sp, #20
 80066da:	bfb8      	it	lt
 80066dc:	3101      	addlt	r1, #1
 80066de:	f7ff fedd 	bl	800649c <_Balloc>
 80066e2:	b930      	cbnz	r0, 80066f2 <__multiply+0x42>
 80066e4:	4602      	mov	r2, r0
 80066e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80066ea:	4b43      	ldr	r3, [pc, #268]	@ (80067f8 <__multiply+0x148>)
 80066ec:	4843      	ldr	r0, [pc, #268]	@ (80067fc <__multiply+0x14c>)
 80066ee:	f000 fcef 	bl	80070d0 <__assert_func>
 80066f2:	f100 0514 	add.w	r5, r0, #20
 80066f6:	462b      	mov	r3, r5
 80066f8:	2200      	movs	r2, #0
 80066fa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80066fe:	4543      	cmp	r3, r8
 8006700:	d321      	bcc.n	8006746 <__multiply+0x96>
 8006702:	f107 0114 	add.w	r1, r7, #20
 8006706:	f104 0214 	add.w	r2, r4, #20
 800670a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800670e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006712:	9302      	str	r3, [sp, #8]
 8006714:	1b13      	subs	r3, r2, r4
 8006716:	3b15      	subs	r3, #21
 8006718:	f023 0303 	bic.w	r3, r3, #3
 800671c:	3304      	adds	r3, #4
 800671e:	f104 0715 	add.w	r7, r4, #21
 8006722:	42ba      	cmp	r2, r7
 8006724:	bf38      	it	cc
 8006726:	2304      	movcc	r3, #4
 8006728:	9301      	str	r3, [sp, #4]
 800672a:	9b02      	ldr	r3, [sp, #8]
 800672c:	9103      	str	r1, [sp, #12]
 800672e:	428b      	cmp	r3, r1
 8006730:	d80c      	bhi.n	800674c <__multiply+0x9c>
 8006732:	2e00      	cmp	r6, #0
 8006734:	dd03      	ble.n	800673e <__multiply+0x8e>
 8006736:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800673a:	2b00      	cmp	r3, #0
 800673c:	d05a      	beq.n	80067f4 <__multiply+0x144>
 800673e:	6106      	str	r6, [r0, #16]
 8006740:	b005      	add	sp, #20
 8006742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006746:	f843 2b04 	str.w	r2, [r3], #4
 800674a:	e7d8      	b.n	80066fe <__multiply+0x4e>
 800674c:	f8b1 a000 	ldrh.w	sl, [r1]
 8006750:	f1ba 0f00 	cmp.w	sl, #0
 8006754:	d023      	beq.n	800679e <__multiply+0xee>
 8006756:	46a9      	mov	r9, r5
 8006758:	f04f 0c00 	mov.w	ip, #0
 800675c:	f104 0e14 	add.w	lr, r4, #20
 8006760:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006764:	f8d9 3000 	ldr.w	r3, [r9]
 8006768:	fa1f fb87 	uxth.w	fp, r7
 800676c:	b29b      	uxth	r3, r3
 800676e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006772:	4463      	add	r3, ip
 8006774:	f8d9 c000 	ldr.w	ip, [r9]
 8006778:	0c3f      	lsrs	r7, r7, #16
 800677a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800677e:	fb0a c707 	mla	r7, sl, r7, ip
 8006782:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006786:	b29b      	uxth	r3, r3
 8006788:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800678c:	4572      	cmp	r2, lr
 800678e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006792:	f849 3b04 	str.w	r3, [r9], #4
 8006796:	d8e3      	bhi.n	8006760 <__multiply+0xb0>
 8006798:	9b01      	ldr	r3, [sp, #4]
 800679a:	f845 c003 	str.w	ip, [r5, r3]
 800679e:	9b03      	ldr	r3, [sp, #12]
 80067a0:	3104      	adds	r1, #4
 80067a2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80067a6:	f1b9 0f00 	cmp.w	r9, #0
 80067aa:	d021      	beq.n	80067f0 <__multiply+0x140>
 80067ac:	46ae      	mov	lr, r5
 80067ae:	f04f 0a00 	mov.w	sl, #0
 80067b2:	682b      	ldr	r3, [r5, #0]
 80067b4:	f104 0c14 	add.w	ip, r4, #20
 80067b8:	f8bc b000 	ldrh.w	fp, [ip]
 80067bc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	fb09 770b 	mla	r7, r9, fp, r7
 80067c6:	4457      	add	r7, sl
 80067c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80067cc:	f84e 3b04 	str.w	r3, [lr], #4
 80067d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80067d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067d8:	f8be 3000 	ldrh.w	r3, [lr]
 80067dc:	4562      	cmp	r2, ip
 80067de:	fb09 330a 	mla	r3, r9, sl, r3
 80067e2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80067e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067ea:	d8e5      	bhi.n	80067b8 <__multiply+0x108>
 80067ec:	9f01      	ldr	r7, [sp, #4]
 80067ee:	51eb      	str	r3, [r5, r7]
 80067f0:	3504      	adds	r5, #4
 80067f2:	e79a      	b.n	800672a <__multiply+0x7a>
 80067f4:	3e01      	subs	r6, #1
 80067f6:	e79c      	b.n	8006732 <__multiply+0x82>
 80067f8:	080085ee 	.word	0x080085ee
 80067fc:	080085ff 	.word	0x080085ff

08006800 <__pow5mult>:
 8006800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006804:	4615      	mov	r5, r2
 8006806:	f012 0203 	ands.w	r2, r2, #3
 800680a:	4607      	mov	r7, r0
 800680c:	460e      	mov	r6, r1
 800680e:	d007      	beq.n	8006820 <__pow5mult+0x20>
 8006810:	4c25      	ldr	r4, [pc, #148]	@ (80068a8 <__pow5mult+0xa8>)
 8006812:	3a01      	subs	r2, #1
 8006814:	2300      	movs	r3, #0
 8006816:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800681a:	f7ff fea1 	bl	8006560 <__multadd>
 800681e:	4606      	mov	r6, r0
 8006820:	10ad      	asrs	r5, r5, #2
 8006822:	d03d      	beq.n	80068a0 <__pow5mult+0xa0>
 8006824:	69fc      	ldr	r4, [r7, #28]
 8006826:	b97c      	cbnz	r4, 8006848 <__pow5mult+0x48>
 8006828:	2010      	movs	r0, #16
 800682a:	f7ff fd81 	bl	8006330 <malloc>
 800682e:	4602      	mov	r2, r0
 8006830:	61f8      	str	r0, [r7, #28]
 8006832:	b928      	cbnz	r0, 8006840 <__pow5mult+0x40>
 8006834:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006838:	4b1c      	ldr	r3, [pc, #112]	@ (80068ac <__pow5mult+0xac>)
 800683a:	481d      	ldr	r0, [pc, #116]	@ (80068b0 <__pow5mult+0xb0>)
 800683c:	f000 fc48 	bl	80070d0 <__assert_func>
 8006840:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006844:	6004      	str	r4, [r0, #0]
 8006846:	60c4      	str	r4, [r0, #12]
 8006848:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800684c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006850:	b94c      	cbnz	r4, 8006866 <__pow5mult+0x66>
 8006852:	f240 2171 	movw	r1, #625	@ 0x271
 8006856:	4638      	mov	r0, r7
 8006858:	f7ff ff14 	bl	8006684 <__i2b>
 800685c:	2300      	movs	r3, #0
 800685e:	4604      	mov	r4, r0
 8006860:	f8c8 0008 	str.w	r0, [r8, #8]
 8006864:	6003      	str	r3, [r0, #0]
 8006866:	f04f 0900 	mov.w	r9, #0
 800686a:	07eb      	lsls	r3, r5, #31
 800686c:	d50a      	bpl.n	8006884 <__pow5mult+0x84>
 800686e:	4631      	mov	r1, r6
 8006870:	4622      	mov	r2, r4
 8006872:	4638      	mov	r0, r7
 8006874:	f7ff ff1c 	bl	80066b0 <__multiply>
 8006878:	4680      	mov	r8, r0
 800687a:	4631      	mov	r1, r6
 800687c:	4638      	mov	r0, r7
 800687e:	f7ff fe4d 	bl	800651c <_Bfree>
 8006882:	4646      	mov	r6, r8
 8006884:	106d      	asrs	r5, r5, #1
 8006886:	d00b      	beq.n	80068a0 <__pow5mult+0xa0>
 8006888:	6820      	ldr	r0, [r4, #0]
 800688a:	b938      	cbnz	r0, 800689c <__pow5mult+0x9c>
 800688c:	4622      	mov	r2, r4
 800688e:	4621      	mov	r1, r4
 8006890:	4638      	mov	r0, r7
 8006892:	f7ff ff0d 	bl	80066b0 <__multiply>
 8006896:	6020      	str	r0, [r4, #0]
 8006898:	f8c0 9000 	str.w	r9, [r0]
 800689c:	4604      	mov	r4, r0
 800689e:	e7e4      	b.n	800686a <__pow5mult+0x6a>
 80068a0:	4630      	mov	r0, r6
 80068a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068a6:	bf00      	nop
 80068a8:	08008658 	.word	0x08008658
 80068ac:	0800857f 	.word	0x0800857f
 80068b0:	080085ff 	.word	0x080085ff

080068b4 <__lshift>:
 80068b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068b8:	460c      	mov	r4, r1
 80068ba:	4607      	mov	r7, r0
 80068bc:	4691      	mov	r9, r2
 80068be:	6923      	ldr	r3, [r4, #16]
 80068c0:	6849      	ldr	r1, [r1, #4]
 80068c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068c6:	68a3      	ldr	r3, [r4, #8]
 80068c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068cc:	f108 0601 	add.w	r6, r8, #1
 80068d0:	42b3      	cmp	r3, r6
 80068d2:	db0b      	blt.n	80068ec <__lshift+0x38>
 80068d4:	4638      	mov	r0, r7
 80068d6:	f7ff fde1 	bl	800649c <_Balloc>
 80068da:	4605      	mov	r5, r0
 80068dc:	b948      	cbnz	r0, 80068f2 <__lshift+0x3e>
 80068de:	4602      	mov	r2, r0
 80068e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80068e4:	4b27      	ldr	r3, [pc, #156]	@ (8006984 <__lshift+0xd0>)
 80068e6:	4828      	ldr	r0, [pc, #160]	@ (8006988 <__lshift+0xd4>)
 80068e8:	f000 fbf2 	bl	80070d0 <__assert_func>
 80068ec:	3101      	adds	r1, #1
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	e7ee      	b.n	80068d0 <__lshift+0x1c>
 80068f2:	2300      	movs	r3, #0
 80068f4:	f100 0114 	add.w	r1, r0, #20
 80068f8:	f100 0210 	add.w	r2, r0, #16
 80068fc:	4618      	mov	r0, r3
 80068fe:	4553      	cmp	r3, sl
 8006900:	db33      	blt.n	800696a <__lshift+0xb6>
 8006902:	6920      	ldr	r0, [r4, #16]
 8006904:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006908:	f104 0314 	add.w	r3, r4, #20
 800690c:	f019 091f 	ands.w	r9, r9, #31
 8006910:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006914:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006918:	d02b      	beq.n	8006972 <__lshift+0xbe>
 800691a:	468a      	mov	sl, r1
 800691c:	2200      	movs	r2, #0
 800691e:	f1c9 0e20 	rsb	lr, r9, #32
 8006922:	6818      	ldr	r0, [r3, #0]
 8006924:	fa00 f009 	lsl.w	r0, r0, r9
 8006928:	4310      	orrs	r0, r2
 800692a:	f84a 0b04 	str.w	r0, [sl], #4
 800692e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006932:	459c      	cmp	ip, r3
 8006934:	fa22 f20e 	lsr.w	r2, r2, lr
 8006938:	d8f3      	bhi.n	8006922 <__lshift+0x6e>
 800693a:	ebac 0304 	sub.w	r3, ip, r4
 800693e:	3b15      	subs	r3, #21
 8006940:	f023 0303 	bic.w	r3, r3, #3
 8006944:	3304      	adds	r3, #4
 8006946:	f104 0015 	add.w	r0, r4, #21
 800694a:	4584      	cmp	ip, r0
 800694c:	bf38      	it	cc
 800694e:	2304      	movcc	r3, #4
 8006950:	50ca      	str	r2, [r1, r3]
 8006952:	b10a      	cbz	r2, 8006958 <__lshift+0xa4>
 8006954:	f108 0602 	add.w	r6, r8, #2
 8006958:	3e01      	subs	r6, #1
 800695a:	4638      	mov	r0, r7
 800695c:	4621      	mov	r1, r4
 800695e:	612e      	str	r6, [r5, #16]
 8006960:	f7ff fddc 	bl	800651c <_Bfree>
 8006964:	4628      	mov	r0, r5
 8006966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800696a:	f842 0f04 	str.w	r0, [r2, #4]!
 800696e:	3301      	adds	r3, #1
 8006970:	e7c5      	b.n	80068fe <__lshift+0x4a>
 8006972:	3904      	subs	r1, #4
 8006974:	f853 2b04 	ldr.w	r2, [r3], #4
 8006978:	459c      	cmp	ip, r3
 800697a:	f841 2f04 	str.w	r2, [r1, #4]!
 800697e:	d8f9      	bhi.n	8006974 <__lshift+0xc0>
 8006980:	e7ea      	b.n	8006958 <__lshift+0xa4>
 8006982:	bf00      	nop
 8006984:	080085ee 	.word	0x080085ee
 8006988:	080085ff 	.word	0x080085ff

0800698c <__mcmp>:
 800698c:	4603      	mov	r3, r0
 800698e:	690a      	ldr	r2, [r1, #16]
 8006990:	6900      	ldr	r0, [r0, #16]
 8006992:	b530      	push	{r4, r5, lr}
 8006994:	1a80      	subs	r0, r0, r2
 8006996:	d10e      	bne.n	80069b6 <__mcmp+0x2a>
 8006998:	3314      	adds	r3, #20
 800699a:	3114      	adds	r1, #20
 800699c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80069a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80069a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069ac:	4295      	cmp	r5, r2
 80069ae:	d003      	beq.n	80069b8 <__mcmp+0x2c>
 80069b0:	d205      	bcs.n	80069be <__mcmp+0x32>
 80069b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069b6:	bd30      	pop	{r4, r5, pc}
 80069b8:	42a3      	cmp	r3, r4
 80069ba:	d3f3      	bcc.n	80069a4 <__mcmp+0x18>
 80069bc:	e7fb      	b.n	80069b6 <__mcmp+0x2a>
 80069be:	2001      	movs	r0, #1
 80069c0:	e7f9      	b.n	80069b6 <__mcmp+0x2a>
	...

080069c4 <__mdiff>:
 80069c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c8:	4689      	mov	r9, r1
 80069ca:	4606      	mov	r6, r0
 80069cc:	4611      	mov	r1, r2
 80069ce:	4648      	mov	r0, r9
 80069d0:	4614      	mov	r4, r2
 80069d2:	f7ff ffdb 	bl	800698c <__mcmp>
 80069d6:	1e05      	subs	r5, r0, #0
 80069d8:	d112      	bne.n	8006a00 <__mdiff+0x3c>
 80069da:	4629      	mov	r1, r5
 80069dc:	4630      	mov	r0, r6
 80069de:	f7ff fd5d 	bl	800649c <_Balloc>
 80069e2:	4602      	mov	r2, r0
 80069e4:	b928      	cbnz	r0, 80069f2 <__mdiff+0x2e>
 80069e6:	f240 2137 	movw	r1, #567	@ 0x237
 80069ea:	4b3e      	ldr	r3, [pc, #248]	@ (8006ae4 <__mdiff+0x120>)
 80069ec:	483e      	ldr	r0, [pc, #248]	@ (8006ae8 <__mdiff+0x124>)
 80069ee:	f000 fb6f 	bl	80070d0 <__assert_func>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069f8:	4610      	mov	r0, r2
 80069fa:	b003      	add	sp, #12
 80069fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a00:	bfbc      	itt	lt
 8006a02:	464b      	movlt	r3, r9
 8006a04:	46a1      	movlt	r9, r4
 8006a06:	4630      	mov	r0, r6
 8006a08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006a0c:	bfba      	itte	lt
 8006a0e:	461c      	movlt	r4, r3
 8006a10:	2501      	movlt	r5, #1
 8006a12:	2500      	movge	r5, #0
 8006a14:	f7ff fd42 	bl	800649c <_Balloc>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	b918      	cbnz	r0, 8006a24 <__mdiff+0x60>
 8006a1c:	f240 2145 	movw	r1, #581	@ 0x245
 8006a20:	4b30      	ldr	r3, [pc, #192]	@ (8006ae4 <__mdiff+0x120>)
 8006a22:	e7e3      	b.n	80069ec <__mdiff+0x28>
 8006a24:	f100 0b14 	add.w	fp, r0, #20
 8006a28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a2c:	f109 0310 	add.w	r3, r9, #16
 8006a30:	60c5      	str	r5, [r0, #12]
 8006a32:	f04f 0c00 	mov.w	ip, #0
 8006a36:	f109 0514 	add.w	r5, r9, #20
 8006a3a:	46d9      	mov	r9, fp
 8006a3c:	6926      	ldr	r6, [r4, #16]
 8006a3e:	f104 0e14 	add.w	lr, r4, #20
 8006a42:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006a46:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006a4a:	9301      	str	r3, [sp, #4]
 8006a4c:	9b01      	ldr	r3, [sp, #4]
 8006a4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006a52:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006a56:	b281      	uxth	r1, r0
 8006a58:	9301      	str	r3, [sp, #4]
 8006a5a:	fa1f f38a 	uxth.w	r3, sl
 8006a5e:	1a5b      	subs	r3, r3, r1
 8006a60:	0c00      	lsrs	r0, r0, #16
 8006a62:	4463      	add	r3, ip
 8006a64:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006a68:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a72:	4576      	cmp	r6, lr
 8006a74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a78:	f849 3b04 	str.w	r3, [r9], #4
 8006a7c:	d8e6      	bhi.n	8006a4c <__mdiff+0x88>
 8006a7e:	1b33      	subs	r3, r6, r4
 8006a80:	3b15      	subs	r3, #21
 8006a82:	f023 0303 	bic.w	r3, r3, #3
 8006a86:	3415      	adds	r4, #21
 8006a88:	3304      	adds	r3, #4
 8006a8a:	42a6      	cmp	r6, r4
 8006a8c:	bf38      	it	cc
 8006a8e:	2304      	movcc	r3, #4
 8006a90:	441d      	add	r5, r3
 8006a92:	445b      	add	r3, fp
 8006a94:	461e      	mov	r6, r3
 8006a96:	462c      	mov	r4, r5
 8006a98:	4544      	cmp	r4, r8
 8006a9a:	d30e      	bcc.n	8006aba <__mdiff+0xf6>
 8006a9c:	f108 0103 	add.w	r1, r8, #3
 8006aa0:	1b49      	subs	r1, r1, r5
 8006aa2:	f021 0103 	bic.w	r1, r1, #3
 8006aa6:	3d03      	subs	r5, #3
 8006aa8:	45a8      	cmp	r8, r5
 8006aaa:	bf38      	it	cc
 8006aac:	2100      	movcc	r1, #0
 8006aae:	440b      	add	r3, r1
 8006ab0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ab4:	b199      	cbz	r1, 8006ade <__mdiff+0x11a>
 8006ab6:	6117      	str	r7, [r2, #16]
 8006ab8:	e79e      	b.n	80069f8 <__mdiff+0x34>
 8006aba:	46e6      	mov	lr, ip
 8006abc:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ac0:	fa1f fc81 	uxth.w	ip, r1
 8006ac4:	44f4      	add	ip, lr
 8006ac6:	0c08      	lsrs	r0, r1, #16
 8006ac8:	4471      	add	r1, lr
 8006aca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006ace:	b289      	uxth	r1, r1
 8006ad0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ad4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ad8:	f846 1b04 	str.w	r1, [r6], #4
 8006adc:	e7dc      	b.n	8006a98 <__mdiff+0xd4>
 8006ade:	3f01      	subs	r7, #1
 8006ae0:	e7e6      	b.n	8006ab0 <__mdiff+0xec>
 8006ae2:	bf00      	nop
 8006ae4:	080085ee 	.word	0x080085ee
 8006ae8:	080085ff 	.word	0x080085ff

08006aec <__d2b>:
 8006aec:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006af0:	2101      	movs	r1, #1
 8006af2:	4690      	mov	r8, r2
 8006af4:	4699      	mov	r9, r3
 8006af6:	9e08      	ldr	r6, [sp, #32]
 8006af8:	f7ff fcd0 	bl	800649c <_Balloc>
 8006afc:	4604      	mov	r4, r0
 8006afe:	b930      	cbnz	r0, 8006b0e <__d2b+0x22>
 8006b00:	4602      	mov	r2, r0
 8006b02:	f240 310f 	movw	r1, #783	@ 0x30f
 8006b06:	4b23      	ldr	r3, [pc, #140]	@ (8006b94 <__d2b+0xa8>)
 8006b08:	4823      	ldr	r0, [pc, #140]	@ (8006b98 <__d2b+0xac>)
 8006b0a:	f000 fae1 	bl	80070d0 <__assert_func>
 8006b0e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b16:	b10d      	cbz	r5, 8006b1c <__d2b+0x30>
 8006b18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	f1b8 0300 	subs.w	r3, r8, #0
 8006b22:	d024      	beq.n	8006b6e <__d2b+0x82>
 8006b24:	4668      	mov	r0, sp
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	f7ff fd7f 	bl	800662a <__lo0bits>
 8006b2c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b30:	b1d8      	cbz	r0, 8006b6a <__d2b+0x7e>
 8006b32:	f1c0 0320 	rsb	r3, r0, #32
 8006b36:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3a:	430b      	orrs	r3, r1
 8006b3c:	40c2      	lsrs	r2, r0
 8006b3e:	6163      	str	r3, [r4, #20]
 8006b40:	9201      	str	r2, [sp, #4]
 8006b42:	9b01      	ldr	r3, [sp, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	bf0c      	ite	eq
 8006b48:	2201      	moveq	r2, #1
 8006b4a:	2202      	movne	r2, #2
 8006b4c:	61a3      	str	r3, [r4, #24]
 8006b4e:	6122      	str	r2, [r4, #16]
 8006b50:	b1ad      	cbz	r5, 8006b7e <__d2b+0x92>
 8006b52:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006b56:	4405      	add	r5, r0
 8006b58:	6035      	str	r5, [r6, #0]
 8006b5a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b60:	6018      	str	r0, [r3, #0]
 8006b62:	4620      	mov	r0, r4
 8006b64:	b002      	add	sp, #8
 8006b66:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006b6a:	6161      	str	r1, [r4, #20]
 8006b6c:	e7e9      	b.n	8006b42 <__d2b+0x56>
 8006b6e:	a801      	add	r0, sp, #4
 8006b70:	f7ff fd5b 	bl	800662a <__lo0bits>
 8006b74:	9b01      	ldr	r3, [sp, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	6163      	str	r3, [r4, #20]
 8006b7a:	3020      	adds	r0, #32
 8006b7c:	e7e7      	b.n	8006b4e <__d2b+0x62>
 8006b7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006b82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b86:	6030      	str	r0, [r6, #0]
 8006b88:	6918      	ldr	r0, [r3, #16]
 8006b8a:	f7ff fd2f 	bl	80065ec <__hi0bits>
 8006b8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b92:	e7e4      	b.n	8006b5e <__d2b+0x72>
 8006b94:	080085ee 	.word	0x080085ee
 8006b98:	080085ff 	.word	0x080085ff

08006b9c <__sfputc_r>:
 8006b9c:	6893      	ldr	r3, [r2, #8]
 8006b9e:	b410      	push	{r4}
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	6093      	str	r3, [r2, #8]
 8006ba6:	da07      	bge.n	8006bb8 <__sfputc_r+0x1c>
 8006ba8:	6994      	ldr	r4, [r2, #24]
 8006baa:	42a3      	cmp	r3, r4
 8006bac:	db01      	blt.n	8006bb2 <__sfputc_r+0x16>
 8006bae:	290a      	cmp	r1, #10
 8006bb0:	d102      	bne.n	8006bb8 <__sfputc_r+0x1c>
 8006bb2:	bc10      	pop	{r4}
 8006bb4:	f000 b9da 	b.w	8006f6c <__swbuf_r>
 8006bb8:	6813      	ldr	r3, [r2, #0]
 8006bba:	1c58      	adds	r0, r3, #1
 8006bbc:	6010      	str	r0, [r2, #0]
 8006bbe:	7019      	strb	r1, [r3, #0]
 8006bc0:	4608      	mov	r0, r1
 8006bc2:	bc10      	pop	{r4}
 8006bc4:	4770      	bx	lr

08006bc6 <__sfputs_r>:
 8006bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc8:	4606      	mov	r6, r0
 8006bca:	460f      	mov	r7, r1
 8006bcc:	4614      	mov	r4, r2
 8006bce:	18d5      	adds	r5, r2, r3
 8006bd0:	42ac      	cmp	r4, r5
 8006bd2:	d101      	bne.n	8006bd8 <__sfputs_r+0x12>
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	e007      	b.n	8006be8 <__sfputs_r+0x22>
 8006bd8:	463a      	mov	r2, r7
 8006bda:	4630      	mov	r0, r6
 8006bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006be0:	f7ff ffdc 	bl	8006b9c <__sfputc_r>
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	d1f3      	bne.n	8006bd0 <__sfputs_r+0xa>
 8006be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bec <_vfiprintf_r>:
 8006bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf0:	460d      	mov	r5, r1
 8006bf2:	4614      	mov	r4, r2
 8006bf4:	4698      	mov	r8, r3
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	b09d      	sub	sp, #116	@ 0x74
 8006bfa:	b118      	cbz	r0, 8006c04 <_vfiprintf_r+0x18>
 8006bfc:	6a03      	ldr	r3, [r0, #32]
 8006bfe:	b90b      	cbnz	r3, 8006c04 <_vfiprintf_r+0x18>
 8006c00:	f7fe fbe2 	bl	80053c8 <__sinit>
 8006c04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c06:	07d9      	lsls	r1, r3, #31
 8006c08:	d405      	bmi.n	8006c16 <_vfiprintf_r+0x2a>
 8006c0a:	89ab      	ldrh	r3, [r5, #12]
 8006c0c:	059a      	lsls	r2, r3, #22
 8006c0e:	d402      	bmi.n	8006c16 <_vfiprintf_r+0x2a>
 8006c10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c12:	f7fe fce2 	bl	80055da <__retarget_lock_acquire_recursive>
 8006c16:	89ab      	ldrh	r3, [r5, #12]
 8006c18:	071b      	lsls	r3, r3, #28
 8006c1a:	d501      	bpl.n	8006c20 <_vfiprintf_r+0x34>
 8006c1c:	692b      	ldr	r3, [r5, #16]
 8006c1e:	b99b      	cbnz	r3, 8006c48 <_vfiprintf_r+0x5c>
 8006c20:	4629      	mov	r1, r5
 8006c22:	4630      	mov	r0, r6
 8006c24:	f000 f9e0 	bl	8006fe8 <__swsetup_r>
 8006c28:	b170      	cbz	r0, 8006c48 <_vfiprintf_r+0x5c>
 8006c2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c2c:	07dc      	lsls	r4, r3, #31
 8006c2e:	d504      	bpl.n	8006c3a <_vfiprintf_r+0x4e>
 8006c30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c34:	b01d      	add	sp, #116	@ 0x74
 8006c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c3a:	89ab      	ldrh	r3, [r5, #12]
 8006c3c:	0598      	lsls	r0, r3, #22
 8006c3e:	d4f7      	bmi.n	8006c30 <_vfiprintf_r+0x44>
 8006c40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c42:	f7fe fccb 	bl	80055dc <__retarget_lock_release_recursive>
 8006c46:	e7f3      	b.n	8006c30 <_vfiprintf_r+0x44>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c4c:	2320      	movs	r3, #32
 8006c4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c52:	2330      	movs	r3, #48	@ 0x30
 8006c54:	f04f 0901 	mov.w	r9, #1
 8006c58:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c5c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006e08 <_vfiprintf_r+0x21c>
 8006c60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c64:	4623      	mov	r3, r4
 8006c66:	469a      	mov	sl, r3
 8006c68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c6c:	b10a      	cbz	r2, 8006c72 <_vfiprintf_r+0x86>
 8006c6e:	2a25      	cmp	r2, #37	@ 0x25
 8006c70:	d1f9      	bne.n	8006c66 <_vfiprintf_r+0x7a>
 8006c72:	ebba 0b04 	subs.w	fp, sl, r4
 8006c76:	d00b      	beq.n	8006c90 <_vfiprintf_r+0xa4>
 8006c78:	465b      	mov	r3, fp
 8006c7a:	4622      	mov	r2, r4
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	4630      	mov	r0, r6
 8006c80:	f7ff ffa1 	bl	8006bc6 <__sfputs_r>
 8006c84:	3001      	adds	r0, #1
 8006c86:	f000 80a7 	beq.w	8006dd8 <_vfiprintf_r+0x1ec>
 8006c8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c8c:	445a      	add	r2, fp
 8006c8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c90:	f89a 3000 	ldrb.w	r3, [sl]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 809f 	beq.w	8006dd8 <_vfiprintf_r+0x1ec>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ca0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ca4:	f10a 0a01 	add.w	sl, sl, #1
 8006ca8:	9304      	str	r3, [sp, #16]
 8006caa:	9307      	str	r3, [sp, #28]
 8006cac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006cb0:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cb2:	4654      	mov	r4, sl
 8006cb4:	2205      	movs	r2, #5
 8006cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cba:	4853      	ldr	r0, [pc, #332]	@ (8006e08 <_vfiprintf_r+0x21c>)
 8006cbc:	f7fe fc8f 	bl	80055de <memchr>
 8006cc0:	9a04      	ldr	r2, [sp, #16]
 8006cc2:	b9d8      	cbnz	r0, 8006cfc <_vfiprintf_r+0x110>
 8006cc4:	06d1      	lsls	r1, r2, #27
 8006cc6:	bf44      	itt	mi
 8006cc8:	2320      	movmi	r3, #32
 8006cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cce:	0713      	lsls	r3, r2, #28
 8006cd0:	bf44      	itt	mi
 8006cd2:	232b      	movmi	r3, #43	@ 0x2b
 8006cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8006cdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cde:	d015      	beq.n	8006d0c <_vfiprintf_r+0x120>
 8006ce0:	4654      	mov	r4, sl
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	f04f 0c0a 	mov.w	ip, #10
 8006ce8:	9a07      	ldr	r2, [sp, #28]
 8006cea:	4621      	mov	r1, r4
 8006cec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cf0:	3b30      	subs	r3, #48	@ 0x30
 8006cf2:	2b09      	cmp	r3, #9
 8006cf4:	d94b      	bls.n	8006d8e <_vfiprintf_r+0x1a2>
 8006cf6:	b1b0      	cbz	r0, 8006d26 <_vfiprintf_r+0x13a>
 8006cf8:	9207      	str	r2, [sp, #28]
 8006cfa:	e014      	b.n	8006d26 <_vfiprintf_r+0x13a>
 8006cfc:	eba0 0308 	sub.w	r3, r0, r8
 8006d00:	fa09 f303 	lsl.w	r3, r9, r3
 8006d04:	4313      	orrs	r3, r2
 8006d06:	46a2      	mov	sl, r4
 8006d08:	9304      	str	r3, [sp, #16]
 8006d0a:	e7d2      	b.n	8006cb2 <_vfiprintf_r+0xc6>
 8006d0c:	9b03      	ldr	r3, [sp, #12]
 8006d0e:	1d19      	adds	r1, r3, #4
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	9103      	str	r1, [sp, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	bfbb      	ittet	lt
 8006d18:	425b      	neglt	r3, r3
 8006d1a:	f042 0202 	orrlt.w	r2, r2, #2
 8006d1e:	9307      	strge	r3, [sp, #28]
 8006d20:	9307      	strlt	r3, [sp, #28]
 8006d22:	bfb8      	it	lt
 8006d24:	9204      	strlt	r2, [sp, #16]
 8006d26:	7823      	ldrb	r3, [r4, #0]
 8006d28:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d2a:	d10a      	bne.n	8006d42 <_vfiprintf_r+0x156>
 8006d2c:	7863      	ldrb	r3, [r4, #1]
 8006d2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d30:	d132      	bne.n	8006d98 <_vfiprintf_r+0x1ac>
 8006d32:	9b03      	ldr	r3, [sp, #12]
 8006d34:	3402      	adds	r4, #2
 8006d36:	1d1a      	adds	r2, r3, #4
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	9203      	str	r2, [sp, #12]
 8006d3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d40:	9305      	str	r3, [sp, #20]
 8006d42:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006e0c <_vfiprintf_r+0x220>
 8006d46:	2203      	movs	r2, #3
 8006d48:	4650      	mov	r0, sl
 8006d4a:	7821      	ldrb	r1, [r4, #0]
 8006d4c:	f7fe fc47 	bl	80055de <memchr>
 8006d50:	b138      	cbz	r0, 8006d62 <_vfiprintf_r+0x176>
 8006d52:	2240      	movs	r2, #64	@ 0x40
 8006d54:	9b04      	ldr	r3, [sp, #16]
 8006d56:	eba0 000a 	sub.w	r0, r0, sl
 8006d5a:	4082      	lsls	r2, r0
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	3401      	adds	r4, #1
 8006d60:	9304      	str	r3, [sp, #16]
 8006d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d66:	2206      	movs	r2, #6
 8006d68:	4829      	ldr	r0, [pc, #164]	@ (8006e10 <_vfiprintf_r+0x224>)
 8006d6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d6e:	f7fe fc36 	bl	80055de <memchr>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d03f      	beq.n	8006df6 <_vfiprintf_r+0x20a>
 8006d76:	4b27      	ldr	r3, [pc, #156]	@ (8006e14 <_vfiprintf_r+0x228>)
 8006d78:	bb1b      	cbnz	r3, 8006dc2 <_vfiprintf_r+0x1d6>
 8006d7a:	9b03      	ldr	r3, [sp, #12]
 8006d7c:	3307      	adds	r3, #7
 8006d7e:	f023 0307 	bic.w	r3, r3, #7
 8006d82:	3308      	adds	r3, #8
 8006d84:	9303      	str	r3, [sp, #12]
 8006d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d88:	443b      	add	r3, r7
 8006d8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d8c:	e76a      	b.n	8006c64 <_vfiprintf_r+0x78>
 8006d8e:	460c      	mov	r4, r1
 8006d90:	2001      	movs	r0, #1
 8006d92:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d96:	e7a8      	b.n	8006cea <_vfiprintf_r+0xfe>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f04f 0c0a 	mov.w	ip, #10
 8006d9e:	4619      	mov	r1, r3
 8006da0:	3401      	adds	r4, #1
 8006da2:	9305      	str	r3, [sp, #20]
 8006da4:	4620      	mov	r0, r4
 8006da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006daa:	3a30      	subs	r2, #48	@ 0x30
 8006dac:	2a09      	cmp	r2, #9
 8006dae:	d903      	bls.n	8006db8 <_vfiprintf_r+0x1cc>
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0c6      	beq.n	8006d42 <_vfiprintf_r+0x156>
 8006db4:	9105      	str	r1, [sp, #20]
 8006db6:	e7c4      	b.n	8006d42 <_vfiprintf_r+0x156>
 8006db8:	4604      	mov	r4, r0
 8006dba:	2301      	movs	r3, #1
 8006dbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dc0:	e7f0      	b.n	8006da4 <_vfiprintf_r+0x1b8>
 8006dc2:	ab03      	add	r3, sp, #12
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	462a      	mov	r2, r5
 8006dc8:	4630      	mov	r0, r6
 8006dca:	4b13      	ldr	r3, [pc, #76]	@ (8006e18 <_vfiprintf_r+0x22c>)
 8006dcc:	a904      	add	r1, sp, #16
 8006dce:	f7fd feb1 	bl	8004b34 <_printf_float>
 8006dd2:	4607      	mov	r7, r0
 8006dd4:	1c78      	adds	r0, r7, #1
 8006dd6:	d1d6      	bne.n	8006d86 <_vfiprintf_r+0x19a>
 8006dd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006dda:	07d9      	lsls	r1, r3, #31
 8006ddc:	d405      	bmi.n	8006dea <_vfiprintf_r+0x1fe>
 8006dde:	89ab      	ldrh	r3, [r5, #12]
 8006de0:	059a      	lsls	r2, r3, #22
 8006de2:	d402      	bmi.n	8006dea <_vfiprintf_r+0x1fe>
 8006de4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006de6:	f7fe fbf9 	bl	80055dc <__retarget_lock_release_recursive>
 8006dea:	89ab      	ldrh	r3, [r5, #12]
 8006dec:	065b      	lsls	r3, r3, #25
 8006dee:	f53f af1f 	bmi.w	8006c30 <_vfiprintf_r+0x44>
 8006df2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006df4:	e71e      	b.n	8006c34 <_vfiprintf_r+0x48>
 8006df6:	ab03      	add	r3, sp, #12
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	462a      	mov	r2, r5
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	4b06      	ldr	r3, [pc, #24]	@ (8006e18 <_vfiprintf_r+0x22c>)
 8006e00:	a904      	add	r1, sp, #16
 8006e02:	f7fe f935 	bl	8005070 <_printf_i>
 8006e06:	e7e4      	b.n	8006dd2 <_vfiprintf_r+0x1e6>
 8006e08:	08008758 	.word	0x08008758
 8006e0c:	0800875e 	.word	0x0800875e
 8006e10:	08008762 	.word	0x08008762
 8006e14:	08004b35 	.word	0x08004b35
 8006e18:	08006bc7 	.word	0x08006bc7

08006e1c <__sflush_r>:
 8006e1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	0716      	lsls	r6, r2, #28
 8006e24:	4605      	mov	r5, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	d454      	bmi.n	8006ed4 <__sflush_r+0xb8>
 8006e2a:	684b      	ldr	r3, [r1, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	dc02      	bgt.n	8006e36 <__sflush_r+0x1a>
 8006e30:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	dd48      	ble.n	8006ec8 <__sflush_r+0xac>
 8006e36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e38:	2e00      	cmp	r6, #0
 8006e3a:	d045      	beq.n	8006ec8 <__sflush_r+0xac>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006e42:	682f      	ldr	r7, [r5, #0]
 8006e44:	6a21      	ldr	r1, [r4, #32]
 8006e46:	602b      	str	r3, [r5, #0]
 8006e48:	d030      	beq.n	8006eac <__sflush_r+0x90>
 8006e4a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	0759      	lsls	r1, r3, #29
 8006e50:	d505      	bpl.n	8006e5e <__sflush_r+0x42>
 8006e52:	6863      	ldr	r3, [r4, #4]
 8006e54:	1ad2      	subs	r2, r2, r3
 8006e56:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e58:	b10b      	cbz	r3, 8006e5e <__sflush_r+0x42>
 8006e5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e5c:	1ad2      	subs	r2, r2, r3
 8006e5e:	2300      	movs	r3, #0
 8006e60:	4628      	mov	r0, r5
 8006e62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e64:	6a21      	ldr	r1, [r4, #32]
 8006e66:	47b0      	blx	r6
 8006e68:	1c43      	adds	r3, r0, #1
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	d106      	bne.n	8006e7c <__sflush_r+0x60>
 8006e6e:	6829      	ldr	r1, [r5, #0]
 8006e70:	291d      	cmp	r1, #29
 8006e72:	d82b      	bhi.n	8006ecc <__sflush_r+0xb0>
 8006e74:	4a28      	ldr	r2, [pc, #160]	@ (8006f18 <__sflush_r+0xfc>)
 8006e76:	410a      	asrs	r2, r1
 8006e78:	07d6      	lsls	r6, r2, #31
 8006e7a:	d427      	bmi.n	8006ecc <__sflush_r+0xb0>
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	6062      	str	r2, [r4, #4]
 8006e80:	6922      	ldr	r2, [r4, #16]
 8006e82:	04d9      	lsls	r1, r3, #19
 8006e84:	6022      	str	r2, [r4, #0]
 8006e86:	d504      	bpl.n	8006e92 <__sflush_r+0x76>
 8006e88:	1c42      	adds	r2, r0, #1
 8006e8a:	d101      	bne.n	8006e90 <__sflush_r+0x74>
 8006e8c:	682b      	ldr	r3, [r5, #0]
 8006e8e:	b903      	cbnz	r3, 8006e92 <__sflush_r+0x76>
 8006e90:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e94:	602f      	str	r7, [r5, #0]
 8006e96:	b1b9      	cbz	r1, 8006ec8 <__sflush_r+0xac>
 8006e98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e9c:	4299      	cmp	r1, r3
 8006e9e:	d002      	beq.n	8006ea6 <__sflush_r+0x8a>
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	f7ff f9fd 	bl	80062a0 <_free_r>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006eaa:	e00d      	b.n	8006ec8 <__sflush_r+0xac>
 8006eac:	2301      	movs	r3, #1
 8006eae:	4628      	mov	r0, r5
 8006eb0:	47b0      	blx	r6
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	1c50      	adds	r0, r2, #1
 8006eb6:	d1c9      	bne.n	8006e4c <__sflush_r+0x30>
 8006eb8:	682b      	ldr	r3, [r5, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0c6      	beq.n	8006e4c <__sflush_r+0x30>
 8006ebe:	2b1d      	cmp	r3, #29
 8006ec0:	d001      	beq.n	8006ec6 <__sflush_r+0xaa>
 8006ec2:	2b16      	cmp	r3, #22
 8006ec4:	d11d      	bne.n	8006f02 <__sflush_r+0xe6>
 8006ec6:	602f      	str	r7, [r5, #0]
 8006ec8:	2000      	movs	r0, #0
 8006eca:	e021      	b.n	8006f10 <__sflush_r+0xf4>
 8006ecc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ed0:	b21b      	sxth	r3, r3
 8006ed2:	e01a      	b.n	8006f0a <__sflush_r+0xee>
 8006ed4:	690f      	ldr	r7, [r1, #16]
 8006ed6:	2f00      	cmp	r7, #0
 8006ed8:	d0f6      	beq.n	8006ec8 <__sflush_r+0xac>
 8006eda:	0793      	lsls	r3, r2, #30
 8006edc:	bf18      	it	ne
 8006ede:	2300      	movne	r3, #0
 8006ee0:	680e      	ldr	r6, [r1, #0]
 8006ee2:	bf08      	it	eq
 8006ee4:	694b      	ldreq	r3, [r1, #20]
 8006ee6:	1bf6      	subs	r6, r6, r7
 8006ee8:	600f      	str	r7, [r1, #0]
 8006eea:	608b      	str	r3, [r1, #8]
 8006eec:	2e00      	cmp	r6, #0
 8006eee:	ddeb      	ble.n	8006ec8 <__sflush_r+0xac>
 8006ef0:	4633      	mov	r3, r6
 8006ef2:	463a      	mov	r2, r7
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	6a21      	ldr	r1, [r4, #32]
 8006ef8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006efc:	47e0      	blx	ip
 8006efe:	2800      	cmp	r0, #0
 8006f00:	dc07      	bgt.n	8006f12 <__sflush_r+0xf6>
 8006f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f0e:	81a3      	strh	r3, [r4, #12]
 8006f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f12:	4407      	add	r7, r0
 8006f14:	1a36      	subs	r6, r6, r0
 8006f16:	e7e9      	b.n	8006eec <__sflush_r+0xd0>
 8006f18:	dfbffffe 	.word	0xdfbffffe

08006f1c <_fflush_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	690b      	ldr	r3, [r1, #16]
 8006f20:	4605      	mov	r5, r0
 8006f22:	460c      	mov	r4, r1
 8006f24:	b913      	cbnz	r3, 8006f2c <_fflush_r+0x10>
 8006f26:	2500      	movs	r5, #0
 8006f28:	4628      	mov	r0, r5
 8006f2a:	bd38      	pop	{r3, r4, r5, pc}
 8006f2c:	b118      	cbz	r0, 8006f36 <_fflush_r+0x1a>
 8006f2e:	6a03      	ldr	r3, [r0, #32]
 8006f30:	b90b      	cbnz	r3, 8006f36 <_fflush_r+0x1a>
 8006f32:	f7fe fa49 	bl	80053c8 <__sinit>
 8006f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d0f3      	beq.n	8006f26 <_fflush_r+0xa>
 8006f3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f40:	07d0      	lsls	r0, r2, #31
 8006f42:	d404      	bmi.n	8006f4e <_fflush_r+0x32>
 8006f44:	0599      	lsls	r1, r3, #22
 8006f46:	d402      	bmi.n	8006f4e <_fflush_r+0x32>
 8006f48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f4a:	f7fe fb46 	bl	80055da <__retarget_lock_acquire_recursive>
 8006f4e:	4628      	mov	r0, r5
 8006f50:	4621      	mov	r1, r4
 8006f52:	f7ff ff63 	bl	8006e1c <__sflush_r>
 8006f56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f58:	4605      	mov	r5, r0
 8006f5a:	07da      	lsls	r2, r3, #31
 8006f5c:	d4e4      	bmi.n	8006f28 <_fflush_r+0xc>
 8006f5e:	89a3      	ldrh	r3, [r4, #12]
 8006f60:	059b      	lsls	r3, r3, #22
 8006f62:	d4e1      	bmi.n	8006f28 <_fflush_r+0xc>
 8006f64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f66:	f7fe fb39 	bl	80055dc <__retarget_lock_release_recursive>
 8006f6a:	e7dd      	b.n	8006f28 <_fflush_r+0xc>

08006f6c <__swbuf_r>:
 8006f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6e:	460e      	mov	r6, r1
 8006f70:	4614      	mov	r4, r2
 8006f72:	4605      	mov	r5, r0
 8006f74:	b118      	cbz	r0, 8006f7e <__swbuf_r+0x12>
 8006f76:	6a03      	ldr	r3, [r0, #32]
 8006f78:	b90b      	cbnz	r3, 8006f7e <__swbuf_r+0x12>
 8006f7a:	f7fe fa25 	bl	80053c8 <__sinit>
 8006f7e:	69a3      	ldr	r3, [r4, #24]
 8006f80:	60a3      	str	r3, [r4, #8]
 8006f82:	89a3      	ldrh	r3, [r4, #12]
 8006f84:	071a      	lsls	r2, r3, #28
 8006f86:	d501      	bpl.n	8006f8c <__swbuf_r+0x20>
 8006f88:	6923      	ldr	r3, [r4, #16]
 8006f8a:	b943      	cbnz	r3, 8006f9e <__swbuf_r+0x32>
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f000 f82a 	bl	8006fe8 <__swsetup_r>
 8006f94:	b118      	cbz	r0, 8006f9e <__swbuf_r+0x32>
 8006f96:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006f9a:	4638      	mov	r0, r7
 8006f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f9e:	6823      	ldr	r3, [r4, #0]
 8006fa0:	6922      	ldr	r2, [r4, #16]
 8006fa2:	b2f6      	uxtb	r6, r6
 8006fa4:	1a98      	subs	r0, r3, r2
 8006fa6:	6963      	ldr	r3, [r4, #20]
 8006fa8:	4637      	mov	r7, r6
 8006faa:	4283      	cmp	r3, r0
 8006fac:	dc05      	bgt.n	8006fba <__swbuf_r+0x4e>
 8006fae:	4621      	mov	r1, r4
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	f7ff ffb3 	bl	8006f1c <_fflush_r>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	d1ed      	bne.n	8006f96 <__swbuf_r+0x2a>
 8006fba:	68a3      	ldr	r3, [r4, #8]
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	60a3      	str	r3, [r4, #8]
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	6022      	str	r2, [r4, #0]
 8006fc6:	701e      	strb	r6, [r3, #0]
 8006fc8:	6962      	ldr	r2, [r4, #20]
 8006fca:	1c43      	adds	r3, r0, #1
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d004      	beq.n	8006fda <__swbuf_r+0x6e>
 8006fd0:	89a3      	ldrh	r3, [r4, #12]
 8006fd2:	07db      	lsls	r3, r3, #31
 8006fd4:	d5e1      	bpl.n	8006f9a <__swbuf_r+0x2e>
 8006fd6:	2e0a      	cmp	r6, #10
 8006fd8:	d1df      	bne.n	8006f9a <__swbuf_r+0x2e>
 8006fda:	4621      	mov	r1, r4
 8006fdc:	4628      	mov	r0, r5
 8006fde:	f7ff ff9d 	bl	8006f1c <_fflush_r>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d0d9      	beq.n	8006f9a <__swbuf_r+0x2e>
 8006fe6:	e7d6      	b.n	8006f96 <__swbuf_r+0x2a>

08006fe8 <__swsetup_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4b29      	ldr	r3, [pc, #164]	@ (8007090 <__swsetup_r+0xa8>)
 8006fec:	4605      	mov	r5, r0
 8006fee:	6818      	ldr	r0, [r3, #0]
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	b118      	cbz	r0, 8006ffc <__swsetup_r+0x14>
 8006ff4:	6a03      	ldr	r3, [r0, #32]
 8006ff6:	b90b      	cbnz	r3, 8006ffc <__swsetup_r+0x14>
 8006ff8:	f7fe f9e6 	bl	80053c8 <__sinit>
 8006ffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007000:	0719      	lsls	r1, r3, #28
 8007002:	d422      	bmi.n	800704a <__swsetup_r+0x62>
 8007004:	06da      	lsls	r2, r3, #27
 8007006:	d407      	bmi.n	8007018 <__swsetup_r+0x30>
 8007008:	2209      	movs	r2, #9
 800700a:	602a      	str	r2, [r5, #0]
 800700c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007010:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007014:	81a3      	strh	r3, [r4, #12]
 8007016:	e033      	b.n	8007080 <__swsetup_r+0x98>
 8007018:	0758      	lsls	r0, r3, #29
 800701a:	d512      	bpl.n	8007042 <__swsetup_r+0x5a>
 800701c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800701e:	b141      	cbz	r1, 8007032 <__swsetup_r+0x4a>
 8007020:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007024:	4299      	cmp	r1, r3
 8007026:	d002      	beq.n	800702e <__swsetup_r+0x46>
 8007028:	4628      	mov	r0, r5
 800702a:	f7ff f939 	bl	80062a0 <_free_r>
 800702e:	2300      	movs	r3, #0
 8007030:	6363      	str	r3, [r4, #52]	@ 0x34
 8007032:	89a3      	ldrh	r3, [r4, #12]
 8007034:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007038:	81a3      	strh	r3, [r4, #12]
 800703a:	2300      	movs	r3, #0
 800703c:	6063      	str	r3, [r4, #4]
 800703e:	6923      	ldr	r3, [r4, #16]
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	89a3      	ldrh	r3, [r4, #12]
 8007044:	f043 0308 	orr.w	r3, r3, #8
 8007048:	81a3      	strh	r3, [r4, #12]
 800704a:	6923      	ldr	r3, [r4, #16]
 800704c:	b94b      	cbnz	r3, 8007062 <__swsetup_r+0x7a>
 800704e:	89a3      	ldrh	r3, [r4, #12]
 8007050:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007058:	d003      	beq.n	8007062 <__swsetup_r+0x7a>
 800705a:	4621      	mov	r1, r4
 800705c:	4628      	mov	r0, r5
 800705e:	f000 f8c0 	bl	80071e2 <__smakebuf_r>
 8007062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007066:	f013 0201 	ands.w	r2, r3, #1
 800706a:	d00a      	beq.n	8007082 <__swsetup_r+0x9a>
 800706c:	2200      	movs	r2, #0
 800706e:	60a2      	str	r2, [r4, #8]
 8007070:	6962      	ldr	r2, [r4, #20]
 8007072:	4252      	negs	r2, r2
 8007074:	61a2      	str	r2, [r4, #24]
 8007076:	6922      	ldr	r2, [r4, #16]
 8007078:	b942      	cbnz	r2, 800708c <__swsetup_r+0xa4>
 800707a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800707e:	d1c5      	bne.n	800700c <__swsetup_r+0x24>
 8007080:	bd38      	pop	{r3, r4, r5, pc}
 8007082:	0799      	lsls	r1, r3, #30
 8007084:	bf58      	it	pl
 8007086:	6962      	ldrpl	r2, [r4, #20]
 8007088:	60a2      	str	r2, [r4, #8]
 800708a:	e7f4      	b.n	8007076 <__swsetup_r+0x8e>
 800708c:	2000      	movs	r0, #0
 800708e:	e7f7      	b.n	8007080 <__swsetup_r+0x98>
 8007090:	20000018 	.word	0x20000018

08007094 <_sbrk_r>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	2300      	movs	r3, #0
 8007098:	4d05      	ldr	r5, [pc, #20]	@ (80070b0 <_sbrk_r+0x1c>)
 800709a:	4604      	mov	r4, r0
 800709c:	4608      	mov	r0, r1
 800709e:	602b      	str	r3, [r5, #0]
 80070a0:	f7fa fbd6 	bl	8001850 <_sbrk>
 80070a4:	1c43      	adds	r3, r0, #1
 80070a6:	d102      	bne.n	80070ae <_sbrk_r+0x1a>
 80070a8:	682b      	ldr	r3, [r5, #0]
 80070aa:	b103      	cbz	r3, 80070ae <_sbrk_r+0x1a>
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	bd38      	pop	{r3, r4, r5, pc}
 80070b0:	20000414 	.word	0x20000414

080070b4 <memcpy>:
 80070b4:	440a      	add	r2, r1
 80070b6:	4291      	cmp	r1, r2
 80070b8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80070bc:	d100      	bne.n	80070c0 <memcpy+0xc>
 80070be:	4770      	bx	lr
 80070c0:	b510      	push	{r4, lr}
 80070c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070c6:	4291      	cmp	r1, r2
 80070c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070cc:	d1f9      	bne.n	80070c2 <memcpy+0xe>
 80070ce:	bd10      	pop	{r4, pc}

080070d0 <__assert_func>:
 80070d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070d2:	4614      	mov	r4, r2
 80070d4:	461a      	mov	r2, r3
 80070d6:	4b09      	ldr	r3, [pc, #36]	@ (80070fc <__assert_func+0x2c>)
 80070d8:	4605      	mov	r5, r0
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68d8      	ldr	r0, [r3, #12]
 80070de:	b954      	cbnz	r4, 80070f6 <__assert_func+0x26>
 80070e0:	4b07      	ldr	r3, [pc, #28]	@ (8007100 <__assert_func+0x30>)
 80070e2:	461c      	mov	r4, r3
 80070e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070e8:	9100      	str	r1, [sp, #0]
 80070ea:	462b      	mov	r3, r5
 80070ec:	4905      	ldr	r1, [pc, #20]	@ (8007104 <__assert_func+0x34>)
 80070ee:	f000 f841 	bl	8007174 <fiprintf>
 80070f2:	f000 f8d5 	bl	80072a0 <abort>
 80070f6:	4b04      	ldr	r3, [pc, #16]	@ (8007108 <__assert_func+0x38>)
 80070f8:	e7f4      	b.n	80070e4 <__assert_func+0x14>
 80070fa:	bf00      	nop
 80070fc:	20000018 	.word	0x20000018
 8007100:	080087ae 	.word	0x080087ae
 8007104:	08008780 	.word	0x08008780
 8007108:	08008773 	.word	0x08008773

0800710c <_calloc_r>:
 800710c:	b570      	push	{r4, r5, r6, lr}
 800710e:	fba1 5402 	umull	r5, r4, r1, r2
 8007112:	b93c      	cbnz	r4, 8007124 <_calloc_r+0x18>
 8007114:	4629      	mov	r1, r5
 8007116:	f7ff f935 	bl	8006384 <_malloc_r>
 800711a:	4606      	mov	r6, r0
 800711c:	b928      	cbnz	r0, 800712a <_calloc_r+0x1e>
 800711e:	2600      	movs	r6, #0
 8007120:	4630      	mov	r0, r6
 8007122:	bd70      	pop	{r4, r5, r6, pc}
 8007124:	220c      	movs	r2, #12
 8007126:	6002      	str	r2, [r0, #0]
 8007128:	e7f9      	b.n	800711e <_calloc_r+0x12>
 800712a:	462a      	mov	r2, r5
 800712c:	4621      	mov	r1, r4
 800712e:	f7fe f9d6 	bl	80054de <memset>
 8007132:	e7f5      	b.n	8007120 <_calloc_r+0x14>

08007134 <__ascii_mbtowc>:
 8007134:	b082      	sub	sp, #8
 8007136:	b901      	cbnz	r1, 800713a <__ascii_mbtowc+0x6>
 8007138:	a901      	add	r1, sp, #4
 800713a:	b142      	cbz	r2, 800714e <__ascii_mbtowc+0x1a>
 800713c:	b14b      	cbz	r3, 8007152 <__ascii_mbtowc+0x1e>
 800713e:	7813      	ldrb	r3, [r2, #0]
 8007140:	600b      	str	r3, [r1, #0]
 8007142:	7812      	ldrb	r2, [r2, #0]
 8007144:	1e10      	subs	r0, r2, #0
 8007146:	bf18      	it	ne
 8007148:	2001      	movne	r0, #1
 800714a:	b002      	add	sp, #8
 800714c:	4770      	bx	lr
 800714e:	4610      	mov	r0, r2
 8007150:	e7fb      	b.n	800714a <__ascii_mbtowc+0x16>
 8007152:	f06f 0001 	mvn.w	r0, #1
 8007156:	e7f8      	b.n	800714a <__ascii_mbtowc+0x16>

08007158 <__ascii_wctomb>:
 8007158:	4603      	mov	r3, r0
 800715a:	4608      	mov	r0, r1
 800715c:	b141      	cbz	r1, 8007170 <__ascii_wctomb+0x18>
 800715e:	2aff      	cmp	r2, #255	@ 0xff
 8007160:	d904      	bls.n	800716c <__ascii_wctomb+0x14>
 8007162:	228a      	movs	r2, #138	@ 0x8a
 8007164:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	4770      	bx	lr
 800716c:	2001      	movs	r0, #1
 800716e:	700a      	strb	r2, [r1, #0]
 8007170:	4770      	bx	lr
	...

08007174 <fiprintf>:
 8007174:	b40e      	push	{r1, r2, r3}
 8007176:	b503      	push	{r0, r1, lr}
 8007178:	4601      	mov	r1, r0
 800717a:	ab03      	add	r3, sp, #12
 800717c:	4805      	ldr	r0, [pc, #20]	@ (8007194 <fiprintf+0x20>)
 800717e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007182:	6800      	ldr	r0, [r0, #0]
 8007184:	9301      	str	r3, [sp, #4]
 8007186:	f7ff fd31 	bl	8006bec <_vfiprintf_r>
 800718a:	b002      	add	sp, #8
 800718c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007190:	b003      	add	sp, #12
 8007192:	4770      	bx	lr
 8007194:	20000018 	.word	0x20000018

08007198 <__swhatbuf_r>:
 8007198:	b570      	push	{r4, r5, r6, lr}
 800719a:	460c      	mov	r4, r1
 800719c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a0:	4615      	mov	r5, r2
 80071a2:	2900      	cmp	r1, #0
 80071a4:	461e      	mov	r6, r3
 80071a6:	b096      	sub	sp, #88	@ 0x58
 80071a8:	da0c      	bge.n	80071c4 <__swhatbuf_r+0x2c>
 80071aa:	89a3      	ldrh	r3, [r4, #12]
 80071ac:	2100      	movs	r1, #0
 80071ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80071b2:	bf14      	ite	ne
 80071b4:	2340      	movne	r3, #64	@ 0x40
 80071b6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80071ba:	2000      	movs	r0, #0
 80071bc:	6031      	str	r1, [r6, #0]
 80071be:	602b      	str	r3, [r5, #0]
 80071c0:	b016      	add	sp, #88	@ 0x58
 80071c2:	bd70      	pop	{r4, r5, r6, pc}
 80071c4:	466a      	mov	r2, sp
 80071c6:	f000 f849 	bl	800725c <_fstat_r>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	dbed      	blt.n	80071aa <__swhatbuf_r+0x12>
 80071ce:	9901      	ldr	r1, [sp, #4]
 80071d0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80071d4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80071d8:	4259      	negs	r1, r3
 80071da:	4159      	adcs	r1, r3
 80071dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071e0:	e7eb      	b.n	80071ba <__swhatbuf_r+0x22>

080071e2 <__smakebuf_r>:
 80071e2:	898b      	ldrh	r3, [r1, #12]
 80071e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071e6:	079d      	lsls	r5, r3, #30
 80071e8:	4606      	mov	r6, r0
 80071ea:	460c      	mov	r4, r1
 80071ec:	d507      	bpl.n	80071fe <__smakebuf_r+0x1c>
 80071ee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80071f2:	6023      	str	r3, [r4, #0]
 80071f4:	6123      	str	r3, [r4, #16]
 80071f6:	2301      	movs	r3, #1
 80071f8:	6163      	str	r3, [r4, #20]
 80071fa:	b003      	add	sp, #12
 80071fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071fe:	466a      	mov	r2, sp
 8007200:	ab01      	add	r3, sp, #4
 8007202:	f7ff ffc9 	bl	8007198 <__swhatbuf_r>
 8007206:	9f00      	ldr	r7, [sp, #0]
 8007208:	4605      	mov	r5, r0
 800720a:	4639      	mov	r1, r7
 800720c:	4630      	mov	r0, r6
 800720e:	f7ff f8b9 	bl	8006384 <_malloc_r>
 8007212:	b948      	cbnz	r0, 8007228 <__smakebuf_r+0x46>
 8007214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007218:	059a      	lsls	r2, r3, #22
 800721a:	d4ee      	bmi.n	80071fa <__smakebuf_r+0x18>
 800721c:	f023 0303 	bic.w	r3, r3, #3
 8007220:	f043 0302 	orr.w	r3, r3, #2
 8007224:	81a3      	strh	r3, [r4, #12]
 8007226:	e7e2      	b.n	80071ee <__smakebuf_r+0xc>
 8007228:	89a3      	ldrh	r3, [r4, #12]
 800722a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800722e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007232:	81a3      	strh	r3, [r4, #12]
 8007234:	9b01      	ldr	r3, [sp, #4]
 8007236:	6020      	str	r0, [r4, #0]
 8007238:	b15b      	cbz	r3, 8007252 <__smakebuf_r+0x70>
 800723a:	4630      	mov	r0, r6
 800723c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007240:	f000 f81e 	bl	8007280 <_isatty_r>
 8007244:	b128      	cbz	r0, 8007252 <__smakebuf_r+0x70>
 8007246:	89a3      	ldrh	r3, [r4, #12]
 8007248:	f023 0303 	bic.w	r3, r3, #3
 800724c:	f043 0301 	orr.w	r3, r3, #1
 8007250:	81a3      	strh	r3, [r4, #12]
 8007252:	89a3      	ldrh	r3, [r4, #12]
 8007254:	431d      	orrs	r5, r3
 8007256:	81a5      	strh	r5, [r4, #12]
 8007258:	e7cf      	b.n	80071fa <__smakebuf_r+0x18>
	...

0800725c <_fstat_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	2300      	movs	r3, #0
 8007260:	4d06      	ldr	r5, [pc, #24]	@ (800727c <_fstat_r+0x20>)
 8007262:	4604      	mov	r4, r0
 8007264:	4608      	mov	r0, r1
 8007266:	4611      	mov	r1, r2
 8007268:	602b      	str	r3, [r5, #0]
 800726a:	f7fa facb 	bl	8001804 <_fstat>
 800726e:	1c43      	adds	r3, r0, #1
 8007270:	d102      	bne.n	8007278 <_fstat_r+0x1c>
 8007272:	682b      	ldr	r3, [r5, #0]
 8007274:	b103      	cbz	r3, 8007278 <_fstat_r+0x1c>
 8007276:	6023      	str	r3, [r4, #0]
 8007278:	bd38      	pop	{r3, r4, r5, pc}
 800727a:	bf00      	nop
 800727c:	20000414 	.word	0x20000414

08007280 <_isatty_r>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	2300      	movs	r3, #0
 8007284:	4d05      	ldr	r5, [pc, #20]	@ (800729c <_isatty_r+0x1c>)
 8007286:	4604      	mov	r4, r0
 8007288:	4608      	mov	r0, r1
 800728a:	602b      	str	r3, [r5, #0]
 800728c:	f7fa fac9 	bl	8001822 <_isatty>
 8007290:	1c43      	adds	r3, r0, #1
 8007292:	d102      	bne.n	800729a <_isatty_r+0x1a>
 8007294:	682b      	ldr	r3, [r5, #0]
 8007296:	b103      	cbz	r3, 800729a <_isatty_r+0x1a>
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	bd38      	pop	{r3, r4, r5, pc}
 800729c:	20000414 	.word	0x20000414

080072a0 <abort>:
 80072a0:	2006      	movs	r0, #6
 80072a2:	b508      	push	{r3, lr}
 80072a4:	f000 f82c 	bl	8007300 <raise>
 80072a8:	2001      	movs	r0, #1
 80072aa:	f7fa fa5c 	bl	8001766 <_exit>

080072ae <_raise_r>:
 80072ae:	291f      	cmp	r1, #31
 80072b0:	b538      	push	{r3, r4, r5, lr}
 80072b2:	4605      	mov	r5, r0
 80072b4:	460c      	mov	r4, r1
 80072b6:	d904      	bls.n	80072c2 <_raise_r+0x14>
 80072b8:	2316      	movs	r3, #22
 80072ba:	6003      	str	r3, [r0, #0]
 80072bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072c0:	bd38      	pop	{r3, r4, r5, pc}
 80072c2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80072c4:	b112      	cbz	r2, 80072cc <_raise_r+0x1e>
 80072c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072ca:	b94b      	cbnz	r3, 80072e0 <_raise_r+0x32>
 80072cc:	4628      	mov	r0, r5
 80072ce:	f000 f831 	bl	8007334 <_getpid_r>
 80072d2:	4622      	mov	r2, r4
 80072d4:	4601      	mov	r1, r0
 80072d6:	4628      	mov	r0, r5
 80072d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072dc:	f000 b818 	b.w	8007310 <_kill_r>
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d00a      	beq.n	80072fa <_raise_r+0x4c>
 80072e4:	1c59      	adds	r1, r3, #1
 80072e6:	d103      	bne.n	80072f0 <_raise_r+0x42>
 80072e8:	2316      	movs	r3, #22
 80072ea:	6003      	str	r3, [r0, #0]
 80072ec:	2001      	movs	r0, #1
 80072ee:	e7e7      	b.n	80072c0 <_raise_r+0x12>
 80072f0:	2100      	movs	r1, #0
 80072f2:	4620      	mov	r0, r4
 80072f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80072f8:	4798      	blx	r3
 80072fa:	2000      	movs	r0, #0
 80072fc:	e7e0      	b.n	80072c0 <_raise_r+0x12>
	...

08007300 <raise>:
 8007300:	4b02      	ldr	r3, [pc, #8]	@ (800730c <raise+0xc>)
 8007302:	4601      	mov	r1, r0
 8007304:	6818      	ldr	r0, [r3, #0]
 8007306:	f7ff bfd2 	b.w	80072ae <_raise_r>
 800730a:	bf00      	nop
 800730c:	20000018 	.word	0x20000018

08007310 <_kill_r>:
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	2300      	movs	r3, #0
 8007314:	4d06      	ldr	r5, [pc, #24]	@ (8007330 <_kill_r+0x20>)
 8007316:	4604      	mov	r4, r0
 8007318:	4608      	mov	r0, r1
 800731a:	4611      	mov	r1, r2
 800731c:	602b      	str	r3, [r5, #0]
 800731e:	f7fa fa12 	bl	8001746 <_kill>
 8007322:	1c43      	adds	r3, r0, #1
 8007324:	d102      	bne.n	800732c <_kill_r+0x1c>
 8007326:	682b      	ldr	r3, [r5, #0]
 8007328:	b103      	cbz	r3, 800732c <_kill_r+0x1c>
 800732a:	6023      	str	r3, [r4, #0]
 800732c:	bd38      	pop	{r3, r4, r5, pc}
 800732e:	bf00      	nop
 8007330:	20000414 	.word	0x20000414

08007334 <_getpid_r>:
 8007334:	f7fa ba00 	b.w	8001738 <_getpid>

08007338 <exp>:
 8007338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733a:	4606      	mov	r6, r0
 800733c:	460f      	mov	r7, r1
 800733e:	f000 f8a3 	bl	8007488 <__ieee754_exp>
 8007342:	4604      	mov	r4, r0
 8007344:	460d      	mov	r5, r1
 8007346:	4630      	mov	r0, r6
 8007348:	4639      	mov	r1, r7
 800734a:	f000 f897 	bl	800747c <finite>
 800734e:	b168      	cbz	r0, 800736c <exp+0x34>
 8007350:	a311      	add	r3, pc, #68	@ (adr r3, 8007398 <exp+0x60>)
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	4630      	mov	r0, r6
 8007358:	4639      	mov	r1, r7
 800735a:	f7f9 fb4d 	bl	80009f8 <__aeabi_dcmpgt>
 800735e:	b140      	cbz	r0, 8007372 <exp+0x3a>
 8007360:	f7fe f910 	bl	8005584 <__errno>
 8007364:	2322      	movs	r3, #34	@ 0x22
 8007366:	2400      	movs	r4, #0
 8007368:	4d0f      	ldr	r5, [pc, #60]	@ (80073a8 <exp+0x70>)
 800736a:	6003      	str	r3, [r0, #0]
 800736c:	4620      	mov	r0, r4
 800736e:	4629      	mov	r1, r5
 8007370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007372:	4630      	mov	r0, r6
 8007374:	a30a      	add	r3, pc, #40	@ (adr r3, 80073a0 <exp+0x68>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	4639      	mov	r1, r7
 800737c:	f7f9 fb1e 	bl	80009bc <__aeabi_dcmplt>
 8007380:	2800      	cmp	r0, #0
 8007382:	d0f3      	beq.n	800736c <exp+0x34>
 8007384:	f7fe f8fe 	bl	8005584 <__errno>
 8007388:	2322      	movs	r3, #34	@ 0x22
 800738a:	2400      	movs	r4, #0
 800738c:	2500      	movs	r5, #0
 800738e:	6003      	str	r3, [r0, #0]
 8007390:	e7ec      	b.n	800736c <exp+0x34>
 8007392:	bf00      	nop
 8007394:	f3af 8000 	nop.w
 8007398:	fefa39ef 	.word	0xfefa39ef
 800739c:	40862e42 	.word	0x40862e42
 80073a0:	d52d3051 	.word	0xd52d3051
 80073a4:	c0874910 	.word	0xc0874910
 80073a8:	7ff00000 	.word	0x7ff00000

080073ac <pow>:
 80073ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b0:	4614      	mov	r4, r2
 80073b2:	461d      	mov	r5, r3
 80073b4:	4680      	mov	r8, r0
 80073b6:	4689      	mov	r9, r1
 80073b8:	f000 f9da 	bl	8007770 <__ieee754_pow>
 80073bc:	4622      	mov	r2, r4
 80073be:	4606      	mov	r6, r0
 80073c0:	460f      	mov	r7, r1
 80073c2:	462b      	mov	r3, r5
 80073c4:	4620      	mov	r0, r4
 80073c6:	4629      	mov	r1, r5
 80073c8:	f7f9 fb20 	bl	8000a0c <__aeabi_dcmpun>
 80073cc:	bbc8      	cbnz	r0, 8007442 <pow+0x96>
 80073ce:	2200      	movs	r2, #0
 80073d0:	2300      	movs	r3, #0
 80073d2:	4640      	mov	r0, r8
 80073d4:	4649      	mov	r1, r9
 80073d6:	f7f9 fae7 	bl	80009a8 <__aeabi_dcmpeq>
 80073da:	b1b8      	cbz	r0, 800740c <pow+0x60>
 80073dc:	2200      	movs	r2, #0
 80073de:	2300      	movs	r3, #0
 80073e0:	4620      	mov	r0, r4
 80073e2:	4629      	mov	r1, r5
 80073e4:	f7f9 fae0 	bl	80009a8 <__aeabi_dcmpeq>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	d141      	bne.n	8007470 <pow+0xc4>
 80073ec:	4620      	mov	r0, r4
 80073ee:	4629      	mov	r1, r5
 80073f0:	f000 f844 	bl	800747c <finite>
 80073f4:	b328      	cbz	r0, 8007442 <pow+0x96>
 80073f6:	2200      	movs	r2, #0
 80073f8:	2300      	movs	r3, #0
 80073fa:	4620      	mov	r0, r4
 80073fc:	4629      	mov	r1, r5
 80073fe:	f7f9 fadd 	bl	80009bc <__aeabi_dcmplt>
 8007402:	b1f0      	cbz	r0, 8007442 <pow+0x96>
 8007404:	f7fe f8be 	bl	8005584 <__errno>
 8007408:	2322      	movs	r3, #34	@ 0x22
 800740a:	e019      	b.n	8007440 <pow+0x94>
 800740c:	4630      	mov	r0, r6
 800740e:	4639      	mov	r1, r7
 8007410:	f000 f834 	bl	800747c <finite>
 8007414:	b9c8      	cbnz	r0, 800744a <pow+0x9e>
 8007416:	4640      	mov	r0, r8
 8007418:	4649      	mov	r1, r9
 800741a:	f000 f82f 	bl	800747c <finite>
 800741e:	b1a0      	cbz	r0, 800744a <pow+0x9e>
 8007420:	4620      	mov	r0, r4
 8007422:	4629      	mov	r1, r5
 8007424:	f000 f82a 	bl	800747c <finite>
 8007428:	b178      	cbz	r0, 800744a <pow+0x9e>
 800742a:	4632      	mov	r2, r6
 800742c:	463b      	mov	r3, r7
 800742e:	4630      	mov	r0, r6
 8007430:	4639      	mov	r1, r7
 8007432:	f7f9 faeb 	bl	8000a0c <__aeabi_dcmpun>
 8007436:	2800      	cmp	r0, #0
 8007438:	d0e4      	beq.n	8007404 <pow+0x58>
 800743a:	f7fe f8a3 	bl	8005584 <__errno>
 800743e:	2321      	movs	r3, #33	@ 0x21
 8007440:	6003      	str	r3, [r0, #0]
 8007442:	4630      	mov	r0, r6
 8007444:	4639      	mov	r1, r7
 8007446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800744a:	2200      	movs	r2, #0
 800744c:	2300      	movs	r3, #0
 800744e:	4630      	mov	r0, r6
 8007450:	4639      	mov	r1, r7
 8007452:	f7f9 faa9 	bl	80009a8 <__aeabi_dcmpeq>
 8007456:	2800      	cmp	r0, #0
 8007458:	d0f3      	beq.n	8007442 <pow+0x96>
 800745a:	4640      	mov	r0, r8
 800745c:	4649      	mov	r1, r9
 800745e:	f000 f80d 	bl	800747c <finite>
 8007462:	2800      	cmp	r0, #0
 8007464:	d0ed      	beq.n	8007442 <pow+0x96>
 8007466:	4620      	mov	r0, r4
 8007468:	4629      	mov	r1, r5
 800746a:	f000 f807 	bl	800747c <finite>
 800746e:	e7c8      	b.n	8007402 <pow+0x56>
 8007470:	2600      	movs	r6, #0
 8007472:	4f01      	ldr	r7, [pc, #4]	@ (8007478 <pow+0xcc>)
 8007474:	e7e5      	b.n	8007442 <pow+0x96>
 8007476:	bf00      	nop
 8007478:	3ff00000 	.word	0x3ff00000

0800747c <finite>:
 800747c:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8007480:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007484:	0fc0      	lsrs	r0, r0, #31
 8007486:	4770      	bx	lr

08007488 <__ieee754_exp>:
 8007488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800748c:	4fae      	ldr	r7, [pc, #696]	@ (8007748 <__ieee754_exp+0x2c0>)
 800748e:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8007492:	42ba      	cmp	r2, r7
 8007494:	4604      	mov	r4, r0
 8007496:	460d      	mov	r5, r1
 8007498:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800749c:	d932      	bls.n	8007504 <__ieee754_exp+0x7c>
 800749e:	4fab      	ldr	r7, [pc, #684]	@ (800774c <__ieee754_exp+0x2c4>)
 80074a0:	42ba      	cmp	r2, r7
 80074a2:	d912      	bls.n	80074ca <__ieee754_exp+0x42>
 80074a4:	f3c1 0313 	ubfx	r3, r1, #0, #20
 80074a8:	4303      	orrs	r3, r0
 80074aa:	4602      	mov	r2, r0
 80074ac:	d005      	beq.n	80074ba <__ieee754_exp+0x32>
 80074ae:	460b      	mov	r3, r1
 80074b0:	f7f8 fe5c 	bl	800016c <__adddf3>
 80074b4:	4604      	mov	r4, r0
 80074b6:	460d      	mov	r5, r1
 80074b8:	e002      	b.n	80074c0 <__ieee754_exp+0x38>
 80074ba:	2e00      	cmp	r6, #0
 80074bc:	f040 8112 	bne.w	80076e4 <__ieee754_exp+0x25c>
 80074c0:	4620      	mov	r0, r4
 80074c2:	4629      	mov	r1, r5
 80074c4:	b004      	add	sp, #16
 80074c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ca:	a389      	add	r3, pc, #548	@ (adr r3, 80076f0 <__ieee754_exp+0x268>)
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	f7f9 fa92 	bl	80009f8 <__aeabi_dcmpgt>
 80074d4:	4607      	mov	r7, r0
 80074d6:	b128      	cbz	r0, 80074e4 <__ieee754_exp+0x5c>
 80074d8:	2000      	movs	r0, #0
 80074da:	b004      	add	sp, #16
 80074dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e0:	f000 bf0a 	b.w	80082f8 <__math_oflow>
 80074e4:	4620      	mov	r0, r4
 80074e6:	a384      	add	r3, pc, #528	@ (adr r3, 80076f8 <__ieee754_exp+0x270>)
 80074e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ec:	4629      	mov	r1, r5
 80074ee:	f7f9 fa65 	bl	80009bc <__aeabi_dcmplt>
 80074f2:	2800      	cmp	r0, #0
 80074f4:	f000 8085 	beq.w	8007602 <__ieee754_exp+0x17a>
 80074f8:	4638      	mov	r0, r7
 80074fa:	b004      	add	sp, #16
 80074fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007500:	f000 bef5 	b.w	80082ee <__math_uflow>
 8007504:	4b92      	ldr	r3, [pc, #584]	@ (8007750 <__ieee754_exp+0x2c8>)
 8007506:	429a      	cmp	r2, r3
 8007508:	f240 80a7 	bls.w	800765a <__ieee754_exp+0x1d2>
 800750c:	4b91      	ldr	r3, [pc, #580]	@ (8007754 <__ieee754_exp+0x2cc>)
 800750e:	429a      	cmp	r2, r3
 8007510:	d877      	bhi.n	8007602 <__ieee754_exp+0x17a>
 8007512:	4b91      	ldr	r3, [pc, #580]	@ (8007758 <__ieee754_exp+0x2d0>)
 8007514:	00f4      	lsls	r4, r6, #3
 8007516:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800751a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751e:	f7f8 fe23 	bl	8000168 <__aeabi_dsub>
 8007522:	4680      	mov	r8, r0
 8007524:	4689      	mov	r9, r1
 8007526:	4b8d      	ldr	r3, [pc, #564]	@ (800775c <__ieee754_exp+0x2d4>)
 8007528:	f1c6 0a01 	rsb	sl, r6, #1
 800752c:	4423      	add	r3, r4
 800752e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007532:	e9cd 3400 	strd	r3, r4, [sp]
 8007536:	ebaa 0a06 	sub.w	sl, sl, r6
 800753a:	4640      	mov	r0, r8
 800753c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007540:	4649      	mov	r1, r9
 8007542:	f7f8 fe11 	bl	8000168 <__aeabi_dsub>
 8007546:	4604      	mov	r4, r0
 8007548:	460d      	mov	r5, r1
 800754a:	4622      	mov	r2, r4
 800754c:	462b      	mov	r3, r5
 800754e:	4620      	mov	r0, r4
 8007550:	4629      	mov	r1, r5
 8007552:	f7f8 ffc1 	bl	80004d8 <__aeabi_dmul>
 8007556:	a36a      	add	r3, pc, #424	@ (adr r3, 8007700 <__ieee754_exp+0x278>)
 8007558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755c:	4606      	mov	r6, r0
 800755e:	460f      	mov	r7, r1
 8007560:	f7f8 ffba 	bl	80004d8 <__aeabi_dmul>
 8007564:	a368      	add	r3, pc, #416	@ (adr r3, 8007708 <__ieee754_exp+0x280>)
 8007566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756a:	f7f8 fdfd 	bl	8000168 <__aeabi_dsub>
 800756e:	4632      	mov	r2, r6
 8007570:	463b      	mov	r3, r7
 8007572:	f7f8 ffb1 	bl	80004d8 <__aeabi_dmul>
 8007576:	a366      	add	r3, pc, #408	@ (adr r3, 8007710 <__ieee754_exp+0x288>)
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	f7f8 fdf6 	bl	800016c <__adddf3>
 8007580:	4632      	mov	r2, r6
 8007582:	463b      	mov	r3, r7
 8007584:	f7f8 ffa8 	bl	80004d8 <__aeabi_dmul>
 8007588:	a363      	add	r3, pc, #396	@ (adr r3, 8007718 <__ieee754_exp+0x290>)
 800758a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758e:	f7f8 fdeb 	bl	8000168 <__aeabi_dsub>
 8007592:	4632      	mov	r2, r6
 8007594:	463b      	mov	r3, r7
 8007596:	f7f8 ff9f 	bl	80004d8 <__aeabi_dmul>
 800759a:	a361      	add	r3, pc, #388	@ (adr r3, 8007720 <__ieee754_exp+0x298>)
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	f7f8 fde4 	bl	800016c <__adddf3>
 80075a4:	4632      	mov	r2, r6
 80075a6:	463b      	mov	r3, r7
 80075a8:	f7f8 ff96 	bl	80004d8 <__aeabi_dmul>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4620      	mov	r0, r4
 80075b2:	4629      	mov	r1, r5
 80075b4:	f7f8 fdd8 	bl	8000168 <__aeabi_dsub>
 80075b8:	4602      	mov	r2, r0
 80075ba:	460b      	mov	r3, r1
 80075bc:	4606      	mov	r6, r0
 80075be:	460f      	mov	r7, r1
 80075c0:	4620      	mov	r0, r4
 80075c2:	4629      	mov	r1, r5
 80075c4:	f7f8 ff88 	bl	80004d8 <__aeabi_dmul>
 80075c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075cc:	f1ba 0f00 	cmp.w	sl, #0
 80075d0:	d15a      	bne.n	8007688 <__ieee754_exp+0x200>
 80075d2:	2200      	movs	r2, #0
 80075d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80075d8:	4630      	mov	r0, r6
 80075da:	4639      	mov	r1, r7
 80075dc:	f7f8 fdc4 	bl	8000168 <__aeabi_dsub>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075e8:	f7f9 f8a0 	bl	800072c <__aeabi_ddiv>
 80075ec:	4622      	mov	r2, r4
 80075ee:	462b      	mov	r3, r5
 80075f0:	f7f8 fdba 	bl	8000168 <__aeabi_dsub>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	2000      	movs	r0, #0
 80075fa:	4959      	ldr	r1, [pc, #356]	@ (8007760 <__ieee754_exp+0x2d8>)
 80075fc:	f7f8 fdb4 	bl	8000168 <__aeabi_dsub>
 8007600:	e758      	b.n	80074b4 <__ieee754_exp+0x2c>
 8007602:	4b58      	ldr	r3, [pc, #352]	@ (8007764 <__ieee754_exp+0x2dc>)
 8007604:	4620      	mov	r0, r4
 8007606:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800760a:	4629      	mov	r1, r5
 800760c:	a346      	add	r3, pc, #280	@ (adr r3, 8007728 <__ieee754_exp+0x2a0>)
 800760e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007612:	f7f8 ff61 	bl	80004d8 <__aeabi_dmul>
 8007616:	e9d6 2300 	ldrd	r2, r3, [r6]
 800761a:	f7f8 fda7 	bl	800016c <__adddf3>
 800761e:	f7f9 fa0b 	bl	8000a38 <__aeabi_d2iz>
 8007622:	4682      	mov	sl, r0
 8007624:	f7f8 feee 	bl	8000404 <__aeabi_i2d>
 8007628:	a341      	add	r3, pc, #260	@ (adr r3, 8007730 <__ieee754_exp+0x2a8>)
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	4606      	mov	r6, r0
 8007630:	460f      	mov	r7, r1
 8007632:	f7f8 ff51 	bl	80004d8 <__aeabi_dmul>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	4620      	mov	r0, r4
 800763c:	4629      	mov	r1, r5
 800763e:	f7f8 fd93 	bl	8000168 <__aeabi_dsub>
 8007642:	a33d      	add	r3, pc, #244	@ (adr r3, 8007738 <__ieee754_exp+0x2b0>)
 8007644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007648:	4680      	mov	r8, r0
 800764a:	4689      	mov	r9, r1
 800764c:	4630      	mov	r0, r6
 800764e:	4639      	mov	r1, r7
 8007650:	f7f8 ff42 	bl	80004d8 <__aeabi_dmul>
 8007654:	e9cd 0100 	strd	r0, r1, [sp]
 8007658:	e76f      	b.n	800753a <__ieee754_exp+0xb2>
 800765a:	4b43      	ldr	r3, [pc, #268]	@ (8007768 <__ieee754_exp+0x2e0>)
 800765c:	429a      	cmp	r2, r3
 800765e:	d80e      	bhi.n	800767e <__ieee754_exp+0x1f6>
 8007660:	a337      	add	r3, pc, #220	@ (adr r3, 8007740 <__ieee754_exp+0x2b8>)
 8007662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007666:	f7f8 fd81 	bl	800016c <__adddf3>
 800766a:	2200      	movs	r2, #0
 800766c:	4b3c      	ldr	r3, [pc, #240]	@ (8007760 <__ieee754_exp+0x2d8>)
 800766e:	f7f9 f9c3 	bl	80009f8 <__aeabi_dcmpgt>
 8007672:	b138      	cbz	r0, 8007684 <__ieee754_exp+0x1fc>
 8007674:	2200      	movs	r2, #0
 8007676:	4620      	mov	r0, r4
 8007678:	4629      	mov	r1, r5
 800767a:	4b39      	ldr	r3, [pc, #228]	@ (8007760 <__ieee754_exp+0x2d8>)
 800767c:	e718      	b.n	80074b0 <__ieee754_exp+0x28>
 800767e:	f04f 0a00 	mov.w	sl, #0
 8007682:	e762      	b.n	800754a <__ieee754_exp+0xc2>
 8007684:	4682      	mov	sl, r0
 8007686:	e760      	b.n	800754a <__ieee754_exp+0xc2>
 8007688:	4632      	mov	r2, r6
 800768a:	463b      	mov	r3, r7
 800768c:	2000      	movs	r0, #0
 800768e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007692:	f7f8 fd69 	bl	8000168 <__aeabi_dsub>
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800769e:	f7f9 f845 	bl	800072c <__aeabi_ddiv>
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076aa:	f7f8 fd5d 	bl	8000168 <__aeabi_dsub>
 80076ae:	4642      	mov	r2, r8
 80076b0:	464b      	mov	r3, r9
 80076b2:	f7f8 fd59 	bl	8000168 <__aeabi_dsub>
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	2000      	movs	r0, #0
 80076bc:	4928      	ldr	r1, [pc, #160]	@ (8007760 <__ieee754_exp+0x2d8>)
 80076be:	f7f8 fd53 	bl	8000168 <__aeabi_dsub>
 80076c2:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 80076c6:	4592      	cmp	sl, r2
 80076c8:	db02      	blt.n	80076d0 <__ieee754_exp+0x248>
 80076ca:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80076ce:	e6f1      	b.n	80074b4 <__ieee754_exp+0x2c>
 80076d0:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 80076d4:	2200      	movs	r2, #0
 80076d6:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 80076da:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80076de:	f7f8 fefb 	bl	80004d8 <__aeabi_dmul>
 80076e2:	e6e7      	b.n	80074b4 <__ieee754_exp+0x2c>
 80076e4:	2400      	movs	r4, #0
 80076e6:	2500      	movs	r5, #0
 80076e8:	e6ea      	b.n	80074c0 <__ieee754_exp+0x38>
 80076ea:	bf00      	nop
 80076ec:	f3af 8000 	nop.w
 80076f0:	fefa39ef 	.word	0xfefa39ef
 80076f4:	40862e42 	.word	0x40862e42
 80076f8:	d52d3051 	.word	0xd52d3051
 80076fc:	c0874910 	.word	0xc0874910
 8007700:	72bea4d0 	.word	0x72bea4d0
 8007704:	3e663769 	.word	0x3e663769
 8007708:	c5d26bf1 	.word	0xc5d26bf1
 800770c:	3ebbbd41 	.word	0x3ebbbd41
 8007710:	af25de2c 	.word	0xaf25de2c
 8007714:	3f11566a 	.word	0x3f11566a
 8007718:	16bebd93 	.word	0x16bebd93
 800771c:	3f66c16c 	.word	0x3f66c16c
 8007720:	5555553e 	.word	0x5555553e
 8007724:	3fc55555 	.word	0x3fc55555
 8007728:	652b82fe 	.word	0x652b82fe
 800772c:	3ff71547 	.word	0x3ff71547
 8007730:	fee00000 	.word	0xfee00000
 8007734:	3fe62e42 	.word	0x3fe62e42
 8007738:	35793c76 	.word	0x35793c76
 800773c:	3dea39ef 	.word	0x3dea39ef
 8007740:	8800759c 	.word	0x8800759c
 8007744:	7e37e43c 	.word	0x7e37e43c
 8007748:	40862e41 	.word	0x40862e41
 800774c:	7fefffff 	.word	0x7fefffff
 8007750:	3fd62e42 	.word	0x3fd62e42
 8007754:	3ff0a2b1 	.word	0x3ff0a2b1
 8007758:	080088c0 	.word	0x080088c0
 800775c:	080088b0 	.word	0x080088b0
 8007760:	3ff00000 	.word	0x3ff00000
 8007764:	080088d0 	.word	0x080088d0
 8007768:	3defffff 	.word	0x3defffff
 800776c:	00000000 	.word	0x00000000

08007770 <__ieee754_pow>:
 8007770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007774:	b091      	sub	sp, #68	@ 0x44
 8007776:	e9cd 2300 	strd	r2, r3, [sp]
 800777a:	468b      	mov	fp, r1
 800777c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8007780:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8007784:	4682      	mov	sl, r0
 8007786:	ea57 0001 	orrs.w	r0, r7, r1
 800778a:	d112      	bne.n	80077b2 <__ieee754_pow+0x42>
 800778c:	4653      	mov	r3, sl
 800778e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8007792:	18db      	adds	r3, r3, r3
 8007794:	4152      	adcs	r2, r2
 8007796:	4298      	cmp	r0, r3
 8007798:	4b91      	ldr	r3, [pc, #580]	@ (80079e0 <__ieee754_pow+0x270>)
 800779a:	4193      	sbcs	r3, r2
 800779c:	f080 84ce 	bcs.w	800813c <__ieee754_pow+0x9cc>
 80077a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077a4:	4650      	mov	r0, sl
 80077a6:	4659      	mov	r1, fp
 80077a8:	f7f8 fce0 	bl	800016c <__adddf3>
 80077ac:	b011      	add	sp, #68	@ 0x44
 80077ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b2:	4b8c      	ldr	r3, [pc, #560]	@ (80079e4 <__ieee754_pow+0x274>)
 80077b4:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 80077b8:	429e      	cmp	r6, r3
 80077ba:	465d      	mov	r5, fp
 80077bc:	46d1      	mov	r9, sl
 80077be:	d807      	bhi.n	80077d0 <__ieee754_pow+0x60>
 80077c0:	d102      	bne.n	80077c8 <__ieee754_pow+0x58>
 80077c2:	f1ba 0f00 	cmp.w	sl, #0
 80077c6:	d1eb      	bne.n	80077a0 <__ieee754_pow+0x30>
 80077c8:	429f      	cmp	r7, r3
 80077ca:	d801      	bhi.n	80077d0 <__ieee754_pow+0x60>
 80077cc:	d10f      	bne.n	80077ee <__ieee754_pow+0x7e>
 80077ce:	b171      	cbz	r1, 80077ee <__ieee754_pow+0x7e>
 80077d0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80077d4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80077d8:	ea55 0509 	orrs.w	r5, r5, r9
 80077dc:	d1e0      	bne.n	80077a0 <__ieee754_pow+0x30>
 80077de:	e9dd 3200 	ldrd	r3, r2, [sp]
 80077e2:	18db      	adds	r3, r3, r3
 80077e4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80077e8:	4152      	adcs	r2, r2
 80077ea:	429d      	cmp	r5, r3
 80077ec:	e7d4      	b.n	8007798 <__ieee754_pow+0x28>
 80077ee:	2d00      	cmp	r5, #0
 80077f0:	4633      	mov	r3, r6
 80077f2:	da39      	bge.n	8007868 <__ieee754_pow+0xf8>
 80077f4:	4a7c      	ldr	r2, [pc, #496]	@ (80079e8 <__ieee754_pow+0x278>)
 80077f6:	4297      	cmp	r7, r2
 80077f8:	d84e      	bhi.n	8007898 <__ieee754_pow+0x128>
 80077fa:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80077fe:	4297      	cmp	r7, r2
 8007800:	f240 84ab 	bls.w	800815a <__ieee754_pow+0x9ea>
 8007804:	153a      	asrs	r2, r7, #20
 8007806:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800780a:	2a14      	cmp	r2, #20
 800780c:	dd0f      	ble.n	800782e <__ieee754_pow+0xbe>
 800780e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007812:	fa21 f402 	lsr.w	r4, r1, r2
 8007816:	fa04 f202 	lsl.w	r2, r4, r2
 800781a:	428a      	cmp	r2, r1
 800781c:	f040 849d 	bne.w	800815a <__ieee754_pow+0x9ea>
 8007820:	f004 0401 	and.w	r4, r4, #1
 8007824:	f1c4 0402 	rsb	r4, r4, #2
 8007828:	2900      	cmp	r1, #0
 800782a:	d15a      	bne.n	80078e2 <__ieee754_pow+0x172>
 800782c:	e00e      	b.n	800784c <__ieee754_pow+0xdc>
 800782e:	2900      	cmp	r1, #0
 8007830:	d156      	bne.n	80078e0 <__ieee754_pow+0x170>
 8007832:	f1c2 0214 	rsb	r2, r2, #20
 8007836:	fa47 f402 	asr.w	r4, r7, r2
 800783a:	fa04 f202 	lsl.w	r2, r4, r2
 800783e:	42ba      	cmp	r2, r7
 8007840:	f040 8488 	bne.w	8008154 <__ieee754_pow+0x9e4>
 8007844:	f004 0401 	and.w	r4, r4, #1
 8007848:	f1c4 0402 	rsb	r4, r4, #2
 800784c:	4a67      	ldr	r2, [pc, #412]	@ (80079ec <__ieee754_pow+0x27c>)
 800784e:	4297      	cmp	r7, r2
 8007850:	d130      	bne.n	80078b4 <__ieee754_pow+0x144>
 8007852:	f1b8 0f00 	cmp.w	r8, #0
 8007856:	f280 8479 	bge.w	800814c <__ieee754_pow+0x9dc>
 800785a:	4652      	mov	r2, sl
 800785c:	465b      	mov	r3, fp
 800785e:	2000      	movs	r0, #0
 8007860:	4962      	ldr	r1, [pc, #392]	@ (80079ec <__ieee754_pow+0x27c>)
 8007862:	f7f8 ff63 	bl	800072c <__aeabi_ddiv>
 8007866:	e7a1      	b.n	80077ac <__ieee754_pow+0x3c>
 8007868:	2400      	movs	r4, #0
 800786a:	2900      	cmp	r1, #0
 800786c:	d139      	bne.n	80078e2 <__ieee754_pow+0x172>
 800786e:	4a5d      	ldr	r2, [pc, #372]	@ (80079e4 <__ieee754_pow+0x274>)
 8007870:	4297      	cmp	r7, r2
 8007872:	d1eb      	bne.n	800784c <__ieee754_pow+0xdc>
 8007874:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8007878:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800787c:	ea53 0309 	orrs.w	r3, r3, r9
 8007880:	f000 845c 	beq.w	800813c <__ieee754_pow+0x9cc>
 8007884:	4b5a      	ldr	r3, [pc, #360]	@ (80079f0 <__ieee754_pow+0x280>)
 8007886:	429e      	cmp	r6, r3
 8007888:	d908      	bls.n	800789c <__ieee754_pow+0x12c>
 800788a:	f1b8 0f00 	cmp.w	r8, #0
 800788e:	f2c0 8459 	blt.w	8008144 <__ieee754_pow+0x9d4>
 8007892:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007896:	e789      	b.n	80077ac <__ieee754_pow+0x3c>
 8007898:	2402      	movs	r4, #2
 800789a:	e7e6      	b.n	800786a <__ieee754_pow+0xfa>
 800789c:	f1b8 0f00 	cmp.w	r8, #0
 80078a0:	f04f 0000 	mov.w	r0, #0
 80078a4:	f04f 0100 	mov.w	r1, #0
 80078a8:	da80      	bge.n	80077ac <__ieee754_pow+0x3c>
 80078aa:	e9dd 0300 	ldrd	r0, r3, [sp]
 80078ae:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80078b2:	e77b      	b.n	80077ac <__ieee754_pow+0x3c>
 80078b4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80078b8:	d106      	bne.n	80078c8 <__ieee754_pow+0x158>
 80078ba:	4652      	mov	r2, sl
 80078bc:	465b      	mov	r3, fp
 80078be:	4650      	mov	r0, sl
 80078c0:	4659      	mov	r1, fp
 80078c2:	f7f8 fe09 	bl	80004d8 <__aeabi_dmul>
 80078c6:	e771      	b.n	80077ac <__ieee754_pow+0x3c>
 80078c8:	4a4a      	ldr	r2, [pc, #296]	@ (80079f4 <__ieee754_pow+0x284>)
 80078ca:	4590      	cmp	r8, r2
 80078cc:	d109      	bne.n	80078e2 <__ieee754_pow+0x172>
 80078ce:	2d00      	cmp	r5, #0
 80078d0:	db07      	blt.n	80078e2 <__ieee754_pow+0x172>
 80078d2:	4650      	mov	r0, sl
 80078d4:	4659      	mov	r1, fp
 80078d6:	b011      	add	sp, #68	@ 0x44
 80078d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078dc:	f000 bd12 	b.w	8008304 <__ieee754_sqrt>
 80078e0:	2400      	movs	r4, #0
 80078e2:	4650      	mov	r0, sl
 80078e4:	4659      	mov	r1, fp
 80078e6:	9302      	str	r3, [sp, #8]
 80078e8:	f000 fc6a 	bl	80081c0 <fabs>
 80078ec:	9b02      	ldr	r3, [sp, #8]
 80078ee:	f1b9 0f00 	cmp.w	r9, #0
 80078f2:	d127      	bne.n	8007944 <__ieee754_pow+0x1d4>
 80078f4:	4a3d      	ldr	r2, [pc, #244]	@ (80079ec <__ieee754_pow+0x27c>)
 80078f6:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 80078fa:	4594      	cmp	ip, r2
 80078fc:	d000      	beq.n	8007900 <__ieee754_pow+0x190>
 80078fe:	bb0e      	cbnz	r6, 8007944 <__ieee754_pow+0x1d4>
 8007900:	f1b8 0f00 	cmp.w	r8, #0
 8007904:	da05      	bge.n	8007912 <__ieee754_pow+0x1a2>
 8007906:	4602      	mov	r2, r0
 8007908:	460b      	mov	r3, r1
 800790a:	2000      	movs	r0, #0
 800790c:	4937      	ldr	r1, [pc, #220]	@ (80079ec <__ieee754_pow+0x27c>)
 800790e:	f7f8 ff0d 	bl	800072c <__aeabi_ddiv>
 8007912:	2d00      	cmp	r5, #0
 8007914:	f6bf af4a 	bge.w	80077ac <__ieee754_pow+0x3c>
 8007918:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800791c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8007920:	4326      	orrs	r6, r4
 8007922:	d108      	bne.n	8007936 <__ieee754_pow+0x1c6>
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	4610      	mov	r0, r2
 800792a:	4619      	mov	r1, r3
 800792c:	f7f8 fc1c 	bl	8000168 <__aeabi_dsub>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	e795      	b.n	8007862 <__ieee754_pow+0xf2>
 8007936:	2c01      	cmp	r4, #1
 8007938:	f47f af38 	bne.w	80077ac <__ieee754_pow+0x3c>
 800793c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007940:	4619      	mov	r1, r3
 8007942:	e733      	b.n	80077ac <__ieee754_pow+0x3c>
 8007944:	0fea      	lsrs	r2, r5, #31
 8007946:	3a01      	subs	r2, #1
 8007948:	ea52 0c04 	orrs.w	ip, r2, r4
 800794c:	d102      	bne.n	8007954 <__ieee754_pow+0x1e4>
 800794e:	4652      	mov	r2, sl
 8007950:	465b      	mov	r3, fp
 8007952:	e7e9      	b.n	8007928 <__ieee754_pow+0x1b8>
 8007954:	f04f 0900 	mov.w	r9, #0
 8007958:	3c01      	subs	r4, #1
 800795a:	4314      	orrs	r4, r2
 800795c:	bf14      	ite	ne
 800795e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 80079ec <__ieee754_pow+0x27c>
 8007962:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 80079f8 <__ieee754_pow+0x288>
 8007966:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800796a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800796e:	f240 8107 	bls.w	8007b80 <__ieee754_pow+0x410>
 8007972:	4b22      	ldr	r3, [pc, #136]	@ (80079fc <__ieee754_pow+0x28c>)
 8007974:	429f      	cmp	r7, r3
 8007976:	4b1e      	ldr	r3, [pc, #120]	@ (80079f0 <__ieee754_pow+0x280>)
 8007978:	d913      	bls.n	80079a2 <__ieee754_pow+0x232>
 800797a:	429e      	cmp	r6, r3
 800797c:	d808      	bhi.n	8007990 <__ieee754_pow+0x220>
 800797e:	f1b8 0f00 	cmp.w	r8, #0
 8007982:	da08      	bge.n	8007996 <__ieee754_pow+0x226>
 8007984:	2000      	movs	r0, #0
 8007986:	b011      	add	sp, #68	@ 0x44
 8007988:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	f000 bcb4 	b.w	80082f8 <__math_oflow>
 8007990:	f1b8 0f00 	cmp.w	r8, #0
 8007994:	dcf6      	bgt.n	8007984 <__ieee754_pow+0x214>
 8007996:	2000      	movs	r0, #0
 8007998:	b011      	add	sp, #68	@ 0x44
 800799a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799e:	f000 bca6 	b.w	80082ee <__math_uflow>
 80079a2:	429e      	cmp	r6, r3
 80079a4:	d20c      	bcs.n	80079c0 <__ieee754_pow+0x250>
 80079a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079aa:	2200      	movs	r2, #0
 80079ac:	2300      	movs	r3, #0
 80079ae:	f7f9 f805 	bl	80009bc <__aeabi_dcmplt>
 80079b2:	3800      	subs	r0, #0
 80079b4:	bf18      	it	ne
 80079b6:	2001      	movne	r0, #1
 80079b8:	f1b8 0f00 	cmp.w	r8, #0
 80079bc:	daec      	bge.n	8007998 <__ieee754_pow+0x228>
 80079be:	e7e2      	b.n	8007986 <__ieee754_pow+0x216>
 80079c0:	4b0a      	ldr	r3, [pc, #40]	@ (80079ec <__ieee754_pow+0x27c>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	429e      	cmp	r6, r3
 80079c6:	d91b      	bls.n	8007a00 <__ieee754_pow+0x290>
 80079c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079cc:	2300      	movs	r3, #0
 80079ce:	f7f8 fff5 	bl	80009bc <__aeabi_dcmplt>
 80079d2:	3800      	subs	r0, #0
 80079d4:	bf18      	it	ne
 80079d6:	2001      	movne	r0, #1
 80079d8:	f1b8 0f00 	cmp.w	r8, #0
 80079dc:	dcd3      	bgt.n	8007986 <__ieee754_pow+0x216>
 80079de:	e7db      	b.n	8007998 <__ieee754_pow+0x228>
 80079e0:	fff00000 	.word	0xfff00000
 80079e4:	7ff00000 	.word	0x7ff00000
 80079e8:	433fffff 	.word	0x433fffff
 80079ec:	3ff00000 	.word	0x3ff00000
 80079f0:	3fefffff 	.word	0x3fefffff
 80079f4:	3fe00000 	.word	0x3fe00000
 80079f8:	bff00000 	.word	0xbff00000
 80079fc:	43f00000 	.word	0x43f00000
 8007a00:	4b5b      	ldr	r3, [pc, #364]	@ (8007b70 <__ieee754_pow+0x400>)
 8007a02:	f7f8 fbb1 	bl	8000168 <__aeabi_dsub>
 8007a06:	a352      	add	r3, pc, #328	@ (adr r3, 8007b50 <__ieee754_pow+0x3e0>)
 8007a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0c:	4604      	mov	r4, r0
 8007a0e:	460d      	mov	r5, r1
 8007a10:	f7f8 fd62 	bl	80004d8 <__aeabi_dmul>
 8007a14:	a350      	add	r3, pc, #320	@ (adr r3, 8007b58 <__ieee754_pow+0x3e8>)
 8007a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1a:	4606      	mov	r6, r0
 8007a1c:	460f      	mov	r7, r1
 8007a1e:	4620      	mov	r0, r4
 8007a20:	4629      	mov	r1, r5
 8007a22:	f7f8 fd59 	bl	80004d8 <__aeabi_dmul>
 8007a26:	2200      	movs	r2, #0
 8007a28:	4682      	mov	sl, r0
 8007a2a:	468b      	mov	fp, r1
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	4629      	mov	r1, r5
 8007a30:	4b50      	ldr	r3, [pc, #320]	@ (8007b74 <__ieee754_pow+0x404>)
 8007a32:	f7f8 fd51 	bl	80004d8 <__aeabi_dmul>
 8007a36:	4602      	mov	r2, r0
 8007a38:	460b      	mov	r3, r1
 8007a3a:	a149      	add	r1, pc, #292	@ (adr r1, 8007b60 <__ieee754_pow+0x3f0>)
 8007a3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a40:	f7f8 fb92 	bl	8000168 <__aeabi_dsub>
 8007a44:	4622      	mov	r2, r4
 8007a46:	462b      	mov	r3, r5
 8007a48:	f7f8 fd46 	bl	80004d8 <__aeabi_dmul>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	2000      	movs	r0, #0
 8007a52:	4949      	ldr	r1, [pc, #292]	@ (8007b78 <__ieee754_pow+0x408>)
 8007a54:	f7f8 fb88 	bl	8000168 <__aeabi_dsub>
 8007a58:	4622      	mov	r2, r4
 8007a5a:	4680      	mov	r8, r0
 8007a5c:	4689      	mov	r9, r1
 8007a5e:	462b      	mov	r3, r5
 8007a60:	4620      	mov	r0, r4
 8007a62:	4629      	mov	r1, r5
 8007a64:	f7f8 fd38 	bl	80004d8 <__aeabi_dmul>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4640      	mov	r0, r8
 8007a6e:	4649      	mov	r1, r9
 8007a70:	f7f8 fd32 	bl	80004d8 <__aeabi_dmul>
 8007a74:	a33c      	add	r3, pc, #240	@ (adr r3, 8007b68 <__ieee754_pow+0x3f8>)
 8007a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7a:	f7f8 fd2d 	bl	80004d8 <__aeabi_dmul>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	4650      	mov	r0, sl
 8007a84:	4659      	mov	r1, fp
 8007a86:	f7f8 fb6f 	bl	8000168 <__aeabi_dsub>
 8007a8a:	2400      	movs	r4, #0
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4680      	mov	r8, r0
 8007a92:	4689      	mov	r9, r1
 8007a94:	4630      	mov	r0, r6
 8007a96:	4639      	mov	r1, r7
 8007a98:	f7f8 fb68 	bl	800016c <__adddf3>
 8007a9c:	4632      	mov	r2, r6
 8007a9e:	463b      	mov	r3, r7
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	460d      	mov	r5, r1
 8007aa4:	f7f8 fb60 	bl	8000168 <__aeabi_dsub>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	460b      	mov	r3, r1
 8007aac:	4640      	mov	r0, r8
 8007aae:	4649      	mov	r1, r9
 8007ab0:	f7f8 fb5a 	bl	8000168 <__aeabi_dsub>
 8007ab4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ab8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007abc:	2300      	movs	r3, #0
 8007abe:	9304      	str	r3, [sp, #16]
 8007ac0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	460f      	mov	r7, r1
 8007ac8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007acc:	4652      	mov	r2, sl
 8007ace:	465b      	mov	r3, fp
 8007ad0:	f7f8 fb4a 	bl	8000168 <__aeabi_dsub>
 8007ad4:	4622      	mov	r2, r4
 8007ad6:	462b      	mov	r3, r5
 8007ad8:	f7f8 fcfe 	bl	80004d8 <__aeabi_dmul>
 8007adc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ae0:	4680      	mov	r8, r0
 8007ae2:	4689      	mov	r9, r1
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	4639      	mov	r1, r7
 8007ae8:	f7f8 fcf6 	bl	80004d8 <__aeabi_dmul>
 8007aec:	4602      	mov	r2, r0
 8007aee:	460b      	mov	r3, r1
 8007af0:	4640      	mov	r0, r8
 8007af2:	4649      	mov	r1, r9
 8007af4:	f7f8 fb3a 	bl	800016c <__adddf3>
 8007af8:	4652      	mov	r2, sl
 8007afa:	465b      	mov	r3, fp
 8007afc:	4606      	mov	r6, r0
 8007afe:	460f      	mov	r7, r1
 8007b00:	4620      	mov	r0, r4
 8007b02:	4629      	mov	r1, r5
 8007b04:	f7f8 fce8 	bl	80004d8 <__aeabi_dmul>
 8007b08:	460b      	mov	r3, r1
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	4680      	mov	r8, r0
 8007b0e:	4689      	mov	r9, r1
 8007b10:	4630      	mov	r0, r6
 8007b12:	4639      	mov	r1, r7
 8007b14:	f7f8 fb2a 	bl	800016c <__adddf3>
 8007b18:	4b18      	ldr	r3, [pc, #96]	@ (8007b7c <__ieee754_pow+0x40c>)
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	4299      	cmp	r1, r3
 8007b1e:	460d      	mov	r5, r1
 8007b20:	468a      	mov	sl, r1
 8007b22:	468b      	mov	fp, r1
 8007b24:	f340 82e0 	ble.w	80080e8 <__ieee754_pow+0x978>
 8007b28:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007b2c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007b30:	4303      	orrs	r3, r0
 8007b32:	f000 81df 	beq.w	8007ef4 <__ieee754_pow+0x784>
 8007b36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f7f8 ff3d 	bl	80009bc <__aeabi_dcmplt>
 8007b42:	3800      	subs	r0, #0
 8007b44:	bf18      	it	ne
 8007b46:	2001      	movne	r0, #1
 8007b48:	e71d      	b.n	8007986 <__ieee754_pow+0x216>
 8007b4a:	bf00      	nop
 8007b4c:	f3af 8000 	nop.w
 8007b50:	60000000 	.word	0x60000000
 8007b54:	3ff71547 	.word	0x3ff71547
 8007b58:	f85ddf44 	.word	0xf85ddf44
 8007b5c:	3e54ae0b 	.word	0x3e54ae0b
 8007b60:	55555555 	.word	0x55555555
 8007b64:	3fd55555 	.word	0x3fd55555
 8007b68:	652b82fe 	.word	0x652b82fe
 8007b6c:	3ff71547 	.word	0x3ff71547
 8007b70:	3ff00000 	.word	0x3ff00000
 8007b74:	3fd00000 	.word	0x3fd00000
 8007b78:	3fe00000 	.word	0x3fe00000
 8007b7c:	408fffff 	.word	0x408fffff
 8007b80:	4ad3      	ldr	r2, [pc, #844]	@ (8007ed0 <__ieee754_pow+0x760>)
 8007b82:	402a      	ands	r2, r5
 8007b84:	2a00      	cmp	r2, #0
 8007b86:	f040 817a 	bne.w	8007e7e <__ieee754_pow+0x70e>
 8007b8a:	4bd2      	ldr	r3, [pc, #840]	@ (8007ed4 <__ieee754_pow+0x764>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f7f8 fca3 	bl	80004d8 <__aeabi_dmul>
 8007b92:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8007b96:	460b      	mov	r3, r1
 8007b98:	151a      	asrs	r2, r3, #20
 8007b9a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007b9e:	4422      	add	r2, r4
 8007ba0:	920a      	str	r2, [sp, #40]	@ 0x28
 8007ba2:	4acd      	ldr	r2, [pc, #820]	@ (8007ed8 <__ieee754_pow+0x768>)
 8007ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ba8:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8007bac:	4293      	cmp	r3, r2
 8007bae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007bb2:	dd08      	ble.n	8007bc6 <__ieee754_pow+0x456>
 8007bb4:	4ac9      	ldr	r2, [pc, #804]	@ (8007edc <__ieee754_pow+0x76c>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	f340 8163 	ble.w	8007e82 <__ieee754_pow+0x712>
 8007bbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bbe:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bc6:	2600      	movs	r6, #0
 8007bc8:	00f3      	lsls	r3, r6, #3
 8007bca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bcc:	4bc4      	ldr	r3, [pc, #784]	@ (8007ee0 <__ieee754_pow+0x770>)
 8007bce:	4629      	mov	r1, r5
 8007bd0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007bd4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007bd8:	461a      	mov	r2, r3
 8007bda:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007bde:	4623      	mov	r3, r4
 8007be0:	4682      	mov	sl, r0
 8007be2:	f7f8 fac1 	bl	8000168 <__aeabi_dsub>
 8007be6:	4652      	mov	r2, sl
 8007be8:	462b      	mov	r3, r5
 8007bea:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007bee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007bf2:	f7f8 fabb 	bl	800016c <__adddf3>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	49b9      	ldr	r1, [pc, #740]	@ (8007ee4 <__ieee754_pow+0x774>)
 8007bfe:	f7f8 fd95 	bl	800072c <__aeabi_ddiv>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007c0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c0e:	f7f8 fc63 	bl	80004d8 <__aeabi_dmul>
 8007c12:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007c16:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007c1a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	2200      	movs	r2, #0
 8007c22:	46ab      	mov	fp, r5
 8007c24:	106d      	asrs	r5, r5, #1
 8007c26:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007c2a:	9304      	str	r3, [sp, #16]
 8007c2c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007c30:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007c34:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007c38:	4640      	mov	r0, r8
 8007c3a:	4649      	mov	r1, r9
 8007c3c:	4614      	mov	r4, r2
 8007c3e:	461d      	mov	r5, r3
 8007c40:	f7f8 fc4a 	bl	80004d8 <__aeabi_dmul>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c4c:	f7f8 fa8c 	bl	8000168 <__aeabi_dsub>
 8007c50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007c54:	4606      	mov	r6, r0
 8007c56:	460f      	mov	r7, r1
 8007c58:	4620      	mov	r0, r4
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	f7f8 fa84 	bl	8000168 <__aeabi_dsub>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	4650      	mov	r0, sl
 8007c66:	4659      	mov	r1, fp
 8007c68:	f7f8 fa7e 	bl	8000168 <__aeabi_dsub>
 8007c6c:	4642      	mov	r2, r8
 8007c6e:	464b      	mov	r3, r9
 8007c70:	f7f8 fc32 	bl	80004d8 <__aeabi_dmul>
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	4630      	mov	r0, r6
 8007c7a:	4639      	mov	r1, r7
 8007c7c:	f7f8 fa74 	bl	8000168 <__aeabi_dsub>
 8007c80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007c84:	f7f8 fc28 	bl	80004d8 <__aeabi_dmul>
 8007c88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c8c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c90:	4610      	mov	r0, r2
 8007c92:	4619      	mov	r1, r3
 8007c94:	f7f8 fc20 	bl	80004d8 <__aeabi_dmul>
 8007c98:	a37b      	add	r3, pc, #492	@ (adr r3, 8007e88 <__ieee754_pow+0x718>)
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	460d      	mov	r5, r1
 8007ca2:	f7f8 fc19 	bl	80004d8 <__aeabi_dmul>
 8007ca6:	a37a      	add	r3, pc, #488	@ (adr r3, 8007e90 <__ieee754_pow+0x720>)
 8007ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cac:	f7f8 fa5e 	bl	800016c <__adddf3>
 8007cb0:	4622      	mov	r2, r4
 8007cb2:	462b      	mov	r3, r5
 8007cb4:	f7f8 fc10 	bl	80004d8 <__aeabi_dmul>
 8007cb8:	a377      	add	r3, pc, #476	@ (adr r3, 8007e98 <__ieee754_pow+0x728>)
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	f7f8 fa55 	bl	800016c <__adddf3>
 8007cc2:	4622      	mov	r2, r4
 8007cc4:	462b      	mov	r3, r5
 8007cc6:	f7f8 fc07 	bl	80004d8 <__aeabi_dmul>
 8007cca:	a375      	add	r3, pc, #468	@ (adr r3, 8007ea0 <__ieee754_pow+0x730>)
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	f7f8 fa4c 	bl	800016c <__adddf3>
 8007cd4:	4622      	mov	r2, r4
 8007cd6:	462b      	mov	r3, r5
 8007cd8:	f7f8 fbfe 	bl	80004d8 <__aeabi_dmul>
 8007cdc:	a372      	add	r3, pc, #456	@ (adr r3, 8007ea8 <__ieee754_pow+0x738>)
 8007cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce2:	f7f8 fa43 	bl	800016c <__adddf3>
 8007ce6:	4622      	mov	r2, r4
 8007ce8:	462b      	mov	r3, r5
 8007cea:	f7f8 fbf5 	bl	80004d8 <__aeabi_dmul>
 8007cee:	a370      	add	r3, pc, #448	@ (adr r3, 8007eb0 <__ieee754_pow+0x740>)
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	f7f8 fa3a 	bl	800016c <__adddf3>
 8007cf8:	4622      	mov	r2, r4
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	460f      	mov	r7, r1
 8007cfe:	462b      	mov	r3, r5
 8007d00:	4620      	mov	r0, r4
 8007d02:	4629      	mov	r1, r5
 8007d04:	f7f8 fbe8 	bl	80004d8 <__aeabi_dmul>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	4639      	mov	r1, r7
 8007d10:	f7f8 fbe2 	bl	80004d8 <__aeabi_dmul>
 8007d14:	4604      	mov	r4, r0
 8007d16:	460d      	mov	r5, r1
 8007d18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d1c:	4642      	mov	r2, r8
 8007d1e:	464b      	mov	r3, r9
 8007d20:	f7f8 fa24 	bl	800016c <__adddf3>
 8007d24:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007d28:	f7f8 fbd6 	bl	80004d8 <__aeabi_dmul>
 8007d2c:	4622      	mov	r2, r4
 8007d2e:	462b      	mov	r3, r5
 8007d30:	f7f8 fa1c 	bl	800016c <__adddf3>
 8007d34:	4642      	mov	r2, r8
 8007d36:	4682      	mov	sl, r0
 8007d38:	468b      	mov	fp, r1
 8007d3a:	464b      	mov	r3, r9
 8007d3c:	4640      	mov	r0, r8
 8007d3e:	4649      	mov	r1, r9
 8007d40:	f7f8 fbca 	bl	80004d8 <__aeabi_dmul>
 8007d44:	2200      	movs	r2, #0
 8007d46:	4b68      	ldr	r3, [pc, #416]	@ (8007ee8 <__ieee754_pow+0x778>)
 8007d48:	4606      	mov	r6, r0
 8007d4a:	460f      	mov	r7, r1
 8007d4c:	f7f8 fa0e 	bl	800016c <__adddf3>
 8007d50:	4652      	mov	r2, sl
 8007d52:	465b      	mov	r3, fp
 8007d54:	f7f8 fa0a 	bl	800016c <__adddf3>
 8007d58:	2400      	movs	r4, #0
 8007d5a:	460d      	mov	r5, r1
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4640      	mov	r0, r8
 8007d62:	4649      	mov	r1, r9
 8007d64:	f7f8 fbb8 	bl	80004d8 <__aeabi_dmul>
 8007d68:	2200      	movs	r2, #0
 8007d6a:	4680      	mov	r8, r0
 8007d6c:	4689      	mov	r9, r1
 8007d6e:	4620      	mov	r0, r4
 8007d70:	4629      	mov	r1, r5
 8007d72:	4b5d      	ldr	r3, [pc, #372]	@ (8007ee8 <__ieee754_pow+0x778>)
 8007d74:	f7f8 f9f8 	bl	8000168 <__aeabi_dsub>
 8007d78:	4632      	mov	r2, r6
 8007d7a:	463b      	mov	r3, r7
 8007d7c:	f7f8 f9f4 	bl	8000168 <__aeabi_dsub>
 8007d80:	4602      	mov	r2, r0
 8007d82:	460b      	mov	r3, r1
 8007d84:	4650      	mov	r0, sl
 8007d86:	4659      	mov	r1, fp
 8007d88:	f7f8 f9ee 	bl	8000168 <__aeabi_dsub>
 8007d8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d90:	f7f8 fba2 	bl	80004d8 <__aeabi_dmul>
 8007d94:	4622      	mov	r2, r4
 8007d96:	4606      	mov	r6, r0
 8007d98:	460f      	mov	r7, r1
 8007d9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d9e:	462b      	mov	r3, r5
 8007da0:	f7f8 fb9a 	bl	80004d8 <__aeabi_dmul>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4630      	mov	r0, r6
 8007daa:	4639      	mov	r1, r7
 8007dac:	f7f8 f9de 	bl	800016c <__adddf3>
 8007db0:	2400      	movs	r4, #0
 8007db2:	4606      	mov	r6, r0
 8007db4:	460f      	mov	r7, r1
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
 8007dba:	4640      	mov	r0, r8
 8007dbc:	4649      	mov	r1, r9
 8007dbe:	f7f8 f9d5 	bl	800016c <__adddf3>
 8007dc2:	a33d      	add	r3, pc, #244	@ (adr r3, 8007eb8 <__ieee754_pow+0x748>)
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	4620      	mov	r0, r4
 8007dca:	460d      	mov	r5, r1
 8007dcc:	f7f8 fb84 	bl	80004d8 <__aeabi_dmul>
 8007dd0:	4642      	mov	r2, r8
 8007dd2:	464b      	mov	r3, r9
 8007dd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007dd8:	4620      	mov	r0, r4
 8007dda:	4629      	mov	r1, r5
 8007ddc:	f7f8 f9c4 	bl	8000168 <__aeabi_dsub>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	4630      	mov	r0, r6
 8007de6:	4639      	mov	r1, r7
 8007de8:	f7f8 f9be 	bl	8000168 <__aeabi_dsub>
 8007dec:	a334      	add	r3, pc, #208	@ (adr r3, 8007ec0 <__ieee754_pow+0x750>)
 8007dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df2:	f7f8 fb71 	bl	80004d8 <__aeabi_dmul>
 8007df6:	a334      	add	r3, pc, #208	@ (adr r3, 8007ec8 <__ieee754_pow+0x758>)
 8007df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfc:	4606      	mov	r6, r0
 8007dfe:	460f      	mov	r7, r1
 8007e00:	4620      	mov	r0, r4
 8007e02:	4629      	mov	r1, r5
 8007e04:	f7f8 fb68 	bl	80004d8 <__aeabi_dmul>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	4639      	mov	r1, r7
 8007e10:	f7f8 f9ac 	bl	800016c <__adddf3>
 8007e14:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e16:	4b35      	ldr	r3, [pc, #212]	@ (8007eec <__ieee754_pow+0x77c>)
 8007e18:	2400      	movs	r4, #0
 8007e1a:	4413      	add	r3, r2
 8007e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e20:	f7f8 f9a4 	bl	800016c <__adddf3>
 8007e24:	4682      	mov	sl, r0
 8007e26:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007e28:	468b      	mov	fp, r1
 8007e2a:	f7f8 faeb 	bl	8000404 <__aeabi_i2d>
 8007e2e:	4606      	mov	r6, r0
 8007e30:	460f      	mov	r7, r1
 8007e32:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e34:	4b2e      	ldr	r3, [pc, #184]	@ (8007ef0 <__ieee754_pow+0x780>)
 8007e36:	4413      	add	r3, r2
 8007e38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e3c:	4652      	mov	r2, sl
 8007e3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e42:	465b      	mov	r3, fp
 8007e44:	f7f8 f992 	bl	800016c <__adddf3>
 8007e48:	4642      	mov	r2, r8
 8007e4a:	464b      	mov	r3, r9
 8007e4c:	f7f8 f98e 	bl	800016c <__adddf3>
 8007e50:	4632      	mov	r2, r6
 8007e52:	463b      	mov	r3, r7
 8007e54:	f7f8 f98a 	bl	800016c <__adddf3>
 8007e58:	4632      	mov	r2, r6
 8007e5a:	463b      	mov	r3, r7
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	460d      	mov	r5, r1
 8007e60:	f7f8 f982 	bl	8000168 <__aeabi_dsub>
 8007e64:	4642      	mov	r2, r8
 8007e66:	464b      	mov	r3, r9
 8007e68:	f7f8 f97e 	bl	8000168 <__aeabi_dsub>
 8007e6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e70:	f7f8 f97a 	bl	8000168 <__aeabi_dsub>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4650      	mov	r0, sl
 8007e7a:	4659      	mov	r1, fp
 8007e7c:	e618      	b.n	8007ab0 <__ieee754_pow+0x340>
 8007e7e:	2400      	movs	r4, #0
 8007e80:	e68a      	b.n	8007b98 <__ieee754_pow+0x428>
 8007e82:	2601      	movs	r6, #1
 8007e84:	e6a0      	b.n	8007bc8 <__ieee754_pow+0x458>
 8007e86:	bf00      	nop
 8007e88:	4a454eef 	.word	0x4a454eef
 8007e8c:	3fca7e28 	.word	0x3fca7e28
 8007e90:	93c9db65 	.word	0x93c9db65
 8007e94:	3fcd864a 	.word	0x3fcd864a
 8007e98:	a91d4101 	.word	0xa91d4101
 8007e9c:	3fd17460 	.word	0x3fd17460
 8007ea0:	518f264d 	.word	0x518f264d
 8007ea4:	3fd55555 	.word	0x3fd55555
 8007ea8:	db6fabff 	.word	0xdb6fabff
 8007eac:	3fdb6db6 	.word	0x3fdb6db6
 8007eb0:	33333303 	.word	0x33333303
 8007eb4:	3fe33333 	.word	0x3fe33333
 8007eb8:	e0000000 	.word	0xe0000000
 8007ebc:	3feec709 	.word	0x3feec709
 8007ec0:	dc3a03fd 	.word	0xdc3a03fd
 8007ec4:	3feec709 	.word	0x3feec709
 8007ec8:	145b01f5 	.word	0x145b01f5
 8007ecc:	be3e2fe0 	.word	0xbe3e2fe0
 8007ed0:	7ff00000 	.word	0x7ff00000
 8007ed4:	43400000 	.word	0x43400000
 8007ed8:	0003988e 	.word	0x0003988e
 8007edc:	000bb679 	.word	0x000bb679
 8007ee0:	08008900 	.word	0x08008900
 8007ee4:	3ff00000 	.word	0x3ff00000
 8007ee8:	40080000 	.word	0x40080000
 8007eec:	080088e0 	.word	0x080088e0
 8007ef0:	080088f0 	.word	0x080088f0
 8007ef4:	a39a      	add	r3, pc, #616	@ (adr r3, 8008160 <__ieee754_pow+0x9f0>)
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	4630      	mov	r0, r6
 8007efc:	4639      	mov	r1, r7
 8007efe:	f7f8 f935 	bl	800016c <__adddf3>
 8007f02:	4642      	mov	r2, r8
 8007f04:	e9cd 0100 	strd	r0, r1, [sp]
 8007f08:	464b      	mov	r3, r9
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	4629      	mov	r1, r5
 8007f0e:	f7f8 f92b 	bl	8000168 <__aeabi_dsub>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f1a:	f7f8 fd6d 	bl	80009f8 <__aeabi_dcmpgt>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	f47f ae09 	bne.w	8007b36 <__ieee754_pow+0x3c6>
 8007f24:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007f28:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8007f2c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8007f30:	fa43 fa0a 	asr.w	sl, r3, sl
 8007f34:	44da      	add	sl, fp
 8007f36:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007f3a:	489b      	ldr	r0, [pc, #620]	@ (80081a8 <__ieee754_pow+0xa38>)
 8007f3c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007f40:	4108      	asrs	r0, r1
 8007f42:	ea00 030a 	and.w	r3, r0, sl
 8007f46:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007f4a:	f1c1 0114 	rsb	r1, r1, #20
 8007f4e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007f52:	4640      	mov	r0, r8
 8007f54:	fa4a fa01 	asr.w	sl, sl, r1
 8007f58:	f1bb 0f00 	cmp.w	fp, #0
 8007f5c:	4649      	mov	r1, r9
 8007f5e:	f04f 0200 	mov.w	r2, #0
 8007f62:	bfb8      	it	lt
 8007f64:	f1ca 0a00 	rsblt	sl, sl, #0
 8007f68:	f7f8 f8fe 	bl	8000168 <__aeabi_dsub>
 8007f6c:	4680      	mov	r8, r0
 8007f6e:	4689      	mov	r9, r1
 8007f70:	2400      	movs	r4, #0
 8007f72:	4632      	mov	r2, r6
 8007f74:	463b      	mov	r3, r7
 8007f76:	4640      	mov	r0, r8
 8007f78:	4649      	mov	r1, r9
 8007f7a:	f7f8 f8f7 	bl	800016c <__adddf3>
 8007f7e:	a37a      	add	r3, pc, #488	@ (adr r3, 8008168 <__ieee754_pow+0x9f8>)
 8007f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f84:	4620      	mov	r0, r4
 8007f86:	460d      	mov	r5, r1
 8007f88:	f7f8 faa6 	bl	80004d8 <__aeabi_dmul>
 8007f8c:	4642      	mov	r2, r8
 8007f8e:	464b      	mov	r3, r9
 8007f90:	e9cd 0100 	strd	r0, r1, [sp]
 8007f94:	4620      	mov	r0, r4
 8007f96:	4629      	mov	r1, r5
 8007f98:	f7f8 f8e6 	bl	8000168 <__aeabi_dsub>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	4639      	mov	r1, r7
 8007fa4:	f7f8 f8e0 	bl	8000168 <__aeabi_dsub>
 8007fa8:	a371      	add	r3, pc, #452	@ (adr r3, 8008170 <__ieee754_pow+0xa00>)
 8007faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fae:	f7f8 fa93 	bl	80004d8 <__aeabi_dmul>
 8007fb2:	a371      	add	r3, pc, #452	@ (adr r3, 8008178 <__ieee754_pow+0xa08>)
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	4680      	mov	r8, r0
 8007fba:	4689      	mov	r9, r1
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	f7f8 fa8a 	bl	80004d8 <__aeabi_dmul>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4640      	mov	r0, r8
 8007fca:	4649      	mov	r1, r9
 8007fcc:	f7f8 f8ce 	bl	800016c <__adddf3>
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	460d      	mov	r5, r1
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fdc:	f7f8 f8c6 	bl	800016c <__adddf3>
 8007fe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fe4:	4680      	mov	r8, r0
 8007fe6:	4689      	mov	r9, r1
 8007fe8:	f7f8 f8be 	bl	8000168 <__aeabi_dsub>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	f7f8 f8b8 	bl	8000168 <__aeabi_dsub>
 8007ff8:	4642      	mov	r2, r8
 8007ffa:	4606      	mov	r6, r0
 8007ffc:	460f      	mov	r7, r1
 8007ffe:	464b      	mov	r3, r9
 8008000:	4640      	mov	r0, r8
 8008002:	4649      	mov	r1, r9
 8008004:	f7f8 fa68 	bl	80004d8 <__aeabi_dmul>
 8008008:	a35d      	add	r3, pc, #372	@ (adr r3, 8008180 <__ieee754_pow+0xa10>)
 800800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800e:	4604      	mov	r4, r0
 8008010:	460d      	mov	r5, r1
 8008012:	f7f8 fa61 	bl	80004d8 <__aeabi_dmul>
 8008016:	a35c      	add	r3, pc, #368	@ (adr r3, 8008188 <__ieee754_pow+0xa18>)
 8008018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801c:	f7f8 f8a4 	bl	8000168 <__aeabi_dsub>
 8008020:	4622      	mov	r2, r4
 8008022:	462b      	mov	r3, r5
 8008024:	f7f8 fa58 	bl	80004d8 <__aeabi_dmul>
 8008028:	a359      	add	r3, pc, #356	@ (adr r3, 8008190 <__ieee754_pow+0xa20>)
 800802a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802e:	f7f8 f89d 	bl	800016c <__adddf3>
 8008032:	4622      	mov	r2, r4
 8008034:	462b      	mov	r3, r5
 8008036:	f7f8 fa4f 	bl	80004d8 <__aeabi_dmul>
 800803a:	a357      	add	r3, pc, #348	@ (adr r3, 8008198 <__ieee754_pow+0xa28>)
 800803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008040:	f7f8 f892 	bl	8000168 <__aeabi_dsub>
 8008044:	4622      	mov	r2, r4
 8008046:	462b      	mov	r3, r5
 8008048:	f7f8 fa46 	bl	80004d8 <__aeabi_dmul>
 800804c:	a354      	add	r3, pc, #336	@ (adr r3, 80081a0 <__ieee754_pow+0xa30>)
 800804e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008052:	f7f8 f88b 	bl	800016c <__adddf3>
 8008056:	4622      	mov	r2, r4
 8008058:	462b      	mov	r3, r5
 800805a:	f7f8 fa3d 	bl	80004d8 <__aeabi_dmul>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	4640      	mov	r0, r8
 8008064:	4649      	mov	r1, r9
 8008066:	f7f8 f87f 	bl	8000168 <__aeabi_dsub>
 800806a:	4604      	mov	r4, r0
 800806c:	460d      	mov	r5, r1
 800806e:	4602      	mov	r2, r0
 8008070:	460b      	mov	r3, r1
 8008072:	4640      	mov	r0, r8
 8008074:	4649      	mov	r1, r9
 8008076:	f7f8 fa2f 	bl	80004d8 <__aeabi_dmul>
 800807a:	2200      	movs	r2, #0
 800807c:	e9cd 0100 	strd	r0, r1, [sp]
 8008080:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008084:	4620      	mov	r0, r4
 8008086:	4629      	mov	r1, r5
 8008088:	f7f8 f86e 	bl	8000168 <__aeabi_dsub>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008094:	f7f8 fb4a 	bl	800072c <__aeabi_ddiv>
 8008098:	4632      	mov	r2, r6
 800809a:	4604      	mov	r4, r0
 800809c:	460d      	mov	r5, r1
 800809e:	463b      	mov	r3, r7
 80080a0:	4640      	mov	r0, r8
 80080a2:	4649      	mov	r1, r9
 80080a4:	f7f8 fa18 	bl	80004d8 <__aeabi_dmul>
 80080a8:	4632      	mov	r2, r6
 80080aa:	463b      	mov	r3, r7
 80080ac:	f7f8 f85e 	bl	800016c <__adddf3>
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	4620      	mov	r0, r4
 80080b6:	4629      	mov	r1, r5
 80080b8:	f7f8 f856 	bl	8000168 <__aeabi_dsub>
 80080bc:	4642      	mov	r2, r8
 80080be:	464b      	mov	r3, r9
 80080c0:	f7f8 f852 	bl	8000168 <__aeabi_dsub>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	2000      	movs	r0, #0
 80080ca:	4938      	ldr	r1, [pc, #224]	@ (80081ac <__ieee754_pow+0xa3c>)
 80080cc:	f7f8 f84c 	bl	8000168 <__aeabi_dsub>
 80080d0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80080d4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80080d8:	da2e      	bge.n	8008138 <__ieee754_pow+0x9c8>
 80080da:	4652      	mov	r2, sl
 80080dc:	f000 f874 	bl	80081c8 <scalbn>
 80080e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080e4:	f7ff bbed 	b.w	80078c2 <__ieee754_pow+0x152>
 80080e8:	4c31      	ldr	r4, [pc, #196]	@ (80081b0 <__ieee754_pow+0xa40>)
 80080ea:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80080ee:	42a3      	cmp	r3, r4
 80080f0:	d91a      	bls.n	8008128 <__ieee754_pow+0x9b8>
 80080f2:	4b30      	ldr	r3, [pc, #192]	@ (80081b4 <__ieee754_pow+0xa44>)
 80080f4:	440b      	add	r3, r1
 80080f6:	4303      	orrs	r3, r0
 80080f8:	d009      	beq.n	800810e <__ieee754_pow+0x99e>
 80080fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080fe:	2200      	movs	r2, #0
 8008100:	2300      	movs	r3, #0
 8008102:	f7f8 fc5b 	bl	80009bc <__aeabi_dcmplt>
 8008106:	3800      	subs	r0, #0
 8008108:	bf18      	it	ne
 800810a:	2001      	movne	r0, #1
 800810c:	e444      	b.n	8007998 <__ieee754_pow+0x228>
 800810e:	4642      	mov	r2, r8
 8008110:	464b      	mov	r3, r9
 8008112:	f7f8 f829 	bl	8000168 <__aeabi_dsub>
 8008116:	4632      	mov	r2, r6
 8008118:	463b      	mov	r3, r7
 800811a:	f7f8 fc63 	bl	80009e4 <__aeabi_dcmpge>
 800811e:	2800      	cmp	r0, #0
 8008120:	d1eb      	bne.n	80080fa <__ieee754_pow+0x98a>
 8008122:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80081b8 <__ieee754_pow+0xa48>
 8008126:	e6fd      	b.n	8007f24 <__ieee754_pow+0x7b4>
 8008128:	469a      	mov	sl, r3
 800812a:	4b24      	ldr	r3, [pc, #144]	@ (80081bc <__ieee754_pow+0xa4c>)
 800812c:	459a      	cmp	sl, r3
 800812e:	f63f aef9 	bhi.w	8007f24 <__ieee754_pow+0x7b4>
 8008132:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008136:	e71b      	b.n	8007f70 <__ieee754_pow+0x800>
 8008138:	4621      	mov	r1, r4
 800813a:	e7d1      	b.n	80080e0 <__ieee754_pow+0x970>
 800813c:	2000      	movs	r0, #0
 800813e:	491b      	ldr	r1, [pc, #108]	@ (80081ac <__ieee754_pow+0xa3c>)
 8008140:	f7ff bb34 	b.w	80077ac <__ieee754_pow+0x3c>
 8008144:	2000      	movs	r0, #0
 8008146:	2100      	movs	r1, #0
 8008148:	f7ff bb30 	b.w	80077ac <__ieee754_pow+0x3c>
 800814c:	4650      	mov	r0, sl
 800814e:	4659      	mov	r1, fp
 8008150:	f7ff bb2c 	b.w	80077ac <__ieee754_pow+0x3c>
 8008154:	460c      	mov	r4, r1
 8008156:	f7ff bb79 	b.w	800784c <__ieee754_pow+0xdc>
 800815a:	2400      	movs	r4, #0
 800815c:	f7ff bb64 	b.w	8007828 <__ieee754_pow+0xb8>
 8008160:	652b82fe 	.word	0x652b82fe
 8008164:	3c971547 	.word	0x3c971547
 8008168:	00000000 	.word	0x00000000
 800816c:	3fe62e43 	.word	0x3fe62e43
 8008170:	fefa39ef 	.word	0xfefa39ef
 8008174:	3fe62e42 	.word	0x3fe62e42
 8008178:	0ca86c39 	.word	0x0ca86c39
 800817c:	be205c61 	.word	0xbe205c61
 8008180:	72bea4d0 	.word	0x72bea4d0
 8008184:	3e663769 	.word	0x3e663769
 8008188:	c5d26bf1 	.word	0xc5d26bf1
 800818c:	3ebbbd41 	.word	0x3ebbbd41
 8008190:	af25de2c 	.word	0xaf25de2c
 8008194:	3f11566a 	.word	0x3f11566a
 8008198:	16bebd93 	.word	0x16bebd93
 800819c:	3f66c16c 	.word	0x3f66c16c
 80081a0:	5555553e 	.word	0x5555553e
 80081a4:	3fc55555 	.word	0x3fc55555
 80081a8:	fff00000 	.word	0xfff00000
 80081ac:	3ff00000 	.word	0x3ff00000
 80081b0:	4090cbff 	.word	0x4090cbff
 80081b4:	3f6f3400 	.word	0x3f6f3400
 80081b8:	4090cc00 	.word	0x4090cc00
 80081bc:	3fe00000 	.word	0x3fe00000

080081c0 <fabs>:
 80081c0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80081c4:	4619      	mov	r1, r3
 80081c6:	4770      	bx	lr

080081c8 <scalbn>:
 80081c8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80081cc:	4616      	mov	r6, r2
 80081ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80081d2:	4683      	mov	fp, r0
 80081d4:	468c      	mov	ip, r1
 80081d6:	460b      	mov	r3, r1
 80081d8:	b982      	cbnz	r2, 80081fc <scalbn+0x34>
 80081da:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80081de:	4303      	orrs	r3, r0
 80081e0:	d039      	beq.n	8008256 <scalbn+0x8e>
 80081e2:	4b2f      	ldr	r3, [pc, #188]	@ (80082a0 <scalbn+0xd8>)
 80081e4:	2200      	movs	r2, #0
 80081e6:	f7f8 f977 	bl	80004d8 <__aeabi_dmul>
 80081ea:	4b2e      	ldr	r3, [pc, #184]	@ (80082a4 <scalbn+0xdc>)
 80081ec:	4683      	mov	fp, r0
 80081ee:	429e      	cmp	r6, r3
 80081f0:	468c      	mov	ip, r1
 80081f2:	da0d      	bge.n	8008210 <scalbn+0x48>
 80081f4:	a326      	add	r3, pc, #152	@ (adr r3, 8008290 <scalbn+0xc8>)
 80081f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fa:	e01b      	b.n	8008234 <scalbn+0x6c>
 80081fc:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8008200:	42ba      	cmp	r2, r7
 8008202:	d109      	bne.n	8008218 <scalbn+0x50>
 8008204:	4602      	mov	r2, r0
 8008206:	f7f7 ffb1 	bl	800016c <__adddf3>
 800820a:	4683      	mov	fp, r0
 800820c:	468c      	mov	ip, r1
 800820e:	e022      	b.n	8008256 <scalbn+0x8e>
 8008210:	460b      	mov	r3, r1
 8008212:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008216:	3a36      	subs	r2, #54	@ 0x36
 8008218:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800821c:	428e      	cmp	r6, r1
 800821e:	dd0c      	ble.n	800823a <scalbn+0x72>
 8008220:	a31d      	add	r3, pc, #116	@ (adr r3, 8008298 <scalbn+0xd0>)
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	461c      	mov	r4, r3
 8008228:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800822c:	f361 74df 	bfi	r4, r1, #31, #1
 8008230:	4621      	mov	r1, r4
 8008232:	481d      	ldr	r0, [pc, #116]	@ (80082a8 <scalbn+0xe0>)
 8008234:	f7f8 f950 	bl	80004d8 <__aeabi_dmul>
 8008238:	e7e7      	b.n	800820a <scalbn+0x42>
 800823a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800823e:	4432      	add	r2, r6
 8008240:	428a      	cmp	r2, r1
 8008242:	dced      	bgt.n	8008220 <scalbn+0x58>
 8008244:	2a00      	cmp	r2, #0
 8008246:	dd0a      	ble.n	800825e <scalbn+0x96>
 8008248:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800824c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008250:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008254:	46ac      	mov	ip, r5
 8008256:	4658      	mov	r0, fp
 8008258:	4661      	mov	r1, ip
 800825a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800825e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008262:	da09      	bge.n	8008278 <scalbn+0xb0>
 8008264:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8008268:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800826c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8008270:	480e      	ldr	r0, [pc, #56]	@ (80082ac <scalbn+0xe4>)
 8008272:	f041 011f 	orr.w	r1, r1, #31
 8008276:	e7bd      	b.n	80081f4 <scalbn+0x2c>
 8008278:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800827c:	3236      	adds	r2, #54	@ 0x36
 800827e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008282:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008286:	4658      	mov	r0, fp
 8008288:	4629      	mov	r1, r5
 800828a:	2200      	movs	r2, #0
 800828c:	4b08      	ldr	r3, [pc, #32]	@ (80082b0 <scalbn+0xe8>)
 800828e:	e7d1      	b.n	8008234 <scalbn+0x6c>
 8008290:	c2f8f359 	.word	0xc2f8f359
 8008294:	01a56e1f 	.word	0x01a56e1f
 8008298:	8800759c 	.word	0x8800759c
 800829c:	7e37e43c 	.word	0x7e37e43c
 80082a0:	43500000 	.word	0x43500000
 80082a4:	ffff3cb0 	.word	0xffff3cb0
 80082a8:	8800759c 	.word	0x8800759c
 80082ac:	c2f8f359 	.word	0xc2f8f359
 80082b0:	3c900000 	.word	0x3c900000

080082b4 <with_errno>:
 80082b4:	b570      	push	{r4, r5, r6, lr}
 80082b6:	4604      	mov	r4, r0
 80082b8:	460d      	mov	r5, r1
 80082ba:	4616      	mov	r6, r2
 80082bc:	f7fd f962 	bl	8005584 <__errno>
 80082c0:	4629      	mov	r1, r5
 80082c2:	6006      	str	r6, [r0, #0]
 80082c4:	4620      	mov	r0, r4
 80082c6:	bd70      	pop	{r4, r5, r6, pc}

080082c8 <xflow>:
 80082c8:	b513      	push	{r0, r1, r4, lr}
 80082ca:	4604      	mov	r4, r0
 80082cc:	4619      	mov	r1, r3
 80082ce:	4610      	mov	r0, r2
 80082d0:	b10c      	cbz	r4, 80082d6 <xflow+0xe>
 80082d2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80082d6:	e9cd 2300 	strd	r2, r3, [sp]
 80082da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082de:	f7f8 f8fb 	bl	80004d8 <__aeabi_dmul>
 80082e2:	2222      	movs	r2, #34	@ 0x22
 80082e4:	b002      	add	sp, #8
 80082e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082ea:	f7ff bfe3 	b.w	80082b4 <with_errno>

080082ee <__math_uflow>:
 80082ee:	2200      	movs	r2, #0
 80082f0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80082f4:	f7ff bfe8 	b.w	80082c8 <xflow>

080082f8 <__math_oflow>:
 80082f8:	2200      	movs	r2, #0
 80082fa:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80082fe:	f7ff bfe3 	b.w	80082c8 <xflow>
	...

08008304 <__ieee754_sqrt>:
 8008304:	4a67      	ldr	r2, [pc, #412]	@ (80084a4 <__ieee754_sqrt+0x1a0>)
 8008306:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830a:	438a      	bics	r2, r1
 800830c:	4606      	mov	r6, r0
 800830e:	460f      	mov	r7, r1
 8008310:	460b      	mov	r3, r1
 8008312:	4604      	mov	r4, r0
 8008314:	d10e      	bne.n	8008334 <__ieee754_sqrt+0x30>
 8008316:	4602      	mov	r2, r0
 8008318:	f7f8 f8de 	bl	80004d8 <__aeabi_dmul>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4630      	mov	r0, r6
 8008322:	4639      	mov	r1, r7
 8008324:	f7f7 ff22 	bl	800016c <__adddf3>
 8008328:	4606      	mov	r6, r0
 800832a:	460f      	mov	r7, r1
 800832c:	4630      	mov	r0, r6
 800832e:	4639      	mov	r1, r7
 8008330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008334:	2900      	cmp	r1, #0
 8008336:	dc0c      	bgt.n	8008352 <__ieee754_sqrt+0x4e>
 8008338:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800833c:	4302      	orrs	r2, r0
 800833e:	d0f5      	beq.n	800832c <__ieee754_sqrt+0x28>
 8008340:	b189      	cbz	r1, 8008366 <__ieee754_sqrt+0x62>
 8008342:	4602      	mov	r2, r0
 8008344:	f7f7 ff10 	bl	8000168 <__aeabi_dsub>
 8008348:	4602      	mov	r2, r0
 800834a:	460b      	mov	r3, r1
 800834c:	f7f8 f9ee 	bl	800072c <__aeabi_ddiv>
 8008350:	e7ea      	b.n	8008328 <__ieee754_sqrt+0x24>
 8008352:	150a      	asrs	r2, r1, #20
 8008354:	d115      	bne.n	8008382 <__ieee754_sqrt+0x7e>
 8008356:	2100      	movs	r1, #0
 8008358:	e009      	b.n	800836e <__ieee754_sqrt+0x6a>
 800835a:	0ae3      	lsrs	r3, r4, #11
 800835c:	3a15      	subs	r2, #21
 800835e:	0564      	lsls	r4, r4, #21
 8008360:	2b00      	cmp	r3, #0
 8008362:	d0fa      	beq.n	800835a <__ieee754_sqrt+0x56>
 8008364:	e7f7      	b.n	8008356 <__ieee754_sqrt+0x52>
 8008366:	460a      	mov	r2, r1
 8008368:	e7fa      	b.n	8008360 <__ieee754_sqrt+0x5c>
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	3101      	adds	r1, #1
 800836e:	02d8      	lsls	r0, r3, #11
 8008370:	d5fb      	bpl.n	800836a <__ieee754_sqrt+0x66>
 8008372:	1e48      	subs	r0, r1, #1
 8008374:	1a12      	subs	r2, r2, r0
 8008376:	f1c1 0020 	rsb	r0, r1, #32
 800837a:	fa24 f000 	lsr.w	r0, r4, r0
 800837e:	4303      	orrs	r3, r0
 8008380:	408c      	lsls	r4, r1
 8008382:	2600      	movs	r6, #0
 8008384:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8008388:	2116      	movs	r1, #22
 800838a:	07d2      	lsls	r2, r2, #31
 800838c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008390:	4632      	mov	r2, r6
 8008392:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008396:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800839a:	bf5c      	itt	pl
 800839c:	005b      	lslpl	r3, r3, #1
 800839e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80083a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80083a6:	bf58      	it	pl
 80083a8:	0064      	lslpl	r4, r4, #1
 80083aa:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80083ae:	107f      	asrs	r7, r7, #1
 80083b0:	0064      	lsls	r4, r4, #1
 80083b2:	1815      	adds	r5, r2, r0
 80083b4:	429d      	cmp	r5, r3
 80083b6:	bfde      	ittt	le
 80083b8:	182a      	addle	r2, r5, r0
 80083ba:	1b5b      	suble	r3, r3, r5
 80083bc:	1836      	addle	r6, r6, r0
 80083be:	0fe5      	lsrs	r5, r4, #31
 80083c0:	3901      	subs	r1, #1
 80083c2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80083c6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80083ca:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80083ce:	d1f0      	bne.n	80083b2 <__ieee754_sqrt+0xae>
 80083d0:	460d      	mov	r5, r1
 80083d2:	f04f 0a20 	mov.w	sl, #32
 80083d6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80083da:	429a      	cmp	r2, r3
 80083dc:	eb01 0c00 	add.w	ip, r1, r0
 80083e0:	db02      	blt.n	80083e8 <__ieee754_sqrt+0xe4>
 80083e2:	d113      	bne.n	800840c <__ieee754_sqrt+0x108>
 80083e4:	45a4      	cmp	ip, r4
 80083e6:	d811      	bhi.n	800840c <__ieee754_sqrt+0x108>
 80083e8:	f1bc 0f00 	cmp.w	ip, #0
 80083ec:	eb0c 0100 	add.w	r1, ip, r0
 80083f0:	da42      	bge.n	8008478 <__ieee754_sqrt+0x174>
 80083f2:	2900      	cmp	r1, #0
 80083f4:	db40      	blt.n	8008478 <__ieee754_sqrt+0x174>
 80083f6:	f102 0e01 	add.w	lr, r2, #1
 80083fa:	1a9b      	subs	r3, r3, r2
 80083fc:	4672      	mov	r2, lr
 80083fe:	45a4      	cmp	ip, r4
 8008400:	bf88      	it	hi
 8008402:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8008406:	eba4 040c 	sub.w	r4, r4, ip
 800840a:	4405      	add	r5, r0
 800840c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8008410:	f1ba 0a01 	subs.w	sl, sl, #1
 8008414:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8008418:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800841c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008420:	d1db      	bne.n	80083da <__ieee754_sqrt+0xd6>
 8008422:	431c      	orrs	r4, r3
 8008424:	d01a      	beq.n	800845c <__ieee754_sqrt+0x158>
 8008426:	4c20      	ldr	r4, [pc, #128]	@ (80084a8 <__ieee754_sqrt+0x1a4>)
 8008428:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80084ac <__ieee754_sqrt+0x1a8>
 800842c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008430:	e9db 2300 	ldrd	r2, r3, [fp]
 8008434:	f7f7 fe98 	bl	8000168 <__aeabi_dsub>
 8008438:	e9d4 8900 	ldrd	r8, r9, [r4]
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	4640      	mov	r0, r8
 8008442:	4649      	mov	r1, r9
 8008444:	f7f8 fac4 	bl	80009d0 <__aeabi_dcmple>
 8008448:	b140      	cbz	r0, 800845c <__ieee754_sqrt+0x158>
 800844a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800844e:	e9db 2300 	ldrd	r2, r3, [fp]
 8008452:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8008456:	d111      	bne.n	800847c <__ieee754_sqrt+0x178>
 8008458:	4655      	mov	r5, sl
 800845a:	3601      	adds	r6, #1
 800845c:	1072      	asrs	r2, r6, #1
 800845e:	086b      	lsrs	r3, r5, #1
 8008460:	07f1      	lsls	r1, r6, #31
 8008462:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008466:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800846a:	bf48      	it	mi
 800846c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008470:	4618      	mov	r0, r3
 8008472:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8008476:	e757      	b.n	8008328 <__ieee754_sqrt+0x24>
 8008478:	4696      	mov	lr, r2
 800847a:	e7be      	b.n	80083fa <__ieee754_sqrt+0xf6>
 800847c:	f7f7 fe76 	bl	800016c <__adddf3>
 8008480:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	4640      	mov	r0, r8
 800848a:	4649      	mov	r1, r9
 800848c:	f7f8 fa96 	bl	80009bc <__aeabi_dcmplt>
 8008490:	b120      	cbz	r0, 800849c <__ieee754_sqrt+0x198>
 8008492:	1ca8      	adds	r0, r5, #2
 8008494:	bf08      	it	eq
 8008496:	3601      	addeq	r6, #1
 8008498:	3502      	adds	r5, #2
 800849a:	e7df      	b.n	800845c <__ieee754_sqrt+0x158>
 800849c:	1c6b      	adds	r3, r5, #1
 800849e:	f023 0501 	bic.w	r5, r3, #1
 80084a2:	e7db      	b.n	800845c <__ieee754_sqrt+0x158>
 80084a4:	7ff00000 	.word	0x7ff00000
 80084a8:	200001e0 	.word	0x200001e0
 80084ac:	200001d8 	.word	0x200001d8

080084b0 <_init>:
 80084b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b2:	bf00      	nop
 80084b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b6:	bc08      	pop	{r3}
 80084b8:	469e      	mov	lr, r3
 80084ba:	4770      	bx	lr

080084bc <_fini>:
 80084bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084be:	bf00      	nop
 80084c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c2:	bc08      	pop	{r3}
 80084c4:	469e      	mov	lr, r3
 80084c6:	4770      	bx	lr
