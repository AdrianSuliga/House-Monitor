
House_Monitor_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ef0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08008000  08008000  00009000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083f8  080083f8  0000a1e8  2**0
                  CONTENTS
  4 .ARM          00000008  080083f8  080083f8  000093f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008400  08008400  0000a1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008400  08008400  00009400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008404  08008404  00009404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08008408  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200001e8  080085f0  0000a1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  080085f0  0000a424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c72b  00000000  00000000  0000a211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000251c  00000000  00000000  0001693c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00018e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000910  00000000  00000000  00019a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019412  00000000  00000000  0001a330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000feb1  00000000  00000000  00033742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bee4  00000000  00000000  000435f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf4d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041fc  00000000  00000000  000cf51c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000d3718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007fe8 	.word	0x08007fe8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08007fe8 	.word	0x08007fe8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <MX_ADC1_Init+0x74>)
 8000ff6:	4a19      	ldr	r2, [pc, #100]	@ (800105c <MX_ADC1_Init+0x78>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <MX_ADC1_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001000:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <MX_ADC1_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001006:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <MX_ADC1_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <MX_ADC1_Init+0x74>)
 800100e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001012:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001014:	4b10      	ldr	r3, [pc, #64]	@ (8001058 <MX_ADC1_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <MX_ADC1_Init+0x74>)
 800101c:	2201      	movs	r2, #1
 800101e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001020:	480d      	ldr	r0, [pc, #52]	@ (8001058 <MX_ADC1_Init+0x74>)
 8001022:	f000 fcb9 	bl	8001998 <HAL_ADC_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800102c:	f000 fa68 	bl	8001500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001034:	2301      	movs	r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	@ (8001058 <MX_ADC1_Init+0x74>)
 8001042:	f000 ff41 	bl	8001ec8 <HAL_ADC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800104c:	f000 fa58 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000204 	.word	0x20000204
 800105c:	40012400 	.word	0x40012400

08001060 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a14      	ldr	r2, [pc, #80]	@ (80010cc <HAL_ADC_MspInit+0x6c>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d121      	bne.n	80010c4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001080:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a0c      	ldr	r2, [pc, #48]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <HAL_ADC_MspInit+0x70>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010b0:	2301      	movs	r3, #1
 80010b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b4:	2303      	movs	r3, #3
 80010b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4619      	mov	r1, r3
 80010be:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <HAL_ADC_MspInit+0x74>)
 80010c0:	f001 fa28 	bl	8002514 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40012400 	.word	0x40012400
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010800 	.word	0x40010800

080010d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ec:	4b23      	ldr	r3, [pc, #140]	@ (800117c <MX_GPIO_Init+0xa4>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a22      	ldr	r2, [pc, #136]	@ (800117c <MX_GPIO_Init+0xa4>)
 80010f2:	f043 0310 	orr.w	r3, r3, #16
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b20      	ldr	r3, [pc, #128]	@ (800117c <MX_GPIO_Init+0xa4>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b1d      	ldr	r3, [pc, #116]	@ (800117c <MX_GPIO_Init+0xa4>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a1c      	ldr	r2, [pc, #112]	@ (800117c <MX_GPIO_Init+0xa4>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b1a      	ldr	r3, [pc, #104]	@ (800117c <MX_GPIO_Init+0xa4>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111c:	4b17      	ldr	r3, [pc, #92]	@ (800117c <MX_GPIO_Init+0xa4>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a16      	ldr	r2, [pc, #88]	@ (800117c <MX_GPIO_Init+0xa4>)
 8001122:	f043 0308 	orr.w	r3, r3, #8
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b14      	ldr	r3, [pc, #80]	@ (800117c <MX_GPIO_Init+0xa4>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2120      	movs	r1, #32
 8001138:	4811      	ldr	r0, [pc, #68]	@ (8001180 <MX_GPIO_Init+0xa8>)
 800113a:	f001 fb86 	bl	800284a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800113e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4619      	mov	r1, r3
 8001152:	480c      	ldr	r0, [pc, #48]	@ (8001184 <MX_GPIO_Init+0xac>)
 8001154:	f001 f9de 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001158:	2320      	movs	r3, #32
 800115a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	2301      	movs	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2302      	movs	r3, #2
 8001166:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	4619      	mov	r1, r3
 800116e:	4804      	ldr	r0, [pc, #16]	@ (8001180 <MX_GPIO_Init+0xa8>)
 8001170:	f001 f9d0 	bl	8002514 <HAL_GPIO_Init>

}
 8001174:	bf00      	nop
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40021000 	.word	0x40021000
 8001180:	40010800 	.word	0x40010800
 8001184:	40011000 	.word	0x40011000

08001188 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800118c:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <MX_I2C1_Init+0x50>)
 800118e:	4a13      	ldr	r2, [pc, #76]	@ (80011dc <MX_I2C1_Init+0x54>)
 8001190:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_I2C1_Init+0x50>)
 8001194:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <MX_I2C1_Init+0x58>)
 8001196:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001198:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <MX_I2C1_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b8:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	@ (80011d8 <MX_I2C1_Init+0x50>)
 80011c6:	f001 fb59 	bl	800287c <HAL_I2C_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011d0:	f000 f996 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000234 	.word	0x20000234
 80011dc:	40005400 	.word	0x40005400
 80011e0:	000186a0 	.word	0x000186a0

080011e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a15      	ldr	r2, [pc, #84]	@ (8001254 <HAL_I2C_MspInit+0x70>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d123      	bne.n	800124c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <HAL_I2C_MspInit+0x74>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a13      	ldr	r2, [pc, #76]	@ (8001258 <HAL_I2C_MspInit+0x74>)
 800120a:	f043 0308 	orr.w	r3, r3, #8
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <HAL_I2C_MspInit+0x74>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800121c:	23c0      	movs	r3, #192	@ 0xc0
 800121e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001220:	2312      	movs	r3, #18
 8001222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4619      	mov	r1, r3
 800122e:	480b      	ldr	r0, [pc, #44]	@ (800125c <HAL_I2C_MspInit+0x78>)
 8001230:	f001 f970 	bl	8002514 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <HAL_I2C_MspInit+0x74>)
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	4a07      	ldr	r2, [pc, #28]	@ (8001258 <HAL_I2C_MspInit+0x74>)
 800123a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800123e:	61d3      	str	r3, [r2, #28]
 8001240:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <HAL_I2C_MspInit+0x74>)
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40005400 	.word	0x40005400
 8001258:	40021000 	.word	0x40021000
 800125c:	40010c00 	.word	0x40010c00

08001260 <LPS_Read_Register>:
#define TEMP_OUT_H 0x2C

#define TIMEOUT 100

static uint8_t LPS_Read_Register(uint8_t reg)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af04      	add	r7, sp, #16
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
	uint8_t val = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1, LPS_ADDR, reg, 1, &val, sizeof(val), TIMEOUT);
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	b29a      	uxth	r2, r3
 8001272:	2364      	movs	r3, #100	@ 0x64
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	2301      	movs	r3, #1
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	f107 030f 	add.w	r3, r7, #15
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2301      	movs	r3, #1
 8001282:	21ba      	movs	r1, #186	@ 0xba
 8001284:	4803      	ldr	r0, [pc, #12]	@ (8001294 <LPS_Read_Register+0x34>)
 8001286:	f001 fd37 	bl	8002cf8 <HAL_I2C_Mem_Read>
	return val;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000234 	.word	0x20000234

08001298 <LPS_Write_Register>:

static void LPS_Write_Register(uint8_t reg, uint8_t value)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af04      	add	r7, sp, #16
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, LPS_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	2364      	movs	r3, #100	@ 0x64
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	2301      	movs	r3, #1
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	1dbb      	adds	r3, r7, #6
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2301      	movs	r3, #1
 80012ba:	21ba      	movs	r1, #186	@ 0xba
 80012bc:	4803      	ldr	r0, [pc, #12]	@ (80012cc <LPS_Write_Register+0x34>)
 80012be:	f001 fc21 	bl	8002b04 <HAL_I2C_Mem_Write>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000234 	.word	0x20000234

080012d0 <LPS_Init>:

HAL_StatusTypeDef LPS_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	if (LPS_Read_Register(WHO_AM_I) != 0xBD)
 80012d4:	200f      	movs	r0, #15
 80012d6:	f7ff ffc3 	bl	8001260 <LPS_Read_Register>
 80012da:	4603      	mov	r3, r0
 80012dc:	2bbd      	cmp	r3, #189	@ 0xbd
 80012de:	d001      	beq.n	80012e4 <LPS_Init+0x14>
		return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e004      	b.n	80012ee <LPS_Init+0x1e>

	LPS_Write_Register(CTRL_REG1, 0xC0);
 80012e4:	21c0      	movs	r1, #192	@ 0xc0
 80012e6:	2020      	movs	r0, #32
 80012e8:	f7ff ffd6 	bl	8001298 <LPS_Write_Register>
	return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Redirecting chars in printf statements to USART2
int __io_putchar(int ch)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b0a      	cmp	r3, #10
 8001300:	d102      	bne.n	8001308 <__io_putchar+0x14>
		__io_putchar('\r');
 8001302:	200d      	movs	r0, #13
 8001304:	f7ff fff6 	bl	80012f4 <__io_putchar>

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001308:	1d39      	adds	r1, r7, #4
 800130a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800130e:	2201      	movs	r2, #1
 8001310:	4803      	ldr	r0, [pc, #12]	@ (8001320 <__io_putchar+0x2c>)
 8001312:	f003 f8e5 	bl	80044e0 <HAL_UART_Transmit>
	return 1;
 8001316:	2301      	movs	r3, #1
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2000028c 	.word	0x2000028c
 8001324:	00000000 	.word	0x00000000

08001328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001328:	b5b0      	push	{r4, r5, r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132e:	f000 faad 	bl	800188c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001332:	f000 f895 	bl	8001460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001336:	f7ff fecf 	bl	80010d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800133a:	f000 fa0d 	bl	8001758 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800133e:	f7ff fe51 	bl	8000fe4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001342:	f7ff ff21 	bl	8001188 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001346:	4840      	ldr	r0, [pc, #256]	@ (8001448 <main+0x120>)
 8001348:	f000 ff52 	bl	80021f0 <HAL_ADCEx_Calibration_Start>
  if (LPS_Init() != HAL_OK)
 800134c:	f7ff ffc0 	bl	80012d0 <LPS_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <main+0x32>
	  Error_Handler();
 8001356:	f000 f8d3 	bl	8001500 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET)
 800135a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800135e:	483b      	ldr	r0, [pc, #236]	@ (800144c <main+0x124>)
 8001360:	f001 fa5c 	bl	800281c <HAL_GPIO_ReadPin>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f7      	bne.n	800135a <main+0x32>
	  {
		  HAL_ADC_Start(&hadc1);
 800136a:	4837      	ldr	r0, [pc, #220]	@ (8001448 <main+0x120>)
 800136c:	f000 fbec 	bl	8001b48 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001370:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001374:	4834      	ldr	r0, [pc, #208]	@ (8001448 <main+0x120>)
 8001376:	f000 fc95 	bl	8001ca4 <HAL_ADC_PollForConversion>

		  float photoresistor_voltage = HAL_ADC_GetValue(&hadc1) * SUPPLIED_VOLTAGE / 4096.0f;
 800137a:	4833      	ldr	r0, [pc, #204]	@ (8001448 <main+0x120>)
 800137c:	f000 fd98 	bl	8001eb0 <HAL_ADC_GetValue>
 8001380:	4603      	mov	r3, r0
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fc86 	bl	8000c94 <__aeabi_ui2f>
 8001388:	4603      	mov	r3, r0
 800138a:	4931      	ldr	r1, [pc, #196]	@ (8001450 <main+0x128>)
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fcd9 	bl	8000d44 <__aeabi_fmul>
 8001392:	4603      	mov	r3, r0
 8001394:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fd87 	bl	8000eac <__aeabi_fdiv>
 800139e:	4603      	mov	r3, r0
 80013a0:	60fb      	str	r3, [r7, #12]
		  float light_percentage = photoresistor_voltage * 100.0f / SUPPLIED_VOLTAGE;
 80013a2:	492c      	ldr	r1, [pc, #176]	@ (8001454 <main+0x12c>)
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f7ff fccd 	bl	8000d44 <__aeabi_fmul>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4928      	ldr	r1, [pc, #160]	@ (8001450 <main+0x128>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fd7c 	bl	8000eac <__aeabi_fdiv>
 80013b4:	4603      	mov	r3, r0
 80013b6:	60bb      	str	r3, [r7, #8]
		  float photoresistor_resistance = FIXED_PHOTORESISTOR_RESISTANCE * (SUPPLIED_VOLTAGE / photoresistor_voltage - 1);
 80013b8:	68f9      	ldr	r1, [r7, #12]
 80013ba:	4825      	ldr	r0, [pc, #148]	@ (8001450 <main+0x128>)
 80013bc:	f7ff fd76 	bl	8000eac <__aeabi_fdiv>
 80013c0:	4603      	mov	r3, r0
 80013c2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fbb2 	bl	8000b30 <__aeabi_fsub>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4922      	ldr	r1, [pc, #136]	@ (8001458 <main+0x130>)
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fcb7 	bl	8000d44 <__aeabi_fmul>
 80013d6:	4603      	mov	r3, r0
 80013d8:	607b      	str	r3, [r7, #4]
		  float lux_level = PHOTORESISTOR_MULTIPLIER / pow(photoresistor_resistance, PHOTORESISTOR_EXPONENT);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff f824 	bl	8000428 <__aeabi_f2d>
 80013e0:	a315      	add	r3, pc, #84	@ (adr r3, 8001438 <main+0x110>)
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	f005 feef 	bl	80071c8 <pow>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	a114      	add	r1, pc, #80	@ (adr r1, 8001440 <main+0x118>)
 80013f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013f4:	f7ff f99a 	bl	800072c <__aeabi_ddiv>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	f7ff fb42 	bl	8000a88 <__aeabi_d2f>
 8001404:	4603      	mov	r3, r0
 8001406:	603b      	str	r3, [r7, #0]

		  printf("P = %.2f %%, L = %.2f lux\n", light_percentage, lux_level);
 8001408:	68b8      	ldr	r0, [r7, #8]
 800140a:	f7ff f80d 	bl	8000428 <__aeabi_f2d>
 800140e:	4604      	mov	r4, r0
 8001410:	460d      	mov	r5, r1
 8001412:	6838      	ldr	r0, [r7, #0]
 8001414:	f7ff f808 	bl	8000428 <__aeabi_f2d>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	e9cd 2300 	strd	r2, r3, [sp]
 8001420:	4622      	mov	r2, r4
 8001422:	462b      	mov	r3, r5
 8001424:	480d      	ldr	r0, [pc, #52]	@ (800145c <main+0x134>)
 8001426:	f003 ff4d 	bl	80052c4 <iprintf>
		  HAL_Delay(250);
 800142a:	20fa      	movs	r0, #250	@ 0xfa
 800142c:	f000 fa90 	bl	8001950 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET)
 8001430:	e793      	b.n	800135a <main+0x32>
 8001432:	bf00      	nop
 8001434:	f3af 8000 	nop.w
 8001438:	60000000 	.word	0x60000000
 800143c:	3fee6666 	.word	0x3fee6666
 8001440:	00000000 	.word	0x00000000
 8001444:	415ab3f0 	.word	0x415ab3f0
 8001448:	20000204 	.word	0x20000204
 800144c:	40011000 	.word	0x40011000
 8001450:	40533333 	.word	0x40533333
 8001454:	42c80000 	.word	0x42c80000
 8001458:	447a0000 	.word	0x447a0000
 800145c:	08008000 	.word	0x08008000

08001460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b094      	sub	sp, #80	@ 0x50
 8001464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001466:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800146a:	2228      	movs	r2, #40	@ 0x28
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f003 ff7d 	bl	800536e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001490:	2302      	movs	r3, #2
 8001492:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001494:	2301      	movs	r3, #1
 8001496:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001498:	2310      	movs	r3, #16
 800149a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800149c:	2300      	movs	r3, #0
 800149e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014a4:	4618      	mov	r0, r3
 80014a6:	f002 fa4f 	bl	8003948 <HAL_RCC_OscConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80014b0:	f000 f826 	bl	8001500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b4:	230f      	movs	r3, #15
 80014b6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 fcbc 	bl	8003e4c <HAL_RCC_ClockConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80014da:	f000 f811 	bl	8001500 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014de:	2302      	movs	r3, #2
 80014e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 fe3d 	bl	8004168 <HAL_RCCEx_PeriphCLKConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014f4:	f000 f804 	bl	8001500 <Error_Handler>
  }
}
 80014f8:	bf00      	nop
 80014fa:	3750      	adds	r7, #80	@ 0x50
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <Error_Handler+0x8>

0800150c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001512:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <HAL_MspInit+0x5c>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	4a14      	ldr	r2, [pc, #80]	@ (8001568 <HAL_MspInit+0x5c>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6193      	str	r3, [r2, #24]
 800151e:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <HAL_MspInit+0x5c>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	4b0f      	ldr	r3, [pc, #60]	@ (8001568 <HAL_MspInit+0x5c>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	4a0e      	ldr	r2, [pc, #56]	@ (8001568 <HAL_MspInit+0x5c>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001534:	61d3      	str	r3, [r2, #28]
 8001536:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <HAL_MspInit+0x5c>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001542:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <HAL_MspInit+0x60>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	4a04      	ldr	r2, [pc, #16]	@ (800156c <HAL_MspInit+0x60>)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	40021000 	.word	0x40021000
 800156c:	40010000 	.word	0x40010000

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <NMI_Handler+0x4>

08001578 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <MemManage_Handler+0x4>

08001588 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <BusFault_Handler+0x4>

08001590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <UsageFault_Handler+0x4>

08001598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c0:	f000 f9aa 	bl	8001918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return 1;
 80015cc:	2301      	movs	r3, #1
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr

080015d6 <_kill>:

int _kill(int pid, int sig)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015e0:	f003 ff18 	bl	8005414 <__errno>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2216      	movs	r2, #22
 80015e8:	601a      	str	r2, [r3, #0]
  return -1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <_exit>:

void _exit (int status)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015fe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ffe7 	bl	80015d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <_exit+0x12>

0800160c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	e00a      	b.n	8001634 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800161e:	f3af 8000 	nop.w
 8001622:	4601      	mov	r1, r0
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	60ba      	str	r2, [r7, #8]
 800162a:	b2ca      	uxtb	r2, r1
 800162c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3301      	adds	r3, #1
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	429a      	cmp	r2, r3
 800163a:	dbf0      	blt.n	800161e <_read+0x12>
  }

  return len;
 800163c:	687b      	ldr	r3, [r7, #4]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b086      	sub	sp, #24
 800164a:	af00      	add	r7, sp, #0
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	e009      	b.n	800166c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	60ba      	str	r2, [r7, #8]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fe47 	bl	80012f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3301      	adds	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	429a      	cmp	r2, r3
 8001672:	dbf1      	blt.n	8001658 <_write+0x12>
  }
  return len;
 8001674:	687b      	ldr	r3, [r7, #4]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_close>:

int _close(int file)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001686:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016a4:	605a      	str	r2, [r3, #4]
  return 0;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <_isatty>:

int _isatty(int file)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b085      	sub	sp, #20
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	60f8      	str	r0, [r7, #12]
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
	...

080016e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e8:	4a14      	ldr	r2, [pc, #80]	@ (800173c <_sbrk+0x5c>)
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <_sbrk+0x60>)
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f4:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <_sbrk+0x64>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	@ (8001748 <_sbrk+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001702:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	429a      	cmp	r2, r3
 800170e:	d207      	bcs.n	8001720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001710:	f003 fe80 	bl	8005414 <__errno>
 8001714:	4603      	mov	r3, r0
 8001716:	220c      	movs	r2, #12
 8001718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800171e:	e009      	b.n	8001734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001720:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001726:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	4a05      	ldr	r2, [pc, #20]	@ (8001744 <_sbrk+0x64>)
 8001730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20005000 	.word	0x20005000
 8001740:	00000400 	.word	0x00000400
 8001744:	20000288 	.word	0x20000288
 8001748:	20000428 	.word	0x20000428

0800174c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800175c:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <MX_USART2_UART_Init+0x4c>)
 800175e:	4a12      	ldr	r2, [pc, #72]	@ (80017a8 <MX_USART2_UART_Init+0x50>)
 8001760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001762:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <MX_USART2_UART_Init+0x4c>)
 8001764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800176a:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <MX_USART2_UART_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <MX_USART2_UART_Init+0x4c>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001776:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <MX_USART2_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800177c:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <MX_USART2_UART_Init+0x4c>)
 800177e:	220c      	movs	r2, #12
 8001780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001782:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <MX_USART2_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <MX_USART2_UART_Init+0x4c>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800178e:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <MX_USART2_UART_Init+0x4c>)
 8001790:	f002 fe56 	bl	8004440 <HAL_UART_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800179a:	f7ff feb1 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2000028c 	.word	0x2000028c
 80017a8:	40004400 	.word	0x40004400

080017ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001834 <HAL_UART_MspInit+0x88>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d12f      	bne.n	800182c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001838 <HAL_UART_MspInit+0x8c>)
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	4a19      	ldr	r2, [pc, #100]	@ (8001838 <HAL_UART_MspInit+0x8c>)
 80017d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d6:	61d3      	str	r3, [r2, #28]
 80017d8:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <HAL_UART_MspInit+0x8c>)
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <HAL_UART_MspInit+0x8c>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a13      	ldr	r2, [pc, #76]	@ (8001838 <HAL_UART_MspInit+0x8c>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <HAL_UART_MspInit+0x8c>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017fc:	2304      	movs	r3, #4
 80017fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	4619      	mov	r1, r3
 800180e:	480b      	ldr	r0, [pc, #44]	@ (800183c <HAL_UART_MspInit+0x90>)
 8001810:	f000 fe80 	bl	8002514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001814:	2308      	movs	r3, #8
 8001816:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 0310 	add.w	r3, r7, #16
 8001824:	4619      	mov	r1, r3
 8001826:	4805      	ldr	r0, [pc, #20]	@ (800183c <HAL_UART_MspInit+0x90>)
 8001828:	f000 fe74 	bl	8002514 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800182c:	bf00      	nop
 800182e:	3720      	adds	r7, #32
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40004400 	.word	0x40004400
 8001838:	40021000 	.word	0x40021000
 800183c:	40010800 	.word	0x40010800

08001840 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001840:	f7ff ff84 	bl	800174c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001844:	480b      	ldr	r0, [pc, #44]	@ (8001874 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001846:	490c      	ldr	r1, [pc, #48]	@ (8001878 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001848:	4a0c      	ldr	r2, [pc, #48]	@ (800187c <LoopFillZerobss+0x16>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a09      	ldr	r2, [pc, #36]	@ (8001880 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800185c:	4c09      	ldr	r4, [pc, #36]	@ (8001884 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800186a:	f003 fdd9 	bl	8005420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800186e:	f7ff fd5b 	bl	8001328 <main>
  bx lr
 8001872:	4770      	bx	lr
  ldr r0, =_sdata
 8001874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001878:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800187c:	08008408 	.word	0x08008408
  ldr r2, =_sbss
 8001880:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001884:	20000424 	.word	0x20000424

08001888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001888:	e7fe      	b.n	8001888 <ADC1_2_IRQHandler>
	...

0800188c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <HAL_Init+0x28>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a07      	ldr	r2, [pc, #28]	@ (80018b4 <HAL_Init+0x28>)
 8001896:	f043 0310 	orr.w	r3, r3, #16
 800189a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800189c:	2003      	movs	r0, #3
 800189e:	f000 fe05 	bl	80024ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a2:	200f      	movs	r0, #15
 80018a4:	f000 f808 	bl	80018b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a8:	f7ff fe30 	bl	800150c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40022000 	.word	0x40022000

080018b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c0:	4b12      	ldr	r3, [pc, #72]	@ (800190c <HAL_InitTick+0x54>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <HAL_InitTick+0x58>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 fe0f 	bl	80024fa <HAL_SYSTICK_Config>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00e      	b.n	8001904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b0f      	cmp	r3, #15
 80018ea:	d80a      	bhi.n	8001902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ec:	2200      	movs	r2, #0
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018f4:	f000 fde5 	bl	80024c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f8:	4a06      	ldr	r2, [pc, #24]	@ (8001914 <HAL_InitTick+0x5c>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	e000      	b.n	8001904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000000 	.word	0x20000000
 8001910:	20000008 	.word	0x20000008
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800191c:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <HAL_IncTick+0x1c>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <HAL_IncTick+0x20>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4413      	add	r3, r2
 8001928:	4a03      	ldr	r2, [pc, #12]	@ (8001938 <HAL_IncTick+0x20>)
 800192a:	6013      	str	r3, [r2, #0]
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	20000008 	.word	0x20000008
 8001938:	200002d4 	.word	0x200002d4

0800193c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return uwTick;
 8001940:	4b02      	ldr	r3, [pc, #8]	@ (800194c <HAL_GetTick+0x10>)
 8001942:	681b      	ldr	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	200002d4 	.word	0x200002d4

08001950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff fff0 	bl	800193c <HAL_GetTick>
 800195c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001968:	d005      	beq.n	8001976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196a:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <HAL_Delay+0x44>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001976:	bf00      	nop
 8001978:	f7ff ffe0 	bl	800193c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	429a      	cmp	r2, r3
 8001986:	d8f7      	bhi.n	8001978 <HAL_Delay+0x28>
  {
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000008 	.word	0x20000008

08001998 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e0be      	b.n	8001b38 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d109      	bne.n	80019dc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fb42 	bl	8001060 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 fbc5 	bl	800216c <ADC_ConversionStop_Disable>
 80019e2:	4603      	mov	r3, r0
 80019e4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ea:	f003 0310 	and.w	r3, r3, #16
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f040 8099 	bne.w	8001b26 <HAL_ADC_Init+0x18e>
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f040 8095 	bne.w	8001b26 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a00:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a04:	f023 0302 	bic.w	r3, r3, #2
 8001a08:	f043 0202 	orr.w	r2, r3, #2
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a18:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7b1b      	ldrb	r3, [r3, #12]
 8001a1e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a20:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a30:	d003      	beq.n	8001a3a <HAL_ADC_Init+0xa2>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d102      	bne.n	8001a40 <HAL_ADC_Init+0xa8>
 8001a3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a3e:	e000      	b.n	8001a42 <HAL_ADC_Init+0xaa>
 8001a40:	2300      	movs	r3, #0
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7d1b      	ldrb	r3, [r3, #20]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d119      	bne.n	8001a84 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7b1b      	ldrb	r3, [r3, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d109      	bne.n	8001a6c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	035a      	lsls	r2, r3, #13
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	e00b      	b.n	8001a84 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a70:	f043 0220 	orr.w	r2, r3, #32
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7c:	f043 0201 	orr.w	r2, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	4b28      	ldr	r3, [pc, #160]	@ (8001b40 <HAL_ADC_Init+0x1a8>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	68b9      	ldr	r1, [r7, #8]
 8001aa8:	430b      	orrs	r3, r1
 8001aaa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ab4:	d003      	beq.n	8001abe <HAL_ADC_Init+0x126>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d104      	bne.n	8001ac8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	051b      	lsls	r3, r3, #20
 8001ac6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ace:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	4b18      	ldr	r3, [pc, #96]	@ (8001b44 <HAL_ADC_Init+0x1ac>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d10b      	bne.n	8001b04 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af6:	f023 0303 	bic.w	r3, r3, #3
 8001afa:	f043 0201 	orr.w	r2, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b02:	e018      	b.n	8001b36 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b08:	f023 0312 	bic.w	r3, r3, #18
 8001b0c:	f043 0210 	orr.w	r2, r3, #16
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b18:	f043 0201 	orr.w	r2, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b24:	e007      	b.n	8001b36 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2a:	f043 0210 	orr.w	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	ffe1f7fd 	.word	0xffe1f7fd
 8001b44:	ff1f0efe 	.word	0xff1f0efe

08001b48 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_ADC_Start+0x1a>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e098      	b.n	8001c94 <HAL_ADC_Start+0x14c>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 faa4 	bl	80020b8 <ADC_Enable>
 8001b70:	4603      	mov	r3, r0
 8001b72:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f040 8087 	bne.w	8001c8a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a41      	ldr	r2, [pc, #260]	@ (8001c9c <HAL_ADC_Start+0x154>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d105      	bne.n	8001ba6 <HAL_ADC_Start+0x5e>
 8001b9a:	4b41      	ldr	r3, [pc, #260]	@ (8001ca0 <HAL_ADC_Start+0x158>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d115      	bne.n	8001bd2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001baa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d026      	beq.n	8001c0e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bc8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bd0:	e01d      	b.n	8001c0e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a2f      	ldr	r2, [pc, #188]	@ (8001ca0 <HAL_ADC_Start+0x158>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d004      	beq.n	8001bf2 <HAL_ADC_Start+0xaa>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a2b      	ldr	r2, [pc, #172]	@ (8001c9c <HAL_ADC_Start+0x154>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d10d      	bne.n	8001c0e <HAL_ADC_Start+0xc6>
 8001bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca0 <HAL_ADC_Start+0x158>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d007      	beq.n	8001c0e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c02:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c06:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d006      	beq.n	8001c28 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1e:	f023 0206 	bic.w	r2, r3, #6
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c26:	e002      	b.n	8001c2e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f06f 0202 	mvn.w	r2, #2
 8001c3e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001c4a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001c4e:	d113      	bne.n	8001c78 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c54:	4a11      	ldr	r2, [pc, #68]	@ (8001c9c <HAL_ADC_Start+0x154>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d105      	bne.n	8001c66 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <HAL_ADC_Start+0x158>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d108      	bne.n	8001c78 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	e00c      	b.n	8001c92 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	e003      	b.n	8001c92 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40012800 	.word	0x40012800
 8001ca0:	40012400 	.word	0x40012400

08001ca4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001cba:	f7ff fe3f 	bl	800193c <HAL_GetTick>
 8001cbe:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00b      	beq.n	8001ce6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd2:	f043 0220 	orr.w	r2, r3, #32
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e0d3      	b.n	8001e8e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d131      	bne.n	8001d58 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d12a      	bne.n	8001d58 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001d02:	e021      	b.n	8001d48 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d0a:	d01d      	beq.n	8001d48 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d007      	beq.n	8001d22 <HAL_ADC_PollForConversion+0x7e>
 8001d12:	f7ff fe13 	bl	800193c <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d212      	bcs.n	8001d48 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10b      	bne.n	8001d48 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d34:	f043 0204 	orr.w	r2, r3, #4
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e0a2      	b.n	8001e8e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0d6      	beq.n	8001d04 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001d56:	e070      	b.n	8001e3a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001d58:	4b4f      	ldr	r3, [pc, #316]	@ (8001e98 <HAL_ADC_PollForConversion+0x1f4>)
 8001d5a:	681c      	ldr	r4, [r3, #0]
 8001d5c:	2002      	movs	r0, #2
 8001d5e:	f002 fab9 	bl	80042d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d62:	4603      	mov	r3, r0
 8001d64:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6919      	ldr	r1, [r3, #16]
 8001d6e:	4b4b      	ldr	r3, [pc, #300]	@ (8001e9c <HAL_ADC_PollForConversion+0x1f8>)
 8001d70:	400b      	ands	r3, r1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d118      	bne.n	8001da8 <HAL_ADC_PollForConversion+0x104>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68d9      	ldr	r1, [r3, #12]
 8001d7c:	4b48      	ldr	r3, [pc, #288]	@ (8001ea0 <HAL_ADC_PollForConversion+0x1fc>)
 8001d7e:	400b      	ands	r3, r1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d111      	bne.n	8001da8 <HAL_ADC_PollForConversion+0x104>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6919      	ldr	r1, [r3, #16]
 8001d8a:	4b46      	ldr	r3, [pc, #280]	@ (8001ea4 <HAL_ADC_PollForConversion+0x200>)
 8001d8c:	400b      	ands	r3, r1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d108      	bne.n	8001da4 <HAL_ADC_PollForConversion+0x100>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68d9      	ldr	r1, [r3, #12]
 8001d98:	4b43      	ldr	r3, [pc, #268]	@ (8001ea8 <HAL_ADC_PollForConversion+0x204>)
 8001d9a:	400b      	ands	r3, r1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_ADC_PollForConversion+0x100>
 8001da0:	2314      	movs	r3, #20
 8001da2:	e020      	b.n	8001de6 <HAL_ADC_PollForConversion+0x142>
 8001da4:	2329      	movs	r3, #41	@ 0x29
 8001da6:	e01e      	b.n	8001de6 <HAL_ADC_PollForConversion+0x142>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6919      	ldr	r1, [r3, #16]
 8001dae:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea4 <HAL_ADC_PollForConversion+0x200>)
 8001db0:	400b      	ands	r3, r1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d106      	bne.n	8001dc4 <HAL_ADC_PollForConversion+0x120>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68d9      	ldr	r1, [r3, #12]
 8001dbc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea8 <HAL_ADC_PollForConversion+0x204>)
 8001dbe:	400b      	ands	r3, r1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00d      	beq.n	8001de0 <HAL_ADC_PollForConversion+0x13c>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6919      	ldr	r1, [r3, #16]
 8001dca:	4b38      	ldr	r3, [pc, #224]	@ (8001eac <HAL_ADC_PollForConversion+0x208>)
 8001dcc:	400b      	ands	r3, r1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d108      	bne.n	8001de4 <HAL_ADC_PollForConversion+0x140>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68d9      	ldr	r1, [r3, #12]
 8001dd8:	4b34      	ldr	r3, [pc, #208]	@ (8001eac <HAL_ADC_PollForConversion+0x208>)
 8001dda:	400b      	ands	r3, r1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_ADC_PollForConversion+0x140>
 8001de0:	2354      	movs	r3, #84	@ 0x54
 8001de2:	e000      	b.n	8001de6 <HAL_ADC_PollForConversion+0x142>
 8001de4:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001de6:	fb02 f303 	mul.w	r3, r2, r3
 8001dea:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001dec:	e021      	b.n	8001e32 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001df4:	d01a      	beq.n	8001e2c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <HAL_ADC_PollForConversion+0x168>
 8001dfc:	f7ff fd9e 	bl	800193c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d20f      	bcs.n	8001e2c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d90b      	bls.n	8001e2c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e18:	f043 0204 	orr.w	r2, r3, #4
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e030      	b.n	8001e8e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d8d9      	bhi.n	8001dee <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f06f 0212 	mvn.w	r2, #18
 8001e42:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e48:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e5a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e5e:	d115      	bne.n	8001e8c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d111      	bne.n	8001e8c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e84:	f043 0201 	orr.w	r2, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	371c      	adds	r7, #28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd90      	pop	{r4, r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	24924924 	.word	0x24924924
 8001ea0:	00924924 	.word	0x00924924
 8001ea4:	12492492 	.word	0x12492492
 8001ea8:	00492492 	.word	0x00492492
 8001eac:	00249249 	.word	0x00249249

08001eb0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d101      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x20>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e0dc      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x1da>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b06      	cmp	r3, #6
 8001ef6:	d81c      	bhi.n	8001f32 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	3b05      	subs	r3, #5
 8001f0a:	221f      	movs	r2, #31
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	4019      	ands	r1, r3
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	3b05      	subs	r3, #5
 8001f24:	fa00 f203 	lsl.w	r2, r0, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f30:	e03c      	b.n	8001fac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d81c      	bhi.n	8001f74 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	3b23      	subs	r3, #35	@ 0x23
 8001f4c:	221f      	movs	r2, #31
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	4019      	ands	r1, r3
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	3b23      	subs	r3, #35	@ 0x23
 8001f66:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f72:	e01b      	b.n	8001fac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	3b41      	subs	r3, #65	@ 0x41
 8001f86:	221f      	movs	r2, #31
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	4019      	ands	r1, r3
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3b41      	subs	r3, #65	@ 0x41
 8001fa0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b09      	cmp	r3, #9
 8001fb2:	d91c      	bls.n	8001fee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68d9      	ldr	r1, [r3, #12]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3b1e      	subs	r3, #30
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	4019      	ands	r1, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	6898      	ldr	r0, [r3, #8]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	3b1e      	subs	r3, #30
 8001fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]
 8001fec:	e019      	b.n	8002022 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6919      	ldr	r1, [r3, #16]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	4413      	add	r3, r2
 8001ffe:	2207      	movs	r2, #7
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	4019      	ands	r1, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	6898      	ldr	r0, [r3, #8]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	fa00 f203 	lsl.w	r2, r0, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b10      	cmp	r3, #16
 8002028:	d003      	beq.n	8002032 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800202e:	2b11      	cmp	r3, #17
 8002030:	d132      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a1d      	ldr	r2, [pc, #116]	@ (80020ac <HAL_ADC_ConfigChannel+0x1e4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d125      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d126      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002058:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b10      	cmp	r3, #16
 8002060:	d11a      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002062:	4b13      	ldr	r3, [pc, #76]	@ (80020b0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a13      	ldr	r2, [pc, #76]	@ (80020b4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	0c9a      	lsrs	r2, r3, #18
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002078:	e002      	b.n	8002080 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	3b01      	subs	r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f9      	bne.n	800207a <HAL_ADC_ConfigChannel+0x1b2>
 8002086:	e007      	b.n	8002098 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208c:	f043 0220 	orr.w	r2, r3, #32
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	40012400 	.word	0x40012400
 80020b0:	20000000 	.word	0x20000000
 80020b4:	431bde83 	.word	0x431bde83

080020b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d040      	beq.n	8002158 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f042 0201 	orr.w	r2, r2, #1
 80020e4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002164 <ADC_Enable+0xac>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002168 <ADC_Enable+0xb0>)
 80020ec:	fba2 2303 	umull	r2, r3, r2, r3
 80020f0:	0c9b      	lsrs	r3, r3, #18
 80020f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020f4:	e002      	b.n	80020fc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	3b01      	subs	r3, #1
 80020fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f9      	bne.n	80020f6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002102:	f7ff fc1b 	bl	800193c <HAL_GetTick>
 8002106:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002108:	e01f      	b.n	800214a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800210a:	f7ff fc17 	bl	800193c <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d918      	bls.n	800214a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b01      	cmp	r3, #1
 8002124:	d011      	beq.n	800214a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212a:	f043 0210 	orr.w	r2, r3, #16
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002136:	f043 0201 	orr.w	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e007      	b.n	800215a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b01      	cmp	r3, #1
 8002156:	d1d8      	bne.n	800210a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000000 	.word	0x20000000
 8002168:	431bde83 	.word	0x431bde83

0800216c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b01      	cmp	r3, #1
 8002184:	d12e      	bne.n	80021e4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0201 	bic.w	r2, r2, #1
 8002194:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002196:	f7ff fbd1 	bl	800193c <HAL_GetTick>
 800219a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800219c:	e01b      	b.n	80021d6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800219e:	f7ff fbcd 	bl	800193c <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d914      	bls.n	80021d6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d10d      	bne.n	80021d6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021be:	f043 0210 	orr.w	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e007      	b.n	80021e6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d0dc      	beq.n	800219e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_ADCEx_Calibration_Start+0x1e>
 800220a:	2302      	movs	r3, #2
 800220c:	e097      	b.n	800233e <HAL_ADCEx_Calibration_Start+0x14e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ffa8 	bl	800216c <ADC_ConversionStop_Disable>
 800221c:	4603      	mov	r3, r0
 800221e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff49 	bl	80020b8 <ADC_Enable>
 8002226:	4603      	mov	r3, r0
 8002228:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800222a:	7dfb      	ldrb	r3, [r7, #23]
 800222c:	2b00      	cmp	r3, #0
 800222e:	f040 8081 	bne.w	8002334 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002236:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800223a:	f023 0302 	bic.w	r3, r3, #2
 800223e:	f043 0202 	orr.w	r2, r3, #2
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002246:	4b40      	ldr	r3, [pc, #256]	@ (8002348 <HAL_ADCEx_Calibration_Start+0x158>)
 8002248:	681c      	ldr	r4, [r3, #0]
 800224a:	2002      	movs	r0, #2
 800224c:	f002 f842 	bl	80042d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002250:	4603      	mov	r3, r0
 8002252:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002256:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002258:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800225a:	e002      	b.n	8002262 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3b01      	subs	r3, #1
 8002260:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f9      	bne.n	800225c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0208 	orr.w	r2, r2, #8
 8002276:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002278:	f7ff fb60 	bl	800193c <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800227e:	e01b      	b.n	80022b8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002280:	f7ff fb5c 	bl	800193c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b0a      	cmp	r3, #10
 800228c:	d914      	bls.n	80022b8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00d      	beq.n	80022b8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a0:	f023 0312 	bic.w	r3, r3, #18
 80022a4:	f043 0210 	orr.w	r2, r3, #16
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e042      	b.n	800233e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1dc      	bne.n	8002280 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0204 	orr.w	r2, r2, #4
 80022d4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80022d6:	f7ff fb31 	bl	800193c <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80022dc:	e01b      	b.n	8002316 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80022de:	f7ff fb2d 	bl	800193c <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b0a      	cmp	r3, #10
 80022ea:	d914      	bls.n	8002316 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00d      	beq.n	8002316 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fe:	f023 0312 	bic.w	r3, r3, #18
 8002302:	f043 0210 	orr.w	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e013      	b.n	800233e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1dc      	bne.n	80022de <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002328:	f023 0303 	bic.w	r3, r3, #3
 800232c:	f043 0201 	orr.w	r2, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800233c:	7dfb      	ldrb	r3, [r7, #23]
}
 800233e:	4618      	mov	r0, r3
 8002340:	371c      	adds	r7, #28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd90      	pop	{r4, r7, pc}
 8002346:	bf00      	nop
 8002348:	20000000 	.word	0x20000000

0800234c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800235c:	4b0c      	ldr	r3, [pc, #48]	@ (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002368:	4013      	ands	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002374:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800237c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237e:	4a04      	ldr	r2, [pc, #16]	@ (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	60d3      	str	r3, [r2, #12]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002398:	4b04      	ldr	r3, [pc, #16]	@ (80023ac <__NVIC_GetPriorityGrouping+0x18>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	f003 0307 	and.w	r3, r3, #7
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	db0a      	blt.n	80023da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	490c      	ldr	r1, [pc, #48]	@ (80023fc <__NVIC_SetPriority+0x4c>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	0112      	lsls	r2, r2, #4
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	440b      	add	r3, r1
 80023d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d8:	e00a      	b.n	80023f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4908      	ldr	r1, [pc, #32]	@ (8002400 <__NVIC_SetPriority+0x50>)
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	3b04      	subs	r3, #4
 80023e8:	0112      	lsls	r2, r2, #4
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	440b      	add	r3, r1
 80023ee:	761a      	strb	r2, [r3, #24]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000e100 	.word	0xe000e100
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	@ 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f1c3 0307 	rsb	r3, r3, #7
 800241e:	2b04      	cmp	r3, #4
 8002420:	bf28      	it	cs
 8002422:	2304      	movcs	r3, #4
 8002424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3304      	adds	r3, #4
 800242a:	2b06      	cmp	r3, #6
 800242c:	d902      	bls.n	8002434 <NVIC_EncodePriority+0x30>
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3b03      	subs	r3, #3
 8002432:	e000      	b.n	8002436 <NVIC_EncodePriority+0x32>
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	401a      	ands	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800244c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	43d9      	mvns	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	4313      	orrs	r3, r2
         );
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	@ 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002478:	d301      	bcc.n	800247e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800247a:	2301      	movs	r3, #1
 800247c:	e00f      	b.n	800249e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247e:	4a0a      	ldr	r2, [pc, #40]	@ (80024a8 <SysTick_Config+0x40>)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3b01      	subs	r3, #1
 8002484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002486:	210f      	movs	r1, #15
 8002488:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800248c:	f7ff ff90 	bl	80023b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002490:	4b05      	ldr	r3, [pc, #20]	@ (80024a8 <SysTick_Config+0x40>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002496:	4b04      	ldr	r3, [pc, #16]	@ (80024a8 <SysTick_Config+0x40>)
 8002498:	2207      	movs	r2, #7
 800249a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	e000e010 	.word	0xe000e010

080024ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ff49 	bl	800234c <__NVIC_SetPriorityGrouping>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b086      	sub	sp, #24
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	4603      	mov	r3, r0
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d4:	f7ff ff5e 	bl	8002394 <__NVIC_GetPriorityGrouping>
 80024d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	6978      	ldr	r0, [r7, #20]
 80024e0:	f7ff ff90 	bl	8002404 <NVIC_EncodePriority>
 80024e4:	4602      	mov	r2, r0
 80024e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff5f 	bl	80023b0 <__NVIC_SetPriority>
}
 80024f2:	bf00      	nop
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ffb0 	bl	8002468 <SysTick_Config>
 8002508:	4603      	mov	r3, r0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002514:	b480      	push	{r7}
 8002516:	b08b      	sub	sp, #44	@ 0x2c
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002522:	2300      	movs	r3, #0
 8002524:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002526:	e169      	b.n	80027fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002528:	2201      	movs	r2, #1
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69fa      	ldr	r2, [r7, #28]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	429a      	cmp	r2, r3
 8002542:	f040 8158 	bne.w	80027f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	4a9a      	ldr	r2, [pc, #616]	@ (80027b4 <HAL_GPIO_Init+0x2a0>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d05e      	beq.n	800260e <HAL_GPIO_Init+0xfa>
 8002550:	4a98      	ldr	r2, [pc, #608]	@ (80027b4 <HAL_GPIO_Init+0x2a0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d875      	bhi.n	8002642 <HAL_GPIO_Init+0x12e>
 8002556:	4a98      	ldr	r2, [pc, #608]	@ (80027b8 <HAL_GPIO_Init+0x2a4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d058      	beq.n	800260e <HAL_GPIO_Init+0xfa>
 800255c:	4a96      	ldr	r2, [pc, #600]	@ (80027b8 <HAL_GPIO_Init+0x2a4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d86f      	bhi.n	8002642 <HAL_GPIO_Init+0x12e>
 8002562:	4a96      	ldr	r2, [pc, #600]	@ (80027bc <HAL_GPIO_Init+0x2a8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d052      	beq.n	800260e <HAL_GPIO_Init+0xfa>
 8002568:	4a94      	ldr	r2, [pc, #592]	@ (80027bc <HAL_GPIO_Init+0x2a8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d869      	bhi.n	8002642 <HAL_GPIO_Init+0x12e>
 800256e:	4a94      	ldr	r2, [pc, #592]	@ (80027c0 <HAL_GPIO_Init+0x2ac>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d04c      	beq.n	800260e <HAL_GPIO_Init+0xfa>
 8002574:	4a92      	ldr	r2, [pc, #584]	@ (80027c0 <HAL_GPIO_Init+0x2ac>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d863      	bhi.n	8002642 <HAL_GPIO_Init+0x12e>
 800257a:	4a92      	ldr	r2, [pc, #584]	@ (80027c4 <HAL_GPIO_Init+0x2b0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d046      	beq.n	800260e <HAL_GPIO_Init+0xfa>
 8002580:	4a90      	ldr	r2, [pc, #576]	@ (80027c4 <HAL_GPIO_Init+0x2b0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d85d      	bhi.n	8002642 <HAL_GPIO_Init+0x12e>
 8002586:	2b12      	cmp	r3, #18
 8002588:	d82a      	bhi.n	80025e0 <HAL_GPIO_Init+0xcc>
 800258a:	2b12      	cmp	r3, #18
 800258c:	d859      	bhi.n	8002642 <HAL_GPIO_Init+0x12e>
 800258e:	a201      	add	r2, pc, #4	@ (adr r2, 8002594 <HAL_GPIO_Init+0x80>)
 8002590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002594:	0800260f 	.word	0x0800260f
 8002598:	080025e9 	.word	0x080025e9
 800259c:	080025fb 	.word	0x080025fb
 80025a0:	0800263d 	.word	0x0800263d
 80025a4:	08002643 	.word	0x08002643
 80025a8:	08002643 	.word	0x08002643
 80025ac:	08002643 	.word	0x08002643
 80025b0:	08002643 	.word	0x08002643
 80025b4:	08002643 	.word	0x08002643
 80025b8:	08002643 	.word	0x08002643
 80025bc:	08002643 	.word	0x08002643
 80025c0:	08002643 	.word	0x08002643
 80025c4:	08002643 	.word	0x08002643
 80025c8:	08002643 	.word	0x08002643
 80025cc:	08002643 	.word	0x08002643
 80025d0:	08002643 	.word	0x08002643
 80025d4:	08002643 	.word	0x08002643
 80025d8:	080025f1 	.word	0x080025f1
 80025dc:	08002605 	.word	0x08002605
 80025e0:	4a79      	ldr	r2, [pc, #484]	@ (80027c8 <HAL_GPIO_Init+0x2b4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025e6:	e02c      	b.n	8002642 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	623b      	str	r3, [r7, #32]
          break;
 80025ee:	e029      	b.n	8002644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	3304      	adds	r3, #4
 80025f6:	623b      	str	r3, [r7, #32]
          break;
 80025f8:	e024      	b.n	8002644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	3308      	adds	r3, #8
 8002600:	623b      	str	r3, [r7, #32]
          break;
 8002602:	e01f      	b.n	8002644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	330c      	adds	r3, #12
 800260a:	623b      	str	r3, [r7, #32]
          break;
 800260c:	e01a      	b.n	8002644 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d102      	bne.n	800261c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002616:	2304      	movs	r3, #4
 8002618:	623b      	str	r3, [r7, #32]
          break;
 800261a:	e013      	b.n	8002644 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d105      	bne.n	8002630 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002624:	2308      	movs	r3, #8
 8002626:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	611a      	str	r2, [r3, #16]
          break;
 800262e:	e009      	b.n	8002644 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002630:	2308      	movs	r3, #8
 8002632:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	615a      	str	r2, [r3, #20]
          break;
 800263a:	e003      	b.n	8002644 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800263c:	2300      	movs	r3, #0
 800263e:	623b      	str	r3, [r7, #32]
          break;
 8002640:	e000      	b.n	8002644 <HAL_GPIO_Init+0x130>
          break;
 8002642:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	2bff      	cmp	r3, #255	@ 0xff
 8002648:	d801      	bhi.n	800264e <HAL_GPIO_Init+0x13a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	e001      	b.n	8002652 <HAL_GPIO_Init+0x13e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3304      	adds	r3, #4
 8002652:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2bff      	cmp	r3, #255	@ 0xff
 8002658:	d802      	bhi.n	8002660 <HAL_GPIO_Init+0x14c>
 800265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	e002      	b.n	8002666 <HAL_GPIO_Init+0x152>
 8002660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002662:	3b08      	subs	r3, #8
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	210f      	movs	r1, #15
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	fa01 f303 	lsl.w	r3, r1, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	401a      	ands	r2, r3
 8002678:	6a39      	ldr	r1, [r7, #32]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	fa01 f303 	lsl.w	r3, r1, r3
 8002680:	431a      	orrs	r2, r3
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 80b1 	beq.w	80027f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002694:	4b4d      	ldr	r3, [pc, #308]	@ (80027cc <HAL_GPIO_Init+0x2b8>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	4a4c      	ldr	r2, [pc, #304]	@ (80027cc <HAL_GPIO_Init+0x2b8>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6193      	str	r3, [r2, #24]
 80026a0:	4b4a      	ldr	r3, [pc, #296]	@ (80027cc <HAL_GPIO_Init+0x2b8>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026ac:	4a48      	ldr	r2, [pc, #288]	@ (80027d0 <HAL_GPIO_Init+0x2bc>)
 80026ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b0:	089b      	lsrs	r3, r3, #2
 80026b2:	3302      	adds	r3, #2
 80026b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	220f      	movs	r2, #15
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	4013      	ands	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a40      	ldr	r2, [pc, #256]	@ (80027d4 <HAL_GPIO_Init+0x2c0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d013      	beq.n	8002700 <HAL_GPIO_Init+0x1ec>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a3f      	ldr	r2, [pc, #252]	@ (80027d8 <HAL_GPIO_Init+0x2c4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00d      	beq.n	80026fc <HAL_GPIO_Init+0x1e8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a3e      	ldr	r2, [pc, #248]	@ (80027dc <HAL_GPIO_Init+0x2c8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d007      	beq.n	80026f8 <HAL_GPIO_Init+0x1e4>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a3d      	ldr	r2, [pc, #244]	@ (80027e0 <HAL_GPIO_Init+0x2cc>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d101      	bne.n	80026f4 <HAL_GPIO_Init+0x1e0>
 80026f0:	2303      	movs	r3, #3
 80026f2:	e006      	b.n	8002702 <HAL_GPIO_Init+0x1ee>
 80026f4:	2304      	movs	r3, #4
 80026f6:	e004      	b.n	8002702 <HAL_GPIO_Init+0x1ee>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e002      	b.n	8002702 <HAL_GPIO_Init+0x1ee>
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <HAL_GPIO_Init+0x1ee>
 8002700:	2300      	movs	r3, #0
 8002702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002704:	f002 0203 	and.w	r2, r2, #3
 8002708:	0092      	lsls	r2, r2, #2
 800270a:	4093      	lsls	r3, r2
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002712:	492f      	ldr	r1, [pc, #188]	@ (80027d0 <HAL_GPIO_Init+0x2bc>)
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	3302      	adds	r3, #2
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d006      	beq.n	800273a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800272c:	4b2d      	ldr	r3, [pc, #180]	@ (80027e4 <HAL_GPIO_Init+0x2d0>)
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	492c      	ldr	r1, [pc, #176]	@ (80027e4 <HAL_GPIO_Init+0x2d0>)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	608b      	str	r3, [r1, #8]
 8002738:	e006      	b.n	8002748 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800273a:	4b2a      	ldr	r3, [pc, #168]	@ (80027e4 <HAL_GPIO_Init+0x2d0>)
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	43db      	mvns	r3, r3
 8002742:	4928      	ldr	r1, [pc, #160]	@ (80027e4 <HAL_GPIO_Init+0x2d0>)
 8002744:	4013      	ands	r3, r2
 8002746:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d006      	beq.n	8002762 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002754:	4b23      	ldr	r3, [pc, #140]	@ (80027e4 <HAL_GPIO_Init+0x2d0>)
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	4922      	ldr	r1, [pc, #136]	@ (80027e4 <HAL_GPIO_Init+0x2d0>)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	60cb      	str	r3, [r1, #12]
 8002760:	e006      	b.n	8002770 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002762:	4b20      	ldr	r3, [pc, #128]	@ (80027e4 <HAL_GPIO_Init+0x2d0>)
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	43db      	mvns	r3, r3
 800276a:	491e      	ldr	r1, [pc, #120]	@ (80027e4 <HAL_GPIO_Init+0x2d0>)
 800276c:	4013      	ands	r3, r2
 800276e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d006      	beq.n	800278a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800277c:	4b19      	ldr	r3, [pc, #100]	@ (80027e4 <HAL_GPIO_Init+0x2d0>)
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	4918      	ldr	r1, [pc, #96]	@ (80027e4 <HAL_GPIO_Init+0x2d0>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
 8002788:	e006      	b.n	8002798 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800278a:	4b16      	ldr	r3, [pc, #88]	@ (80027e4 <HAL_GPIO_Init+0x2d0>)
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	43db      	mvns	r3, r3
 8002792:	4914      	ldr	r1, [pc, #80]	@ (80027e4 <HAL_GPIO_Init+0x2d0>)
 8002794:	4013      	ands	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d021      	beq.n	80027e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027a4:	4b0f      	ldr	r3, [pc, #60]	@ (80027e4 <HAL_GPIO_Init+0x2d0>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	490e      	ldr	r1, [pc, #56]	@ (80027e4 <HAL_GPIO_Init+0x2d0>)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]
 80027b0:	e021      	b.n	80027f6 <HAL_GPIO_Init+0x2e2>
 80027b2:	bf00      	nop
 80027b4:	10320000 	.word	0x10320000
 80027b8:	10310000 	.word	0x10310000
 80027bc:	10220000 	.word	0x10220000
 80027c0:	10210000 	.word	0x10210000
 80027c4:	10120000 	.word	0x10120000
 80027c8:	10110000 	.word	0x10110000
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40010800 	.word	0x40010800
 80027d8:	40010c00 	.word	0x40010c00
 80027dc:	40011000 	.word	0x40011000
 80027e0:	40011400 	.word	0x40011400
 80027e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002818 <HAL_GPIO_Init+0x304>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	4909      	ldr	r1, [pc, #36]	@ (8002818 <HAL_GPIO_Init+0x304>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f8:	3301      	adds	r3, #1
 80027fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002802:	fa22 f303 	lsr.w	r3, r2, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	f47f ae8e 	bne.w	8002528 <HAL_GPIO_Init+0x14>
  }
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	372c      	adds	r7, #44	@ 0x2c
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr
 8002818:	40010400 	.word	0x40010400

0800281c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	887b      	ldrh	r3, [r7, #2]
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
 8002838:	e001      	b.n	800283e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800283e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	460b      	mov	r3, r1
 8002854:	807b      	strh	r3, [r7, #2]
 8002856:	4613      	mov	r3, r2
 8002858:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800285a:	787b      	ldrb	r3, [r7, #1]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002860:	887a      	ldrh	r2, [r7, #2]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002866:	e003      	b.n	8002870 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002868:	887b      	ldrh	r3, [r7, #2]
 800286a:	041a      	lsls	r2, r3, #16
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	611a      	str	r2, [r3, #16]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
	...

0800287c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e12b      	b.n	8002ae6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fe fc9e 	bl	80011e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2224      	movs	r2, #36	@ 0x24
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0201 	bic.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028e0:	f001 fbfc 	bl	80040dc <HAL_RCC_GetPCLK1Freq>
 80028e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4a81      	ldr	r2, [pc, #516]	@ (8002af0 <HAL_I2C_Init+0x274>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d807      	bhi.n	8002900 <HAL_I2C_Init+0x84>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4a80      	ldr	r2, [pc, #512]	@ (8002af4 <HAL_I2C_Init+0x278>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	bf94      	ite	ls
 80028f8:	2301      	movls	r3, #1
 80028fa:	2300      	movhi	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	e006      	b.n	800290e <HAL_I2C_Init+0x92>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a7d      	ldr	r2, [pc, #500]	@ (8002af8 <HAL_I2C_Init+0x27c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	bf94      	ite	ls
 8002908:	2301      	movls	r3, #1
 800290a:	2300      	movhi	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e0e7      	b.n	8002ae6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4a78      	ldr	r2, [pc, #480]	@ (8002afc <HAL_I2C_Init+0x280>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	0c9b      	lsrs	r3, r3, #18
 8002920:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a6a      	ldr	r2, [pc, #424]	@ (8002af0 <HAL_I2C_Init+0x274>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d802      	bhi.n	8002950 <HAL_I2C_Init+0xd4>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	3301      	adds	r3, #1
 800294e:	e009      	b.n	8002964 <HAL_I2C_Init+0xe8>
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	4a69      	ldr	r2, [pc, #420]	@ (8002b00 <HAL_I2C_Init+0x284>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	099b      	lsrs	r3, r3, #6
 8002962:	3301      	adds	r3, #1
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	430b      	orrs	r3, r1
 800296a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002976:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	495c      	ldr	r1, [pc, #368]	@ (8002af0 <HAL_I2C_Init+0x274>)
 8002980:	428b      	cmp	r3, r1
 8002982:	d819      	bhi.n	80029b8 <HAL_I2C_Init+0x13c>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1e59      	subs	r1, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002992:	1c59      	adds	r1, r3, #1
 8002994:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002998:	400b      	ands	r3, r1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_I2C_Init+0x138>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1e59      	subs	r1, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ac:	3301      	adds	r3, #1
 80029ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b2:	e051      	b.n	8002a58 <HAL_I2C_Init+0x1dc>
 80029b4:	2304      	movs	r3, #4
 80029b6:	e04f      	b.n	8002a58 <HAL_I2C_Init+0x1dc>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d111      	bne.n	80029e4 <HAL_I2C_Init+0x168>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1e58      	subs	r0, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	440b      	add	r3, r1
 80029ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d2:	3301      	adds	r3, #1
 80029d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e012      	b.n	8002a0a <HAL_I2C_Init+0x18e>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1e58      	subs	r0, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	0099      	lsls	r1, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bf0c      	ite	eq
 8002a04:	2301      	moveq	r3, #1
 8002a06:	2300      	movne	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_Init+0x196>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e022      	b.n	8002a58 <HAL_I2C_Init+0x1dc>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10e      	bne.n	8002a38 <HAL_I2C_Init+0x1bc>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1e58      	subs	r0, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6859      	ldr	r1, [r3, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	440b      	add	r3, r1
 8002a28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a36:	e00f      	b.n	8002a58 <HAL_I2C_Init+0x1dc>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1e58      	subs	r0, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	0099      	lsls	r1, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	6809      	ldr	r1, [r1, #0]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69da      	ldr	r2, [r3, #28]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6911      	ldr	r1, [r2, #16]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68d2      	ldr	r2, [r2, #12]
 8002a92:	4311      	orrs	r1, r2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	000186a0 	.word	0x000186a0
 8002af4:	001e847f 	.word	0x001e847f
 8002af8:	003d08ff 	.word	0x003d08ff
 8002afc:	431bde83 	.word	0x431bde83
 8002b00:	10624dd3 	.word	0x10624dd3

08002b04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	4608      	mov	r0, r1
 8002b0e:	4611      	mov	r1, r2
 8002b10:	461a      	mov	r2, r3
 8002b12:	4603      	mov	r3, r0
 8002b14:	817b      	strh	r3, [r7, #10]
 8002b16:	460b      	mov	r3, r1
 8002b18:	813b      	strh	r3, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b1e:	f7fe ff0d 	bl	800193c <HAL_GetTick>
 8002b22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	f040 80d9 	bne.w	8002ce4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	2319      	movs	r3, #25
 8002b38:	2201      	movs	r2, #1
 8002b3a:	496d      	ldr	r1, [pc, #436]	@ (8002cf0 <HAL_I2C_Mem_Write+0x1ec>)
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 fccd 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e0cc      	b.n	8002ce6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_I2C_Mem_Write+0x56>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e0c5      	b.n	8002ce6 <HAL_I2C_Mem_Write+0x1e2>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d007      	beq.n	8002b80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2221      	movs	r2, #33	@ 0x21
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2240      	movs	r2, #64	@ 0x40
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a3a      	ldr	r2, [r7, #32]
 8002baa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4a4d      	ldr	r2, [pc, #308]	@ (8002cf4 <HAL_I2C_Mem_Write+0x1f0>)
 8002bc0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bc2:	88f8      	ldrh	r0, [r7, #6]
 8002bc4:	893a      	ldrh	r2, [r7, #8]
 8002bc6:	8979      	ldrh	r1, [r7, #10]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	9301      	str	r3, [sp, #4]
 8002bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 fb04 	bl	80031e0 <I2C_RequestMemoryWrite>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d052      	beq.n	8002c84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e081      	b.n	8002ce6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 fd92 	bl	8003710 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00d      	beq.n	8002c0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d107      	bne.n	8002c0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e06b      	b.n	8002ce6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c12:	781a      	ldrb	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d11b      	bne.n	8002c84 <HAL_I2C_Mem_Write+0x180>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d017      	beq.n	8002c84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1aa      	bne.n	8002be2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 fd85 	bl	80037a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00d      	beq.n	8002cb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d107      	bne.n	8002cb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e016      	b.n	8002ce6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	e000      	b.n	8002ce6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ce4:	2302      	movs	r3, #2
  }
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	00100002 	.word	0x00100002
 8002cf4:	ffff0000 	.word	0xffff0000

08002cf8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08c      	sub	sp, #48	@ 0x30
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	4608      	mov	r0, r1
 8002d02:	4611      	mov	r1, r2
 8002d04:	461a      	mov	r2, r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	817b      	strh	r3, [r7, #10]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	813b      	strh	r3, [r7, #8]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d16:	f7fe fe11 	bl	800193c <HAL_GetTick>
 8002d1a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	f040 8250 	bne.w	80031ca <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	2319      	movs	r3, #25
 8002d30:	2201      	movs	r2, #1
 8002d32:	4982      	ldr	r1, [pc, #520]	@ (8002f3c <HAL_I2C_Mem_Read+0x244>)
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 fbd1 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002d40:	2302      	movs	r3, #2
 8002d42:	e243      	b.n	80031cc <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2C_Mem_Read+0x5a>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e23c      	b.n	80031cc <HAL_I2C_Mem_Read+0x4d4>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d007      	beq.n	8002d78 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2222      	movs	r2, #34	@ 0x22
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2240      	movs	r2, #64	@ 0x40
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002da2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a62      	ldr	r2, [pc, #392]	@ (8002f40 <HAL_I2C_Mem_Read+0x248>)
 8002db8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dba:	88f8      	ldrh	r0, [r7, #6]
 8002dbc:	893a      	ldrh	r2, [r7, #8]
 8002dbe:	8979      	ldrh	r1, [r7, #10]
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	4603      	mov	r3, r0
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 fa9e 	bl	800330c <I2C_RequestMemoryRead>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e1f8      	b.n	80031cc <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d113      	bne.n	8002e0a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	e1cc      	b.n	80031a4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d11e      	bne.n	8002e50 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e22:	b672      	cpsid	i
}
 8002e24:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e4c:	b662      	cpsie	i
}
 8002e4e:	e035      	b.n	8002ebc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d11e      	bne.n	8002e96 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e68:	b672      	cpsid	i
}
 8002e6a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e92:	b662      	cpsie	i
}
 8002e94:	e012      	b.n	8002ebc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ea4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002ebc:	e172      	b.n	80031a4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	f200 811f 	bhi.w	8003106 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d123      	bne.n	8002f18 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fcab 	bl	8003830 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e173      	b.n	80031cc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f16:	e145      	b.n	80031a4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d152      	bne.n	8002fc6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f26:	2200      	movs	r2, #0
 8002f28:	4906      	ldr	r1, [pc, #24]	@ (8002f44 <HAL_I2C_Mem_Read+0x24c>)
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fad6 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e148      	b.n	80031cc <HAL_I2C_Mem_Read+0x4d4>
 8002f3a:	bf00      	nop
 8002f3c:	00100002 	.word	0x00100002
 8002f40:	ffff0000 	.word	0xffff0000
 8002f44:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f48:	b672      	cpsid	i
}
 8002f4a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f8e:	b662      	cpsie	i
}
 8002f90:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fc4:	e0ee      	b.n	80031a4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fcc:	2200      	movs	r2, #0
 8002fce:	4981      	ldr	r1, [pc, #516]	@ (80031d4 <HAL_I2C_Mem_Read+0x4dc>)
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fa83 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0f5      	b.n	80031cc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ff0:	b672      	cpsid	i
}
 8002ff2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003026:	4b6c      	ldr	r3, [pc, #432]	@ (80031d8 <HAL_I2C_Mem_Read+0x4e0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	08db      	lsrs	r3, r3, #3
 800302c:	4a6b      	ldr	r2, [pc, #428]	@ (80031dc <HAL_I2C_Mem_Read+0x4e4>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	0a1a      	lsrs	r2, r3, #8
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	00da      	lsls	r2, r3, #3
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	3b01      	subs	r3, #1
 8003044:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d118      	bne.n	800307e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	f043 0220 	orr.w	r2, r3, #32
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800306e:	b662      	cpsie	i
}
 8003070:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e0a6      	b.n	80031cc <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b04      	cmp	r3, #4
 800308a:	d1d9      	bne.n	8003040 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800309a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691a      	ldr	r2, [r3, #16]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80030ce:	b662      	cpsie	i
}
 80030d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003104:	e04e      	b.n	80031a4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003108:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 fb90 	bl	8003830 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e058      	b.n	80031cc <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b04      	cmp	r3, #4
 8003158:	d124      	bne.n	80031a4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800315e:	2b03      	cmp	r3, #3
 8003160:	d107      	bne.n	8003172 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003170:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800319a:	b29b      	uxth	r3, r3
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f47f ae88 	bne.w	8002ebe <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	e000      	b.n	80031cc <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80031ca:	2302      	movs	r3, #2
  }
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3728      	adds	r7, #40	@ 0x28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	00010004 	.word	0x00010004
 80031d8:	20000000 	.word	0x20000000
 80031dc:	14f8b589 	.word	0x14f8b589

080031e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	4608      	mov	r0, r1
 80031ea:	4611      	mov	r1, r2
 80031ec:	461a      	mov	r2, r3
 80031ee:	4603      	mov	r3, r0
 80031f0:	817b      	strh	r3, [r7, #10]
 80031f2:	460b      	mov	r3, r1
 80031f4:	813b      	strh	r3, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003208:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	2200      	movs	r2, #0
 8003212:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f960 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00d      	beq.n	800323e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003230:	d103      	bne.n	800323a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003238:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e05f      	b.n	80032fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800323e:	897b      	ldrh	r3, [r7, #10]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800324c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	6a3a      	ldr	r2, [r7, #32]
 8003252:	492d      	ldr	r1, [pc, #180]	@ (8003308 <I2C_RequestMemoryWrite+0x128>)
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f9bb 	bl	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e04c      	b.n	80032fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800327a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800327c:	6a39      	ldr	r1, [r7, #32]
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 fa46 	bl	8003710 <I2C_WaitOnTXEFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00d      	beq.n	80032a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	2b04      	cmp	r3, #4
 8003290:	d107      	bne.n	80032a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e02b      	b.n	80032fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d105      	bne.n	80032b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032ac:	893b      	ldrh	r3, [r7, #8]
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	611a      	str	r2, [r3, #16]
 80032b6:	e021      	b.n	80032fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032b8:	893b      	ldrh	r3, [r7, #8]
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	b29b      	uxth	r3, r3
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c8:	6a39      	ldr	r1, [r7, #32]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fa20 	bl	8003710 <I2C_WaitOnTXEFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d107      	bne.n	80032ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e005      	b.n	80032fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032f2:	893b      	ldrh	r3, [r7, #8]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	00010002 	.word	0x00010002

0800330c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	4608      	mov	r0, r1
 8003316:	4611      	mov	r1, r2
 8003318:	461a      	mov	r2, r3
 800331a:	4603      	mov	r3, r0
 800331c:	817b      	strh	r3, [r7, #10]
 800331e:	460b      	mov	r3, r1
 8003320:	813b      	strh	r3, [r7, #8]
 8003322:	4613      	mov	r3, r2
 8003324:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003334:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003344:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	2200      	movs	r2, #0
 800334e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f8c2 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00d      	beq.n	800337a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003368:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800336c:	d103      	bne.n	8003376 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003374:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e0aa      	b.n	80034d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800337a:	897b      	ldrh	r3, [r7, #10]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003388:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800338a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338c:	6a3a      	ldr	r2, [r7, #32]
 800338e:	4952      	ldr	r1, [pc, #328]	@ (80034d8 <I2C_RequestMemoryRead+0x1cc>)
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f91d 	bl	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e097      	b.n	80034d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b8:	6a39      	ldr	r1, [r7, #32]
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f9a8 	bl	8003710 <I2C_WaitOnTXEFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00d      	beq.n	80033e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d107      	bne.n	80033de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e076      	b.n	80034d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033e2:	88fb      	ldrh	r3, [r7, #6]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d105      	bne.n	80033f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033e8:	893b      	ldrh	r3, [r7, #8]
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	611a      	str	r2, [r3, #16]
 80033f2:	e021      	b.n	8003438 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033f4:	893b      	ldrh	r3, [r7, #8]
 80033f6:	0a1b      	lsrs	r3, r3, #8
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003404:	6a39      	ldr	r1, [r7, #32]
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 f982 	bl	8003710 <I2C_WaitOnTXEFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00d      	beq.n	800342e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	2b04      	cmp	r3, #4
 8003418:	d107      	bne.n	800342a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003428:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e050      	b.n	80034d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800342e:	893b      	ldrh	r3, [r7, #8]
 8003430:	b2da      	uxtb	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800343a:	6a39      	ldr	r1, [r7, #32]
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f967 	bl	8003710 <I2C_WaitOnTXEFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00d      	beq.n	8003464 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	2b04      	cmp	r3, #4
 800344e:	d107      	bne.n	8003460 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800345e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e035      	b.n	80034d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003472:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	2200      	movs	r2, #0
 800347c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f82b 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00d      	beq.n	80034a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800349a:	d103      	bne.n	80034a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e013      	b.n	80034d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034a8:	897b      	ldrh	r3, [r7, #10]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ba:	6a3a      	ldr	r2, [r7, #32]
 80034bc:	4906      	ldr	r1, [pc, #24]	@ (80034d8 <I2C_RequestMemoryRead+0x1cc>)
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 f886 	bl	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	00010002 	.word	0x00010002

080034dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	4613      	mov	r3, r2
 80034ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ec:	e048      	b.n	8003580 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034f4:	d044      	beq.n	8003580 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f6:	f7fe fa21 	bl	800193c <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d302      	bcc.n	800350c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d139      	bne.n	8003580 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	0c1b      	lsrs	r3, r3, #16
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b01      	cmp	r3, #1
 8003514:	d10d      	bne.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	43da      	mvns	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	4013      	ands	r3, r2
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf0c      	ite	eq
 8003528:	2301      	moveq	r3, #1
 800352a:	2300      	movne	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	461a      	mov	r2, r3
 8003530:	e00c      	b.n	800354c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	43da      	mvns	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4013      	ands	r3, r2
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	429a      	cmp	r2, r3
 8003550:	d116      	bne.n	8003580 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	f043 0220 	orr.w	r2, r3, #32
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e023      	b.n	80035c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d10d      	bne.n	80035a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	43da      	mvns	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4013      	ands	r3, r2
 8003596:	b29b      	uxth	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	bf0c      	ite	eq
 800359c:	2301      	moveq	r3, #1
 800359e:	2300      	movne	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	461a      	mov	r2, r3
 80035a4:	e00c      	b.n	80035c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	43da      	mvns	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	4013      	ands	r3, r2
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf0c      	ite	eq
 80035b8:	2301      	moveq	r3, #1
 80035ba:	2300      	movne	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d093      	beq.n	80034ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035de:	e071      	b.n	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ee:	d123      	bne.n	8003638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003608:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003624:	f043 0204 	orr.w	r2, r3, #4
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e067      	b.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800363e:	d041      	beq.n	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003640:	f7fe f97c 	bl	800193c <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	429a      	cmp	r2, r3
 800364e:	d302      	bcc.n	8003656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d136      	bne.n	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	0c1b      	lsrs	r3, r3, #16
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b01      	cmp	r3, #1
 800365e:	d10c      	bne.n	800367a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	43da      	mvns	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4013      	ands	r3, r2
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	bf14      	ite	ne
 8003672:	2301      	movne	r3, #1
 8003674:	2300      	moveq	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	e00b      	b.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	43da      	mvns	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	4013      	ands	r3, r2
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	bf14      	ite	ne
 800368c:	2301      	movne	r3, #1
 800368e:	2300      	moveq	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d016      	beq.n	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	f043 0220 	orr.w	r2, r3, #32
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e021      	b.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	0c1b      	lsrs	r3, r3, #16
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d10c      	bne.n	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	43da      	mvns	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4013      	ands	r3, r2
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf14      	ite	ne
 80036e0:	2301      	movne	r3, #1
 80036e2:	2300      	moveq	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	e00b      	b.n	8003700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	43da      	mvns	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4013      	ands	r3, r2
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	bf14      	ite	ne
 80036fa:	2301      	movne	r3, #1
 80036fc:	2300      	moveq	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	f47f af6d 	bne.w	80035e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800371c:	e034      	b.n	8003788 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f8e3 	bl	80038ea <I2C_IsAcknowledgeFailed>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e034      	b.n	8003798 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003734:	d028      	beq.n	8003788 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003736:	f7fe f901 	bl	800193c <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	429a      	cmp	r2, r3
 8003744:	d302      	bcc.n	800374c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d11d      	bne.n	8003788 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003756:	2b80      	cmp	r3, #128	@ 0x80
 8003758:	d016      	beq.n	8003788 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e007      	b.n	8003798 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003792:	2b80      	cmp	r3, #128	@ 0x80
 8003794:	d1c3      	bne.n	800371e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037ac:	e034      	b.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f89b 	bl	80038ea <I2C_IsAcknowledgeFailed>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e034      	b.n	8003828 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037c4:	d028      	beq.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c6:	f7fe f8b9 	bl	800193c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d302      	bcc.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d11d      	bne.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d016      	beq.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003804:	f043 0220 	orr.w	r2, r3, #32
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e007      	b.n	8003828 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b04      	cmp	r3, #4
 8003824:	d1c3      	bne.n	80037ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800383c:	e049      	b.n	80038d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	2b10      	cmp	r3, #16
 800384a:	d119      	bne.n	8003880 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0210 	mvn.w	r2, #16
 8003854:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e030      	b.n	80038e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003880:	f7fe f85c 	bl	800193c <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	429a      	cmp	r2, r3
 800388e:	d302      	bcc.n	8003896 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d11d      	bne.n	80038d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a0:	2b40      	cmp	r3, #64	@ 0x40
 80038a2:	d016      	beq.n	80038d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	f043 0220 	orr.w	r2, r3, #32
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e007      	b.n	80038e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038dc:	2b40      	cmp	r3, #64	@ 0x40
 80038de:	d1ae      	bne.n	800383e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003900:	d11b      	bne.n	800393a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800390a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	f043 0204 	orr.w	r2, r3, #4
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr
	...

08003948 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e272      	b.n	8003e40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8087 	beq.w	8003a76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003968:	4b92      	ldr	r3, [pc, #584]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 030c 	and.w	r3, r3, #12
 8003970:	2b04      	cmp	r3, #4
 8003972:	d00c      	beq.n	800398e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003974:	4b8f      	ldr	r3, [pc, #572]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f003 030c 	and.w	r3, r3, #12
 800397c:	2b08      	cmp	r3, #8
 800397e:	d112      	bne.n	80039a6 <HAL_RCC_OscConfig+0x5e>
 8003980:	4b8c      	ldr	r3, [pc, #560]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800398c:	d10b      	bne.n	80039a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800398e:	4b89      	ldr	r3, [pc, #548]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d06c      	beq.n	8003a74 <HAL_RCC_OscConfig+0x12c>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d168      	bne.n	8003a74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e24c      	b.n	8003e40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039ae:	d106      	bne.n	80039be <HAL_RCC_OscConfig+0x76>
 80039b0:	4b80      	ldr	r3, [pc, #512]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a7f      	ldr	r2, [pc, #508]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 80039b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	e02e      	b.n	8003a1c <HAL_RCC_OscConfig+0xd4>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x98>
 80039c6:	4b7b      	ldr	r3, [pc, #492]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a7a      	ldr	r2, [pc, #488]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 80039cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	4b78      	ldr	r3, [pc, #480]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a77      	ldr	r2, [pc, #476]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 80039d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e01d      	b.n	8003a1c <HAL_RCC_OscConfig+0xd4>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCC_OscConfig+0xbc>
 80039ea:	4b72      	ldr	r3, [pc, #456]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a71      	ldr	r2, [pc, #452]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 80039f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	4b6f      	ldr	r3, [pc, #444]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a6e      	ldr	r2, [pc, #440]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e00b      	b.n	8003a1c <HAL_RCC_OscConfig+0xd4>
 8003a04:	4b6b      	ldr	r3, [pc, #428]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a6a      	ldr	r2, [pc, #424]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 8003a0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	4b68      	ldr	r3, [pc, #416]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a67      	ldr	r2, [pc, #412]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 8003a16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d013      	beq.n	8003a4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7fd ff8a 	bl	800193c <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a2c:	f7fd ff86 	bl	800193c <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	@ 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e200      	b.n	8003e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3e:	4b5d      	ldr	r3, [pc, #372]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0xe4>
 8003a4a:	e014      	b.n	8003a76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4c:	f7fd ff76 	bl	800193c <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fd ff72 	bl	800193c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	@ 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e1ec      	b.n	8003e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a66:	4b53      	ldr	r3, [pc, #332]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0x10c>
 8003a72:	e000      	b.n	8003a76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d063      	beq.n	8003b4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a82:	4b4c      	ldr	r3, [pc, #304]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f003 030c 	and.w	r3, r3, #12
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00b      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a8e:	4b49      	ldr	r3, [pc, #292]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d11c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x18c>
 8003a9a:	4b46      	ldr	r3, [pc, #280]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d116      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa6:	4b43      	ldr	r3, [pc, #268]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <HAL_RCC_OscConfig+0x176>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d001      	beq.n	8003abe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e1c0      	b.n	8003e40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abe:	4b3d      	ldr	r3, [pc, #244]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4939      	ldr	r1, [pc, #228]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad2:	e03a      	b.n	8003b4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d020      	beq.n	8003b1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003adc:	4b36      	ldr	r3, [pc, #216]	@ (8003bb8 <HAL_RCC_OscConfig+0x270>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae2:	f7fd ff2b 	bl	800193c <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aea:	f7fd ff27 	bl	800193c <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e1a1      	b.n	8003e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afc:	4b2d      	ldr	r3, [pc, #180]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b08:	4b2a      	ldr	r3, [pc, #168]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	4927      	ldr	r1, [pc, #156]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	600b      	str	r3, [r1, #0]
 8003b1c:	e015      	b.n	8003b4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1e:	4b26      	ldr	r3, [pc, #152]	@ (8003bb8 <HAL_RCC_OscConfig+0x270>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7fd ff0a 	bl	800193c <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b2c:	f7fd ff06 	bl	800193c <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e180      	b.n	8003e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d03a      	beq.n	8003bcc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d019      	beq.n	8003b92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b5e:	4b17      	ldr	r3, [pc, #92]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003b60:	2201      	movs	r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b64:	f7fd feea 	bl	800193c <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b6c:	f7fd fee6 	bl	800193c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e160      	b.n	8003e40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb4 <HAL_RCC_OscConfig+0x26c>)
 8003b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b8a:	2001      	movs	r0, #1
 8003b8c:	f000 face 	bl	800412c <RCC_Delay>
 8003b90:	e01c      	b.n	8003bcc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b92:	4b0a      	ldr	r3, [pc, #40]	@ (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b98:	f7fd fed0 	bl	800193c <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b9e:	e00f      	b.n	8003bc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba0:	f7fd fecc 	bl	800193c <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d908      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e146      	b.n	8003e40 <HAL_RCC_OscConfig+0x4f8>
 8003bb2:	bf00      	nop
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	42420000 	.word	0x42420000
 8003bbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc0:	4b92      	ldr	r3, [pc, #584]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e9      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80a6 	beq.w	8003d26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bde:	4b8b      	ldr	r3, [pc, #556]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10d      	bne.n	8003c06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bea:	4b88      	ldr	r3, [pc, #544]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	4a87      	ldr	r2, [pc, #540]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf4:	61d3      	str	r3, [r2, #28]
 8003bf6:	4b85      	ldr	r3, [pc, #532]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c02:	2301      	movs	r3, #1
 8003c04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c06:	4b82      	ldr	r3, [pc, #520]	@ (8003e10 <HAL_RCC_OscConfig+0x4c8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d118      	bne.n	8003c44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c12:	4b7f      	ldr	r3, [pc, #508]	@ (8003e10 <HAL_RCC_OscConfig+0x4c8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a7e      	ldr	r2, [pc, #504]	@ (8003e10 <HAL_RCC_OscConfig+0x4c8>)
 8003c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1e:	f7fd fe8d 	bl	800193c <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c26:	f7fd fe89 	bl	800193c <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b64      	cmp	r3, #100	@ 0x64
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e103      	b.n	8003e40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c38:	4b75      	ldr	r3, [pc, #468]	@ (8003e10 <HAL_RCC_OscConfig+0x4c8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d106      	bne.n	8003c5a <HAL_RCC_OscConfig+0x312>
 8003c4c:	4b6f      	ldr	r3, [pc, #444]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	4a6e      	ldr	r2, [pc, #440]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	6213      	str	r3, [r2, #32]
 8003c58:	e02d      	b.n	8003cb6 <HAL_RCC_OscConfig+0x36e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10c      	bne.n	8003c7c <HAL_RCC_OscConfig+0x334>
 8003c62:	4b6a      	ldr	r3, [pc, #424]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	4a69      	ldr	r2, [pc, #420]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	6213      	str	r3, [r2, #32]
 8003c6e:	4b67      	ldr	r3, [pc, #412]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	4a66      	ldr	r2, [pc, #408]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003c74:	f023 0304 	bic.w	r3, r3, #4
 8003c78:	6213      	str	r3, [r2, #32]
 8003c7a:	e01c      	b.n	8003cb6 <HAL_RCC_OscConfig+0x36e>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	2b05      	cmp	r3, #5
 8003c82:	d10c      	bne.n	8003c9e <HAL_RCC_OscConfig+0x356>
 8003c84:	4b61      	ldr	r3, [pc, #388]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	4a60      	ldr	r2, [pc, #384]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003c8a:	f043 0304 	orr.w	r3, r3, #4
 8003c8e:	6213      	str	r3, [r2, #32]
 8003c90:	4b5e      	ldr	r3, [pc, #376]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	4a5d      	ldr	r2, [pc, #372]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	6213      	str	r3, [r2, #32]
 8003c9c:	e00b      	b.n	8003cb6 <HAL_RCC_OscConfig+0x36e>
 8003c9e:	4b5b      	ldr	r3, [pc, #364]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	4a5a      	ldr	r2, [pc, #360]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	6213      	str	r3, [r2, #32]
 8003caa:	4b58      	ldr	r3, [pc, #352]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	4a57      	ldr	r2, [pc, #348]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003cb0:	f023 0304 	bic.w	r3, r3, #4
 8003cb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d015      	beq.n	8003cea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cbe:	f7fd fe3d 	bl	800193c <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc4:	e00a      	b.n	8003cdc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc6:	f7fd fe39 	bl	800193c <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e0b1      	b.n	8003e40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cdc:	4b4b      	ldr	r3, [pc, #300]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0ee      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x37e>
 8003ce8:	e014      	b.n	8003d14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cea:	f7fd fe27 	bl	800193c <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf0:	e00a      	b.n	8003d08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf2:	f7fd fe23 	bl	800193c <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e09b      	b.n	8003e40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d08:	4b40      	ldr	r3, [pc, #256]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ee      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d105      	bne.n	8003d26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d1a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	4a3b      	ldr	r2, [pc, #236]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003d20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 8087 	beq.w	8003e3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d30:	4b36      	ldr	r3, [pc, #216]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 030c 	and.w	r3, r3, #12
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d061      	beq.n	8003e00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d146      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d44:	4b33      	ldr	r3, [pc, #204]	@ (8003e14 <HAL_RCC_OscConfig+0x4cc>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4a:	f7fd fdf7 	bl	800193c <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d52:	f7fd fdf3 	bl	800193c <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e06d      	b.n	8003e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d64:	4b29      	ldr	r3, [pc, #164]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f0      	bne.n	8003d52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d78:	d108      	bne.n	8003d8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d7a:	4b24      	ldr	r3, [pc, #144]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	4921      	ldr	r1, [pc, #132]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a19      	ldr	r1, [r3, #32]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	491b      	ldr	r1, [pc, #108]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e14 <HAL_RCC_OscConfig+0x4cc>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003daa:	f7fd fdc7 	bl	800193c <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db2:	f7fd fdc3 	bl	800193c <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e03d      	b.n	8003e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dc4:	4b11      	ldr	r3, [pc, #68]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x46a>
 8003dd0:	e035      	b.n	8003e3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd2:	4b10      	ldr	r3, [pc, #64]	@ (8003e14 <HAL_RCC_OscConfig+0x4cc>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd8:	f7fd fdb0 	bl	800193c <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de0:	f7fd fdac 	bl	800193c <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e026      	b.n	8003e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003df2:	4b06      	ldr	r3, [pc, #24]	@ (8003e0c <HAL_RCC_OscConfig+0x4c4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f0      	bne.n	8003de0 <HAL_RCC_OscConfig+0x498>
 8003dfe:	e01e      	b.n	8003e3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d107      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e019      	b.n	8003e40 <HAL_RCC_OscConfig+0x4f8>
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40007000 	.word	0x40007000
 8003e14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e18:	4b0b      	ldr	r3, [pc, #44]	@ (8003e48 <HAL_RCC_OscConfig+0x500>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d106      	bne.n	8003e3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d001      	beq.n	8003e3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40021000 	.word	0x40021000

08003e4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0d0      	b.n	8004002 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e60:	4b6a      	ldr	r3, [pc, #424]	@ (800400c <HAL_RCC_ClockConfig+0x1c0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d910      	bls.n	8003e90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6e:	4b67      	ldr	r3, [pc, #412]	@ (800400c <HAL_RCC_ClockConfig+0x1c0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 0207 	bic.w	r2, r3, #7
 8003e76:	4965      	ldr	r1, [pc, #404]	@ (800400c <HAL_RCC_ClockConfig+0x1c0>)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7e:	4b63      	ldr	r3, [pc, #396]	@ (800400c <HAL_RCC_ClockConfig+0x1c0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0b8      	b.n	8004002 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d020      	beq.n	8003ede <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea8:	4b59      	ldr	r3, [pc, #356]	@ (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	4a58      	ldr	r2, [pc, #352]	@ (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003eb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ec0:	4b53      	ldr	r3, [pc, #332]	@ (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	4a52      	ldr	r2, [pc, #328]	@ (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003eca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ecc:	4b50      	ldr	r3, [pc, #320]	@ (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	494d      	ldr	r1, [pc, #308]	@ (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d040      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d107      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef2:	4b47      	ldr	r3, [pc, #284]	@ (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d115      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e07f      	b.n	8004002 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d107      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0a:	4b41      	ldr	r3, [pc, #260]	@ (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e073      	b.n	8004002 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1a:	4b3d      	ldr	r3, [pc, #244]	@ (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e06b      	b.n	8004002 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f2a:	4b39      	ldr	r3, [pc, #228]	@ (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f023 0203 	bic.w	r2, r3, #3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	4936      	ldr	r1, [pc, #216]	@ (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f3c:	f7fd fcfe 	bl	800193c <HAL_GetTick>
 8003f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f42:	e00a      	b.n	8003f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f44:	f7fd fcfa 	bl	800193c <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e053      	b.n	8004002 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f003 020c 	and.w	r2, r3, #12
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d1eb      	bne.n	8003f44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f6c:	4b27      	ldr	r3, [pc, #156]	@ (800400c <HAL_RCC_ClockConfig+0x1c0>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d210      	bcs.n	8003f9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7a:	4b24      	ldr	r3, [pc, #144]	@ (800400c <HAL_RCC_ClockConfig+0x1c0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 0207 	bic.w	r2, r3, #7
 8003f82:	4922      	ldr	r1, [pc, #136]	@ (800400c <HAL_RCC_ClockConfig+0x1c0>)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b20      	ldr	r3, [pc, #128]	@ (800400c <HAL_RCC_ClockConfig+0x1c0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e032      	b.n	8004002 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa8:	4b19      	ldr	r3, [pc, #100]	@ (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4916      	ldr	r1, [pc, #88]	@ (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fc6:	4b12      	ldr	r3, [pc, #72]	@ (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	490e      	ldr	r1, [pc, #56]	@ (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fda:	f000 f821 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8004010 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	091b      	lsrs	r3, r3, #4
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	490a      	ldr	r1, [pc, #40]	@ (8004014 <HAL_RCC_ClockConfig+0x1c8>)
 8003fec:	5ccb      	ldrb	r3, [r1, r3]
 8003fee:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff2:	4a09      	ldr	r2, [pc, #36]	@ (8004018 <HAL_RCC_ClockConfig+0x1cc>)
 8003ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ff6:	4b09      	ldr	r3, [pc, #36]	@ (800401c <HAL_RCC_ClockConfig+0x1d0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fd fc5c 	bl	80018b8 <HAL_InitTick>

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40022000 	.word	0x40022000
 8004010:	40021000 	.word	0x40021000
 8004014:	0800801c 	.word	0x0800801c
 8004018:	20000000 	.word	0x20000000
 800401c:	20000004 	.word	0x20000004

08004020 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	2300      	movs	r3, #0
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	2300      	movs	r3, #0
 8004034:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800403a:	4b1e      	ldr	r3, [pc, #120]	@ (80040b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 030c 	and.w	r3, r3, #12
 8004046:	2b04      	cmp	r3, #4
 8004048:	d002      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0x30>
 800404a:	2b08      	cmp	r3, #8
 800404c:	d003      	beq.n	8004056 <HAL_RCC_GetSysClockFreq+0x36>
 800404e:	e027      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004050:	4b19      	ldr	r3, [pc, #100]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004052:	613b      	str	r3, [r7, #16]
      break;
 8004054:	e027      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	0c9b      	lsrs	r3, r3, #18
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	4a17      	ldr	r2, [pc, #92]	@ (80040bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004060:	5cd3      	ldrb	r3, [r2, r3]
 8004062:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d010      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800406e:	4b11      	ldr	r3, [pc, #68]	@ (80040b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	0c5b      	lsrs	r3, r3, #17
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	4a11      	ldr	r2, [pc, #68]	@ (80040c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800407a:	5cd3      	ldrb	r3, [r2, r3]
 800407c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a0d      	ldr	r2, [pc, #52]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004082:	fb03 f202 	mul.w	r2, r3, r2
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	e004      	b.n	800409a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a0c      	ldr	r2, [pc, #48]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004094:	fb02 f303 	mul.w	r3, r2, r3
 8004098:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	613b      	str	r3, [r7, #16]
      break;
 800409e:	e002      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040a0:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80040a2:	613b      	str	r3, [r7, #16]
      break;
 80040a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040a6:	693b      	ldr	r3, [r7, #16]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40021000 	.word	0x40021000
 80040b8:	007a1200 	.word	0x007a1200
 80040bc:	08008034 	.word	0x08008034
 80040c0:	08008044 	.word	0x08008044
 80040c4:	003d0900 	.word	0x003d0900

080040c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040cc:	4b02      	ldr	r3, [pc, #8]	@ (80040d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80040ce:	681b      	ldr	r3, [r3, #0]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr
 80040d8:	20000000 	.word	0x20000000

080040dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040e0:	f7ff fff2 	bl	80040c8 <HAL_RCC_GetHCLKFreq>
 80040e4:	4602      	mov	r2, r0
 80040e6:	4b05      	ldr	r3, [pc, #20]	@ (80040fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	0a1b      	lsrs	r3, r3, #8
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	4903      	ldr	r1, [pc, #12]	@ (8004100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040f2:	5ccb      	ldrb	r3, [r1, r3]
 80040f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40021000 	.word	0x40021000
 8004100:	0800802c 	.word	0x0800802c

08004104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004108:	f7ff ffde 	bl	80040c8 <HAL_RCC_GetHCLKFreq>
 800410c:	4602      	mov	r2, r0
 800410e:	4b05      	ldr	r3, [pc, #20]	@ (8004124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	0adb      	lsrs	r3, r3, #11
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	4903      	ldr	r1, [pc, #12]	@ (8004128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800411a:	5ccb      	ldrb	r3, [r1, r3]
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004120:	4618      	mov	r0, r3
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40021000 	.word	0x40021000
 8004128:	0800802c 	.word	0x0800802c

0800412c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004134:	4b0a      	ldr	r3, [pc, #40]	@ (8004160 <RCC_Delay+0x34>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a0a      	ldr	r2, [pc, #40]	@ (8004164 <RCC_Delay+0x38>)
 800413a:	fba2 2303 	umull	r2, r3, r2, r3
 800413e:	0a5b      	lsrs	r3, r3, #9
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	fb02 f303 	mul.w	r3, r2, r3
 8004146:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004148:	bf00      	nop
  }
  while (Delay --);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	1e5a      	subs	r2, r3, #1
 800414e:	60fa      	str	r2, [r7, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f9      	bne.n	8004148 <RCC_Delay+0x1c>
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr
 8004160:	20000000 	.word	0x20000000
 8004164:	10624dd3 	.word	0x10624dd3

08004168 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	613b      	str	r3, [r7, #16]
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d07d      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004184:	2300      	movs	r3, #0
 8004186:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004188:	4b4f      	ldr	r3, [pc, #316]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10d      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004194:	4b4c      	ldr	r3, [pc, #304]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	4a4b      	ldr	r2, [pc, #300]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800419e:	61d3      	str	r3, [r2, #28]
 80041a0:	4b49      	ldr	r3, [pc, #292]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ac:	2301      	movs	r3, #1
 80041ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b0:	4b46      	ldr	r3, [pc, #280]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d118      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041bc:	4b43      	ldr	r3, [pc, #268]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a42      	ldr	r2, [pc, #264]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041c8:	f7fd fbb8 	bl	800193c <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ce:	e008      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d0:	f7fd fbb4 	bl	800193c <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b64      	cmp	r3, #100	@ 0x64
 80041dc:	d901      	bls.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e06d      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e2:	4b3a      	ldr	r3, [pc, #232]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0f0      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041ee:	4b36      	ldr	r3, [pc, #216]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d02e      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	429a      	cmp	r2, r3
 800420a:	d027      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800420c:	4b2e      	ldr	r3, [pc, #184]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004214:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004216:	4b2e      	ldr	r3, [pc, #184]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004218:	2201      	movs	r2, #1
 800421a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800421c:	4b2c      	ldr	r3, [pc, #176]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004222:	4a29      	ldr	r2, [pc, #164]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d014      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004232:	f7fd fb83 	bl	800193c <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004238:	e00a      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800423a:	f7fd fb7f 	bl	800193c <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004248:	4293      	cmp	r3, r2
 800424a:	d901      	bls.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e036      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004250:	4b1d      	ldr	r3, [pc, #116]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0ee      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800425c:	4b1a      	ldr	r3, [pc, #104]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4917      	ldr	r1, [pc, #92]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800426a:	4313      	orrs	r3, r2
 800426c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800426e:	7dfb      	ldrb	r3, [r7, #23]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d105      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004274:	4b14      	ldr	r3, [pc, #80]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	4a13      	ldr	r2, [pc, #76]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800427a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800427e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d008      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800428c:	4b0e      	ldr	r3, [pc, #56]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	490b      	ldr	r1, [pc, #44]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800429a:	4313      	orrs	r3, r2
 800429c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0310 	and.w	r3, r3, #16
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d008      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042aa:	4b07      	ldr	r3, [pc, #28]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	4904      	ldr	r1, [pc, #16]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40021000 	.word	0x40021000
 80042cc:	40007000 	.word	0x40007000
 80042d0:	42420440 	.word	0x42420440

080042d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	2300      	movs	r3, #0
 80042e2:	61fb      	str	r3, [r7, #28]
 80042e4:	2300      	movs	r3, #0
 80042e6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	2300      	movs	r3, #0
 80042ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b10      	cmp	r3, #16
 80042f4:	d00a      	beq.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b10      	cmp	r3, #16
 80042fa:	f200 808a 	bhi.w	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d045      	beq.n	8004390 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d075      	beq.n	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800430a:	e082      	b.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800430c:	4b46      	ldr	r3, [pc, #280]	@ (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004312:	4b45      	ldr	r3, [pc, #276]	@ (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d07b      	beq.n	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	0c9b      	lsrs	r3, r3, #18
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	4a41      	ldr	r2, [pc, #260]	@ (800442c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004328:	5cd3      	ldrb	r3, [r2, r3]
 800432a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d015      	beq.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004336:	4b3c      	ldr	r3, [pc, #240]	@ (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	0c5b      	lsrs	r3, r3, #17
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	4a3b      	ldr	r2, [pc, #236]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004342:	5cd3      	ldrb	r3, [r2, r3]
 8004344:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00d      	beq.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004350:	4a38      	ldr	r2, [pc, #224]	@ (8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	fbb2 f2f3 	udiv	r2, r2, r3
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	61fb      	str	r3, [r7, #28]
 8004360:	e004      	b.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	4a34      	ldr	r2, [pc, #208]	@ (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004366:	fb02 f303 	mul.w	r3, r2, r3
 800436a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800436c:	4b2e      	ldr	r3, [pc, #184]	@ (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004374:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004378:	d102      	bne.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	61bb      	str	r3, [r7, #24]
      break;
 800437e:	e04a      	b.n	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4a2d      	ldr	r2, [pc, #180]	@ (800443c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	085b      	lsrs	r3, r3, #1
 800438c:	61bb      	str	r3, [r7, #24]
      break;
 800438e:	e042      	b.n	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004390:	4b25      	ldr	r3, [pc, #148]	@ (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800439c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043a0:	d108      	bne.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80043ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	e01f      	b.n	80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043be:	d109      	bne.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80043c0:	4b19      	ldr	r3, [pc, #100]	@ (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80043cc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80043d0:	61bb      	str	r3, [r7, #24]
 80043d2:	e00f      	b.n	80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043de:	d11c      	bne.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80043e0:	4b11      	ldr	r3, [pc, #68]	@ (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d016      	beq.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80043ec:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80043f0:	61bb      	str	r3, [r7, #24]
      break;
 80043f2:	e012      	b.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80043f4:	e011      	b.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80043f6:	f7ff fe85 	bl	8004104 <HAL_RCC_GetPCLK2Freq>
 80043fa:	4602      	mov	r2, r0
 80043fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	0b9b      	lsrs	r3, r3, #14
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	3301      	adds	r3, #1
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	fbb2 f3f3 	udiv	r3, r2, r3
 800440e:	61bb      	str	r3, [r7, #24]
      break;
 8004410:	e004      	b.n	800441c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004412:	bf00      	nop
 8004414:	e002      	b.n	800441c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004416:	bf00      	nop
 8004418:	e000      	b.n	800441c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800441a:	bf00      	nop
    }
  }
  return (frequency);
 800441c:	69bb      	ldr	r3, [r7, #24]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000
 800442c:	08008048 	.word	0x08008048
 8004430:	08008058 	.word	0x08008058
 8004434:	007a1200 	.word	0x007a1200
 8004438:	003d0900 	.word	0x003d0900
 800443c:	aaaaaaab 	.word	0xaaaaaaab

08004440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e042      	b.n	80044d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fd f9a0 	bl	80017ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2224      	movs	r2, #36	@ 0x24
 8004470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f971 	bl	800476c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695a      	ldr	r2, [r3, #20]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08a      	sub	sp, #40	@ 0x28
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	4613      	mov	r3, r2
 80044ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d175      	bne.n	80045ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <HAL_UART_Transmit+0x2c>
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e06e      	b.n	80045ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2221      	movs	r2, #33	@ 0x21
 800451a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800451e:	f7fd fa0d 	bl	800193c <HAL_GetTick>
 8004522:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	88fa      	ldrh	r2, [r7, #6]
 8004528:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	88fa      	ldrh	r2, [r7, #6]
 800452e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004538:	d108      	bne.n	800454c <HAL_UART_Transmit+0x6c>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d104      	bne.n	800454c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	61bb      	str	r3, [r7, #24]
 800454a:	e003      	b.n	8004554 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004550:	2300      	movs	r3, #0
 8004552:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004554:	e02e      	b.n	80045b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2200      	movs	r2, #0
 800455e:	2180      	movs	r1, #128	@ 0x80
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 f848 	bl	80045f6 <UART_WaitOnFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e03a      	b.n	80045ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10b      	bne.n	8004596 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800458c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	3302      	adds	r3, #2
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	e007      	b.n	80045a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	781a      	ldrb	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	3301      	adds	r3, #1
 80045a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1cb      	bne.n	8004556 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2200      	movs	r2, #0
 80045c6:	2140      	movs	r1, #64	@ 0x40
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 f814 	bl	80045f6 <UART_WaitOnFlagUntilTimeout>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e006      	b.n	80045ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e000      	b.n	80045ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80045ec:	2302      	movs	r3, #2
  }
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3720      	adds	r7, #32
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b086      	sub	sp, #24
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	603b      	str	r3, [r7, #0]
 8004602:	4613      	mov	r3, r2
 8004604:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004606:	e03b      	b.n	8004680 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800460e:	d037      	beq.n	8004680 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004610:	f7fd f994 	bl	800193c <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	6a3a      	ldr	r2, [r7, #32]
 800461c:	429a      	cmp	r2, r3
 800461e:	d302      	bcc.n	8004626 <UART_WaitOnFlagUntilTimeout+0x30>
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e03a      	b.n	80046a0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d023      	beq.n	8004680 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b80      	cmp	r3, #128	@ 0x80
 800463c:	d020      	beq.n	8004680 <UART_WaitOnFlagUntilTimeout+0x8a>
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b40      	cmp	r3, #64	@ 0x40
 8004642:	d01d      	beq.n	8004680 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b08      	cmp	r3, #8
 8004650:	d116      	bne.n	8004680 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f81d 	bl	80046a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2208      	movs	r2, #8
 8004672:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e00f      	b.n	80046a0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	4013      	ands	r3, r2
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	429a      	cmp	r2, r3
 800468e:	bf0c      	ite	eq
 8004690:	2301      	moveq	r3, #1
 8004692:	2300      	movne	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	461a      	mov	r2, r3
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	429a      	cmp	r2, r3
 800469c:	d0b4      	beq.n	8004608 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b095      	sub	sp, #84	@ 0x54
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	330c      	adds	r3, #12
 80046b6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ba:	e853 3f00 	ldrex	r3, [r3]
 80046be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	330c      	adds	r3, #12
 80046ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80046d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046d8:	e841 2300 	strex	r3, r2, [r1]
 80046dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1e5      	bne.n	80046b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3314      	adds	r3, #20
 80046ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	e853 3f00 	ldrex	r3, [r3]
 80046f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f023 0301 	bic.w	r3, r3, #1
 80046fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3314      	adds	r3, #20
 8004702:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004704:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004706:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800470a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800470c:	e841 2300 	strex	r3, r2, [r1]
 8004710:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e5      	bne.n	80046e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471c:	2b01      	cmp	r3, #1
 800471e:	d119      	bne.n	8004754 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	330c      	adds	r3, #12
 8004726:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	e853 3f00 	ldrex	r3, [r3]
 800472e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f023 0310 	bic.w	r3, r3, #16
 8004736:	647b      	str	r3, [r7, #68]	@ 0x44
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	330c      	adds	r3, #12
 800473e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004740:	61ba      	str	r2, [r7, #24]
 8004742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004744:	6979      	ldr	r1, [r7, #20]
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	e841 2300 	strex	r3, r2, [r1]
 800474c:	613b      	str	r3, [r7, #16]
   return(result);
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e5      	bne.n	8004720 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004762:	bf00      	nop
 8004764:	3754      	adds	r7, #84	@ 0x54
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr

0800476c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80047a6:	f023 030c 	bic.w	r3, r3, #12
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6812      	ldr	r2, [r2, #0]
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	430b      	orrs	r3, r1
 80047b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699a      	ldr	r2, [r3, #24]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004880 <UART_SetConfig+0x114>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d103      	bne.n	80047dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047d4:	f7ff fc96 	bl	8004104 <HAL_RCC_GetPCLK2Freq>
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	e002      	b.n	80047e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047dc:	f7ff fc7e 	bl	80040dc <HAL_RCC_GetPCLK1Freq>
 80047e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	009a      	lsls	r2, r3, #2
 80047ec:	441a      	add	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f8:	4a22      	ldr	r2, [pc, #136]	@ (8004884 <UART_SetConfig+0x118>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	0119      	lsls	r1, r3, #4
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	009a      	lsls	r2, r3, #2
 800480c:	441a      	add	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	fbb2 f2f3 	udiv	r2, r2, r3
 8004818:	4b1a      	ldr	r3, [pc, #104]	@ (8004884 <UART_SetConfig+0x118>)
 800481a:	fba3 0302 	umull	r0, r3, r3, r2
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	2064      	movs	r0, #100	@ 0x64
 8004822:	fb00 f303 	mul.w	r3, r0, r3
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	3332      	adds	r3, #50	@ 0x32
 800482c:	4a15      	ldr	r2, [pc, #84]	@ (8004884 <UART_SetConfig+0x118>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004838:	4419      	add	r1, r3
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	009a      	lsls	r2, r3, #2
 8004844:	441a      	add	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004850:	4b0c      	ldr	r3, [pc, #48]	@ (8004884 <UART_SetConfig+0x118>)
 8004852:	fba3 0302 	umull	r0, r3, r3, r2
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	2064      	movs	r0, #100	@ 0x64
 800485a:	fb00 f303 	mul.w	r3, r0, r3
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	3332      	adds	r3, #50	@ 0x32
 8004864:	4a07      	ldr	r2, [pc, #28]	@ (8004884 <UART_SetConfig+0x118>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	f003 020f 	and.w	r2, r3, #15
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	440a      	add	r2, r1
 8004876:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004878:	bf00      	nop
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40013800 	.word	0x40013800
 8004884:	51eb851f 	.word	0x51eb851f

08004888 <__cvt>:
 8004888:	2b00      	cmp	r3, #0
 800488a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800488e:	461d      	mov	r5, r3
 8004890:	bfbb      	ittet	lt
 8004892:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004896:	461d      	movlt	r5, r3
 8004898:	2300      	movge	r3, #0
 800489a:	232d      	movlt	r3, #45	@ 0x2d
 800489c:	b088      	sub	sp, #32
 800489e:	4614      	mov	r4, r2
 80048a0:	bfb8      	it	lt
 80048a2:	4614      	movlt	r4, r2
 80048a4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80048a6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80048a8:	7013      	strb	r3, [r2, #0]
 80048aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80048ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80048b0:	f023 0820 	bic.w	r8, r3, #32
 80048b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80048b8:	d005      	beq.n	80048c6 <__cvt+0x3e>
 80048ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80048be:	d100      	bne.n	80048c2 <__cvt+0x3a>
 80048c0:	3601      	adds	r6, #1
 80048c2:	2302      	movs	r3, #2
 80048c4:	e000      	b.n	80048c8 <__cvt+0x40>
 80048c6:	2303      	movs	r3, #3
 80048c8:	aa07      	add	r2, sp, #28
 80048ca:	9204      	str	r2, [sp, #16]
 80048cc:	aa06      	add	r2, sp, #24
 80048ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80048d2:	e9cd 3600 	strd	r3, r6, [sp]
 80048d6:	4622      	mov	r2, r4
 80048d8:	462b      	mov	r3, r5
 80048da:	f000 fe61 	bl	80055a0 <_dtoa_r>
 80048de:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80048e2:	4607      	mov	r7, r0
 80048e4:	d119      	bne.n	800491a <__cvt+0x92>
 80048e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80048e8:	07db      	lsls	r3, r3, #31
 80048ea:	d50e      	bpl.n	800490a <__cvt+0x82>
 80048ec:	eb00 0906 	add.w	r9, r0, r6
 80048f0:	2200      	movs	r2, #0
 80048f2:	2300      	movs	r3, #0
 80048f4:	4620      	mov	r0, r4
 80048f6:	4629      	mov	r1, r5
 80048f8:	f7fc f856 	bl	80009a8 <__aeabi_dcmpeq>
 80048fc:	b108      	cbz	r0, 8004902 <__cvt+0x7a>
 80048fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8004902:	2230      	movs	r2, #48	@ 0x30
 8004904:	9b07      	ldr	r3, [sp, #28]
 8004906:	454b      	cmp	r3, r9
 8004908:	d31e      	bcc.n	8004948 <__cvt+0xc0>
 800490a:	4638      	mov	r0, r7
 800490c:	9b07      	ldr	r3, [sp, #28]
 800490e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004910:	1bdb      	subs	r3, r3, r7
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	b008      	add	sp, #32
 8004916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800491a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800491e:	eb00 0906 	add.w	r9, r0, r6
 8004922:	d1e5      	bne.n	80048f0 <__cvt+0x68>
 8004924:	7803      	ldrb	r3, [r0, #0]
 8004926:	2b30      	cmp	r3, #48	@ 0x30
 8004928:	d10a      	bne.n	8004940 <__cvt+0xb8>
 800492a:	2200      	movs	r2, #0
 800492c:	2300      	movs	r3, #0
 800492e:	4620      	mov	r0, r4
 8004930:	4629      	mov	r1, r5
 8004932:	f7fc f839 	bl	80009a8 <__aeabi_dcmpeq>
 8004936:	b918      	cbnz	r0, 8004940 <__cvt+0xb8>
 8004938:	f1c6 0601 	rsb	r6, r6, #1
 800493c:	f8ca 6000 	str.w	r6, [sl]
 8004940:	f8da 3000 	ldr.w	r3, [sl]
 8004944:	4499      	add	r9, r3
 8004946:	e7d3      	b.n	80048f0 <__cvt+0x68>
 8004948:	1c59      	adds	r1, r3, #1
 800494a:	9107      	str	r1, [sp, #28]
 800494c:	701a      	strb	r2, [r3, #0]
 800494e:	e7d9      	b.n	8004904 <__cvt+0x7c>

08004950 <__exponent>:
 8004950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004952:	2900      	cmp	r1, #0
 8004954:	bfb6      	itet	lt
 8004956:	232d      	movlt	r3, #45	@ 0x2d
 8004958:	232b      	movge	r3, #43	@ 0x2b
 800495a:	4249      	neglt	r1, r1
 800495c:	2909      	cmp	r1, #9
 800495e:	7002      	strb	r2, [r0, #0]
 8004960:	7043      	strb	r3, [r0, #1]
 8004962:	dd29      	ble.n	80049b8 <__exponent+0x68>
 8004964:	f10d 0307 	add.w	r3, sp, #7
 8004968:	461d      	mov	r5, r3
 800496a:	270a      	movs	r7, #10
 800496c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004970:	461a      	mov	r2, r3
 8004972:	fb07 1416 	mls	r4, r7, r6, r1
 8004976:	3430      	adds	r4, #48	@ 0x30
 8004978:	f802 4c01 	strb.w	r4, [r2, #-1]
 800497c:	460c      	mov	r4, r1
 800497e:	2c63      	cmp	r4, #99	@ 0x63
 8004980:	4631      	mov	r1, r6
 8004982:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004986:	dcf1      	bgt.n	800496c <__exponent+0x1c>
 8004988:	3130      	adds	r1, #48	@ 0x30
 800498a:	1e94      	subs	r4, r2, #2
 800498c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004990:	4623      	mov	r3, r4
 8004992:	1c41      	adds	r1, r0, #1
 8004994:	42ab      	cmp	r3, r5
 8004996:	d30a      	bcc.n	80049ae <__exponent+0x5e>
 8004998:	f10d 0309 	add.w	r3, sp, #9
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	42ac      	cmp	r4, r5
 80049a0:	bf88      	it	hi
 80049a2:	2300      	movhi	r3, #0
 80049a4:	3302      	adds	r3, #2
 80049a6:	4403      	add	r3, r0
 80049a8:	1a18      	subs	r0, r3, r0
 80049aa:	b003      	add	sp, #12
 80049ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ae:	f813 6b01 	ldrb.w	r6, [r3], #1
 80049b2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80049b6:	e7ed      	b.n	8004994 <__exponent+0x44>
 80049b8:	2330      	movs	r3, #48	@ 0x30
 80049ba:	3130      	adds	r1, #48	@ 0x30
 80049bc:	7083      	strb	r3, [r0, #2]
 80049be:	70c1      	strb	r1, [r0, #3]
 80049c0:	1d03      	adds	r3, r0, #4
 80049c2:	e7f1      	b.n	80049a8 <__exponent+0x58>

080049c4 <_printf_float>:
 80049c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c8:	b091      	sub	sp, #68	@ 0x44
 80049ca:	460c      	mov	r4, r1
 80049cc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80049d0:	4616      	mov	r6, r2
 80049d2:	461f      	mov	r7, r3
 80049d4:	4605      	mov	r5, r0
 80049d6:	f000 fcd3 	bl	8005380 <_localeconv_r>
 80049da:	6803      	ldr	r3, [r0, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	9308      	str	r3, [sp, #32]
 80049e0:	f7fb fbb6 	bl	8000150 <strlen>
 80049e4:	2300      	movs	r3, #0
 80049e6:	930e      	str	r3, [sp, #56]	@ 0x38
 80049e8:	f8d8 3000 	ldr.w	r3, [r8]
 80049ec:	9009      	str	r0, [sp, #36]	@ 0x24
 80049ee:	3307      	adds	r3, #7
 80049f0:	f023 0307 	bic.w	r3, r3, #7
 80049f4:	f103 0208 	add.w	r2, r3, #8
 80049f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80049fc:	f8d4 b000 	ldr.w	fp, [r4]
 8004a00:	f8c8 2000 	str.w	r2, [r8]
 8004a04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004a0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a0e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004a12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a1a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004a1e:	4b9c      	ldr	r3, [pc, #624]	@ (8004c90 <_printf_float+0x2cc>)
 8004a20:	f7fb fff4 	bl	8000a0c <__aeabi_dcmpun>
 8004a24:	bb70      	cbnz	r0, 8004a84 <_printf_float+0xc0>
 8004a26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a2e:	4b98      	ldr	r3, [pc, #608]	@ (8004c90 <_printf_float+0x2cc>)
 8004a30:	f7fb ffce 	bl	80009d0 <__aeabi_dcmple>
 8004a34:	bb30      	cbnz	r0, 8004a84 <_printf_float+0xc0>
 8004a36:	2200      	movs	r2, #0
 8004a38:	2300      	movs	r3, #0
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	4649      	mov	r1, r9
 8004a3e:	f7fb ffbd 	bl	80009bc <__aeabi_dcmplt>
 8004a42:	b110      	cbz	r0, 8004a4a <_printf_float+0x86>
 8004a44:	232d      	movs	r3, #45	@ 0x2d
 8004a46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a4a:	4a92      	ldr	r2, [pc, #584]	@ (8004c94 <_printf_float+0x2d0>)
 8004a4c:	4b92      	ldr	r3, [pc, #584]	@ (8004c98 <_printf_float+0x2d4>)
 8004a4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004a52:	bf94      	ite	ls
 8004a54:	4690      	movls	r8, r2
 8004a56:	4698      	movhi	r8, r3
 8004a58:	2303      	movs	r3, #3
 8004a5a:	f04f 0900 	mov.w	r9, #0
 8004a5e:	6123      	str	r3, [r4, #16]
 8004a60:	f02b 0304 	bic.w	r3, fp, #4
 8004a64:	6023      	str	r3, [r4, #0]
 8004a66:	4633      	mov	r3, r6
 8004a68:	4621      	mov	r1, r4
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	9700      	str	r7, [sp, #0]
 8004a6e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004a70:	f000 f9d4 	bl	8004e1c <_printf_common>
 8004a74:	3001      	adds	r0, #1
 8004a76:	f040 8090 	bne.w	8004b9a <_printf_float+0x1d6>
 8004a7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a7e:	b011      	add	sp, #68	@ 0x44
 8004a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a84:	4642      	mov	r2, r8
 8004a86:	464b      	mov	r3, r9
 8004a88:	4640      	mov	r0, r8
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	f7fb ffbe 	bl	8000a0c <__aeabi_dcmpun>
 8004a90:	b148      	cbz	r0, 8004aa6 <_printf_float+0xe2>
 8004a92:	464b      	mov	r3, r9
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bfb8      	it	lt
 8004a98:	232d      	movlt	r3, #45	@ 0x2d
 8004a9a:	4a80      	ldr	r2, [pc, #512]	@ (8004c9c <_printf_float+0x2d8>)
 8004a9c:	bfb8      	it	lt
 8004a9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004aa2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ca0 <_printf_float+0x2dc>)
 8004aa4:	e7d3      	b.n	8004a4e <_printf_float+0x8a>
 8004aa6:	6863      	ldr	r3, [r4, #4]
 8004aa8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	d13f      	bne.n	8004b30 <_printf_float+0x16c>
 8004ab0:	2306      	movs	r3, #6
 8004ab2:	6063      	str	r3, [r4, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004aba:	6023      	str	r3, [r4, #0]
 8004abc:	9206      	str	r2, [sp, #24]
 8004abe:	aa0e      	add	r2, sp, #56	@ 0x38
 8004ac0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004ac4:	aa0d      	add	r2, sp, #52	@ 0x34
 8004ac6:	9203      	str	r2, [sp, #12]
 8004ac8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004acc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004ad0:	6863      	ldr	r3, [r4, #4]
 8004ad2:	4642      	mov	r2, r8
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	464b      	mov	r3, r9
 8004ada:	910a      	str	r1, [sp, #40]	@ 0x28
 8004adc:	f7ff fed4 	bl	8004888 <__cvt>
 8004ae0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004ae2:	4680      	mov	r8, r0
 8004ae4:	2947      	cmp	r1, #71	@ 0x47
 8004ae6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004ae8:	d128      	bne.n	8004b3c <_printf_float+0x178>
 8004aea:	1cc8      	adds	r0, r1, #3
 8004aec:	db02      	blt.n	8004af4 <_printf_float+0x130>
 8004aee:	6863      	ldr	r3, [r4, #4]
 8004af0:	4299      	cmp	r1, r3
 8004af2:	dd40      	ble.n	8004b76 <_printf_float+0x1b2>
 8004af4:	f1aa 0a02 	sub.w	sl, sl, #2
 8004af8:	fa5f fa8a 	uxtb.w	sl, sl
 8004afc:	4652      	mov	r2, sl
 8004afe:	3901      	subs	r1, #1
 8004b00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004b04:	910d      	str	r1, [sp, #52]	@ 0x34
 8004b06:	f7ff ff23 	bl	8004950 <__exponent>
 8004b0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b0c:	4681      	mov	r9, r0
 8004b0e:	1813      	adds	r3, r2, r0
 8004b10:	2a01      	cmp	r2, #1
 8004b12:	6123      	str	r3, [r4, #16]
 8004b14:	dc02      	bgt.n	8004b1c <_printf_float+0x158>
 8004b16:	6822      	ldr	r2, [r4, #0]
 8004b18:	07d2      	lsls	r2, r2, #31
 8004b1a:	d501      	bpl.n	8004b20 <_printf_float+0x15c>
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	6123      	str	r3, [r4, #16]
 8004b20:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d09e      	beq.n	8004a66 <_printf_float+0xa2>
 8004b28:	232d      	movs	r3, #45	@ 0x2d
 8004b2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b2e:	e79a      	b.n	8004a66 <_printf_float+0xa2>
 8004b30:	2947      	cmp	r1, #71	@ 0x47
 8004b32:	d1bf      	bne.n	8004ab4 <_printf_float+0xf0>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1bd      	bne.n	8004ab4 <_printf_float+0xf0>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e7ba      	b.n	8004ab2 <_printf_float+0xee>
 8004b3c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b40:	d9dc      	bls.n	8004afc <_printf_float+0x138>
 8004b42:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004b46:	d118      	bne.n	8004b7a <_printf_float+0x1b6>
 8004b48:	2900      	cmp	r1, #0
 8004b4a:	6863      	ldr	r3, [r4, #4]
 8004b4c:	dd0b      	ble.n	8004b66 <_printf_float+0x1a2>
 8004b4e:	6121      	str	r1, [r4, #16]
 8004b50:	b913      	cbnz	r3, 8004b58 <_printf_float+0x194>
 8004b52:	6822      	ldr	r2, [r4, #0]
 8004b54:	07d0      	lsls	r0, r2, #31
 8004b56:	d502      	bpl.n	8004b5e <_printf_float+0x19a>
 8004b58:	3301      	adds	r3, #1
 8004b5a:	440b      	add	r3, r1
 8004b5c:	6123      	str	r3, [r4, #16]
 8004b5e:	f04f 0900 	mov.w	r9, #0
 8004b62:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004b64:	e7dc      	b.n	8004b20 <_printf_float+0x15c>
 8004b66:	b913      	cbnz	r3, 8004b6e <_printf_float+0x1aa>
 8004b68:	6822      	ldr	r2, [r4, #0]
 8004b6a:	07d2      	lsls	r2, r2, #31
 8004b6c:	d501      	bpl.n	8004b72 <_printf_float+0x1ae>
 8004b6e:	3302      	adds	r3, #2
 8004b70:	e7f4      	b.n	8004b5c <_printf_float+0x198>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e7f2      	b.n	8004b5c <_printf_float+0x198>
 8004b76:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004b7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b7c:	4299      	cmp	r1, r3
 8004b7e:	db05      	blt.n	8004b8c <_printf_float+0x1c8>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	6121      	str	r1, [r4, #16]
 8004b84:	07d8      	lsls	r0, r3, #31
 8004b86:	d5ea      	bpl.n	8004b5e <_printf_float+0x19a>
 8004b88:	1c4b      	adds	r3, r1, #1
 8004b8a:	e7e7      	b.n	8004b5c <_printf_float+0x198>
 8004b8c:	2900      	cmp	r1, #0
 8004b8e:	bfcc      	ite	gt
 8004b90:	2201      	movgt	r2, #1
 8004b92:	f1c1 0202 	rsble	r2, r1, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	e7e0      	b.n	8004b5c <_printf_float+0x198>
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	055a      	lsls	r2, r3, #21
 8004b9e:	d407      	bmi.n	8004bb0 <_printf_float+0x1ec>
 8004ba0:	6923      	ldr	r3, [r4, #16]
 8004ba2:	4642      	mov	r2, r8
 8004ba4:	4631      	mov	r1, r6
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	47b8      	blx	r7
 8004baa:	3001      	adds	r0, #1
 8004bac:	d12b      	bne.n	8004c06 <_printf_float+0x242>
 8004bae:	e764      	b.n	8004a7a <_printf_float+0xb6>
 8004bb0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004bb4:	f240 80dc 	bls.w	8004d70 <_printf_float+0x3ac>
 8004bb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f7fb fef2 	bl	80009a8 <__aeabi_dcmpeq>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d033      	beq.n	8004c30 <_printf_float+0x26c>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	4631      	mov	r1, r6
 8004bcc:	4628      	mov	r0, r5
 8004bce:	4a35      	ldr	r2, [pc, #212]	@ (8004ca4 <_printf_float+0x2e0>)
 8004bd0:	47b8      	blx	r7
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	f43f af51 	beq.w	8004a7a <_printf_float+0xb6>
 8004bd8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004bdc:	4543      	cmp	r3, r8
 8004bde:	db02      	blt.n	8004be6 <_printf_float+0x222>
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	07d8      	lsls	r0, r3, #31
 8004be4:	d50f      	bpl.n	8004c06 <_printf_float+0x242>
 8004be6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004bea:	4631      	mov	r1, r6
 8004bec:	4628      	mov	r0, r5
 8004bee:	47b8      	blx	r7
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	f43f af42 	beq.w	8004a7a <_printf_float+0xb6>
 8004bf6:	f04f 0900 	mov.w	r9, #0
 8004bfa:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004bfe:	f104 0a1a 	add.w	sl, r4, #26
 8004c02:	45c8      	cmp	r8, r9
 8004c04:	dc09      	bgt.n	8004c1a <_printf_float+0x256>
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	079b      	lsls	r3, r3, #30
 8004c0a:	f100 8102 	bmi.w	8004e12 <_printf_float+0x44e>
 8004c0e:	68e0      	ldr	r0, [r4, #12]
 8004c10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c12:	4298      	cmp	r0, r3
 8004c14:	bfb8      	it	lt
 8004c16:	4618      	movlt	r0, r3
 8004c18:	e731      	b.n	8004a7e <_printf_float+0xba>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	4652      	mov	r2, sl
 8004c1e:	4631      	mov	r1, r6
 8004c20:	4628      	mov	r0, r5
 8004c22:	47b8      	blx	r7
 8004c24:	3001      	adds	r0, #1
 8004c26:	f43f af28 	beq.w	8004a7a <_printf_float+0xb6>
 8004c2a:	f109 0901 	add.w	r9, r9, #1
 8004c2e:	e7e8      	b.n	8004c02 <_printf_float+0x23e>
 8004c30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	dc38      	bgt.n	8004ca8 <_printf_float+0x2e4>
 8004c36:	2301      	movs	r3, #1
 8004c38:	4631      	mov	r1, r6
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	4a19      	ldr	r2, [pc, #100]	@ (8004ca4 <_printf_float+0x2e0>)
 8004c3e:	47b8      	blx	r7
 8004c40:	3001      	adds	r0, #1
 8004c42:	f43f af1a 	beq.w	8004a7a <_printf_float+0xb6>
 8004c46:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004c4a:	ea59 0303 	orrs.w	r3, r9, r3
 8004c4e:	d102      	bne.n	8004c56 <_printf_float+0x292>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	07d9      	lsls	r1, r3, #31
 8004c54:	d5d7      	bpl.n	8004c06 <_printf_float+0x242>
 8004c56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c5a:	4631      	mov	r1, r6
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	47b8      	blx	r7
 8004c60:	3001      	adds	r0, #1
 8004c62:	f43f af0a 	beq.w	8004a7a <_printf_float+0xb6>
 8004c66:	f04f 0a00 	mov.w	sl, #0
 8004c6a:	f104 0b1a 	add.w	fp, r4, #26
 8004c6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c70:	425b      	negs	r3, r3
 8004c72:	4553      	cmp	r3, sl
 8004c74:	dc01      	bgt.n	8004c7a <_printf_float+0x2b6>
 8004c76:	464b      	mov	r3, r9
 8004c78:	e793      	b.n	8004ba2 <_printf_float+0x1de>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	465a      	mov	r2, fp
 8004c7e:	4631      	mov	r1, r6
 8004c80:	4628      	mov	r0, r5
 8004c82:	47b8      	blx	r7
 8004c84:	3001      	adds	r0, #1
 8004c86:	f43f aef8 	beq.w	8004a7a <_printf_float+0xb6>
 8004c8a:	f10a 0a01 	add.w	sl, sl, #1
 8004c8e:	e7ee      	b.n	8004c6e <_printf_float+0x2aa>
 8004c90:	7fefffff 	.word	0x7fefffff
 8004c94:	0800805a 	.word	0x0800805a
 8004c98:	0800805e 	.word	0x0800805e
 8004c9c:	08008062 	.word	0x08008062
 8004ca0:	08008066 	.word	0x08008066
 8004ca4:	0800806a 	.word	0x0800806a
 8004ca8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004caa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004cae:	4553      	cmp	r3, sl
 8004cb0:	bfa8      	it	ge
 8004cb2:	4653      	movge	r3, sl
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	4699      	mov	r9, r3
 8004cb8:	dc36      	bgt.n	8004d28 <_printf_float+0x364>
 8004cba:	f04f 0b00 	mov.w	fp, #0
 8004cbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cc2:	f104 021a 	add.w	r2, r4, #26
 8004cc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004cc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cca:	eba3 0309 	sub.w	r3, r3, r9
 8004cce:	455b      	cmp	r3, fp
 8004cd0:	dc31      	bgt.n	8004d36 <_printf_float+0x372>
 8004cd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004cd4:	459a      	cmp	sl, r3
 8004cd6:	dc3a      	bgt.n	8004d4e <_printf_float+0x38a>
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	07da      	lsls	r2, r3, #31
 8004cdc:	d437      	bmi.n	8004d4e <_printf_float+0x38a>
 8004cde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ce0:	ebaa 0903 	sub.w	r9, sl, r3
 8004ce4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ce6:	ebaa 0303 	sub.w	r3, sl, r3
 8004cea:	4599      	cmp	r9, r3
 8004cec:	bfa8      	it	ge
 8004cee:	4699      	movge	r9, r3
 8004cf0:	f1b9 0f00 	cmp.w	r9, #0
 8004cf4:	dc33      	bgt.n	8004d5e <_printf_float+0x39a>
 8004cf6:	f04f 0800 	mov.w	r8, #0
 8004cfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cfe:	f104 0b1a 	add.w	fp, r4, #26
 8004d02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d04:	ebaa 0303 	sub.w	r3, sl, r3
 8004d08:	eba3 0309 	sub.w	r3, r3, r9
 8004d0c:	4543      	cmp	r3, r8
 8004d0e:	f77f af7a 	ble.w	8004c06 <_printf_float+0x242>
 8004d12:	2301      	movs	r3, #1
 8004d14:	465a      	mov	r2, fp
 8004d16:	4631      	mov	r1, r6
 8004d18:	4628      	mov	r0, r5
 8004d1a:	47b8      	blx	r7
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	f43f aeac 	beq.w	8004a7a <_printf_float+0xb6>
 8004d22:	f108 0801 	add.w	r8, r8, #1
 8004d26:	e7ec      	b.n	8004d02 <_printf_float+0x33e>
 8004d28:	4642      	mov	r2, r8
 8004d2a:	4631      	mov	r1, r6
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	47b8      	blx	r7
 8004d30:	3001      	adds	r0, #1
 8004d32:	d1c2      	bne.n	8004cba <_printf_float+0x2f6>
 8004d34:	e6a1      	b.n	8004a7a <_printf_float+0xb6>
 8004d36:	2301      	movs	r3, #1
 8004d38:	4631      	mov	r1, r6
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	920a      	str	r2, [sp, #40]	@ 0x28
 8004d3e:	47b8      	blx	r7
 8004d40:	3001      	adds	r0, #1
 8004d42:	f43f ae9a 	beq.w	8004a7a <_printf_float+0xb6>
 8004d46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d48:	f10b 0b01 	add.w	fp, fp, #1
 8004d4c:	e7bb      	b.n	8004cc6 <_printf_float+0x302>
 8004d4e:	4631      	mov	r1, r6
 8004d50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d54:	4628      	mov	r0, r5
 8004d56:	47b8      	blx	r7
 8004d58:	3001      	adds	r0, #1
 8004d5a:	d1c0      	bne.n	8004cde <_printf_float+0x31a>
 8004d5c:	e68d      	b.n	8004a7a <_printf_float+0xb6>
 8004d5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d60:	464b      	mov	r3, r9
 8004d62:	4631      	mov	r1, r6
 8004d64:	4628      	mov	r0, r5
 8004d66:	4442      	add	r2, r8
 8004d68:	47b8      	blx	r7
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	d1c3      	bne.n	8004cf6 <_printf_float+0x332>
 8004d6e:	e684      	b.n	8004a7a <_printf_float+0xb6>
 8004d70:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004d74:	f1ba 0f01 	cmp.w	sl, #1
 8004d78:	dc01      	bgt.n	8004d7e <_printf_float+0x3ba>
 8004d7a:	07db      	lsls	r3, r3, #31
 8004d7c:	d536      	bpl.n	8004dec <_printf_float+0x428>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	4642      	mov	r2, r8
 8004d82:	4631      	mov	r1, r6
 8004d84:	4628      	mov	r0, r5
 8004d86:	47b8      	blx	r7
 8004d88:	3001      	adds	r0, #1
 8004d8a:	f43f ae76 	beq.w	8004a7a <_printf_float+0xb6>
 8004d8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d92:	4631      	mov	r1, r6
 8004d94:	4628      	mov	r0, r5
 8004d96:	47b8      	blx	r7
 8004d98:	3001      	adds	r0, #1
 8004d9a:	f43f ae6e 	beq.w	8004a7a <_printf_float+0xb6>
 8004d9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004da2:	2200      	movs	r2, #0
 8004da4:	2300      	movs	r3, #0
 8004da6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004daa:	f7fb fdfd 	bl	80009a8 <__aeabi_dcmpeq>
 8004dae:	b9c0      	cbnz	r0, 8004de2 <_printf_float+0x41e>
 8004db0:	4653      	mov	r3, sl
 8004db2:	f108 0201 	add.w	r2, r8, #1
 8004db6:	4631      	mov	r1, r6
 8004db8:	4628      	mov	r0, r5
 8004dba:	47b8      	blx	r7
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	d10c      	bne.n	8004dda <_printf_float+0x416>
 8004dc0:	e65b      	b.n	8004a7a <_printf_float+0xb6>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	465a      	mov	r2, fp
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	4628      	mov	r0, r5
 8004dca:	47b8      	blx	r7
 8004dcc:	3001      	adds	r0, #1
 8004dce:	f43f ae54 	beq.w	8004a7a <_printf_float+0xb6>
 8004dd2:	f108 0801 	add.w	r8, r8, #1
 8004dd6:	45d0      	cmp	r8, sl
 8004dd8:	dbf3      	blt.n	8004dc2 <_printf_float+0x3fe>
 8004dda:	464b      	mov	r3, r9
 8004ddc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004de0:	e6e0      	b.n	8004ba4 <_printf_float+0x1e0>
 8004de2:	f04f 0800 	mov.w	r8, #0
 8004de6:	f104 0b1a 	add.w	fp, r4, #26
 8004dea:	e7f4      	b.n	8004dd6 <_printf_float+0x412>
 8004dec:	2301      	movs	r3, #1
 8004dee:	4642      	mov	r2, r8
 8004df0:	e7e1      	b.n	8004db6 <_printf_float+0x3f2>
 8004df2:	2301      	movs	r3, #1
 8004df4:	464a      	mov	r2, r9
 8004df6:	4631      	mov	r1, r6
 8004df8:	4628      	mov	r0, r5
 8004dfa:	47b8      	blx	r7
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	f43f ae3c 	beq.w	8004a7a <_printf_float+0xb6>
 8004e02:	f108 0801 	add.w	r8, r8, #1
 8004e06:	68e3      	ldr	r3, [r4, #12]
 8004e08:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004e0a:	1a5b      	subs	r3, r3, r1
 8004e0c:	4543      	cmp	r3, r8
 8004e0e:	dcf0      	bgt.n	8004df2 <_printf_float+0x42e>
 8004e10:	e6fd      	b.n	8004c0e <_printf_float+0x24a>
 8004e12:	f04f 0800 	mov.w	r8, #0
 8004e16:	f104 0919 	add.w	r9, r4, #25
 8004e1a:	e7f4      	b.n	8004e06 <_printf_float+0x442>

08004e1c <_printf_common>:
 8004e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e20:	4616      	mov	r6, r2
 8004e22:	4698      	mov	r8, r3
 8004e24:	688a      	ldr	r2, [r1, #8]
 8004e26:	690b      	ldr	r3, [r1, #16]
 8004e28:	4607      	mov	r7, r0
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	bfb8      	it	lt
 8004e2e:	4613      	movlt	r3, r2
 8004e30:	6033      	str	r3, [r6, #0]
 8004e32:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e36:	460c      	mov	r4, r1
 8004e38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e3c:	b10a      	cbz	r2, 8004e42 <_printf_common+0x26>
 8004e3e:	3301      	adds	r3, #1
 8004e40:	6033      	str	r3, [r6, #0]
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	0699      	lsls	r1, r3, #26
 8004e46:	bf42      	ittt	mi
 8004e48:	6833      	ldrmi	r3, [r6, #0]
 8004e4a:	3302      	addmi	r3, #2
 8004e4c:	6033      	strmi	r3, [r6, #0]
 8004e4e:	6825      	ldr	r5, [r4, #0]
 8004e50:	f015 0506 	ands.w	r5, r5, #6
 8004e54:	d106      	bne.n	8004e64 <_printf_common+0x48>
 8004e56:	f104 0a19 	add.w	sl, r4, #25
 8004e5a:	68e3      	ldr	r3, [r4, #12]
 8004e5c:	6832      	ldr	r2, [r6, #0]
 8004e5e:	1a9b      	subs	r3, r3, r2
 8004e60:	42ab      	cmp	r3, r5
 8004e62:	dc2b      	bgt.n	8004ebc <_printf_common+0xa0>
 8004e64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e68:	6822      	ldr	r2, [r4, #0]
 8004e6a:	3b00      	subs	r3, #0
 8004e6c:	bf18      	it	ne
 8004e6e:	2301      	movne	r3, #1
 8004e70:	0692      	lsls	r2, r2, #26
 8004e72:	d430      	bmi.n	8004ed6 <_printf_common+0xba>
 8004e74:	4641      	mov	r1, r8
 8004e76:	4638      	mov	r0, r7
 8004e78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e7c:	47c8      	blx	r9
 8004e7e:	3001      	adds	r0, #1
 8004e80:	d023      	beq.n	8004eca <_printf_common+0xae>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	6922      	ldr	r2, [r4, #16]
 8004e86:	f003 0306 	and.w	r3, r3, #6
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	bf14      	ite	ne
 8004e8e:	2500      	movne	r5, #0
 8004e90:	6833      	ldreq	r3, [r6, #0]
 8004e92:	f04f 0600 	mov.w	r6, #0
 8004e96:	bf08      	it	eq
 8004e98:	68e5      	ldreq	r5, [r4, #12]
 8004e9a:	f104 041a 	add.w	r4, r4, #26
 8004e9e:	bf08      	it	eq
 8004ea0:	1aed      	subeq	r5, r5, r3
 8004ea2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004ea6:	bf08      	it	eq
 8004ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004eac:	4293      	cmp	r3, r2
 8004eae:	bfc4      	itt	gt
 8004eb0:	1a9b      	subgt	r3, r3, r2
 8004eb2:	18ed      	addgt	r5, r5, r3
 8004eb4:	42b5      	cmp	r5, r6
 8004eb6:	d11a      	bne.n	8004eee <_printf_common+0xd2>
 8004eb8:	2000      	movs	r0, #0
 8004eba:	e008      	b.n	8004ece <_printf_common+0xb2>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	4652      	mov	r2, sl
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	47c8      	blx	r9
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	d103      	bne.n	8004ed2 <_printf_common+0xb6>
 8004eca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed2:	3501      	adds	r5, #1
 8004ed4:	e7c1      	b.n	8004e5a <_printf_common+0x3e>
 8004ed6:	2030      	movs	r0, #48	@ 0x30
 8004ed8:	18e1      	adds	r1, r4, r3
 8004eda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ee4:	4422      	add	r2, r4
 8004ee6:	3302      	adds	r3, #2
 8004ee8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004eec:	e7c2      	b.n	8004e74 <_printf_common+0x58>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	4622      	mov	r2, r4
 8004ef2:	4641      	mov	r1, r8
 8004ef4:	4638      	mov	r0, r7
 8004ef6:	47c8      	blx	r9
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d0e6      	beq.n	8004eca <_printf_common+0xae>
 8004efc:	3601      	adds	r6, #1
 8004efe:	e7d9      	b.n	8004eb4 <_printf_common+0x98>

08004f00 <_printf_i>:
 8004f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f04:	7e0f      	ldrb	r7, [r1, #24]
 8004f06:	4691      	mov	r9, r2
 8004f08:	2f78      	cmp	r7, #120	@ 0x78
 8004f0a:	4680      	mov	r8, r0
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	469a      	mov	sl, r3
 8004f10:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f16:	d807      	bhi.n	8004f28 <_printf_i+0x28>
 8004f18:	2f62      	cmp	r7, #98	@ 0x62
 8004f1a:	d80a      	bhi.n	8004f32 <_printf_i+0x32>
 8004f1c:	2f00      	cmp	r7, #0
 8004f1e:	f000 80d3 	beq.w	80050c8 <_printf_i+0x1c8>
 8004f22:	2f58      	cmp	r7, #88	@ 0x58
 8004f24:	f000 80ba 	beq.w	800509c <_printf_i+0x19c>
 8004f28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f30:	e03a      	b.n	8004fa8 <_printf_i+0xa8>
 8004f32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f36:	2b15      	cmp	r3, #21
 8004f38:	d8f6      	bhi.n	8004f28 <_printf_i+0x28>
 8004f3a:	a101      	add	r1, pc, #4	@ (adr r1, 8004f40 <_printf_i+0x40>)
 8004f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f40:	08004f99 	.word	0x08004f99
 8004f44:	08004fad 	.word	0x08004fad
 8004f48:	08004f29 	.word	0x08004f29
 8004f4c:	08004f29 	.word	0x08004f29
 8004f50:	08004f29 	.word	0x08004f29
 8004f54:	08004f29 	.word	0x08004f29
 8004f58:	08004fad 	.word	0x08004fad
 8004f5c:	08004f29 	.word	0x08004f29
 8004f60:	08004f29 	.word	0x08004f29
 8004f64:	08004f29 	.word	0x08004f29
 8004f68:	08004f29 	.word	0x08004f29
 8004f6c:	080050af 	.word	0x080050af
 8004f70:	08004fd7 	.word	0x08004fd7
 8004f74:	08005069 	.word	0x08005069
 8004f78:	08004f29 	.word	0x08004f29
 8004f7c:	08004f29 	.word	0x08004f29
 8004f80:	080050d1 	.word	0x080050d1
 8004f84:	08004f29 	.word	0x08004f29
 8004f88:	08004fd7 	.word	0x08004fd7
 8004f8c:	08004f29 	.word	0x08004f29
 8004f90:	08004f29 	.word	0x08004f29
 8004f94:	08005071 	.word	0x08005071
 8004f98:	6833      	ldr	r3, [r6, #0]
 8004f9a:	1d1a      	adds	r2, r3, #4
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6032      	str	r2, [r6, #0]
 8004fa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fa4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e09e      	b.n	80050ea <_printf_i+0x1ea>
 8004fac:	6833      	ldr	r3, [r6, #0]
 8004fae:	6820      	ldr	r0, [r4, #0]
 8004fb0:	1d19      	adds	r1, r3, #4
 8004fb2:	6031      	str	r1, [r6, #0]
 8004fb4:	0606      	lsls	r6, r0, #24
 8004fb6:	d501      	bpl.n	8004fbc <_printf_i+0xbc>
 8004fb8:	681d      	ldr	r5, [r3, #0]
 8004fba:	e003      	b.n	8004fc4 <_printf_i+0xc4>
 8004fbc:	0645      	lsls	r5, r0, #25
 8004fbe:	d5fb      	bpl.n	8004fb8 <_printf_i+0xb8>
 8004fc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fc4:	2d00      	cmp	r5, #0
 8004fc6:	da03      	bge.n	8004fd0 <_printf_i+0xd0>
 8004fc8:	232d      	movs	r3, #45	@ 0x2d
 8004fca:	426d      	negs	r5, r5
 8004fcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fd0:	230a      	movs	r3, #10
 8004fd2:	4859      	ldr	r0, [pc, #356]	@ (8005138 <_printf_i+0x238>)
 8004fd4:	e011      	b.n	8004ffa <_printf_i+0xfa>
 8004fd6:	6821      	ldr	r1, [r4, #0]
 8004fd8:	6833      	ldr	r3, [r6, #0]
 8004fda:	0608      	lsls	r0, r1, #24
 8004fdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fe0:	d402      	bmi.n	8004fe8 <_printf_i+0xe8>
 8004fe2:	0649      	lsls	r1, r1, #25
 8004fe4:	bf48      	it	mi
 8004fe6:	b2ad      	uxthmi	r5, r5
 8004fe8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fea:	6033      	str	r3, [r6, #0]
 8004fec:	bf14      	ite	ne
 8004fee:	230a      	movne	r3, #10
 8004ff0:	2308      	moveq	r3, #8
 8004ff2:	4851      	ldr	r0, [pc, #324]	@ (8005138 <_printf_i+0x238>)
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ffa:	6866      	ldr	r6, [r4, #4]
 8004ffc:	2e00      	cmp	r6, #0
 8004ffe:	bfa8      	it	ge
 8005000:	6821      	ldrge	r1, [r4, #0]
 8005002:	60a6      	str	r6, [r4, #8]
 8005004:	bfa4      	itt	ge
 8005006:	f021 0104 	bicge.w	r1, r1, #4
 800500a:	6021      	strge	r1, [r4, #0]
 800500c:	b90d      	cbnz	r5, 8005012 <_printf_i+0x112>
 800500e:	2e00      	cmp	r6, #0
 8005010:	d04b      	beq.n	80050aa <_printf_i+0x1aa>
 8005012:	4616      	mov	r6, r2
 8005014:	fbb5 f1f3 	udiv	r1, r5, r3
 8005018:	fb03 5711 	mls	r7, r3, r1, r5
 800501c:	5dc7      	ldrb	r7, [r0, r7]
 800501e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005022:	462f      	mov	r7, r5
 8005024:	42bb      	cmp	r3, r7
 8005026:	460d      	mov	r5, r1
 8005028:	d9f4      	bls.n	8005014 <_printf_i+0x114>
 800502a:	2b08      	cmp	r3, #8
 800502c:	d10b      	bne.n	8005046 <_printf_i+0x146>
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	07df      	lsls	r7, r3, #31
 8005032:	d508      	bpl.n	8005046 <_printf_i+0x146>
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	6861      	ldr	r1, [r4, #4]
 8005038:	4299      	cmp	r1, r3
 800503a:	bfde      	ittt	le
 800503c:	2330      	movle	r3, #48	@ 0x30
 800503e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005042:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005046:	1b92      	subs	r2, r2, r6
 8005048:	6122      	str	r2, [r4, #16]
 800504a:	464b      	mov	r3, r9
 800504c:	4621      	mov	r1, r4
 800504e:	4640      	mov	r0, r8
 8005050:	f8cd a000 	str.w	sl, [sp]
 8005054:	aa03      	add	r2, sp, #12
 8005056:	f7ff fee1 	bl	8004e1c <_printf_common>
 800505a:	3001      	adds	r0, #1
 800505c:	d14a      	bne.n	80050f4 <_printf_i+0x1f4>
 800505e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005062:	b004      	add	sp, #16
 8005064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	f043 0320 	orr.w	r3, r3, #32
 800506e:	6023      	str	r3, [r4, #0]
 8005070:	2778      	movs	r7, #120	@ 0x78
 8005072:	4832      	ldr	r0, [pc, #200]	@ (800513c <_printf_i+0x23c>)
 8005074:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	6831      	ldr	r1, [r6, #0]
 800507c:	061f      	lsls	r7, r3, #24
 800507e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005082:	d402      	bmi.n	800508a <_printf_i+0x18a>
 8005084:	065f      	lsls	r7, r3, #25
 8005086:	bf48      	it	mi
 8005088:	b2ad      	uxthmi	r5, r5
 800508a:	6031      	str	r1, [r6, #0]
 800508c:	07d9      	lsls	r1, r3, #31
 800508e:	bf44      	itt	mi
 8005090:	f043 0320 	orrmi.w	r3, r3, #32
 8005094:	6023      	strmi	r3, [r4, #0]
 8005096:	b11d      	cbz	r5, 80050a0 <_printf_i+0x1a0>
 8005098:	2310      	movs	r3, #16
 800509a:	e7ab      	b.n	8004ff4 <_printf_i+0xf4>
 800509c:	4826      	ldr	r0, [pc, #152]	@ (8005138 <_printf_i+0x238>)
 800509e:	e7e9      	b.n	8005074 <_printf_i+0x174>
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	f023 0320 	bic.w	r3, r3, #32
 80050a6:	6023      	str	r3, [r4, #0]
 80050a8:	e7f6      	b.n	8005098 <_printf_i+0x198>
 80050aa:	4616      	mov	r6, r2
 80050ac:	e7bd      	b.n	800502a <_printf_i+0x12a>
 80050ae:	6833      	ldr	r3, [r6, #0]
 80050b0:	6825      	ldr	r5, [r4, #0]
 80050b2:	1d18      	adds	r0, r3, #4
 80050b4:	6961      	ldr	r1, [r4, #20]
 80050b6:	6030      	str	r0, [r6, #0]
 80050b8:	062e      	lsls	r6, r5, #24
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	d501      	bpl.n	80050c2 <_printf_i+0x1c2>
 80050be:	6019      	str	r1, [r3, #0]
 80050c0:	e002      	b.n	80050c8 <_printf_i+0x1c8>
 80050c2:	0668      	lsls	r0, r5, #25
 80050c4:	d5fb      	bpl.n	80050be <_printf_i+0x1be>
 80050c6:	8019      	strh	r1, [r3, #0]
 80050c8:	2300      	movs	r3, #0
 80050ca:	4616      	mov	r6, r2
 80050cc:	6123      	str	r3, [r4, #16]
 80050ce:	e7bc      	b.n	800504a <_printf_i+0x14a>
 80050d0:	6833      	ldr	r3, [r6, #0]
 80050d2:	2100      	movs	r1, #0
 80050d4:	1d1a      	adds	r2, r3, #4
 80050d6:	6032      	str	r2, [r6, #0]
 80050d8:	681e      	ldr	r6, [r3, #0]
 80050da:	6862      	ldr	r2, [r4, #4]
 80050dc:	4630      	mov	r0, r6
 80050de:	f000 f9c6 	bl	800546e <memchr>
 80050e2:	b108      	cbz	r0, 80050e8 <_printf_i+0x1e8>
 80050e4:	1b80      	subs	r0, r0, r6
 80050e6:	6060      	str	r0, [r4, #4]
 80050e8:	6863      	ldr	r3, [r4, #4]
 80050ea:	6123      	str	r3, [r4, #16]
 80050ec:	2300      	movs	r3, #0
 80050ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050f2:	e7aa      	b.n	800504a <_printf_i+0x14a>
 80050f4:	4632      	mov	r2, r6
 80050f6:	4649      	mov	r1, r9
 80050f8:	4640      	mov	r0, r8
 80050fa:	6923      	ldr	r3, [r4, #16]
 80050fc:	47d0      	blx	sl
 80050fe:	3001      	adds	r0, #1
 8005100:	d0ad      	beq.n	800505e <_printf_i+0x15e>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	079b      	lsls	r3, r3, #30
 8005106:	d413      	bmi.n	8005130 <_printf_i+0x230>
 8005108:	68e0      	ldr	r0, [r4, #12]
 800510a:	9b03      	ldr	r3, [sp, #12]
 800510c:	4298      	cmp	r0, r3
 800510e:	bfb8      	it	lt
 8005110:	4618      	movlt	r0, r3
 8005112:	e7a6      	b.n	8005062 <_printf_i+0x162>
 8005114:	2301      	movs	r3, #1
 8005116:	4632      	mov	r2, r6
 8005118:	4649      	mov	r1, r9
 800511a:	4640      	mov	r0, r8
 800511c:	47d0      	blx	sl
 800511e:	3001      	adds	r0, #1
 8005120:	d09d      	beq.n	800505e <_printf_i+0x15e>
 8005122:	3501      	adds	r5, #1
 8005124:	68e3      	ldr	r3, [r4, #12]
 8005126:	9903      	ldr	r1, [sp, #12]
 8005128:	1a5b      	subs	r3, r3, r1
 800512a:	42ab      	cmp	r3, r5
 800512c:	dcf2      	bgt.n	8005114 <_printf_i+0x214>
 800512e:	e7eb      	b.n	8005108 <_printf_i+0x208>
 8005130:	2500      	movs	r5, #0
 8005132:	f104 0619 	add.w	r6, r4, #25
 8005136:	e7f5      	b.n	8005124 <_printf_i+0x224>
 8005138:	0800806c 	.word	0x0800806c
 800513c:	0800807d 	.word	0x0800807d

08005140 <std>:
 8005140:	2300      	movs	r3, #0
 8005142:	b510      	push	{r4, lr}
 8005144:	4604      	mov	r4, r0
 8005146:	e9c0 3300 	strd	r3, r3, [r0]
 800514a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800514e:	6083      	str	r3, [r0, #8]
 8005150:	8181      	strh	r1, [r0, #12]
 8005152:	6643      	str	r3, [r0, #100]	@ 0x64
 8005154:	81c2      	strh	r2, [r0, #14]
 8005156:	6183      	str	r3, [r0, #24]
 8005158:	4619      	mov	r1, r3
 800515a:	2208      	movs	r2, #8
 800515c:	305c      	adds	r0, #92	@ 0x5c
 800515e:	f000 f906 	bl	800536e <memset>
 8005162:	4b0d      	ldr	r3, [pc, #52]	@ (8005198 <std+0x58>)
 8005164:	6224      	str	r4, [r4, #32]
 8005166:	6263      	str	r3, [r4, #36]	@ 0x24
 8005168:	4b0c      	ldr	r3, [pc, #48]	@ (800519c <std+0x5c>)
 800516a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800516c:	4b0c      	ldr	r3, [pc, #48]	@ (80051a0 <std+0x60>)
 800516e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005170:	4b0c      	ldr	r3, [pc, #48]	@ (80051a4 <std+0x64>)
 8005172:	6323      	str	r3, [r4, #48]	@ 0x30
 8005174:	4b0c      	ldr	r3, [pc, #48]	@ (80051a8 <std+0x68>)
 8005176:	429c      	cmp	r4, r3
 8005178:	d006      	beq.n	8005188 <std+0x48>
 800517a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800517e:	4294      	cmp	r4, r2
 8005180:	d002      	beq.n	8005188 <std+0x48>
 8005182:	33d0      	adds	r3, #208	@ 0xd0
 8005184:	429c      	cmp	r4, r3
 8005186:	d105      	bne.n	8005194 <std+0x54>
 8005188:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800518c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005190:	f000 b96a 	b.w	8005468 <__retarget_lock_init_recursive>
 8005194:	bd10      	pop	{r4, pc}
 8005196:	bf00      	nop
 8005198:	080052e9 	.word	0x080052e9
 800519c:	0800530b 	.word	0x0800530b
 80051a0:	08005343 	.word	0x08005343
 80051a4:	08005367 	.word	0x08005367
 80051a8:	200002d8 	.word	0x200002d8

080051ac <stdio_exit_handler>:
 80051ac:	4a02      	ldr	r2, [pc, #8]	@ (80051b8 <stdio_exit_handler+0xc>)
 80051ae:	4903      	ldr	r1, [pc, #12]	@ (80051bc <stdio_exit_handler+0x10>)
 80051b0:	4803      	ldr	r0, [pc, #12]	@ (80051c0 <stdio_exit_handler+0x14>)
 80051b2:	f000 b869 	b.w	8005288 <_fwalk_sglue>
 80051b6:	bf00      	nop
 80051b8:	2000000c 	.word	0x2000000c
 80051bc:	08006dad 	.word	0x08006dad
 80051c0:	2000001c 	.word	0x2000001c

080051c4 <cleanup_stdio>:
 80051c4:	6841      	ldr	r1, [r0, #4]
 80051c6:	4b0c      	ldr	r3, [pc, #48]	@ (80051f8 <cleanup_stdio+0x34>)
 80051c8:	b510      	push	{r4, lr}
 80051ca:	4299      	cmp	r1, r3
 80051cc:	4604      	mov	r4, r0
 80051ce:	d001      	beq.n	80051d4 <cleanup_stdio+0x10>
 80051d0:	f001 fdec 	bl	8006dac <_fflush_r>
 80051d4:	68a1      	ldr	r1, [r4, #8]
 80051d6:	4b09      	ldr	r3, [pc, #36]	@ (80051fc <cleanup_stdio+0x38>)
 80051d8:	4299      	cmp	r1, r3
 80051da:	d002      	beq.n	80051e2 <cleanup_stdio+0x1e>
 80051dc:	4620      	mov	r0, r4
 80051de:	f001 fde5 	bl	8006dac <_fflush_r>
 80051e2:	68e1      	ldr	r1, [r4, #12]
 80051e4:	4b06      	ldr	r3, [pc, #24]	@ (8005200 <cleanup_stdio+0x3c>)
 80051e6:	4299      	cmp	r1, r3
 80051e8:	d004      	beq.n	80051f4 <cleanup_stdio+0x30>
 80051ea:	4620      	mov	r0, r4
 80051ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051f0:	f001 bddc 	b.w	8006dac <_fflush_r>
 80051f4:	bd10      	pop	{r4, pc}
 80051f6:	bf00      	nop
 80051f8:	200002d8 	.word	0x200002d8
 80051fc:	20000340 	.word	0x20000340
 8005200:	200003a8 	.word	0x200003a8

08005204 <global_stdio_init.part.0>:
 8005204:	b510      	push	{r4, lr}
 8005206:	4b0b      	ldr	r3, [pc, #44]	@ (8005234 <global_stdio_init.part.0+0x30>)
 8005208:	4c0b      	ldr	r4, [pc, #44]	@ (8005238 <global_stdio_init.part.0+0x34>)
 800520a:	4a0c      	ldr	r2, [pc, #48]	@ (800523c <global_stdio_init.part.0+0x38>)
 800520c:	4620      	mov	r0, r4
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	2104      	movs	r1, #4
 8005212:	2200      	movs	r2, #0
 8005214:	f7ff ff94 	bl	8005140 <std>
 8005218:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800521c:	2201      	movs	r2, #1
 800521e:	2109      	movs	r1, #9
 8005220:	f7ff ff8e 	bl	8005140 <std>
 8005224:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005228:	2202      	movs	r2, #2
 800522a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800522e:	2112      	movs	r1, #18
 8005230:	f7ff bf86 	b.w	8005140 <std>
 8005234:	20000410 	.word	0x20000410
 8005238:	200002d8 	.word	0x200002d8
 800523c:	080051ad 	.word	0x080051ad

08005240 <__sfp_lock_acquire>:
 8005240:	4801      	ldr	r0, [pc, #4]	@ (8005248 <__sfp_lock_acquire+0x8>)
 8005242:	f000 b912 	b.w	800546a <__retarget_lock_acquire_recursive>
 8005246:	bf00      	nop
 8005248:	20000419 	.word	0x20000419

0800524c <__sfp_lock_release>:
 800524c:	4801      	ldr	r0, [pc, #4]	@ (8005254 <__sfp_lock_release+0x8>)
 800524e:	f000 b90d 	b.w	800546c <__retarget_lock_release_recursive>
 8005252:	bf00      	nop
 8005254:	20000419 	.word	0x20000419

08005258 <__sinit>:
 8005258:	b510      	push	{r4, lr}
 800525a:	4604      	mov	r4, r0
 800525c:	f7ff fff0 	bl	8005240 <__sfp_lock_acquire>
 8005260:	6a23      	ldr	r3, [r4, #32]
 8005262:	b11b      	cbz	r3, 800526c <__sinit+0x14>
 8005264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005268:	f7ff bff0 	b.w	800524c <__sfp_lock_release>
 800526c:	4b04      	ldr	r3, [pc, #16]	@ (8005280 <__sinit+0x28>)
 800526e:	6223      	str	r3, [r4, #32]
 8005270:	4b04      	ldr	r3, [pc, #16]	@ (8005284 <__sinit+0x2c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1f5      	bne.n	8005264 <__sinit+0xc>
 8005278:	f7ff ffc4 	bl	8005204 <global_stdio_init.part.0>
 800527c:	e7f2      	b.n	8005264 <__sinit+0xc>
 800527e:	bf00      	nop
 8005280:	080051c5 	.word	0x080051c5
 8005284:	20000410 	.word	0x20000410

08005288 <_fwalk_sglue>:
 8005288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800528c:	4607      	mov	r7, r0
 800528e:	4688      	mov	r8, r1
 8005290:	4614      	mov	r4, r2
 8005292:	2600      	movs	r6, #0
 8005294:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005298:	f1b9 0901 	subs.w	r9, r9, #1
 800529c:	d505      	bpl.n	80052aa <_fwalk_sglue+0x22>
 800529e:	6824      	ldr	r4, [r4, #0]
 80052a0:	2c00      	cmp	r4, #0
 80052a2:	d1f7      	bne.n	8005294 <_fwalk_sglue+0xc>
 80052a4:	4630      	mov	r0, r6
 80052a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052aa:	89ab      	ldrh	r3, [r5, #12]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d907      	bls.n	80052c0 <_fwalk_sglue+0x38>
 80052b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052b4:	3301      	adds	r3, #1
 80052b6:	d003      	beq.n	80052c0 <_fwalk_sglue+0x38>
 80052b8:	4629      	mov	r1, r5
 80052ba:	4638      	mov	r0, r7
 80052bc:	47c0      	blx	r8
 80052be:	4306      	orrs	r6, r0
 80052c0:	3568      	adds	r5, #104	@ 0x68
 80052c2:	e7e9      	b.n	8005298 <_fwalk_sglue+0x10>

080052c4 <iprintf>:
 80052c4:	b40f      	push	{r0, r1, r2, r3}
 80052c6:	b507      	push	{r0, r1, r2, lr}
 80052c8:	4906      	ldr	r1, [pc, #24]	@ (80052e4 <iprintf+0x20>)
 80052ca:	ab04      	add	r3, sp, #16
 80052cc:	6808      	ldr	r0, [r1, #0]
 80052ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80052d2:	6881      	ldr	r1, [r0, #8]
 80052d4:	9301      	str	r3, [sp, #4]
 80052d6:	f001 fbd1 	bl	8006a7c <_vfiprintf_r>
 80052da:	b003      	add	sp, #12
 80052dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80052e0:	b004      	add	sp, #16
 80052e2:	4770      	bx	lr
 80052e4:	20000018 	.word	0x20000018

080052e8 <__sread>:
 80052e8:	b510      	push	{r4, lr}
 80052ea:	460c      	mov	r4, r1
 80052ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f0:	f000 f86c 	bl	80053cc <_read_r>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	bfab      	itete	ge
 80052f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80052fa:	89a3      	ldrhlt	r3, [r4, #12]
 80052fc:	181b      	addge	r3, r3, r0
 80052fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005302:	bfac      	ite	ge
 8005304:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005306:	81a3      	strhlt	r3, [r4, #12]
 8005308:	bd10      	pop	{r4, pc}

0800530a <__swrite>:
 800530a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800530e:	461f      	mov	r7, r3
 8005310:	898b      	ldrh	r3, [r1, #12]
 8005312:	4605      	mov	r5, r0
 8005314:	05db      	lsls	r3, r3, #23
 8005316:	460c      	mov	r4, r1
 8005318:	4616      	mov	r6, r2
 800531a:	d505      	bpl.n	8005328 <__swrite+0x1e>
 800531c:	2302      	movs	r3, #2
 800531e:	2200      	movs	r2, #0
 8005320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005324:	f000 f840 	bl	80053a8 <_lseek_r>
 8005328:	89a3      	ldrh	r3, [r4, #12]
 800532a:	4632      	mov	r2, r6
 800532c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005330:	81a3      	strh	r3, [r4, #12]
 8005332:	4628      	mov	r0, r5
 8005334:	463b      	mov	r3, r7
 8005336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800533a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800533e:	f000 b857 	b.w	80053f0 <_write_r>

08005342 <__sseek>:
 8005342:	b510      	push	{r4, lr}
 8005344:	460c      	mov	r4, r1
 8005346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800534a:	f000 f82d 	bl	80053a8 <_lseek_r>
 800534e:	1c43      	adds	r3, r0, #1
 8005350:	89a3      	ldrh	r3, [r4, #12]
 8005352:	bf15      	itete	ne
 8005354:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005356:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800535a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800535e:	81a3      	strheq	r3, [r4, #12]
 8005360:	bf18      	it	ne
 8005362:	81a3      	strhne	r3, [r4, #12]
 8005364:	bd10      	pop	{r4, pc}

08005366 <__sclose>:
 8005366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800536a:	f000 b80d 	b.w	8005388 <_close_r>

0800536e <memset>:
 800536e:	4603      	mov	r3, r0
 8005370:	4402      	add	r2, r0
 8005372:	4293      	cmp	r3, r2
 8005374:	d100      	bne.n	8005378 <memset+0xa>
 8005376:	4770      	bx	lr
 8005378:	f803 1b01 	strb.w	r1, [r3], #1
 800537c:	e7f9      	b.n	8005372 <memset+0x4>
	...

08005380 <_localeconv_r>:
 8005380:	4800      	ldr	r0, [pc, #0]	@ (8005384 <_localeconv_r+0x4>)
 8005382:	4770      	bx	lr
 8005384:	20000158 	.word	0x20000158

08005388 <_close_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	2300      	movs	r3, #0
 800538c:	4d05      	ldr	r5, [pc, #20]	@ (80053a4 <_close_r+0x1c>)
 800538e:	4604      	mov	r4, r0
 8005390:	4608      	mov	r0, r1
 8005392:	602b      	str	r3, [r5, #0]
 8005394:	f7fc f973 	bl	800167e <_close>
 8005398:	1c43      	adds	r3, r0, #1
 800539a:	d102      	bne.n	80053a2 <_close_r+0x1a>
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	b103      	cbz	r3, 80053a2 <_close_r+0x1a>
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
 80053a4:	20000414 	.word	0x20000414

080053a8 <_lseek_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	4604      	mov	r4, r0
 80053ac:	4608      	mov	r0, r1
 80053ae:	4611      	mov	r1, r2
 80053b0:	2200      	movs	r2, #0
 80053b2:	4d05      	ldr	r5, [pc, #20]	@ (80053c8 <_lseek_r+0x20>)
 80053b4:	602a      	str	r2, [r5, #0]
 80053b6:	461a      	mov	r2, r3
 80053b8:	f7fc f985 	bl	80016c6 <_lseek>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	d102      	bne.n	80053c6 <_lseek_r+0x1e>
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	b103      	cbz	r3, 80053c6 <_lseek_r+0x1e>
 80053c4:	6023      	str	r3, [r4, #0]
 80053c6:	bd38      	pop	{r3, r4, r5, pc}
 80053c8:	20000414 	.word	0x20000414

080053cc <_read_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	4604      	mov	r4, r0
 80053d0:	4608      	mov	r0, r1
 80053d2:	4611      	mov	r1, r2
 80053d4:	2200      	movs	r2, #0
 80053d6:	4d05      	ldr	r5, [pc, #20]	@ (80053ec <_read_r+0x20>)
 80053d8:	602a      	str	r2, [r5, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	f7fc f916 	bl	800160c <_read>
 80053e0:	1c43      	adds	r3, r0, #1
 80053e2:	d102      	bne.n	80053ea <_read_r+0x1e>
 80053e4:	682b      	ldr	r3, [r5, #0]
 80053e6:	b103      	cbz	r3, 80053ea <_read_r+0x1e>
 80053e8:	6023      	str	r3, [r4, #0]
 80053ea:	bd38      	pop	{r3, r4, r5, pc}
 80053ec:	20000414 	.word	0x20000414

080053f0 <_write_r>:
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	4604      	mov	r4, r0
 80053f4:	4608      	mov	r0, r1
 80053f6:	4611      	mov	r1, r2
 80053f8:	2200      	movs	r2, #0
 80053fa:	4d05      	ldr	r5, [pc, #20]	@ (8005410 <_write_r+0x20>)
 80053fc:	602a      	str	r2, [r5, #0]
 80053fe:	461a      	mov	r2, r3
 8005400:	f7fc f921 	bl	8001646 <_write>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d102      	bne.n	800540e <_write_r+0x1e>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	b103      	cbz	r3, 800540e <_write_r+0x1e>
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	bd38      	pop	{r3, r4, r5, pc}
 8005410:	20000414 	.word	0x20000414

08005414 <__errno>:
 8005414:	4b01      	ldr	r3, [pc, #4]	@ (800541c <__errno+0x8>)
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	20000018 	.word	0x20000018

08005420 <__libc_init_array>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	2600      	movs	r6, #0
 8005424:	4d0c      	ldr	r5, [pc, #48]	@ (8005458 <__libc_init_array+0x38>)
 8005426:	4c0d      	ldr	r4, [pc, #52]	@ (800545c <__libc_init_array+0x3c>)
 8005428:	1b64      	subs	r4, r4, r5
 800542a:	10a4      	asrs	r4, r4, #2
 800542c:	42a6      	cmp	r6, r4
 800542e:	d109      	bne.n	8005444 <__libc_init_array+0x24>
 8005430:	f002 fdda 	bl	8007fe8 <_init>
 8005434:	2600      	movs	r6, #0
 8005436:	4d0a      	ldr	r5, [pc, #40]	@ (8005460 <__libc_init_array+0x40>)
 8005438:	4c0a      	ldr	r4, [pc, #40]	@ (8005464 <__libc_init_array+0x44>)
 800543a:	1b64      	subs	r4, r4, r5
 800543c:	10a4      	asrs	r4, r4, #2
 800543e:	42a6      	cmp	r6, r4
 8005440:	d105      	bne.n	800544e <__libc_init_array+0x2e>
 8005442:	bd70      	pop	{r4, r5, r6, pc}
 8005444:	f855 3b04 	ldr.w	r3, [r5], #4
 8005448:	4798      	blx	r3
 800544a:	3601      	adds	r6, #1
 800544c:	e7ee      	b.n	800542c <__libc_init_array+0xc>
 800544e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005452:	4798      	blx	r3
 8005454:	3601      	adds	r6, #1
 8005456:	e7f2      	b.n	800543e <__libc_init_array+0x1e>
 8005458:	08008400 	.word	0x08008400
 800545c:	08008400 	.word	0x08008400
 8005460:	08008400 	.word	0x08008400
 8005464:	08008404 	.word	0x08008404

08005468 <__retarget_lock_init_recursive>:
 8005468:	4770      	bx	lr

0800546a <__retarget_lock_acquire_recursive>:
 800546a:	4770      	bx	lr

0800546c <__retarget_lock_release_recursive>:
 800546c:	4770      	bx	lr

0800546e <memchr>:
 800546e:	4603      	mov	r3, r0
 8005470:	b510      	push	{r4, lr}
 8005472:	b2c9      	uxtb	r1, r1
 8005474:	4402      	add	r2, r0
 8005476:	4293      	cmp	r3, r2
 8005478:	4618      	mov	r0, r3
 800547a:	d101      	bne.n	8005480 <memchr+0x12>
 800547c:	2000      	movs	r0, #0
 800547e:	e003      	b.n	8005488 <memchr+0x1a>
 8005480:	7804      	ldrb	r4, [r0, #0]
 8005482:	3301      	adds	r3, #1
 8005484:	428c      	cmp	r4, r1
 8005486:	d1f6      	bne.n	8005476 <memchr+0x8>
 8005488:	bd10      	pop	{r4, pc}

0800548a <quorem>:
 800548a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800548e:	6903      	ldr	r3, [r0, #16]
 8005490:	690c      	ldr	r4, [r1, #16]
 8005492:	4607      	mov	r7, r0
 8005494:	42a3      	cmp	r3, r4
 8005496:	db7e      	blt.n	8005596 <quorem+0x10c>
 8005498:	3c01      	subs	r4, #1
 800549a:	00a3      	lsls	r3, r4, #2
 800549c:	f100 0514 	add.w	r5, r0, #20
 80054a0:	f101 0814 	add.w	r8, r1, #20
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054aa:	9301      	str	r3, [sp, #4]
 80054ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80054b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054b4:	3301      	adds	r3, #1
 80054b6:	429a      	cmp	r2, r3
 80054b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80054bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80054c0:	d32e      	bcc.n	8005520 <quorem+0x96>
 80054c2:	f04f 0a00 	mov.w	sl, #0
 80054c6:	46c4      	mov	ip, r8
 80054c8:	46ae      	mov	lr, r5
 80054ca:	46d3      	mov	fp, sl
 80054cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80054d0:	b298      	uxth	r0, r3
 80054d2:	fb06 a000 	mla	r0, r6, r0, sl
 80054d6:	0c1b      	lsrs	r3, r3, #16
 80054d8:	0c02      	lsrs	r2, r0, #16
 80054da:	fb06 2303 	mla	r3, r6, r3, r2
 80054de:	f8de 2000 	ldr.w	r2, [lr]
 80054e2:	b280      	uxth	r0, r0
 80054e4:	b292      	uxth	r2, r2
 80054e6:	1a12      	subs	r2, r2, r0
 80054e8:	445a      	add	r2, fp
 80054ea:	f8de 0000 	ldr.w	r0, [lr]
 80054ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80054f8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80054fc:	b292      	uxth	r2, r2
 80054fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005502:	45e1      	cmp	r9, ip
 8005504:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005508:	f84e 2b04 	str.w	r2, [lr], #4
 800550c:	d2de      	bcs.n	80054cc <quorem+0x42>
 800550e:	9b00      	ldr	r3, [sp, #0]
 8005510:	58eb      	ldr	r3, [r5, r3]
 8005512:	b92b      	cbnz	r3, 8005520 <quorem+0x96>
 8005514:	9b01      	ldr	r3, [sp, #4]
 8005516:	3b04      	subs	r3, #4
 8005518:	429d      	cmp	r5, r3
 800551a:	461a      	mov	r2, r3
 800551c:	d32f      	bcc.n	800557e <quorem+0xf4>
 800551e:	613c      	str	r4, [r7, #16]
 8005520:	4638      	mov	r0, r7
 8005522:	f001 f97b 	bl	800681c <__mcmp>
 8005526:	2800      	cmp	r0, #0
 8005528:	db25      	blt.n	8005576 <quorem+0xec>
 800552a:	4629      	mov	r1, r5
 800552c:	2000      	movs	r0, #0
 800552e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005532:	f8d1 c000 	ldr.w	ip, [r1]
 8005536:	fa1f fe82 	uxth.w	lr, r2
 800553a:	fa1f f38c 	uxth.w	r3, ip
 800553e:	eba3 030e 	sub.w	r3, r3, lr
 8005542:	4403      	add	r3, r0
 8005544:	0c12      	lsrs	r2, r2, #16
 8005546:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800554a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800554e:	b29b      	uxth	r3, r3
 8005550:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005554:	45c1      	cmp	r9, r8
 8005556:	ea4f 4022 	mov.w	r0, r2, asr #16
 800555a:	f841 3b04 	str.w	r3, [r1], #4
 800555e:	d2e6      	bcs.n	800552e <quorem+0xa4>
 8005560:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005564:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005568:	b922      	cbnz	r2, 8005574 <quorem+0xea>
 800556a:	3b04      	subs	r3, #4
 800556c:	429d      	cmp	r5, r3
 800556e:	461a      	mov	r2, r3
 8005570:	d30b      	bcc.n	800558a <quorem+0x100>
 8005572:	613c      	str	r4, [r7, #16]
 8005574:	3601      	adds	r6, #1
 8005576:	4630      	mov	r0, r6
 8005578:	b003      	add	sp, #12
 800557a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557e:	6812      	ldr	r2, [r2, #0]
 8005580:	3b04      	subs	r3, #4
 8005582:	2a00      	cmp	r2, #0
 8005584:	d1cb      	bne.n	800551e <quorem+0x94>
 8005586:	3c01      	subs	r4, #1
 8005588:	e7c6      	b.n	8005518 <quorem+0x8e>
 800558a:	6812      	ldr	r2, [r2, #0]
 800558c:	3b04      	subs	r3, #4
 800558e:	2a00      	cmp	r2, #0
 8005590:	d1ef      	bne.n	8005572 <quorem+0xe8>
 8005592:	3c01      	subs	r4, #1
 8005594:	e7ea      	b.n	800556c <quorem+0xe2>
 8005596:	2000      	movs	r0, #0
 8005598:	e7ee      	b.n	8005578 <quorem+0xee>
 800559a:	0000      	movs	r0, r0
 800559c:	0000      	movs	r0, r0
	...

080055a0 <_dtoa_r>:
 80055a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a4:	4614      	mov	r4, r2
 80055a6:	461d      	mov	r5, r3
 80055a8:	69c7      	ldr	r7, [r0, #28]
 80055aa:	b097      	sub	sp, #92	@ 0x5c
 80055ac:	4683      	mov	fp, r0
 80055ae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80055b2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80055b4:	b97f      	cbnz	r7, 80055d6 <_dtoa_r+0x36>
 80055b6:	2010      	movs	r0, #16
 80055b8:	f000 fe02 	bl	80061c0 <malloc>
 80055bc:	4602      	mov	r2, r0
 80055be:	f8cb 001c 	str.w	r0, [fp, #28]
 80055c2:	b920      	cbnz	r0, 80055ce <_dtoa_r+0x2e>
 80055c4:	21ef      	movs	r1, #239	@ 0xef
 80055c6:	4ba8      	ldr	r3, [pc, #672]	@ (8005868 <_dtoa_r+0x2c8>)
 80055c8:	48a8      	ldr	r0, [pc, #672]	@ (800586c <_dtoa_r+0x2cc>)
 80055ca:	f001 fcc9 	bl	8006f60 <__assert_func>
 80055ce:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80055d2:	6007      	str	r7, [r0, #0]
 80055d4:	60c7      	str	r7, [r0, #12]
 80055d6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80055da:	6819      	ldr	r1, [r3, #0]
 80055dc:	b159      	cbz	r1, 80055f6 <_dtoa_r+0x56>
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	2301      	movs	r3, #1
 80055e2:	4093      	lsls	r3, r2
 80055e4:	604a      	str	r2, [r1, #4]
 80055e6:	608b      	str	r3, [r1, #8]
 80055e8:	4658      	mov	r0, fp
 80055ea:	f000 fedf 	bl	80063ac <_Bfree>
 80055ee:	2200      	movs	r2, #0
 80055f0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	1e2b      	subs	r3, r5, #0
 80055f8:	bfaf      	iteee	ge
 80055fa:	2300      	movge	r3, #0
 80055fc:	2201      	movlt	r2, #1
 80055fe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005602:	9303      	strlt	r3, [sp, #12]
 8005604:	bfa8      	it	ge
 8005606:	6033      	strge	r3, [r6, #0]
 8005608:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800560c:	4b98      	ldr	r3, [pc, #608]	@ (8005870 <_dtoa_r+0x2d0>)
 800560e:	bfb8      	it	lt
 8005610:	6032      	strlt	r2, [r6, #0]
 8005612:	ea33 0308 	bics.w	r3, r3, r8
 8005616:	d112      	bne.n	800563e <_dtoa_r+0x9e>
 8005618:	f242 730f 	movw	r3, #9999	@ 0x270f
 800561c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005624:	4323      	orrs	r3, r4
 8005626:	f000 8550 	beq.w	80060ca <_dtoa_r+0xb2a>
 800562a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800562c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005874 <_dtoa_r+0x2d4>
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 8552 	beq.w	80060da <_dtoa_r+0xb3a>
 8005636:	f10a 0303 	add.w	r3, sl, #3
 800563a:	f000 bd4c 	b.w	80060d6 <_dtoa_r+0xb36>
 800563e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005642:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005646:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800564a:	2200      	movs	r2, #0
 800564c:	2300      	movs	r3, #0
 800564e:	f7fb f9ab 	bl	80009a8 <__aeabi_dcmpeq>
 8005652:	4607      	mov	r7, r0
 8005654:	b158      	cbz	r0, 800566e <_dtoa_r+0xce>
 8005656:	2301      	movs	r3, #1
 8005658:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800565e:	b113      	cbz	r3, 8005666 <_dtoa_r+0xc6>
 8005660:	4b85      	ldr	r3, [pc, #532]	@ (8005878 <_dtoa_r+0x2d8>)
 8005662:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800587c <_dtoa_r+0x2dc>
 800566a:	f000 bd36 	b.w	80060da <_dtoa_r+0xb3a>
 800566e:	ab14      	add	r3, sp, #80	@ 0x50
 8005670:	9301      	str	r3, [sp, #4]
 8005672:	ab15      	add	r3, sp, #84	@ 0x54
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	4658      	mov	r0, fp
 8005678:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800567c:	f001 f97e 	bl	800697c <__d2b>
 8005680:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005684:	4681      	mov	r9, r0
 8005686:	2e00      	cmp	r6, #0
 8005688:	d077      	beq.n	800577a <_dtoa_r+0x1da>
 800568a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800568e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005690:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005698:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800569c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80056a0:	9712      	str	r7, [sp, #72]	@ 0x48
 80056a2:	4619      	mov	r1, r3
 80056a4:	2200      	movs	r2, #0
 80056a6:	4b76      	ldr	r3, [pc, #472]	@ (8005880 <_dtoa_r+0x2e0>)
 80056a8:	f7fa fd5e 	bl	8000168 <__aeabi_dsub>
 80056ac:	a368      	add	r3, pc, #416	@ (adr r3, 8005850 <_dtoa_r+0x2b0>)
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	f7fa ff11 	bl	80004d8 <__aeabi_dmul>
 80056b6:	a368      	add	r3, pc, #416	@ (adr r3, 8005858 <_dtoa_r+0x2b8>)
 80056b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056bc:	f7fa fd56 	bl	800016c <__adddf3>
 80056c0:	4604      	mov	r4, r0
 80056c2:	4630      	mov	r0, r6
 80056c4:	460d      	mov	r5, r1
 80056c6:	f7fa fe9d 	bl	8000404 <__aeabi_i2d>
 80056ca:	a365      	add	r3, pc, #404	@ (adr r3, 8005860 <_dtoa_r+0x2c0>)
 80056cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d0:	f7fa ff02 	bl	80004d8 <__aeabi_dmul>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4620      	mov	r0, r4
 80056da:	4629      	mov	r1, r5
 80056dc:	f7fa fd46 	bl	800016c <__adddf3>
 80056e0:	4604      	mov	r4, r0
 80056e2:	460d      	mov	r5, r1
 80056e4:	f7fb f9a8 	bl	8000a38 <__aeabi_d2iz>
 80056e8:	2200      	movs	r2, #0
 80056ea:	4607      	mov	r7, r0
 80056ec:	2300      	movs	r3, #0
 80056ee:	4620      	mov	r0, r4
 80056f0:	4629      	mov	r1, r5
 80056f2:	f7fb f963 	bl	80009bc <__aeabi_dcmplt>
 80056f6:	b140      	cbz	r0, 800570a <_dtoa_r+0x16a>
 80056f8:	4638      	mov	r0, r7
 80056fa:	f7fa fe83 	bl	8000404 <__aeabi_i2d>
 80056fe:	4622      	mov	r2, r4
 8005700:	462b      	mov	r3, r5
 8005702:	f7fb f951 	bl	80009a8 <__aeabi_dcmpeq>
 8005706:	b900      	cbnz	r0, 800570a <_dtoa_r+0x16a>
 8005708:	3f01      	subs	r7, #1
 800570a:	2f16      	cmp	r7, #22
 800570c:	d853      	bhi.n	80057b6 <_dtoa_r+0x216>
 800570e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005712:	4b5c      	ldr	r3, [pc, #368]	@ (8005884 <_dtoa_r+0x2e4>)
 8005714:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f7fb f94e 	bl	80009bc <__aeabi_dcmplt>
 8005720:	2800      	cmp	r0, #0
 8005722:	d04a      	beq.n	80057ba <_dtoa_r+0x21a>
 8005724:	2300      	movs	r3, #0
 8005726:	3f01      	subs	r7, #1
 8005728:	930f      	str	r3, [sp, #60]	@ 0x3c
 800572a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800572c:	1b9b      	subs	r3, r3, r6
 800572e:	1e5a      	subs	r2, r3, #1
 8005730:	bf46      	itte	mi
 8005732:	f1c3 0801 	rsbmi	r8, r3, #1
 8005736:	2300      	movmi	r3, #0
 8005738:	f04f 0800 	movpl.w	r8, #0
 800573c:	9209      	str	r2, [sp, #36]	@ 0x24
 800573e:	bf48      	it	mi
 8005740:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005742:	2f00      	cmp	r7, #0
 8005744:	db3b      	blt.n	80057be <_dtoa_r+0x21e>
 8005746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005748:	970e      	str	r7, [sp, #56]	@ 0x38
 800574a:	443b      	add	r3, r7
 800574c:	9309      	str	r3, [sp, #36]	@ 0x24
 800574e:	2300      	movs	r3, #0
 8005750:	930a      	str	r3, [sp, #40]	@ 0x28
 8005752:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005754:	2b09      	cmp	r3, #9
 8005756:	d866      	bhi.n	8005826 <_dtoa_r+0x286>
 8005758:	2b05      	cmp	r3, #5
 800575a:	bfc4      	itt	gt
 800575c:	3b04      	subgt	r3, #4
 800575e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005760:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005762:	bfc8      	it	gt
 8005764:	2400      	movgt	r4, #0
 8005766:	f1a3 0302 	sub.w	r3, r3, #2
 800576a:	bfd8      	it	le
 800576c:	2401      	movle	r4, #1
 800576e:	2b03      	cmp	r3, #3
 8005770:	d864      	bhi.n	800583c <_dtoa_r+0x29c>
 8005772:	e8df f003 	tbb	[pc, r3]
 8005776:	382b      	.short	0x382b
 8005778:	5636      	.short	0x5636
 800577a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800577e:	441e      	add	r6, r3
 8005780:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005784:	2b20      	cmp	r3, #32
 8005786:	bfc1      	itttt	gt
 8005788:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800578c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005790:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005794:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005798:	bfd6      	itet	le
 800579a:	f1c3 0320 	rsble	r3, r3, #32
 800579e:	ea48 0003 	orrgt.w	r0, r8, r3
 80057a2:	fa04 f003 	lslle.w	r0, r4, r3
 80057a6:	f7fa fe1d 	bl	80003e4 <__aeabi_ui2d>
 80057aa:	2201      	movs	r2, #1
 80057ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80057b0:	3e01      	subs	r6, #1
 80057b2:	9212      	str	r2, [sp, #72]	@ 0x48
 80057b4:	e775      	b.n	80056a2 <_dtoa_r+0x102>
 80057b6:	2301      	movs	r3, #1
 80057b8:	e7b6      	b.n	8005728 <_dtoa_r+0x188>
 80057ba:	900f      	str	r0, [sp, #60]	@ 0x3c
 80057bc:	e7b5      	b.n	800572a <_dtoa_r+0x18a>
 80057be:	427b      	negs	r3, r7
 80057c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80057c2:	2300      	movs	r3, #0
 80057c4:	eba8 0807 	sub.w	r8, r8, r7
 80057c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80057ca:	e7c2      	b.n	8005752 <_dtoa_r+0x1b2>
 80057cc:	2300      	movs	r3, #0
 80057ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	dc35      	bgt.n	8005842 <_dtoa_r+0x2a2>
 80057d6:	2301      	movs	r3, #1
 80057d8:	461a      	mov	r2, r3
 80057da:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80057de:	9221      	str	r2, [sp, #132]	@ 0x84
 80057e0:	e00b      	b.n	80057fa <_dtoa_r+0x25a>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e7f3      	b.n	80057ce <_dtoa_r+0x22e>
 80057e6:	2300      	movs	r3, #0
 80057e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80057ec:	18fb      	adds	r3, r7, r3
 80057ee:	9308      	str	r3, [sp, #32]
 80057f0:	3301      	adds	r3, #1
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	9307      	str	r3, [sp, #28]
 80057f6:	bfb8      	it	lt
 80057f8:	2301      	movlt	r3, #1
 80057fa:	2100      	movs	r1, #0
 80057fc:	2204      	movs	r2, #4
 80057fe:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005802:	f102 0514 	add.w	r5, r2, #20
 8005806:	429d      	cmp	r5, r3
 8005808:	d91f      	bls.n	800584a <_dtoa_r+0x2aa>
 800580a:	6041      	str	r1, [r0, #4]
 800580c:	4658      	mov	r0, fp
 800580e:	f000 fd8d 	bl	800632c <_Balloc>
 8005812:	4682      	mov	sl, r0
 8005814:	2800      	cmp	r0, #0
 8005816:	d139      	bne.n	800588c <_dtoa_r+0x2ec>
 8005818:	4602      	mov	r2, r0
 800581a:	f240 11af 	movw	r1, #431	@ 0x1af
 800581e:	4b1a      	ldr	r3, [pc, #104]	@ (8005888 <_dtoa_r+0x2e8>)
 8005820:	e6d2      	b.n	80055c8 <_dtoa_r+0x28>
 8005822:	2301      	movs	r3, #1
 8005824:	e7e0      	b.n	80057e8 <_dtoa_r+0x248>
 8005826:	2401      	movs	r4, #1
 8005828:	2300      	movs	r3, #0
 800582a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800582c:	9320      	str	r3, [sp, #128]	@ 0x80
 800582e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005832:	2200      	movs	r2, #0
 8005834:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005838:	2312      	movs	r3, #18
 800583a:	e7d0      	b.n	80057de <_dtoa_r+0x23e>
 800583c:	2301      	movs	r3, #1
 800583e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005840:	e7f5      	b.n	800582e <_dtoa_r+0x28e>
 8005842:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005844:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005848:	e7d7      	b.n	80057fa <_dtoa_r+0x25a>
 800584a:	3101      	adds	r1, #1
 800584c:	0052      	lsls	r2, r2, #1
 800584e:	e7d8      	b.n	8005802 <_dtoa_r+0x262>
 8005850:	636f4361 	.word	0x636f4361
 8005854:	3fd287a7 	.word	0x3fd287a7
 8005858:	8b60c8b3 	.word	0x8b60c8b3
 800585c:	3fc68a28 	.word	0x3fc68a28
 8005860:	509f79fb 	.word	0x509f79fb
 8005864:	3fd34413 	.word	0x3fd34413
 8005868:	0800809b 	.word	0x0800809b
 800586c:	080080b2 	.word	0x080080b2
 8005870:	7ff00000 	.word	0x7ff00000
 8005874:	08008097 	.word	0x08008097
 8005878:	0800806b 	.word	0x0800806b
 800587c:	0800806a 	.word	0x0800806a
 8005880:	3ff80000 	.word	0x3ff80000
 8005884:	080081a8 	.word	0x080081a8
 8005888:	0800810a 	.word	0x0800810a
 800588c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005890:	6018      	str	r0, [r3, #0]
 8005892:	9b07      	ldr	r3, [sp, #28]
 8005894:	2b0e      	cmp	r3, #14
 8005896:	f200 80a4 	bhi.w	80059e2 <_dtoa_r+0x442>
 800589a:	2c00      	cmp	r4, #0
 800589c:	f000 80a1 	beq.w	80059e2 <_dtoa_r+0x442>
 80058a0:	2f00      	cmp	r7, #0
 80058a2:	dd33      	ble.n	800590c <_dtoa_r+0x36c>
 80058a4:	4b86      	ldr	r3, [pc, #536]	@ (8005ac0 <_dtoa_r+0x520>)
 80058a6:	f007 020f 	and.w	r2, r7, #15
 80058aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058ae:	05f8      	lsls	r0, r7, #23
 80058b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80058b4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80058b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80058bc:	d516      	bpl.n	80058ec <_dtoa_r+0x34c>
 80058be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058c2:	4b80      	ldr	r3, [pc, #512]	@ (8005ac4 <_dtoa_r+0x524>)
 80058c4:	2603      	movs	r6, #3
 80058c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80058ca:	f7fa ff2f 	bl	800072c <__aeabi_ddiv>
 80058ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058d2:	f004 040f 	and.w	r4, r4, #15
 80058d6:	4d7b      	ldr	r5, [pc, #492]	@ (8005ac4 <_dtoa_r+0x524>)
 80058d8:	b954      	cbnz	r4, 80058f0 <_dtoa_r+0x350>
 80058da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058e2:	f7fa ff23 	bl	800072c <__aeabi_ddiv>
 80058e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058ea:	e028      	b.n	800593e <_dtoa_r+0x39e>
 80058ec:	2602      	movs	r6, #2
 80058ee:	e7f2      	b.n	80058d6 <_dtoa_r+0x336>
 80058f0:	07e1      	lsls	r1, r4, #31
 80058f2:	d508      	bpl.n	8005906 <_dtoa_r+0x366>
 80058f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058fc:	f7fa fdec 	bl	80004d8 <__aeabi_dmul>
 8005900:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005904:	3601      	adds	r6, #1
 8005906:	1064      	asrs	r4, r4, #1
 8005908:	3508      	adds	r5, #8
 800590a:	e7e5      	b.n	80058d8 <_dtoa_r+0x338>
 800590c:	f000 80d2 	beq.w	8005ab4 <_dtoa_r+0x514>
 8005910:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005914:	427c      	negs	r4, r7
 8005916:	4b6a      	ldr	r3, [pc, #424]	@ (8005ac0 <_dtoa_r+0x520>)
 8005918:	f004 020f 	and.w	r2, r4, #15
 800591c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f7fa fdd8 	bl	80004d8 <__aeabi_dmul>
 8005928:	2602      	movs	r6, #2
 800592a:	2300      	movs	r3, #0
 800592c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005930:	4d64      	ldr	r5, [pc, #400]	@ (8005ac4 <_dtoa_r+0x524>)
 8005932:	1124      	asrs	r4, r4, #4
 8005934:	2c00      	cmp	r4, #0
 8005936:	f040 80b2 	bne.w	8005a9e <_dtoa_r+0x4fe>
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1d3      	bne.n	80058e6 <_dtoa_r+0x346>
 800593e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005942:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 80b7 	beq.w	8005ab8 <_dtoa_r+0x518>
 800594a:	2200      	movs	r2, #0
 800594c:	4620      	mov	r0, r4
 800594e:	4629      	mov	r1, r5
 8005950:	4b5d      	ldr	r3, [pc, #372]	@ (8005ac8 <_dtoa_r+0x528>)
 8005952:	f7fb f833 	bl	80009bc <__aeabi_dcmplt>
 8005956:	2800      	cmp	r0, #0
 8005958:	f000 80ae 	beq.w	8005ab8 <_dtoa_r+0x518>
 800595c:	9b07      	ldr	r3, [sp, #28]
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 80aa 	beq.w	8005ab8 <_dtoa_r+0x518>
 8005964:	9b08      	ldr	r3, [sp, #32]
 8005966:	2b00      	cmp	r3, #0
 8005968:	dd37      	ble.n	80059da <_dtoa_r+0x43a>
 800596a:	1e7b      	subs	r3, r7, #1
 800596c:	4620      	mov	r0, r4
 800596e:	9304      	str	r3, [sp, #16]
 8005970:	2200      	movs	r2, #0
 8005972:	4629      	mov	r1, r5
 8005974:	4b55      	ldr	r3, [pc, #340]	@ (8005acc <_dtoa_r+0x52c>)
 8005976:	f7fa fdaf 	bl	80004d8 <__aeabi_dmul>
 800597a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800597e:	9c08      	ldr	r4, [sp, #32]
 8005980:	3601      	adds	r6, #1
 8005982:	4630      	mov	r0, r6
 8005984:	f7fa fd3e 	bl	8000404 <__aeabi_i2d>
 8005988:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800598c:	f7fa fda4 	bl	80004d8 <__aeabi_dmul>
 8005990:	2200      	movs	r2, #0
 8005992:	4b4f      	ldr	r3, [pc, #316]	@ (8005ad0 <_dtoa_r+0x530>)
 8005994:	f7fa fbea 	bl	800016c <__adddf3>
 8005998:	4605      	mov	r5, r0
 800599a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800599e:	2c00      	cmp	r4, #0
 80059a0:	f040 809a 	bne.w	8005ad8 <_dtoa_r+0x538>
 80059a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059a8:	2200      	movs	r2, #0
 80059aa:	4b4a      	ldr	r3, [pc, #296]	@ (8005ad4 <_dtoa_r+0x534>)
 80059ac:	f7fa fbdc 	bl	8000168 <__aeabi_dsub>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059b8:	462a      	mov	r2, r5
 80059ba:	4633      	mov	r3, r6
 80059bc:	f7fb f81c 	bl	80009f8 <__aeabi_dcmpgt>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	f040 828e 	bne.w	8005ee2 <_dtoa_r+0x942>
 80059c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059ca:	462a      	mov	r2, r5
 80059cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80059d0:	f7fa fff4 	bl	80009bc <__aeabi_dcmplt>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	f040 8127 	bne.w	8005c28 <_dtoa_r+0x688>
 80059da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80059de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80059e2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f2c0 8163 	blt.w	8005cb0 <_dtoa_r+0x710>
 80059ea:	2f0e      	cmp	r7, #14
 80059ec:	f300 8160 	bgt.w	8005cb0 <_dtoa_r+0x710>
 80059f0:	4b33      	ldr	r3, [pc, #204]	@ (8005ac0 <_dtoa_r+0x520>)
 80059f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80059f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059fa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80059fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	da03      	bge.n	8005a0c <_dtoa_r+0x46c>
 8005a04:	9b07      	ldr	r3, [sp, #28]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f340 8100 	ble.w	8005c0c <_dtoa_r+0x66c>
 8005a0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a10:	4656      	mov	r6, sl
 8005a12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a16:	4620      	mov	r0, r4
 8005a18:	4629      	mov	r1, r5
 8005a1a:	f7fa fe87 	bl	800072c <__aeabi_ddiv>
 8005a1e:	f7fb f80b 	bl	8000a38 <__aeabi_d2iz>
 8005a22:	4680      	mov	r8, r0
 8005a24:	f7fa fcee 	bl	8000404 <__aeabi_i2d>
 8005a28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a2c:	f7fa fd54 	bl	80004d8 <__aeabi_dmul>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4620      	mov	r0, r4
 8005a36:	4629      	mov	r1, r5
 8005a38:	f7fa fb96 	bl	8000168 <__aeabi_dsub>
 8005a3c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005a40:	9d07      	ldr	r5, [sp, #28]
 8005a42:	f806 4b01 	strb.w	r4, [r6], #1
 8005a46:	eba6 040a 	sub.w	r4, r6, sl
 8005a4a:	42a5      	cmp	r5, r4
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	f040 8116 	bne.w	8005c80 <_dtoa_r+0x6e0>
 8005a54:	f7fa fb8a 	bl	800016c <__adddf3>
 8005a58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	460d      	mov	r5, r1
 8005a60:	f7fa ffca 	bl	80009f8 <__aeabi_dcmpgt>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	f040 80f8 	bne.w	8005c5a <_dtoa_r+0x6ba>
 8005a6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a6e:	4620      	mov	r0, r4
 8005a70:	4629      	mov	r1, r5
 8005a72:	f7fa ff99 	bl	80009a8 <__aeabi_dcmpeq>
 8005a76:	b118      	cbz	r0, 8005a80 <_dtoa_r+0x4e0>
 8005a78:	f018 0f01 	tst.w	r8, #1
 8005a7c:	f040 80ed 	bne.w	8005c5a <_dtoa_r+0x6ba>
 8005a80:	4649      	mov	r1, r9
 8005a82:	4658      	mov	r0, fp
 8005a84:	f000 fc92 	bl	80063ac <_Bfree>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	7033      	strb	r3, [r6, #0]
 8005a8c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005a8e:	3701      	adds	r7, #1
 8005a90:	601f      	str	r7, [r3, #0]
 8005a92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 8320 	beq.w	80060da <_dtoa_r+0xb3a>
 8005a9a:	601e      	str	r6, [r3, #0]
 8005a9c:	e31d      	b.n	80060da <_dtoa_r+0xb3a>
 8005a9e:	07e2      	lsls	r2, r4, #31
 8005aa0:	d505      	bpl.n	8005aae <_dtoa_r+0x50e>
 8005aa2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005aa6:	f7fa fd17 	bl	80004d8 <__aeabi_dmul>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	3601      	adds	r6, #1
 8005aae:	1064      	asrs	r4, r4, #1
 8005ab0:	3508      	adds	r5, #8
 8005ab2:	e73f      	b.n	8005934 <_dtoa_r+0x394>
 8005ab4:	2602      	movs	r6, #2
 8005ab6:	e742      	b.n	800593e <_dtoa_r+0x39e>
 8005ab8:	9c07      	ldr	r4, [sp, #28]
 8005aba:	9704      	str	r7, [sp, #16]
 8005abc:	e761      	b.n	8005982 <_dtoa_r+0x3e2>
 8005abe:	bf00      	nop
 8005ac0:	080081a8 	.word	0x080081a8
 8005ac4:	08008180 	.word	0x08008180
 8005ac8:	3ff00000 	.word	0x3ff00000
 8005acc:	40240000 	.word	0x40240000
 8005ad0:	401c0000 	.word	0x401c0000
 8005ad4:	40140000 	.word	0x40140000
 8005ad8:	4b70      	ldr	r3, [pc, #448]	@ (8005c9c <_dtoa_r+0x6fc>)
 8005ada:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005adc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ae0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ae4:	4454      	add	r4, sl
 8005ae6:	2900      	cmp	r1, #0
 8005ae8:	d045      	beq.n	8005b76 <_dtoa_r+0x5d6>
 8005aea:	2000      	movs	r0, #0
 8005aec:	496c      	ldr	r1, [pc, #432]	@ (8005ca0 <_dtoa_r+0x700>)
 8005aee:	f7fa fe1d 	bl	800072c <__aeabi_ddiv>
 8005af2:	4633      	mov	r3, r6
 8005af4:	462a      	mov	r2, r5
 8005af6:	f7fa fb37 	bl	8000168 <__aeabi_dsub>
 8005afa:	4656      	mov	r6, sl
 8005afc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b04:	f7fa ff98 	bl	8000a38 <__aeabi_d2iz>
 8005b08:	4605      	mov	r5, r0
 8005b0a:	f7fa fc7b 	bl	8000404 <__aeabi_i2d>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b16:	f7fa fb27 	bl	8000168 <__aeabi_dsub>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	3530      	adds	r5, #48	@ 0x30
 8005b20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b28:	f806 5b01 	strb.w	r5, [r6], #1
 8005b2c:	f7fa ff46 	bl	80009bc <__aeabi_dcmplt>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	d163      	bne.n	8005bfc <_dtoa_r+0x65c>
 8005b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b38:	2000      	movs	r0, #0
 8005b3a:	495a      	ldr	r1, [pc, #360]	@ (8005ca4 <_dtoa_r+0x704>)
 8005b3c:	f7fa fb14 	bl	8000168 <__aeabi_dsub>
 8005b40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b44:	f7fa ff3a 	bl	80009bc <__aeabi_dcmplt>
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	f040 8087 	bne.w	8005c5c <_dtoa_r+0x6bc>
 8005b4e:	42a6      	cmp	r6, r4
 8005b50:	f43f af43 	beq.w	80059da <_dtoa_r+0x43a>
 8005b54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005b58:	2200      	movs	r2, #0
 8005b5a:	4b53      	ldr	r3, [pc, #332]	@ (8005ca8 <_dtoa_r+0x708>)
 8005b5c:	f7fa fcbc 	bl	80004d8 <__aeabi_dmul>
 8005b60:	2200      	movs	r2, #0
 8005b62:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b6a:	4b4f      	ldr	r3, [pc, #316]	@ (8005ca8 <_dtoa_r+0x708>)
 8005b6c:	f7fa fcb4 	bl	80004d8 <__aeabi_dmul>
 8005b70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b74:	e7c4      	b.n	8005b00 <_dtoa_r+0x560>
 8005b76:	4631      	mov	r1, r6
 8005b78:	4628      	mov	r0, r5
 8005b7a:	f7fa fcad 	bl	80004d8 <__aeabi_dmul>
 8005b7e:	4656      	mov	r6, sl
 8005b80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b84:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005b86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b8a:	f7fa ff55 	bl	8000a38 <__aeabi_d2iz>
 8005b8e:	4605      	mov	r5, r0
 8005b90:	f7fa fc38 	bl	8000404 <__aeabi_i2d>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b9c:	f7fa fae4 	bl	8000168 <__aeabi_dsub>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	3530      	adds	r5, #48	@ 0x30
 8005ba6:	f806 5b01 	strb.w	r5, [r6], #1
 8005baa:	42a6      	cmp	r6, r4
 8005bac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	d124      	bne.n	8005c00 <_dtoa_r+0x660>
 8005bb6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005bba:	4b39      	ldr	r3, [pc, #228]	@ (8005ca0 <_dtoa_r+0x700>)
 8005bbc:	f7fa fad6 	bl	800016c <__adddf3>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bc8:	f7fa ff16 	bl	80009f8 <__aeabi_dcmpgt>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d145      	bne.n	8005c5c <_dtoa_r+0x6bc>
 8005bd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	4932      	ldr	r1, [pc, #200]	@ (8005ca0 <_dtoa_r+0x700>)
 8005bd8:	f7fa fac6 	bl	8000168 <__aeabi_dsub>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005be4:	f7fa feea 	bl	80009bc <__aeabi_dcmplt>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	f43f aef6 	beq.w	80059da <_dtoa_r+0x43a>
 8005bee:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005bf0:	1e73      	subs	r3, r6, #1
 8005bf2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005bf4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005bf8:	2b30      	cmp	r3, #48	@ 0x30
 8005bfa:	d0f8      	beq.n	8005bee <_dtoa_r+0x64e>
 8005bfc:	9f04      	ldr	r7, [sp, #16]
 8005bfe:	e73f      	b.n	8005a80 <_dtoa_r+0x4e0>
 8005c00:	4b29      	ldr	r3, [pc, #164]	@ (8005ca8 <_dtoa_r+0x708>)
 8005c02:	f7fa fc69 	bl	80004d8 <__aeabi_dmul>
 8005c06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c0a:	e7bc      	b.n	8005b86 <_dtoa_r+0x5e6>
 8005c0c:	d10c      	bne.n	8005c28 <_dtoa_r+0x688>
 8005c0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c12:	2200      	movs	r2, #0
 8005c14:	4b25      	ldr	r3, [pc, #148]	@ (8005cac <_dtoa_r+0x70c>)
 8005c16:	f7fa fc5f 	bl	80004d8 <__aeabi_dmul>
 8005c1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c1e:	f7fa fee1 	bl	80009e4 <__aeabi_dcmpge>
 8005c22:	2800      	cmp	r0, #0
 8005c24:	f000 815b 	beq.w	8005ede <_dtoa_r+0x93e>
 8005c28:	2400      	movs	r4, #0
 8005c2a:	4625      	mov	r5, r4
 8005c2c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005c2e:	4656      	mov	r6, sl
 8005c30:	43db      	mvns	r3, r3
 8005c32:	9304      	str	r3, [sp, #16]
 8005c34:	2700      	movs	r7, #0
 8005c36:	4621      	mov	r1, r4
 8005c38:	4658      	mov	r0, fp
 8005c3a:	f000 fbb7 	bl	80063ac <_Bfree>
 8005c3e:	2d00      	cmp	r5, #0
 8005c40:	d0dc      	beq.n	8005bfc <_dtoa_r+0x65c>
 8005c42:	b12f      	cbz	r7, 8005c50 <_dtoa_r+0x6b0>
 8005c44:	42af      	cmp	r7, r5
 8005c46:	d003      	beq.n	8005c50 <_dtoa_r+0x6b0>
 8005c48:	4639      	mov	r1, r7
 8005c4a:	4658      	mov	r0, fp
 8005c4c:	f000 fbae 	bl	80063ac <_Bfree>
 8005c50:	4629      	mov	r1, r5
 8005c52:	4658      	mov	r0, fp
 8005c54:	f000 fbaa 	bl	80063ac <_Bfree>
 8005c58:	e7d0      	b.n	8005bfc <_dtoa_r+0x65c>
 8005c5a:	9704      	str	r7, [sp, #16]
 8005c5c:	4633      	mov	r3, r6
 8005c5e:	461e      	mov	r6, r3
 8005c60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c64:	2a39      	cmp	r2, #57	@ 0x39
 8005c66:	d107      	bne.n	8005c78 <_dtoa_r+0x6d8>
 8005c68:	459a      	cmp	sl, r3
 8005c6a:	d1f8      	bne.n	8005c5e <_dtoa_r+0x6be>
 8005c6c:	9a04      	ldr	r2, [sp, #16]
 8005c6e:	3201      	adds	r2, #1
 8005c70:	9204      	str	r2, [sp, #16]
 8005c72:	2230      	movs	r2, #48	@ 0x30
 8005c74:	f88a 2000 	strb.w	r2, [sl]
 8005c78:	781a      	ldrb	r2, [r3, #0]
 8005c7a:	3201      	adds	r2, #1
 8005c7c:	701a      	strb	r2, [r3, #0]
 8005c7e:	e7bd      	b.n	8005bfc <_dtoa_r+0x65c>
 8005c80:	2200      	movs	r2, #0
 8005c82:	4b09      	ldr	r3, [pc, #36]	@ (8005ca8 <_dtoa_r+0x708>)
 8005c84:	f7fa fc28 	bl	80004d8 <__aeabi_dmul>
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	460d      	mov	r5, r1
 8005c90:	f7fa fe8a 	bl	80009a8 <__aeabi_dcmpeq>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	f43f aebc 	beq.w	8005a12 <_dtoa_r+0x472>
 8005c9a:	e6f1      	b.n	8005a80 <_dtoa_r+0x4e0>
 8005c9c:	080081a8 	.word	0x080081a8
 8005ca0:	3fe00000 	.word	0x3fe00000
 8005ca4:	3ff00000 	.word	0x3ff00000
 8005ca8:	40240000 	.word	0x40240000
 8005cac:	40140000 	.word	0x40140000
 8005cb0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005cb2:	2a00      	cmp	r2, #0
 8005cb4:	f000 80db 	beq.w	8005e6e <_dtoa_r+0x8ce>
 8005cb8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005cba:	2a01      	cmp	r2, #1
 8005cbc:	f300 80bf 	bgt.w	8005e3e <_dtoa_r+0x89e>
 8005cc0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005cc2:	2a00      	cmp	r2, #0
 8005cc4:	f000 80b7 	beq.w	8005e36 <_dtoa_r+0x896>
 8005cc8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005ccc:	4646      	mov	r6, r8
 8005cce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005cd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	441a      	add	r2, r3
 8005cd6:	4658      	mov	r0, fp
 8005cd8:	4498      	add	r8, r3
 8005cda:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cdc:	f000 fc1a 	bl	8006514 <__i2b>
 8005ce0:	4605      	mov	r5, r0
 8005ce2:	b15e      	cbz	r6, 8005cfc <_dtoa_r+0x75c>
 8005ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	dd08      	ble.n	8005cfc <_dtoa_r+0x75c>
 8005cea:	42b3      	cmp	r3, r6
 8005cec:	bfa8      	it	ge
 8005cee:	4633      	movge	r3, r6
 8005cf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cf2:	eba8 0803 	sub.w	r8, r8, r3
 8005cf6:	1af6      	subs	r6, r6, r3
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cfe:	b1f3      	cbz	r3, 8005d3e <_dtoa_r+0x79e>
 8005d00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 80b7 	beq.w	8005e76 <_dtoa_r+0x8d6>
 8005d08:	b18c      	cbz	r4, 8005d2e <_dtoa_r+0x78e>
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	4622      	mov	r2, r4
 8005d0e:	4658      	mov	r0, fp
 8005d10:	f000 fcbe 	bl	8006690 <__pow5mult>
 8005d14:	464a      	mov	r2, r9
 8005d16:	4601      	mov	r1, r0
 8005d18:	4605      	mov	r5, r0
 8005d1a:	4658      	mov	r0, fp
 8005d1c:	f000 fc10 	bl	8006540 <__multiply>
 8005d20:	4649      	mov	r1, r9
 8005d22:	9004      	str	r0, [sp, #16]
 8005d24:	4658      	mov	r0, fp
 8005d26:	f000 fb41 	bl	80063ac <_Bfree>
 8005d2a:	9b04      	ldr	r3, [sp, #16]
 8005d2c:	4699      	mov	r9, r3
 8005d2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d30:	1b1a      	subs	r2, r3, r4
 8005d32:	d004      	beq.n	8005d3e <_dtoa_r+0x79e>
 8005d34:	4649      	mov	r1, r9
 8005d36:	4658      	mov	r0, fp
 8005d38:	f000 fcaa 	bl	8006690 <__pow5mult>
 8005d3c:	4681      	mov	r9, r0
 8005d3e:	2101      	movs	r1, #1
 8005d40:	4658      	mov	r0, fp
 8005d42:	f000 fbe7 	bl	8006514 <__i2b>
 8005d46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d48:	4604      	mov	r4, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 81c9 	beq.w	80060e2 <_dtoa_r+0xb42>
 8005d50:	461a      	mov	r2, r3
 8005d52:	4601      	mov	r1, r0
 8005d54:	4658      	mov	r0, fp
 8005d56:	f000 fc9b 	bl	8006690 <__pow5mult>
 8005d5a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	f300 808f 	bgt.w	8005e82 <_dtoa_r+0x8e2>
 8005d64:	9b02      	ldr	r3, [sp, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f040 8087 	bne.w	8005e7a <_dtoa_r+0x8da>
 8005d6c:	9b03      	ldr	r3, [sp, #12]
 8005d6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f040 8083 	bne.w	8005e7e <_dtoa_r+0x8de>
 8005d78:	9b03      	ldr	r3, [sp, #12]
 8005d7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d7e:	0d1b      	lsrs	r3, r3, #20
 8005d80:	051b      	lsls	r3, r3, #20
 8005d82:	b12b      	cbz	r3, 8005d90 <_dtoa_r+0x7f0>
 8005d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d86:	f108 0801 	add.w	r8, r8, #1
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d8e:	2301      	movs	r3, #1
 8005d90:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 81aa 	beq.w	80060ee <_dtoa_r+0xb4e>
 8005d9a:	6923      	ldr	r3, [r4, #16]
 8005d9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005da0:	6918      	ldr	r0, [r3, #16]
 8005da2:	f000 fb6b 	bl	800647c <__hi0bits>
 8005da6:	f1c0 0020 	rsb	r0, r0, #32
 8005daa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dac:	4418      	add	r0, r3
 8005dae:	f010 001f 	ands.w	r0, r0, #31
 8005db2:	d071      	beq.n	8005e98 <_dtoa_r+0x8f8>
 8005db4:	f1c0 0320 	rsb	r3, r0, #32
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	dd65      	ble.n	8005e88 <_dtoa_r+0x8e8>
 8005dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dbe:	f1c0 001c 	rsb	r0, r0, #28
 8005dc2:	4403      	add	r3, r0
 8005dc4:	4480      	add	r8, r0
 8005dc6:	4406      	add	r6, r0
 8005dc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dca:	f1b8 0f00 	cmp.w	r8, #0
 8005dce:	dd05      	ble.n	8005ddc <_dtoa_r+0x83c>
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	4642      	mov	r2, r8
 8005dd4:	4658      	mov	r0, fp
 8005dd6:	f000 fcb5 	bl	8006744 <__lshift>
 8005dda:	4681      	mov	r9, r0
 8005ddc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	dd05      	ble.n	8005dee <_dtoa_r+0x84e>
 8005de2:	4621      	mov	r1, r4
 8005de4:	461a      	mov	r2, r3
 8005de6:	4658      	mov	r0, fp
 8005de8:	f000 fcac 	bl	8006744 <__lshift>
 8005dec:	4604      	mov	r4, r0
 8005dee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d053      	beq.n	8005e9c <_dtoa_r+0x8fc>
 8005df4:	4621      	mov	r1, r4
 8005df6:	4648      	mov	r0, r9
 8005df8:	f000 fd10 	bl	800681c <__mcmp>
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	da4d      	bge.n	8005e9c <_dtoa_r+0x8fc>
 8005e00:	1e7b      	subs	r3, r7, #1
 8005e02:	4649      	mov	r1, r9
 8005e04:	9304      	str	r3, [sp, #16]
 8005e06:	220a      	movs	r2, #10
 8005e08:	2300      	movs	r3, #0
 8005e0a:	4658      	mov	r0, fp
 8005e0c:	f000 faf0 	bl	80063f0 <__multadd>
 8005e10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e12:	4681      	mov	r9, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 816c 	beq.w	80060f2 <_dtoa_r+0xb52>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	220a      	movs	r2, #10
 8005e20:	4658      	mov	r0, fp
 8005e22:	f000 fae5 	bl	80063f0 <__multadd>
 8005e26:	9b08      	ldr	r3, [sp, #32]
 8005e28:	4605      	mov	r5, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	dc61      	bgt.n	8005ef2 <_dtoa_r+0x952>
 8005e2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	dc3b      	bgt.n	8005eac <_dtoa_r+0x90c>
 8005e34:	e05d      	b.n	8005ef2 <_dtoa_r+0x952>
 8005e36:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e38:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005e3c:	e746      	b.n	8005ccc <_dtoa_r+0x72c>
 8005e3e:	9b07      	ldr	r3, [sp, #28]
 8005e40:	1e5c      	subs	r4, r3, #1
 8005e42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e44:	42a3      	cmp	r3, r4
 8005e46:	bfbf      	itttt	lt
 8005e48:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005e4a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005e4c:	1ae3      	sublt	r3, r4, r3
 8005e4e:	18d2      	addlt	r2, r2, r3
 8005e50:	bfa8      	it	ge
 8005e52:	1b1c      	subge	r4, r3, r4
 8005e54:	9b07      	ldr	r3, [sp, #28]
 8005e56:	bfbe      	ittt	lt
 8005e58:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005e5a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005e5c:	2400      	movlt	r4, #0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	bfb5      	itete	lt
 8005e62:	eba8 0603 	sublt.w	r6, r8, r3
 8005e66:	4646      	movge	r6, r8
 8005e68:	2300      	movlt	r3, #0
 8005e6a:	9b07      	ldrge	r3, [sp, #28]
 8005e6c:	e730      	b.n	8005cd0 <_dtoa_r+0x730>
 8005e6e:	4646      	mov	r6, r8
 8005e70:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005e72:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005e74:	e735      	b.n	8005ce2 <_dtoa_r+0x742>
 8005e76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e78:	e75c      	b.n	8005d34 <_dtoa_r+0x794>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	e788      	b.n	8005d90 <_dtoa_r+0x7f0>
 8005e7e:	9b02      	ldr	r3, [sp, #8]
 8005e80:	e786      	b.n	8005d90 <_dtoa_r+0x7f0>
 8005e82:	2300      	movs	r3, #0
 8005e84:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e86:	e788      	b.n	8005d9a <_dtoa_r+0x7fa>
 8005e88:	d09f      	beq.n	8005dca <_dtoa_r+0x82a>
 8005e8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e8c:	331c      	adds	r3, #28
 8005e8e:	441a      	add	r2, r3
 8005e90:	4498      	add	r8, r3
 8005e92:	441e      	add	r6, r3
 8005e94:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e96:	e798      	b.n	8005dca <_dtoa_r+0x82a>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	e7f6      	b.n	8005e8a <_dtoa_r+0x8ea>
 8005e9c:	9b07      	ldr	r3, [sp, #28]
 8005e9e:	9704      	str	r7, [sp, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	dc20      	bgt.n	8005ee6 <_dtoa_r+0x946>
 8005ea4:	9308      	str	r3, [sp, #32]
 8005ea6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	dd1e      	ble.n	8005eea <_dtoa_r+0x94a>
 8005eac:	9b08      	ldr	r3, [sp, #32]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f47f aebc 	bne.w	8005c2c <_dtoa_r+0x68c>
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	2205      	movs	r2, #5
 8005eb8:	4658      	mov	r0, fp
 8005eba:	f000 fa99 	bl	80063f0 <__multadd>
 8005ebe:	4601      	mov	r1, r0
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	4648      	mov	r0, r9
 8005ec4:	f000 fcaa 	bl	800681c <__mcmp>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	f77f aeaf 	ble.w	8005c2c <_dtoa_r+0x68c>
 8005ece:	2331      	movs	r3, #49	@ 0x31
 8005ed0:	4656      	mov	r6, sl
 8005ed2:	f806 3b01 	strb.w	r3, [r6], #1
 8005ed6:	9b04      	ldr	r3, [sp, #16]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	9304      	str	r3, [sp, #16]
 8005edc:	e6aa      	b.n	8005c34 <_dtoa_r+0x694>
 8005ede:	9c07      	ldr	r4, [sp, #28]
 8005ee0:	9704      	str	r7, [sp, #16]
 8005ee2:	4625      	mov	r5, r4
 8005ee4:	e7f3      	b.n	8005ece <_dtoa_r+0x92e>
 8005ee6:	9b07      	ldr	r3, [sp, #28]
 8005ee8:	9308      	str	r3, [sp, #32]
 8005eea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8104 	beq.w	80060fa <_dtoa_r+0xb5a>
 8005ef2:	2e00      	cmp	r6, #0
 8005ef4:	dd05      	ble.n	8005f02 <_dtoa_r+0x962>
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	4632      	mov	r2, r6
 8005efa:	4658      	mov	r0, fp
 8005efc:	f000 fc22 	bl	8006744 <__lshift>
 8005f00:	4605      	mov	r5, r0
 8005f02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d05a      	beq.n	8005fbe <_dtoa_r+0xa1e>
 8005f08:	4658      	mov	r0, fp
 8005f0a:	6869      	ldr	r1, [r5, #4]
 8005f0c:	f000 fa0e 	bl	800632c <_Balloc>
 8005f10:	4606      	mov	r6, r0
 8005f12:	b928      	cbnz	r0, 8005f20 <_dtoa_r+0x980>
 8005f14:	4602      	mov	r2, r0
 8005f16:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005f1a:	4b83      	ldr	r3, [pc, #524]	@ (8006128 <_dtoa_r+0xb88>)
 8005f1c:	f7ff bb54 	b.w	80055c8 <_dtoa_r+0x28>
 8005f20:	692a      	ldr	r2, [r5, #16]
 8005f22:	f105 010c 	add.w	r1, r5, #12
 8005f26:	3202      	adds	r2, #2
 8005f28:	0092      	lsls	r2, r2, #2
 8005f2a:	300c      	adds	r0, #12
 8005f2c:	f001 f80a 	bl	8006f44 <memcpy>
 8005f30:	2201      	movs	r2, #1
 8005f32:	4631      	mov	r1, r6
 8005f34:	4658      	mov	r0, fp
 8005f36:	f000 fc05 	bl	8006744 <__lshift>
 8005f3a:	462f      	mov	r7, r5
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	f10a 0301 	add.w	r3, sl, #1
 8005f42:	9307      	str	r3, [sp, #28]
 8005f44:	9b08      	ldr	r3, [sp, #32]
 8005f46:	4453      	add	r3, sl
 8005f48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f4a:	9b02      	ldr	r3, [sp, #8]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f52:	9b07      	ldr	r3, [sp, #28]
 8005f54:	4621      	mov	r1, r4
 8005f56:	3b01      	subs	r3, #1
 8005f58:	4648      	mov	r0, r9
 8005f5a:	9302      	str	r3, [sp, #8]
 8005f5c:	f7ff fa95 	bl	800548a <quorem>
 8005f60:	4639      	mov	r1, r7
 8005f62:	9008      	str	r0, [sp, #32]
 8005f64:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005f68:	4648      	mov	r0, r9
 8005f6a:	f000 fc57 	bl	800681c <__mcmp>
 8005f6e:	462a      	mov	r2, r5
 8005f70:	9009      	str	r0, [sp, #36]	@ 0x24
 8005f72:	4621      	mov	r1, r4
 8005f74:	4658      	mov	r0, fp
 8005f76:	f000 fc6d 	bl	8006854 <__mdiff>
 8005f7a:	68c2      	ldr	r2, [r0, #12]
 8005f7c:	4606      	mov	r6, r0
 8005f7e:	bb02      	cbnz	r2, 8005fc2 <_dtoa_r+0xa22>
 8005f80:	4601      	mov	r1, r0
 8005f82:	4648      	mov	r0, r9
 8005f84:	f000 fc4a 	bl	800681c <__mcmp>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4658      	mov	r0, fp
 8005f8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005f90:	f000 fa0c 	bl	80063ac <_Bfree>
 8005f94:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f96:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005f98:	9e07      	ldr	r6, [sp, #28]
 8005f9a:	ea43 0102 	orr.w	r1, r3, r2
 8005f9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fa0:	4319      	orrs	r1, r3
 8005fa2:	d110      	bne.n	8005fc6 <_dtoa_r+0xa26>
 8005fa4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005fa8:	d029      	beq.n	8005ffe <_dtoa_r+0xa5e>
 8005faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	dd02      	ble.n	8005fb6 <_dtoa_r+0xa16>
 8005fb0:	9b08      	ldr	r3, [sp, #32]
 8005fb2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005fb6:	9b02      	ldr	r3, [sp, #8]
 8005fb8:	f883 8000 	strb.w	r8, [r3]
 8005fbc:	e63b      	b.n	8005c36 <_dtoa_r+0x696>
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	e7bb      	b.n	8005f3a <_dtoa_r+0x99a>
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	e7e1      	b.n	8005f8a <_dtoa_r+0x9ea>
 8005fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	db04      	blt.n	8005fd6 <_dtoa_r+0xa36>
 8005fcc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005fce:	430b      	orrs	r3, r1
 8005fd0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005fd2:	430b      	orrs	r3, r1
 8005fd4:	d120      	bne.n	8006018 <_dtoa_r+0xa78>
 8005fd6:	2a00      	cmp	r2, #0
 8005fd8:	dded      	ble.n	8005fb6 <_dtoa_r+0xa16>
 8005fda:	4649      	mov	r1, r9
 8005fdc:	2201      	movs	r2, #1
 8005fde:	4658      	mov	r0, fp
 8005fe0:	f000 fbb0 	bl	8006744 <__lshift>
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	4681      	mov	r9, r0
 8005fe8:	f000 fc18 	bl	800681c <__mcmp>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	dc03      	bgt.n	8005ff8 <_dtoa_r+0xa58>
 8005ff0:	d1e1      	bne.n	8005fb6 <_dtoa_r+0xa16>
 8005ff2:	f018 0f01 	tst.w	r8, #1
 8005ff6:	d0de      	beq.n	8005fb6 <_dtoa_r+0xa16>
 8005ff8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005ffc:	d1d8      	bne.n	8005fb0 <_dtoa_r+0xa10>
 8005ffe:	2339      	movs	r3, #57	@ 0x39
 8006000:	9a02      	ldr	r2, [sp, #8]
 8006002:	7013      	strb	r3, [r2, #0]
 8006004:	4633      	mov	r3, r6
 8006006:	461e      	mov	r6, r3
 8006008:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800600c:	3b01      	subs	r3, #1
 800600e:	2a39      	cmp	r2, #57	@ 0x39
 8006010:	d052      	beq.n	80060b8 <_dtoa_r+0xb18>
 8006012:	3201      	adds	r2, #1
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	e60e      	b.n	8005c36 <_dtoa_r+0x696>
 8006018:	2a00      	cmp	r2, #0
 800601a:	dd07      	ble.n	800602c <_dtoa_r+0xa8c>
 800601c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006020:	d0ed      	beq.n	8005ffe <_dtoa_r+0xa5e>
 8006022:	9a02      	ldr	r2, [sp, #8]
 8006024:	f108 0301 	add.w	r3, r8, #1
 8006028:	7013      	strb	r3, [r2, #0]
 800602a:	e604      	b.n	8005c36 <_dtoa_r+0x696>
 800602c:	9b07      	ldr	r3, [sp, #28]
 800602e:	9a07      	ldr	r2, [sp, #28]
 8006030:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006034:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006036:	4293      	cmp	r3, r2
 8006038:	d028      	beq.n	800608c <_dtoa_r+0xaec>
 800603a:	4649      	mov	r1, r9
 800603c:	2300      	movs	r3, #0
 800603e:	220a      	movs	r2, #10
 8006040:	4658      	mov	r0, fp
 8006042:	f000 f9d5 	bl	80063f0 <__multadd>
 8006046:	42af      	cmp	r7, r5
 8006048:	4681      	mov	r9, r0
 800604a:	f04f 0300 	mov.w	r3, #0
 800604e:	f04f 020a 	mov.w	r2, #10
 8006052:	4639      	mov	r1, r7
 8006054:	4658      	mov	r0, fp
 8006056:	d107      	bne.n	8006068 <_dtoa_r+0xac8>
 8006058:	f000 f9ca 	bl	80063f0 <__multadd>
 800605c:	4607      	mov	r7, r0
 800605e:	4605      	mov	r5, r0
 8006060:	9b07      	ldr	r3, [sp, #28]
 8006062:	3301      	adds	r3, #1
 8006064:	9307      	str	r3, [sp, #28]
 8006066:	e774      	b.n	8005f52 <_dtoa_r+0x9b2>
 8006068:	f000 f9c2 	bl	80063f0 <__multadd>
 800606c:	4629      	mov	r1, r5
 800606e:	4607      	mov	r7, r0
 8006070:	2300      	movs	r3, #0
 8006072:	220a      	movs	r2, #10
 8006074:	4658      	mov	r0, fp
 8006076:	f000 f9bb 	bl	80063f0 <__multadd>
 800607a:	4605      	mov	r5, r0
 800607c:	e7f0      	b.n	8006060 <_dtoa_r+0xac0>
 800607e:	9b08      	ldr	r3, [sp, #32]
 8006080:	2700      	movs	r7, #0
 8006082:	2b00      	cmp	r3, #0
 8006084:	bfcc      	ite	gt
 8006086:	461e      	movgt	r6, r3
 8006088:	2601      	movle	r6, #1
 800608a:	4456      	add	r6, sl
 800608c:	4649      	mov	r1, r9
 800608e:	2201      	movs	r2, #1
 8006090:	4658      	mov	r0, fp
 8006092:	f000 fb57 	bl	8006744 <__lshift>
 8006096:	4621      	mov	r1, r4
 8006098:	4681      	mov	r9, r0
 800609a:	f000 fbbf 	bl	800681c <__mcmp>
 800609e:	2800      	cmp	r0, #0
 80060a0:	dcb0      	bgt.n	8006004 <_dtoa_r+0xa64>
 80060a2:	d102      	bne.n	80060aa <_dtoa_r+0xb0a>
 80060a4:	f018 0f01 	tst.w	r8, #1
 80060a8:	d1ac      	bne.n	8006004 <_dtoa_r+0xa64>
 80060aa:	4633      	mov	r3, r6
 80060ac:	461e      	mov	r6, r3
 80060ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060b2:	2a30      	cmp	r2, #48	@ 0x30
 80060b4:	d0fa      	beq.n	80060ac <_dtoa_r+0xb0c>
 80060b6:	e5be      	b.n	8005c36 <_dtoa_r+0x696>
 80060b8:	459a      	cmp	sl, r3
 80060ba:	d1a4      	bne.n	8006006 <_dtoa_r+0xa66>
 80060bc:	9b04      	ldr	r3, [sp, #16]
 80060be:	3301      	adds	r3, #1
 80060c0:	9304      	str	r3, [sp, #16]
 80060c2:	2331      	movs	r3, #49	@ 0x31
 80060c4:	f88a 3000 	strb.w	r3, [sl]
 80060c8:	e5b5      	b.n	8005c36 <_dtoa_r+0x696>
 80060ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80060cc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800612c <_dtoa_r+0xb8c>
 80060d0:	b11b      	cbz	r3, 80060da <_dtoa_r+0xb3a>
 80060d2:	f10a 0308 	add.w	r3, sl, #8
 80060d6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	4650      	mov	r0, sl
 80060dc:	b017      	add	sp, #92	@ 0x5c
 80060de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	f77f ae3d 	ble.w	8005d64 <_dtoa_r+0x7c4>
 80060ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80060ee:	2001      	movs	r0, #1
 80060f0:	e65b      	b.n	8005daa <_dtoa_r+0x80a>
 80060f2:	9b08      	ldr	r3, [sp, #32]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f77f aed6 	ble.w	8005ea6 <_dtoa_r+0x906>
 80060fa:	4656      	mov	r6, sl
 80060fc:	4621      	mov	r1, r4
 80060fe:	4648      	mov	r0, r9
 8006100:	f7ff f9c3 	bl	800548a <quorem>
 8006104:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006108:	9b08      	ldr	r3, [sp, #32]
 800610a:	f806 8b01 	strb.w	r8, [r6], #1
 800610e:	eba6 020a 	sub.w	r2, r6, sl
 8006112:	4293      	cmp	r3, r2
 8006114:	ddb3      	ble.n	800607e <_dtoa_r+0xade>
 8006116:	4649      	mov	r1, r9
 8006118:	2300      	movs	r3, #0
 800611a:	220a      	movs	r2, #10
 800611c:	4658      	mov	r0, fp
 800611e:	f000 f967 	bl	80063f0 <__multadd>
 8006122:	4681      	mov	r9, r0
 8006124:	e7ea      	b.n	80060fc <_dtoa_r+0xb5c>
 8006126:	bf00      	nop
 8006128:	0800810a 	.word	0x0800810a
 800612c:	0800808e 	.word	0x0800808e

08006130 <_free_r>:
 8006130:	b538      	push	{r3, r4, r5, lr}
 8006132:	4605      	mov	r5, r0
 8006134:	2900      	cmp	r1, #0
 8006136:	d040      	beq.n	80061ba <_free_r+0x8a>
 8006138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800613c:	1f0c      	subs	r4, r1, #4
 800613e:	2b00      	cmp	r3, #0
 8006140:	bfb8      	it	lt
 8006142:	18e4      	addlt	r4, r4, r3
 8006144:	f000 f8e6 	bl	8006314 <__malloc_lock>
 8006148:	4a1c      	ldr	r2, [pc, #112]	@ (80061bc <_free_r+0x8c>)
 800614a:	6813      	ldr	r3, [r2, #0]
 800614c:	b933      	cbnz	r3, 800615c <_free_r+0x2c>
 800614e:	6063      	str	r3, [r4, #4]
 8006150:	6014      	str	r4, [r2, #0]
 8006152:	4628      	mov	r0, r5
 8006154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006158:	f000 b8e2 	b.w	8006320 <__malloc_unlock>
 800615c:	42a3      	cmp	r3, r4
 800615e:	d908      	bls.n	8006172 <_free_r+0x42>
 8006160:	6820      	ldr	r0, [r4, #0]
 8006162:	1821      	adds	r1, r4, r0
 8006164:	428b      	cmp	r3, r1
 8006166:	bf01      	itttt	eq
 8006168:	6819      	ldreq	r1, [r3, #0]
 800616a:	685b      	ldreq	r3, [r3, #4]
 800616c:	1809      	addeq	r1, r1, r0
 800616e:	6021      	streq	r1, [r4, #0]
 8006170:	e7ed      	b.n	800614e <_free_r+0x1e>
 8006172:	461a      	mov	r2, r3
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	b10b      	cbz	r3, 800617c <_free_r+0x4c>
 8006178:	42a3      	cmp	r3, r4
 800617a:	d9fa      	bls.n	8006172 <_free_r+0x42>
 800617c:	6811      	ldr	r1, [r2, #0]
 800617e:	1850      	adds	r0, r2, r1
 8006180:	42a0      	cmp	r0, r4
 8006182:	d10b      	bne.n	800619c <_free_r+0x6c>
 8006184:	6820      	ldr	r0, [r4, #0]
 8006186:	4401      	add	r1, r0
 8006188:	1850      	adds	r0, r2, r1
 800618a:	4283      	cmp	r3, r0
 800618c:	6011      	str	r1, [r2, #0]
 800618e:	d1e0      	bne.n	8006152 <_free_r+0x22>
 8006190:	6818      	ldr	r0, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	4408      	add	r0, r1
 8006196:	6010      	str	r0, [r2, #0]
 8006198:	6053      	str	r3, [r2, #4]
 800619a:	e7da      	b.n	8006152 <_free_r+0x22>
 800619c:	d902      	bls.n	80061a4 <_free_r+0x74>
 800619e:	230c      	movs	r3, #12
 80061a0:	602b      	str	r3, [r5, #0]
 80061a2:	e7d6      	b.n	8006152 <_free_r+0x22>
 80061a4:	6820      	ldr	r0, [r4, #0]
 80061a6:	1821      	adds	r1, r4, r0
 80061a8:	428b      	cmp	r3, r1
 80061aa:	bf01      	itttt	eq
 80061ac:	6819      	ldreq	r1, [r3, #0]
 80061ae:	685b      	ldreq	r3, [r3, #4]
 80061b0:	1809      	addeq	r1, r1, r0
 80061b2:	6021      	streq	r1, [r4, #0]
 80061b4:	6063      	str	r3, [r4, #4]
 80061b6:	6054      	str	r4, [r2, #4]
 80061b8:	e7cb      	b.n	8006152 <_free_r+0x22>
 80061ba:	bd38      	pop	{r3, r4, r5, pc}
 80061bc:	20000420 	.word	0x20000420

080061c0 <malloc>:
 80061c0:	4b02      	ldr	r3, [pc, #8]	@ (80061cc <malloc+0xc>)
 80061c2:	4601      	mov	r1, r0
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	f000 b825 	b.w	8006214 <_malloc_r>
 80061ca:	bf00      	nop
 80061cc:	20000018 	.word	0x20000018

080061d0 <sbrk_aligned>:
 80061d0:	b570      	push	{r4, r5, r6, lr}
 80061d2:	4e0f      	ldr	r6, [pc, #60]	@ (8006210 <sbrk_aligned+0x40>)
 80061d4:	460c      	mov	r4, r1
 80061d6:	6831      	ldr	r1, [r6, #0]
 80061d8:	4605      	mov	r5, r0
 80061da:	b911      	cbnz	r1, 80061e2 <sbrk_aligned+0x12>
 80061dc:	f000 fea2 	bl	8006f24 <_sbrk_r>
 80061e0:	6030      	str	r0, [r6, #0]
 80061e2:	4621      	mov	r1, r4
 80061e4:	4628      	mov	r0, r5
 80061e6:	f000 fe9d 	bl	8006f24 <_sbrk_r>
 80061ea:	1c43      	adds	r3, r0, #1
 80061ec:	d103      	bne.n	80061f6 <sbrk_aligned+0x26>
 80061ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80061f2:	4620      	mov	r0, r4
 80061f4:	bd70      	pop	{r4, r5, r6, pc}
 80061f6:	1cc4      	adds	r4, r0, #3
 80061f8:	f024 0403 	bic.w	r4, r4, #3
 80061fc:	42a0      	cmp	r0, r4
 80061fe:	d0f8      	beq.n	80061f2 <sbrk_aligned+0x22>
 8006200:	1a21      	subs	r1, r4, r0
 8006202:	4628      	mov	r0, r5
 8006204:	f000 fe8e 	bl	8006f24 <_sbrk_r>
 8006208:	3001      	adds	r0, #1
 800620a:	d1f2      	bne.n	80061f2 <sbrk_aligned+0x22>
 800620c:	e7ef      	b.n	80061ee <sbrk_aligned+0x1e>
 800620e:	bf00      	nop
 8006210:	2000041c 	.word	0x2000041c

08006214 <_malloc_r>:
 8006214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006218:	1ccd      	adds	r5, r1, #3
 800621a:	f025 0503 	bic.w	r5, r5, #3
 800621e:	3508      	adds	r5, #8
 8006220:	2d0c      	cmp	r5, #12
 8006222:	bf38      	it	cc
 8006224:	250c      	movcc	r5, #12
 8006226:	2d00      	cmp	r5, #0
 8006228:	4606      	mov	r6, r0
 800622a:	db01      	blt.n	8006230 <_malloc_r+0x1c>
 800622c:	42a9      	cmp	r1, r5
 800622e:	d904      	bls.n	800623a <_malloc_r+0x26>
 8006230:	230c      	movs	r3, #12
 8006232:	6033      	str	r3, [r6, #0]
 8006234:	2000      	movs	r0, #0
 8006236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800623a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006310 <_malloc_r+0xfc>
 800623e:	f000 f869 	bl	8006314 <__malloc_lock>
 8006242:	f8d8 3000 	ldr.w	r3, [r8]
 8006246:	461c      	mov	r4, r3
 8006248:	bb44      	cbnz	r4, 800629c <_malloc_r+0x88>
 800624a:	4629      	mov	r1, r5
 800624c:	4630      	mov	r0, r6
 800624e:	f7ff ffbf 	bl	80061d0 <sbrk_aligned>
 8006252:	1c43      	adds	r3, r0, #1
 8006254:	4604      	mov	r4, r0
 8006256:	d158      	bne.n	800630a <_malloc_r+0xf6>
 8006258:	f8d8 4000 	ldr.w	r4, [r8]
 800625c:	4627      	mov	r7, r4
 800625e:	2f00      	cmp	r7, #0
 8006260:	d143      	bne.n	80062ea <_malloc_r+0xd6>
 8006262:	2c00      	cmp	r4, #0
 8006264:	d04b      	beq.n	80062fe <_malloc_r+0xea>
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	4639      	mov	r1, r7
 800626a:	4630      	mov	r0, r6
 800626c:	eb04 0903 	add.w	r9, r4, r3
 8006270:	f000 fe58 	bl	8006f24 <_sbrk_r>
 8006274:	4581      	cmp	r9, r0
 8006276:	d142      	bne.n	80062fe <_malloc_r+0xea>
 8006278:	6821      	ldr	r1, [r4, #0]
 800627a:	4630      	mov	r0, r6
 800627c:	1a6d      	subs	r5, r5, r1
 800627e:	4629      	mov	r1, r5
 8006280:	f7ff ffa6 	bl	80061d0 <sbrk_aligned>
 8006284:	3001      	adds	r0, #1
 8006286:	d03a      	beq.n	80062fe <_malloc_r+0xea>
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	442b      	add	r3, r5
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	f8d8 3000 	ldr.w	r3, [r8]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	bb62      	cbnz	r2, 80062f0 <_malloc_r+0xdc>
 8006296:	f8c8 7000 	str.w	r7, [r8]
 800629a:	e00f      	b.n	80062bc <_malloc_r+0xa8>
 800629c:	6822      	ldr	r2, [r4, #0]
 800629e:	1b52      	subs	r2, r2, r5
 80062a0:	d420      	bmi.n	80062e4 <_malloc_r+0xd0>
 80062a2:	2a0b      	cmp	r2, #11
 80062a4:	d917      	bls.n	80062d6 <_malloc_r+0xc2>
 80062a6:	1961      	adds	r1, r4, r5
 80062a8:	42a3      	cmp	r3, r4
 80062aa:	6025      	str	r5, [r4, #0]
 80062ac:	bf18      	it	ne
 80062ae:	6059      	strne	r1, [r3, #4]
 80062b0:	6863      	ldr	r3, [r4, #4]
 80062b2:	bf08      	it	eq
 80062b4:	f8c8 1000 	streq.w	r1, [r8]
 80062b8:	5162      	str	r2, [r4, r5]
 80062ba:	604b      	str	r3, [r1, #4]
 80062bc:	4630      	mov	r0, r6
 80062be:	f000 f82f 	bl	8006320 <__malloc_unlock>
 80062c2:	f104 000b 	add.w	r0, r4, #11
 80062c6:	1d23      	adds	r3, r4, #4
 80062c8:	f020 0007 	bic.w	r0, r0, #7
 80062cc:	1ac2      	subs	r2, r0, r3
 80062ce:	bf1c      	itt	ne
 80062d0:	1a1b      	subne	r3, r3, r0
 80062d2:	50a3      	strne	r3, [r4, r2]
 80062d4:	e7af      	b.n	8006236 <_malloc_r+0x22>
 80062d6:	6862      	ldr	r2, [r4, #4]
 80062d8:	42a3      	cmp	r3, r4
 80062da:	bf0c      	ite	eq
 80062dc:	f8c8 2000 	streq.w	r2, [r8]
 80062e0:	605a      	strne	r2, [r3, #4]
 80062e2:	e7eb      	b.n	80062bc <_malloc_r+0xa8>
 80062e4:	4623      	mov	r3, r4
 80062e6:	6864      	ldr	r4, [r4, #4]
 80062e8:	e7ae      	b.n	8006248 <_malloc_r+0x34>
 80062ea:	463c      	mov	r4, r7
 80062ec:	687f      	ldr	r7, [r7, #4]
 80062ee:	e7b6      	b.n	800625e <_malloc_r+0x4a>
 80062f0:	461a      	mov	r2, r3
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	42a3      	cmp	r3, r4
 80062f6:	d1fb      	bne.n	80062f0 <_malloc_r+0xdc>
 80062f8:	2300      	movs	r3, #0
 80062fa:	6053      	str	r3, [r2, #4]
 80062fc:	e7de      	b.n	80062bc <_malloc_r+0xa8>
 80062fe:	230c      	movs	r3, #12
 8006300:	4630      	mov	r0, r6
 8006302:	6033      	str	r3, [r6, #0]
 8006304:	f000 f80c 	bl	8006320 <__malloc_unlock>
 8006308:	e794      	b.n	8006234 <_malloc_r+0x20>
 800630a:	6005      	str	r5, [r0, #0]
 800630c:	e7d6      	b.n	80062bc <_malloc_r+0xa8>
 800630e:	bf00      	nop
 8006310:	20000420 	.word	0x20000420

08006314 <__malloc_lock>:
 8006314:	4801      	ldr	r0, [pc, #4]	@ (800631c <__malloc_lock+0x8>)
 8006316:	f7ff b8a8 	b.w	800546a <__retarget_lock_acquire_recursive>
 800631a:	bf00      	nop
 800631c:	20000418 	.word	0x20000418

08006320 <__malloc_unlock>:
 8006320:	4801      	ldr	r0, [pc, #4]	@ (8006328 <__malloc_unlock+0x8>)
 8006322:	f7ff b8a3 	b.w	800546c <__retarget_lock_release_recursive>
 8006326:	bf00      	nop
 8006328:	20000418 	.word	0x20000418

0800632c <_Balloc>:
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	69c6      	ldr	r6, [r0, #28]
 8006330:	4604      	mov	r4, r0
 8006332:	460d      	mov	r5, r1
 8006334:	b976      	cbnz	r6, 8006354 <_Balloc+0x28>
 8006336:	2010      	movs	r0, #16
 8006338:	f7ff ff42 	bl	80061c0 <malloc>
 800633c:	4602      	mov	r2, r0
 800633e:	61e0      	str	r0, [r4, #28]
 8006340:	b920      	cbnz	r0, 800634c <_Balloc+0x20>
 8006342:	216b      	movs	r1, #107	@ 0x6b
 8006344:	4b17      	ldr	r3, [pc, #92]	@ (80063a4 <_Balloc+0x78>)
 8006346:	4818      	ldr	r0, [pc, #96]	@ (80063a8 <_Balloc+0x7c>)
 8006348:	f000 fe0a 	bl	8006f60 <__assert_func>
 800634c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006350:	6006      	str	r6, [r0, #0]
 8006352:	60c6      	str	r6, [r0, #12]
 8006354:	69e6      	ldr	r6, [r4, #28]
 8006356:	68f3      	ldr	r3, [r6, #12]
 8006358:	b183      	cbz	r3, 800637c <_Balloc+0x50>
 800635a:	69e3      	ldr	r3, [r4, #28]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006362:	b9b8      	cbnz	r0, 8006394 <_Balloc+0x68>
 8006364:	2101      	movs	r1, #1
 8006366:	fa01 f605 	lsl.w	r6, r1, r5
 800636a:	1d72      	adds	r2, r6, #5
 800636c:	4620      	mov	r0, r4
 800636e:	0092      	lsls	r2, r2, #2
 8006370:	f000 fe14 	bl	8006f9c <_calloc_r>
 8006374:	b160      	cbz	r0, 8006390 <_Balloc+0x64>
 8006376:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800637a:	e00e      	b.n	800639a <_Balloc+0x6e>
 800637c:	2221      	movs	r2, #33	@ 0x21
 800637e:	2104      	movs	r1, #4
 8006380:	4620      	mov	r0, r4
 8006382:	f000 fe0b 	bl	8006f9c <_calloc_r>
 8006386:	69e3      	ldr	r3, [r4, #28]
 8006388:	60f0      	str	r0, [r6, #12]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e4      	bne.n	800635a <_Balloc+0x2e>
 8006390:	2000      	movs	r0, #0
 8006392:	bd70      	pop	{r4, r5, r6, pc}
 8006394:	6802      	ldr	r2, [r0, #0]
 8006396:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800639a:	2300      	movs	r3, #0
 800639c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063a0:	e7f7      	b.n	8006392 <_Balloc+0x66>
 80063a2:	bf00      	nop
 80063a4:	0800809b 	.word	0x0800809b
 80063a8:	0800811b 	.word	0x0800811b

080063ac <_Bfree>:
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	69c6      	ldr	r6, [r0, #28]
 80063b0:	4605      	mov	r5, r0
 80063b2:	460c      	mov	r4, r1
 80063b4:	b976      	cbnz	r6, 80063d4 <_Bfree+0x28>
 80063b6:	2010      	movs	r0, #16
 80063b8:	f7ff ff02 	bl	80061c0 <malloc>
 80063bc:	4602      	mov	r2, r0
 80063be:	61e8      	str	r0, [r5, #28]
 80063c0:	b920      	cbnz	r0, 80063cc <_Bfree+0x20>
 80063c2:	218f      	movs	r1, #143	@ 0x8f
 80063c4:	4b08      	ldr	r3, [pc, #32]	@ (80063e8 <_Bfree+0x3c>)
 80063c6:	4809      	ldr	r0, [pc, #36]	@ (80063ec <_Bfree+0x40>)
 80063c8:	f000 fdca 	bl	8006f60 <__assert_func>
 80063cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063d0:	6006      	str	r6, [r0, #0]
 80063d2:	60c6      	str	r6, [r0, #12]
 80063d4:	b13c      	cbz	r4, 80063e6 <_Bfree+0x3a>
 80063d6:	69eb      	ldr	r3, [r5, #28]
 80063d8:	6862      	ldr	r2, [r4, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063e0:	6021      	str	r1, [r4, #0]
 80063e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80063e6:	bd70      	pop	{r4, r5, r6, pc}
 80063e8:	0800809b 	.word	0x0800809b
 80063ec:	0800811b 	.word	0x0800811b

080063f0 <__multadd>:
 80063f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f4:	4607      	mov	r7, r0
 80063f6:	460c      	mov	r4, r1
 80063f8:	461e      	mov	r6, r3
 80063fa:	2000      	movs	r0, #0
 80063fc:	690d      	ldr	r5, [r1, #16]
 80063fe:	f101 0c14 	add.w	ip, r1, #20
 8006402:	f8dc 3000 	ldr.w	r3, [ip]
 8006406:	3001      	adds	r0, #1
 8006408:	b299      	uxth	r1, r3
 800640a:	fb02 6101 	mla	r1, r2, r1, r6
 800640e:	0c1e      	lsrs	r6, r3, #16
 8006410:	0c0b      	lsrs	r3, r1, #16
 8006412:	fb02 3306 	mla	r3, r2, r6, r3
 8006416:	b289      	uxth	r1, r1
 8006418:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800641c:	4285      	cmp	r5, r0
 800641e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006422:	f84c 1b04 	str.w	r1, [ip], #4
 8006426:	dcec      	bgt.n	8006402 <__multadd+0x12>
 8006428:	b30e      	cbz	r6, 800646e <__multadd+0x7e>
 800642a:	68a3      	ldr	r3, [r4, #8]
 800642c:	42ab      	cmp	r3, r5
 800642e:	dc19      	bgt.n	8006464 <__multadd+0x74>
 8006430:	6861      	ldr	r1, [r4, #4]
 8006432:	4638      	mov	r0, r7
 8006434:	3101      	adds	r1, #1
 8006436:	f7ff ff79 	bl	800632c <_Balloc>
 800643a:	4680      	mov	r8, r0
 800643c:	b928      	cbnz	r0, 800644a <__multadd+0x5a>
 800643e:	4602      	mov	r2, r0
 8006440:	21ba      	movs	r1, #186	@ 0xba
 8006442:	4b0c      	ldr	r3, [pc, #48]	@ (8006474 <__multadd+0x84>)
 8006444:	480c      	ldr	r0, [pc, #48]	@ (8006478 <__multadd+0x88>)
 8006446:	f000 fd8b 	bl	8006f60 <__assert_func>
 800644a:	6922      	ldr	r2, [r4, #16]
 800644c:	f104 010c 	add.w	r1, r4, #12
 8006450:	3202      	adds	r2, #2
 8006452:	0092      	lsls	r2, r2, #2
 8006454:	300c      	adds	r0, #12
 8006456:	f000 fd75 	bl	8006f44 <memcpy>
 800645a:	4621      	mov	r1, r4
 800645c:	4638      	mov	r0, r7
 800645e:	f7ff ffa5 	bl	80063ac <_Bfree>
 8006462:	4644      	mov	r4, r8
 8006464:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006468:	3501      	adds	r5, #1
 800646a:	615e      	str	r6, [r3, #20]
 800646c:	6125      	str	r5, [r4, #16]
 800646e:	4620      	mov	r0, r4
 8006470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006474:	0800810a 	.word	0x0800810a
 8006478:	0800811b 	.word	0x0800811b

0800647c <__hi0bits>:
 800647c:	4603      	mov	r3, r0
 800647e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006482:	bf3a      	itte	cc
 8006484:	0403      	lslcc	r3, r0, #16
 8006486:	2010      	movcc	r0, #16
 8006488:	2000      	movcs	r0, #0
 800648a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800648e:	bf3c      	itt	cc
 8006490:	021b      	lslcc	r3, r3, #8
 8006492:	3008      	addcc	r0, #8
 8006494:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006498:	bf3c      	itt	cc
 800649a:	011b      	lslcc	r3, r3, #4
 800649c:	3004      	addcc	r0, #4
 800649e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a2:	bf3c      	itt	cc
 80064a4:	009b      	lslcc	r3, r3, #2
 80064a6:	3002      	addcc	r0, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	db05      	blt.n	80064b8 <__hi0bits+0x3c>
 80064ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80064b0:	f100 0001 	add.w	r0, r0, #1
 80064b4:	bf08      	it	eq
 80064b6:	2020      	moveq	r0, #32
 80064b8:	4770      	bx	lr

080064ba <__lo0bits>:
 80064ba:	6803      	ldr	r3, [r0, #0]
 80064bc:	4602      	mov	r2, r0
 80064be:	f013 0007 	ands.w	r0, r3, #7
 80064c2:	d00b      	beq.n	80064dc <__lo0bits+0x22>
 80064c4:	07d9      	lsls	r1, r3, #31
 80064c6:	d421      	bmi.n	800650c <__lo0bits+0x52>
 80064c8:	0798      	lsls	r0, r3, #30
 80064ca:	bf49      	itett	mi
 80064cc:	085b      	lsrmi	r3, r3, #1
 80064ce:	089b      	lsrpl	r3, r3, #2
 80064d0:	2001      	movmi	r0, #1
 80064d2:	6013      	strmi	r3, [r2, #0]
 80064d4:	bf5c      	itt	pl
 80064d6:	2002      	movpl	r0, #2
 80064d8:	6013      	strpl	r3, [r2, #0]
 80064da:	4770      	bx	lr
 80064dc:	b299      	uxth	r1, r3
 80064de:	b909      	cbnz	r1, 80064e4 <__lo0bits+0x2a>
 80064e0:	2010      	movs	r0, #16
 80064e2:	0c1b      	lsrs	r3, r3, #16
 80064e4:	b2d9      	uxtb	r1, r3
 80064e6:	b909      	cbnz	r1, 80064ec <__lo0bits+0x32>
 80064e8:	3008      	adds	r0, #8
 80064ea:	0a1b      	lsrs	r3, r3, #8
 80064ec:	0719      	lsls	r1, r3, #28
 80064ee:	bf04      	itt	eq
 80064f0:	091b      	lsreq	r3, r3, #4
 80064f2:	3004      	addeq	r0, #4
 80064f4:	0799      	lsls	r1, r3, #30
 80064f6:	bf04      	itt	eq
 80064f8:	089b      	lsreq	r3, r3, #2
 80064fa:	3002      	addeq	r0, #2
 80064fc:	07d9      	lsls	r1, r3, #31
 80064fe:	d403      	bmi.n	8006508 <__lo0bits+0x4e>
 8006500:	085b      	lsrs	r3, r3, #1
 8006502:	f100 0001 	add.w	r0, r0, #1
 8006506:	d003      	beq.n	8006510 <__lo0bits+0x56>
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	4770      	bx	lr
 800650c:	2000      	movs	r0, #0
 800650e:	4770      	bx	lr
 8006510:	2020      	movs	r0, #32
 8006512:	4770      	bx	lr

08006514 <__i2b>:
 8006514:	b510      	push	{r4, lr}
 8006516:	460c      	mov	r4, r1
 8006518:	2101      	movs	r1, #1
 800651a:	f7ff ff07 	bl	800632c <_Balloc>
 800651e:	4602      	mov	r2, r0
 8006520:	b928      	cbnz	r0, 800652e <__i2b+0x1a>
 8006522:	f240 1145 	movw	r1, #325	@ 0x145
 8006526:	4b04      	ldr	r3, [pc, #16]	@ (8006538 <__i2b+0x24>)
 8006528:	4804      	ldr	r0, [pc, #16]	@ (800653c <__i2b+0x28>)
 800652a:	f000 fd19 	bl	8006f60 <__assert_func>
 800652e:	2301      	movs	r3, #1
 8006530:	6144      	str	r4, [r0, #20]
 8006532:	6103      	str	r3, [r0, #16]
 8006534:	bd10      	pop	{r4, pc}
 8006536:	bf00      	nop
 8006538:	0800810a 	.word	0x0800810a
 800653c:	0800811b 	.word	0x0800811b

08006540 <__multiply>:
 8006540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006544:	4614      	mov	r4, r2
 8006546:	690a      	ldr	r2, [r1, #16]
 8006548:	6923      	ldr	r3, [r4, #16]
 800654a:	460f      	mov	r7, r1
 800654c:	429a      	cmp	r2, r3
 800654e:	bfa2      	ittt	ge
 8006550:	4623      	movge	r3, r4
 8006552:	460c      	movge	r4, r1
 8006554:	461f      	movge	r7, r3
 8006556:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800655a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800655e:	68a3      	ldr	r3, [r4, #8]
 8006560:	6861      	ldr	r1, [r4, #4]
 8006562:	eb0a 0609 	add.w	r6, sl, r9
 8006566:	42b3      	cmp	r3, r6
 8006568:	b085      	sub	sp, #20
 800656a:	bfb8      	it	lt
 800656c:	3101      	addlt	r1, #1
 800656e:	f7ff fedd 	bl	800632c <_Balloc>
 8006572:	b930      	cbnz	r0, 8006582 <__multiply+0x42>
 8006574:	4602      	mov	r2, r0
 8006576:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800657a:	4b43      	ldr	r3, [pc, #268]	@ (8006688 <__multiply+0x148>)
 800657c:	4843      	ldr	r0, [pc, #268]	@ (800668c <__multiply+0x14c>)
 800657e:	f000 fcef 	bl	8006f60 <__assert_func>
 8006582:	f100 0514 	add.w	r5, r0, #20
 8006586:	462b      	mov	r3, r5
 8006588:	2200      	movs	r2, #0
 800658a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800658e:	4543      	cmp	r3, r8
 8006590:	d321      	bcc.n	80065d6 <__multiply+0x96>
 8006592:	f107 0114 	add.w	r1, r7, #20
 8006596:	f104 0214 	add.w	r2, r4, #20
 800659a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800659e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80065a2:	9302      	str	r3, [sp, #8]
 80065a4:	1b13      	subs	r3, r2, r4
 80065a6:	3b15      	subs	r3, #21
 80065a8:	f023 0303 	bic.w	r3, r3, #3
 80065ac:	3304      	adds	r3, #4
 80065ae:	f104 0715 	add.w	r7, r4, #21
 80065b2:	42ba      	cmp	r2, r7
 80065b4:	bf38      	it	cc
 80065b6:	2304      	movcc	r3, #4
 80065b8:	9301      	str	r3, [sp, #4]
 80065ba:	9b02      	ldr	r3, [sp, #8]
 80065bc:	9103      	str	r1, [sp, #12]
 80065be:	428b      	cmp	r3, r1
 80065c0:	d80c      	bhi.n	80065dc <__multiply+0x9c>
 80065c2:	2e00      	cmp	r6, #0
 80065c4:	dd03      	ble.n	80065ce <__multiply+0x8e>
 80065c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d05a      	beq.n	8006684 <__multiply+0x144>
 80065ce:	6106      	str	r6, [r0, #16]
 80065d0:	b005      	add	sp, #20
 80065d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d6:	f843 2b04 	str.w	r2, [r3], #4
 80065da:	e7d8      	b.n	800658e <__multiply+0x4e>
 80065dc:	f8b1 a000 	ldrh.w	sl, [r1]
 80065e0:	f1ba 0f00 	cmp.w	sl, #0
 80065e4:	d023      	beq.n	800662e <__multiply+0xee>
 80065e6:	46a9      	mov	r9, r5
 80065e8:	f04f 0c00 	mov.w	ip, #0
 80065ec:	f104 0e14 	add.w	lr, r4, #20
 80065f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80065f4:	f8d9 3000 	ldr.w	r3, [r9]
 80065f8:	fa1f fb87 	uxth.w	fp, r7
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	fb0a 330b 	mla	r3, sl, fp, r3
 8006602:	4463      	add	r3, ip
 8006604:	f8d9 c000 	ldr.w	ip, [r9]
 8006608:	0c3f      	lsrs	r7, r7, #16
 800660a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800660e:	fb0a c707 	mla	r7, sl, r7, ip
 8006612:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006616:	b29b      	uxth	r3, r3
 8006618:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800661c:	4572      	cmp	r2, lr
 800661e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006622:	f849 3b04 	str.w	r3, [r9], #4
 8006626:	d8e3      	bhi.n	80065f0 <__multiply+0xb0>
 8006628:	9b01      	ldr	r3, [sp, #4]
 800662a:	f845 c003 	str.w	ip, [r5, r3]
 800662e:	9b03      	ldr	r3, [sp, #12]
 8006630:	3104      	adds	r1, #4
 8006632:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006636:	f1b9 0f00 	cmp.w	r9, #0
 800663a:	d021      	beq.n	8006680 <__multiply+0x140>
 800663c:	46ae      	mov	lr, r5
 800663e:	f04f 0a00 	mov.w	sl, #0
 8006642:	682b      	ldr	r3, [r5, #0]
 8006644:	f104 0c14 	add.w	ip, r4, #20
 8006648:	f8bc b000 	ldrh.w	fp, [ip]
 800664c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006650:	b29b      	uxth	r3, r3
 8006652:	fb09 770b 	mla	r7, r9, fp, r7
 8006656:	4457      	add	r7, sl
 8006658:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800665c:	f84e 3b04 	str.w	r3, [lr], #4
 8006660:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006664:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006668:	f8be 3000 	ldrh.w	r3, [lr]
 800666c:	4562      	cmp	r2, ip
 800666e:	fb09 330a 	mla	r3, r9, sl, r3
 8006672:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006676:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800667a:	d8e5      	bhi.n	8006648 <__multiply+0x108>
 800667c:	9f01      	ldr	r7, [sp, #4]
 800667e:	51eb      	str	r3, [r5, r7]
 8006680:	3504      	adds	r5, #4
 8006682:	e79a      	b.n	80065ba <__multiply+0x7a>
 8006684:	3e01      	subs	r6, #1
 8006686:	e79c      	b.n	80065c2 <__multiply+0x82>
 8006688:	0800810a 	.word	0x0800810a
 800668c:	0800811b 	.word	0x0800811b

08006690 <__pow5mult>:
 8006690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006694:	4615      	mov	r5, r2
 8006696:	f012 0203 	ands.w	r2, r2, #3
 800669a:	4607      	mov	r7, r0
 800669c:	460e      	mov	r6, r1
 800669e:	d007      	beq.n	80066b0 <__pow5mult+0x20>
 80066a0:	4c25      	ldr	r4, [pc, #148]	@ (8006738 <__pow5mult+0xa8>)
 80066a2:	3a01      	subs	r2, #1
 80066a4:	2300      	movs	r3, #0
 80066a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066aa:	f7ff fea1 	bl	80063f0 <__multadd>
 80066ae:	4606      	mov	r6, r0
 80066b0:	10ad      	asrs	r5, r5, #2
 80066b2:	d03d      	beq.n	8006730 <__pow5mult+0xa0>
 80066b4:	69fc      	ldr	r4, [r7, #28]
 80066b6:	b97c      	cbnz	r4, 80066d8 <__pow5mult+0x48>
 80066b8:	2010      	movs	r0, #16
 80066ba:	f7ff fd81 	bl	80061c0 <malloc>
 80066be:	4602      	mov	r2, r0
 80066c0:	61f8      	str	r0, [r7, #28]
 80066c2:	b928      	cbnz	r0, 80066d0 <__pow5mult+0x40>
 80066c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80066c8:	4b1c      	ldr	r3, [pc, #112]	@ (800673c <__pow5mult+0xac>)
 80066ca:	481d      	ldr	r0, [pc, #116]	@ (8006740 <__pow5mult+0xb0>)
 80066cc:	f000 fc48 	bl	8006f60 <__assert_func>
 80066d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066d4:	6004      	str	r4, [r0, #0]
 80066d6:	60c4      	str	r4, [r0, #12]
 80066d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80066dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80066e0:	b94c      	cbnz	r4, 80066f6 <__pow5mult+0x66>
 80066e2:	f240 2171 	movw	r1, #625	@ 0x271
 80066e6:	4638      	mov	r0, r7
 80066e8:	f7ff ff14 	bl	8006514 <__i2b>
 80066ec:	2300      	movs	r3, #0
 80066ee:	4604      	mov	r4, r0
 80066f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80066f4:	6003      	str	r3, [r0, #0]
 80066f6:	f04f 0900 	mov.w	r9, #0
 80066fa:	07eb      	lsls	r3, r5, #31
 80066fc:	d50a      	bpl.n	8006714 <__pow5mult+0x84>
 80066fe:	4631      	mov	r1, r6
 8006700:	4622      	mov	r2, r4
 8006702:	4638      	mov	r0, r7
 8006704:	f7ff ff1c 	bl	8006540 <__multiply>
 8006708:	4680      	mov	r8, r0
 800670a:	4631      	mov	r1, r6
 800670c:	4638      	mov	r0, r7
 800670e:	f7ff fe4d 	bl	80063ac <_Bfree>
 8006712:	4646      	mov	r6, r8
 8006714:	106d      	asrs	r5, r5, #1
 8006716:	d00b      	beq.n	8006730 <__pow5mult+0xa0>
 8006718:	6820      	ldr	r0, [r4, #0]
 800671a:	b938      	cbnz	r0, 800672c <__pow5mult+0x9c>
 800671c:	4622      	mov	r2, r4
 800671e:	4621      	mov	r1, r4
 8006720:	4638      	mov	r0, r7
 8006722:	f7ff ff0d 	bl	8006540 <__multiply>
 8006726:	6020      	str	r0, [r4, #0]
 8006728:	f8c0 9000 	str.w	r9, [r0]
 800672c:	4604      	mov	r4, r0
 800672e:	e7e4      	b.n	80066fa <__pow5mult+0x6a>
 8006730:	4630      	mov	r0, r6
 8006732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006736:	bf00      	nop
 8006738:	08008174 	.word	0x08008174
 800673c:	0800809b 	.word	0x0800809b
 8006740:	0800811b 	.word	0x0800811b

08006744 <__lshift>:
 8006744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006748:	460c      	mov	r4, r1
 800674a:	4607      	mov	r7, r0
 800674c:	4691      	mov	r9, r2
 800674e:	6923      	ldr	r3, [r4, #16]
 8006750:	6849      	ldr	r1, [r1, #4]
 8006752:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006756:	68a3      	ldr	r3, [r4, #8]
 8006758:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800675c:	f108 0601 	add.w	r6, r8, #1
 8006760:	42b3      	cmp	r3, r6
 8006762:	db0b      	blt.n	800677c <__lshift+0x38>
 8006764:	4638      	mov	r0, r7
 8006766:	f7ff fde1 	bl	800632c <_Balloc>
 800676a:	4605      	mov	r5, r0
 800676c:	b948      	cbnz	r0, 8006782 <__lshift+0x3e>
 800676e:	4602      	mov	r2, r0
 8006770:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006774:	4b27      	ldr	r3, [pc, #156]	@ (8006814 <__lshift+0xd0>)
 8006776:	4828      	ldr	r0, [pc, #160]	@ (8006818 <__lshift+0xd4>)
 8006778:	f000 fbf2 	bl	8006f60 <__assert_func>
 800677c:	3101      	adds	r1, #1
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	e7ee      	b.n	8006760 <__lshift+0x1c>
 8006782:	2300      	movs	r3, #0
 8006784:	f100 0114 	add.w	r1, r0, #20
 8006788:	f100 0210 	add.w	r2, r0, #16
 800678c:	4618      	mov	r0, r3
 800678e:	4553      	cmp	r3, sl
 8006790:	db33      	blt.n	80067fa <__lshift+0xb6>
 8006792:	6920      	ldr	r0, [r4, #16]
 8006794:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006798:	f104 0314 	add.w	r3, r4, #20
 800679c:	f019 091f 	ands.w	r9, r9, #31
 80067a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80067a8:	d02b      	beq.n	8006802 <__lshift+0xbe>
 80067aa:	468a      	mov	sl, r1
 80067ac:	2200      	movs	r2, #0
 80067ae:	f1c9 0e20 	rsb	lr, r9, #32
 80067b2:	6818      	ldr	r0, [r3, #0]
 80067b4:	fa00 f009 	lsl.w	r0, r0, r9
 80067b8:	4310      	orrs	r0, r2
 80067ba:	f84a 0b04 	str.w	r0, [sl], #4
 80067be:	f853 2b04 	ldr.w	r2, [r3], #4
 80067c2:	459c      	cmp	ip, r3
 80067c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80067c8:	d8f3      	bhi.n	80067b2 <__lshift+0x6e>
 80067ca:	ebac 0304 	sub.w	r3, ip, r4
 80067ce:	3b15      	subs	r3, #21
 80067d0:	f023 0303 	bic.w	r3, r3, #3
 80067d4:	3304      	adds	r3, #4
 80067d6:	f104 0015 	add.w	r0, r4, #21
 80067da:	4584      	cmp	ip, r0
 80067dc:	bf38      	it	cc
 80067de:	2304      	movcc	r3, #4
 80067e0:	50ca      	str	r2, [r1, r3]
 80067e2:	b10a      	cbz	r2, 80067e8 <__lshift+0xa4>
 80067e4:	f108 0602 	add.w	r6, r8, #2
 80067e8:	3e01      	subs	r6, #1
 80067ea:	4638      	mov	r0, r7
 80067ec:	4621      	mov	r1, r4
 80067ee:	612e      	str	r6, [r5, #16]
 80067f0:	f7ff fddc 	bl	80063ac <_Bfree>
 80067f4:	4628      	mov	r0, r5
 80067f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80067fe:	3301      	adds	r3, #1
 8006800:	e7c5      	b.n	800678e <__lshift+0x4a>
 8006802:	3904      	subs	r1, #4
 8006804:	f853 2b04 	ldr.w	r2, [r3], #4
 8006808:	459c      	cmp	ip, r3
 800680a:	f841 2f04 	str.w	r2, [r1, #4]!
 800680e:	d8f9      	bhi.n	8006804 <__lshift+0xc0>
 8006810:	e7ea      	b.n	80067e8 <__lshift+0xa4>
 8006812:	bf00      	nop
 8006814:	0800810a 	.word	0x0800810a
 8006818:	0800811b 	.word	0x0800811b

0800681c <__mcmp>:
 800681c:	4603      	mov	r3, r0
 800681e:	690a      	ldr	r2, [r1, #16]
 8006820:	6900      	ldr	r0, [r0, #16]
 8006822:	b530      	push	{r4, r5, lr}
 8006824:	1a80      	subs	r0, r0, r2
 8006826:	d10e      	bne.n	8006846 <__mcmp+0x2a>
 8006828:	3314      	adds	r3, #20
 800682a:	3114      	adds	r1, #20
 800682c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006830:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006834:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006838:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800683c:	4295      	cmp	r5, r2
 800683e:	d003      	beq.n	8006848 <__mcmp+0x2c>
 8006840:	d205      	bcs.n	800684e <__mcmp+0x32>
 8006842:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006846:	bd30      	pop	{r4, r5, pc}
 8006848:	42a3      	cmp	r3, r4
 800684a:	d3f3      	bcc.n	8006834 <__mcmp+0x18>
 800684c:	e7fb      	b.n	8006846 <__mcmp+0x2a>
 800684e:	2001      	movs	r0, #1
 8006850:	e7f9      	b.n	8006846 <__mcmp+0x2a>
	...

08006854 <__mdiff>:
 8006854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	4689      	mov	r9, r1
 800685a:	4606      	mov	r6, r0
 800685c:	4611      	mov	r1, r2
 800685e:	4648      	mov	r0, r9
 8006860:	4614      	mov	r4, r2
 8006862:	f7ff ffdb 	bl	800681c <__mcmp>
 8006866:	1e05      	subs	r5, r0, #0
 8006868:	d112      	bne.n	8006890 <__mdiff+0x3c>
 800686a:	4629      	mov	r1, r5
 800686c:	4630      	mov	r0, r6
 800686e:	f7ff fd5d 	bl	800632c <_Balloc>
 8006872:	4602      	mov	r2, r0
 8006874:	b928      	cbnz	r0, 8006882 <__mdiff+0x2e>
 8006876:	f240 2137 	movw	r1, #567	@ 0x237
 800687a:	4b3e      	ldr	r3, [pc, #248]	@ (8006974 <__mdiff+0x120>)
 800687c:	483e      	ldr	r0, [pc, #248]	@ (8006978 <__mdiff+0x124>)
 800687e:	f000 fb6f 	bl	8006f60 <__assert_func>
 8006882:	2301      	movs	r3, #1
 8006884:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006888:	4610      	mov	r0, r2
 800688a:	b003      	add	sp, #12
 800688c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006890:	bfbc      	itt	lt
 8006892:	464b      	movlt	r3, r9
 8006894:	46a1      	movlt	r9, r4
 8006896:	4630      	mov	r0, r6
 8006898:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800689c:	bfba      	itte	lt
 800689e:	461c      	movlt	r4, r3
 80068a0:	2501      	movlt	r5, #1
 80068a2:	2500      	movge	r5, #0
 80068a4:	f7ff fd42 	bl	800632c <_Balloc>
 80068a8:	4602      	mov	r2, r0
 80068aa:	b918      	cbnz	r0, 80068b4 <__mdiff+0x60>
 80068ac:	f240 2145 	movw	r1, #581	@ 0x245
 80068b0:	4b30      	ldr	r3, [pc, #192]	@ (8006974 <__mdiff+0x120>)
 80068b2:	e7e3      	b.n	800687c <__mdiff+0x28>
 80068b4:	f100 0b14 	add.w	fp, r0, #20
 80068b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80068bc:	f109 0310 	add.w	r3, r9, #16
 80068c0:	60c5      	str	r5, [r0, #12]
 80068c2:	f04f 0c00 	mov.w	ip, #0
 80068c6:	f109 0514 	add.w	r5, r9, #20
 80068ca:	46d9      	mov	r9, fp
 80068cc:	6926      	ldr	r6, [r4, #16]
 80068ce:	f104 0e14 	add.w	lr, r4, #20
 80068d2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80068d6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80068da:	9301      	str	r3, [sp, #4]
 80068dc:	9b01      	ldr	r3, [sp, #4]
 80068de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80068e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80068e6:	b281      	uxth	r1, r0
 80068e8:	9301      	str	r3, [sp, #4]
 80068ea:	fa1f f38a 	uxth.w	r3, sl
 80068ee:	1a5b      	subs	r3, r3, r1
 80068f0:	0c00      	lsrs	r0, r0, #16
 80068f2:	4463      	add	r3, ip
 80068f4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80068f8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006902:	4576      	cmp	r6, lr
 8006904:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006908:	f849 3b04 	str.w	r3, [r9], #4
 800690c:	d8e6      	bhi.n	80068dc <__mdiff+0x88>
 800690e:	1b33      	subs	r3, r6, r4
 8006910:	3b15      	subs	r3, #21
 8006912:	f023 0303 	bic.w	r3, r3, #3
 8006916:	3415      	adds	r4, #21
 8006918:	3304      	adds	r3, #4
 800691a:	42a6      	cmp	r6, r4
 800691c:	bf38      	it	cc
 800691e:	2304      	movcc	r3, #4
 8006920:	441d      	add	r5, r3
 8006922:	445b      	add	r3, fp
 8006924:	461e      	mov	r6, r3
 8006926:	462c      	mov	r4, r5
 8006928:	4544      	cmp	r4, r8
 800692a:	d30e      	bcc.n	800694a <__mdiff+0xf6>
 800692c:	f108 0103 	add.w	r1, r8, #3
 8006930:	1b49      	subs	r1, r1, r5
 8006932:	f021 0103 	bic.w	r1, r1, #3
 8006936:	3d03      	subs	r5, #3
 8006938:	45a8      	cmp	r8, r5
 800693a:	bf38      	it	cc
 800693c:	2100      	movcc	r1, #0
 800693e:	440b      	add	r3, r1
 8006940:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006944:	b199      	cbz	r1, 800696e <__mdiff+0x11a>
 8006946:	6117      	str	r7, [r2, #16]
 8006948:	e79e      	b.n	8006888 <__mdiff+0x34>
 800694a:	46e6      	mov	lr, ip
 800694c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006950:	fa1f fc81 	uxth.w	ip, r1
 8006954:	44f4      	add	ip, lr
 8006956:	0c08      	lsrs	r0, r1, #16
 8006958:	4471      	add	r1, lr
 800695a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800695e:	b289      	uxth	r1, r1
 8006960:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006964:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006968:	f846 1b04 	str.w	r1, [r6], #4
 800696c:	e7dc      	b.n	8006928 <__mdiff+0xd4>
 800696e:	3f01      	subs	r7, #1
 8006970:	e7e6      	b.n	8006940 <__mdiff+0xec>
 8006972:	bf00      	nop
 8006974:	0800810a 	.word	0x0800810a
 8006978:	0800811b 	.word	0x0800811b

0800697c <__d2b>:
 800697c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006980:	2101      	movs	r1, #1
 8006982:	4690      	mov	r8, r2
 8006984:	4699      	mov	r9, r3
 8006986:	9e08      	ldr	r6, [sp, #32]
 8006988:	f7ff fcd0 	bl	800632c <_Balloc>
 800698c:	4604      	mov	r4, r0
 800698e:	b930      	cbnz	r0, 800699e <__d2b+0x22>
 8006990:	4602      	mov	r2, r0
 8006992:	f240 310f 	movw	r1, #783	@ 0x30f
 8006996:	4b23      	ldr	r3, [pc, #140]	@ (8006a24 <__d2b+0xa8>)
 8006998:	4823      	ldr	r0, [pc, #140]	@ (8006a28 <__d2b+0xac>)
 800699a:	f000 fae1 	bl	8006f60 <__assert_func>
 800699e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80069a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069a6:	b10d      	cbz	r5, 80069ac <__d2b+0x30>
 80069a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069ac:	9301      	str	r3, [sp, #4]
 80069ae:	f1b8 0300 	subs.w	r3, r8, #0
 80069b2:	d024      	beq.n	80069fe <__d2b+0x82>
 80069b4:	4668      	mov	r0, sp
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	f7ff fd7f 	bl	80064ba <__lo0bits>
 80069bc:	e9dd 1200 	ldrd	r1, r2, [sp]
 80069c0:	b1d8      	cbz	r0, 80069fa <__d2b+0x7e>
 80069c2:	f1c0 0320 	rsb	r3, r0, #32
 80069c6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ca:	430b      	orrs	r3, r1
 80069cc:	40c2      	lsrs	r2, r0
 80069ce:	6163      	str	r3, [r4, #20]
 80069d0:	9201      	str	r2, [sp, #4]
 80069d2:	9b01      	ldr	r3, [sp, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	bf0c      	ite	eq
 80069d8:	2201      	moveq	r2, #1
 80069da:	2202      	movne	r2, #2
 80069dc:	61a3      	str	r3, [r4, #24]
 80069de:	6122      	str	r2, [r4, #16]
 80069e0:	b1ad      	cbz	r5, 8006a0e <__d2b+0x92>
 80069e2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80069e6:	4405      	add	r5, r0
 80069e8:	6035      	str	r5, [r6, #0]
 80069ea:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80069ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f0:	6018      	str	r0, [r3, #0]
 80069f2:	4620      	mov	r0, r4
 80069f4:	b002      	add	sp, #8
 80069f6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80069fa:	6161      	str	r1, [r4, #20]
 80069fc:	e7e9      	b.n	80069d2 <__d2b+0x56>
 80069fe:	a801      	add	r0, sp, #4
 8006a00:	f7ff fd5b 	bl	80064ba <__lo0bits>
 8006a04:	9b01      	ldr	r3, [sp, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	6163      	str	r3, [r4, #20]
 8006a0a:	3020      	adds	r0, #32
 8006a0c:	e7e7      	b.n	80069de <__d2b+0x62>
 8006a0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006a12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a16:	6030      	str	r0, [r6, #0]
 8006a18:	6918      	ldr	r0, [r3, #16]
 8006a1a:	f7ff fd2f 	bl	800647c <__hi0bits>
 8006a1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a22:	e7e4      	b.n	80069ee <__d2b+0x72>
 8006a24:	0800810a 	.word	0x0800810a
 8006a28:	0800811b 	.word	0x0800811b

08006a2c <__sfputc_r>:
 8006a2c:	6893      	ldr	r3, [r2, #8]
 8006a2e:	b410      	push	{r4}
 8006a30:	3b01      	subs	r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	6093      	str	r3, [r2, #8]
 8006a36:	da07      	bge.n	8006a48 <__sfputc_r+0x1c>
 8006a38:	6994      	ldr	r4, [r2, #24]
 8006a3a:	42a3      	cmp	r3, r4
 8006a3c:	db01      	blt.n	8006a42 <__sfputc_r+0x16>
 8006a3e:	290a      	cmp	r1, #10
 8006a40:	d102      	bne.n	8006a48 <__sfputc_r+0x1c>
 8006a42:	bc10      	pop	{r4}
 8006a44:	f000 b9da 	b.w	8006dfc <__swbuf_r>
 8006a48:	6813      	ldr	r3, [r2, #0]
 8006a4a:	1c58      	adds	r0, r3, #1
 8006a4c:	6010      	str	r0, [r2, #0]
 8006a4e:	7019      	strb	r1, [r3, #0]
 8006a50:	4608      	mov	r0, r1
 8006a52:	bc10      	pop	{r4}
 8006a54:	4770      	bx	lr

08006a56 <__sfputs_r>:
 8006a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a58:	4606      	mov	r6, r0
 8006a5a:	460f      	mov	r7, r1
 8006a5c:	4614      	mov	r4, r2
 8006a5e:	18d5      	adds	r5, r2, r3
 8006a60:	42ac      	cmp	r4, r5
 8006a62:	d101      	bne.n	8006a68 <__sfputs_r+0x12>
 8006a64:	2000      	movs	r0, #0
 8006a66:	e007      	b.n	8006a78 <__sfputs_r+0x22>
 8006a68:	463a      	mov	r2, r7
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a70:	f7ff ffdc 	bl	8006a2c <__sfputc_r>
 8006a74:	1c43      	adds	r3, r0, #1
 8006a76:	d1f3      	bne.n	8006a60 <__sfputs_r+0xa>
 8006a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a7c <_vfiprintf_r>:
 8006a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a80:	460d      	mov	r5, r1
 8006a82:	4614      	mov	r4, r2
 8006a84:	4698      	mov	r8, r3
 8006a86:	4606      	mov	r6, r0
 8006a88:	b09d      	sub	sp, #116	@ 0x74
 8006a8a:	b118      	cbz	r0, 8006a94 <_vfiprintf_r+0x18>
 8006a8c:	6a03      	ldr	r3, [r0, #32]
 8006a8e:	b90b      	cbnz	r3, 8006a94 <_vfiprintf_r+0x18>
 8006a90:	f7fe fbe2 	bl	8005258 <__sinit>
 8006a94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a96:	07d9      	lsls	r1, r3, #31
 8006a98:	d405      	bmi.n	8006aa6 <_vfiprintf_r+0x2a>
 8006a9a:	89ab      	ldrh	r3, [r5, #12]
 8006a9c:	059a      	lsls	r2, r3, #22
 8006a9e:	d402      	bmi.n	8006aa6 <_vfiprintf_r+0x2a>
 8006aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006aa2:	f7fe fce2 	bl	800546a <__retarget_lock_acquire_recursive>
 8006aa6:	89ab      	ldrh	r3, [r5, #12]
 8006aa8:	071b      	lsls	r3, r3, #28
 8006aaa:	d501      	bpl.n	8006ab0 <_vfiprintf_r+0x34>
 8006aac:	692b      	ldr	r3, [r5, #16]
 8006aae:	b99b      	cbnz	r3, 8006ad8 <_vfiprintf_r+0x5c>
 8006ab0:	4629      	mov	r1, r5
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	f000 f9e0 	bl	8006e78 <__swsetup_r>
 8006ab8:	b170      	cbz	r0, 8006ad8 <_vfiprintf_r+0x5c>
 8006aba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006abc:	07dc      	lsls	r4, r3, #31
 8006abe:	d504      	bpl.n	8006aca <_vfiprintf_r+0x4e>
 8006ac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ac4:	b01d      	add	sp, #116	@ 0x74
 8006ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aca:	89ab      	ldrh	r3, [r5, #12]
 8006acc:	0598      	lsls	r0, r3, #22
 8006ace:	d4f7      	bmi.n	8006ac0 <_vfiprintf_r+0x44>
 8006ad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ad2:	f7fe fccb 	bl	800546c <__retarget_lock_release_recursive>
 8006ad6:	e7f3      	b.n	8006ac0 <_vfiprintf_r+0x44>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	9309      	str	r3, [sp, #36]	@ 0x24
 8006adc:	2320      	movs	r3, #32
 8006ade:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ae2:	2330      	movs	r3, #48	@ 0x30
 8006ae4:	f04f 0901 	mov.w	r9, #1
 8006ae8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006aec:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006c98 <_vfiprintf_r+0x21c>
 8006af0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006af4:	4623      	mov	r3, r4
 8006af6:	469a      	mov	sl, r3
 8006af8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006afc:	b10a      	cbz	r2, 8006b02 <_vfiprintf_r+0x86>
 8006afe:	2a25      	cmp	r2, #37	@ 0x25
 8006b00:	d1f9      	bne.n	8006af6 <_vfiprintf_r+0x7a>
 8006b02:	ebba 0b04 	subs.w	fp, sl, r4
 8006b06:	d00b      	beq.n	8006b20 <_vfiprintf_r+0xa4>
 8006b08:	465b      	mov	r3, fp
 8006b0a:	4622      	mov	r2, r4
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	4630      	mov	r0, r6
 8006b10:	f7ff ffa1 	bl	8006a56 <__sfputs_r>
 8006b14:	3001      	adds	r0, #1
 8006b16:	f000 80a7 	beq.w	8006c68 <_vfiprintf_r+0x1ec>
 8006b1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b1c:	445a      	add	r2, fp
 8006b1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b20:	f89a 3000 	ldrb.w	r3, [sl]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 809f 	beq.w	8006c68 <_vfiprintf_r+0x1ec>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b34:	f10a 0a01 	add.w	sl, sl, #1
 8006b38:	9304      	str	r3, [sp, #16]
 8006b3a:	9307      	str	r3, [sp, #28]
 8006b3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b40:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b42:	4654      	mov	r4, sl
 8006b44:	2205      	movs	r2, #5
 8006b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b4a:	4853      	ldr	r0, [pc, #332]	@ (8006c98 <_vfiprintf_r+0x21c>)
 8006b4c:	f7fe fc8f 	bl	800546e <memchr>
 8006b50:	9a04      	ldr	r2, [sp, #16]
 8006b52:	b9d8      	cbnz	r0, 8006b8c <_vfiprintf_r+0x110>
 8006b54:	06d1      	lsls	r1, r2, #27
 8006b56:	bf44      	itt	mi
 8006b58:	2320      	movmi	r3, #32
 8006b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b5e:	0713      	lsls	r3, r2, #28
 8006b60:	bf44      	itt	mi
 8006b62:	232b      	movmi	r3, #43	@ 0x2b
 8006b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b68:	f89a 3000 	ldrb.w	r3, [sl]
 8006b6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b6e:	d015      	beq.n	8006b9c <_vfiprintf_r+0x120>
 8006b70:	4654      	mov	r4, sl
 8006b72:	2000      	movs	r0, #0
 8006b74:	f04f 0c0a 	mov.w	ip, #10
 8006b78:	9a07      	ldr	r2, [sp, #28]
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b80:	3b30      	subs	r3, #48	@ 0x30
 8006b82:	2b09      	cmp	r3, #9
 8006b84:	d94b      	bls.n	8006c1e <_vfiprintf_r+0x1a2>
 8006b86:	b1b0      	cbz	r0, 8006bb6 <_vfiprintf_r+0x13a>
 8006b88:	9207      	str	r2, [sp, #28]
 8006b8a:	e014      	b.n	8006bb6 <_vfiprintf_r+0x13a>
 8006b8c:	eba0 0308 	sub.w	r3, r0, r8
 8006b90:	fa09 f303 	lsl.w	r3, r9, r3
 8006b94:	4313      	orrs	r3, r2
 8006b96:	46a2      	mov	sl, r4
 8006b98:	9304      	str	r3, [sp, #16]
 8006b9a:	e7d2      	b.n	8006b42 <_vfiprintf_r+0xc6>
 8006b9c:	9b03      	ldr	r3, [sp, #12]
 8006b9e:	1d19      	adds	r1, r3, #4
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	9103      	str	r1, [sp, #12]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	bfbb      	ittet	lt
 8006ba8:	425b      	neglt	r3, r3
 8006baa:	f042 0202 	orrlt.w	r2, r2, #2
 8006bae:	9307      	strge	r3, [sp, #28]
 8006bb0:	9307      	strlt	r3, [sp, #28]
 8006bb2:	bfb8      	it	lt
 8006bb4:	9204      	strlt	r2, [sp, #16]
 8006bb6:	7823      	ldrb	r3, [r4, #0]
 8006bb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bba:	d10a      	bne.n	8006bd2 <_vfiprintf_r+0x156>
 8006bbc:	7863      	ldrb	r3, [r4, #1]
 8006bbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bc0:	d132      	bne.n	8006c28 <_vfiprintf_r+0x1ac>
 8006bc2:	9b03      	ldr	r3, [sp, #12]
 8006bc4:	3402      	adds	r4, #2
 8006bc6:	1d1a      	adds	r2, r3, #4
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	9203      	str	r2, [sp, #12]
 8006bcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006bd0:	9305      	str	r3, [sp, #20]
 8006bd2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006c9c <_vfiprintf_r+0x220>
 8006bd6:	2203      	movs	r2, #3
 8006bd8:	4650      	mov	r0, sl
 8006bda:	7821      	ldrb	r1, [r4, #0]
 8006bdc:	f7fe fc47 	bl	800546e <memchr>
 8006be0:	b138      	cbz	r0, 8006bf2 <_vfiprintf_r+0x176>
 8006be2:	2240      	movs	r2, #64	@ 0x40
 8006be4:	9b04      	ldr	r3, [sp, #16]
 8006be6:	eba0 000a 	sub.w	r0, r0, sl
 8006bea:	4082      	lsls	r2, r0
 8006bec:	4313      	orrs	r3, r2
 8006bee:	3401      	adds	r4, #1
 8006bf0:	9304      	str	r3, [sp, #16]
 8006bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf6:	2206      	movs	r2, #6
 8006bf8:	4829      	ldr	r0, [pc, #164]	@ (8006ca0 <_vfiprintf_r+0x224>)
 8006bfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006bfe:	f7fe fc36 	bl	800546e <memchr>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d03f      	beq.n	8006c86 <_vfiprintf_r+0x20a>
 8006c06:	4b27      	ldr	r3, [pc, #156]	@ (8006ca4 <_vfiprintf_r+0x228>)
 8006c08:	bb1b      	cbnz	r3, 8006c52 <_vfiprintf_r+0x1d6>
 8006c0a:	9b03      	ldr	r3, [sp, #12]
 8006c0c:	3307      	adds	r3, #7
 8006c0e:	f023 0307 	bic.w	r3, r3, #7
 8006c12:	3308      	adds	r3, #8
 8006c14:	9303      	str	r3, [sp, #12]
 8006c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c18:	443b      	add	r3, r7
 8006c1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c1c:	e76a      	b.n	8006af4 <_vfiprintf_r+0x78>
 8006c1e:	460c      	mov	r4, r1
 8006c20:	2001      	movs	r0, #1
 8006c22:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c26:	e7a8      	b.n	8006b7a <_vfiprintf_r+0xfe>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f04f 0c0a 	mov.w	ip, #10
 8006c2e:	4619      	mov	r1, r3
 8006c30:	3401      	adds	r4, #1
 8006c32:	9305      	str	r3, [sp, #20]
 8006c34:	4620      	mov	r0, r4
 8006c36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c3a:	3a30      	subs	r2, #48	@ 0x30
 8006c3c:	2a09      	cmp	r2, #9
 8006c3e:	d903      	bls.n	8006c48 <_vfiprintf_r+0x1cc>
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0c6      	beq.n	8006bd2 <_vfiprintf_r+0x156>
 8006c44:	9105      	str	r1, [sp, #20]
 8006c46:	e7c4      	b.n	8006bd2 <_vfiprintf_r+0x156>
 8006c48:	4604      	mov	r4, r0
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c50:	e7f0      	b.n	8006c34 <_vfiprintf_r+0x1b8>
 8006c52:	ab03      	add	r3, sp, #12
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	462a      	mov	r2, r5
 8006c58:	4630      	mov	r0, r6
 8006c5a:	4b13      	ldr	r3, [pc, #76]	@ (8006ca8 <_vfiprintf_r+0x22c>)
 8006c5c:	a904      	add	r1, sp, #16
 8006c5e:	f7fd feb1 	bl	80049c4 <_printf_float>
 8006c62:	4607      	mov	r7, r0
 8006c64:	1c78      	adds	r0, r7, #1
 8006c66:	d1d6      	bne.n	8006c16 <_vfiprintf_r+0x19a>
 8006c68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c6a:	07d9      	lsls	r1, r3, #31
 8006c6c:	d405      	bmi.n	8006c7a <_vfiprintf_r+0x1fe>
 8006c6e:	89ab      	ldrh	r3, [r5, #12]
 8006c70:	059a      	lsls	r2, r3, #22
 8006c72:	d402      	bmi.n	8006c7a <_vfiprintf_r+0x1fe>
 8006c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c76:	f7fe fbf9 	bl	800546c <__retarget_lock_release_recursive>
 8006c7a:	89ab      	ldrh	r3, [r5, #12]
 8006c7c:	065b      	lsls	r3, r3, #25
 8006c7e:	f53f af1f 	bmi.w	8006ac0 <_vfiprintf_r+0x44>
 8006c82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c84:	e71e      	b.n	8006ac4 <_vfiprintf_r+0x48>
 8006c86:	ab03      	add	r3, sp, #12
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	462a      	mov	r2, r5
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	4b06      	ldr	r3, [pc, #24]	@ (8006ca8 <_vfiprintf_r+0x22c>)
 8006c90:	a904      	add	r1, sp, #16
 8006c92:	f7fe f935 	bl	8004f00 <_printf_i>
 8006c96:	e7e4      	b.n	8006c62 <_vfiprintf_r+0x1e6>
 8006c98:	08008270 	.word	0x08008270
 8006c9c:	08008276 	.word	0x08008276
 8006ca0:	0800827a 	.word	0x0800827a
 8006ca4:	080049c5 	.word	0x080049c5
 8006ca8:	08006a57 	.word	0x08006a57

08006cac <__sflush_r>:
 8006cac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb2:	0716      	lsls	r6, r2, #28
 8006cb4:	4605      	mov	r5, r0
 8006cb6:	460c      	mov	r4, r1
 8006cb8:	d454      	bmi.n	8006d64 <__sflush_r+0xb8>
 8006cba:	684b      	ldr	r3, [r1, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	dc02      	bgt.n	8006cc6 <__sflush_r+0x1a>
 8006cc0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	dd48      	ble.n	8006d58 <__sflush_r+0xac>
 8006cc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cc8:	2e00      	cmp	r6, #0
 8006cca:	d045      	beq.n	8006d58 <__sflush_r+0xac>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006cd2:	682f      	ldr	r7, [r5, #0]
 8006cd4:	6a21      	ldr	r1, [r4, #32]
 8006cd6:	602b      	str	r3, [r5, #0]
 8006cd8:	d030      	beq.n	8006d3c <__sflush_r+0x90>
 8006cda:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006cdc:	89a3      	ldrh	r3, [r4, #12]
 8006cde:	0759      	lsls	r1, r3, #29
 8006ce0:	d505      	bpl.n	8006cee <__sflush_r+0x42>
 8006ce2:	6863      	ldr	r3, [r4, #4]
 8006ce4:	1ad2      	subs	r2, r2, r3
 8006ce6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ce8:	b10b      	cbz	r3, 8006cee <__sflush_r+0x42>
 8006cea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006cec:	1ad2      	subs	r2, r2, r3
 8006cee:	2300      	movs	r3, #0
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cf4:	6a21      	ldr	r1, [r4, #32]
 8006cf6:	47b0      	blx	r6
 8006cf8:	1c43      	adds	r3, r0, #1
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	d106      	bne.n	8006d0c <__sflush_r+0x60>
 8006cfe:	6829      	ldr	r1, [r5, #0]
 8006d00:	291d      	cmp	r1, #29
 8006d02:	d82b      	bhi.n	8006d5c <__sflush_r+0xb0>
 8006d04:	4a28      	ldr	r2, [pc, #160]	@ (8006da8 <__sflush_r+0xfc>)
 8006d06:	410a      	asrs	r2, r1
 8006d08:	07d6      	lsls	r6, r2, #31
 8006d0a:	d427      	bmi.n	8006d5c <__sflush_r+0xb0>
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	6062      	str	r2, [r4, #4]
 8006d10:	6922      	ldr	r2, [r4, #16]
 8006d12:	04d9      	lsls	r1, r3, #19
 8006d14:	6022      	str	r2, [r4, #0]
 8006d16:	d504      	bpl.n	8006d22 <__sflush_r+0x76>
 8006d18:	1c42      	adds	r2, r0, #1
 8006d1a:	d101      	bne.n	8006d20 <__sflush_r+0x74>
 8006d1c:	682b      	ldr	r3, [r5, #0]
 8006d1e:	b903      	cbnz	r3, 8006d22 <__sflush_r+0x76>
 8006d20:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d24:	602f      	str	r7, [r5, #0]
 8006d26:	b1b9      	cbz	r1, 8006d58 <__sflush_r+0xac>
 8006d28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d2c:	4299      	cmp	r1, r3
 8006d2e:	d002      	beq.n	8006d36 <__sflush_r+0x8a>
 8006d30:	4628      	mov	r0, r5
 8006d32:	f7ff f9fd 	bl	8006130 <_free_r>
 8006d36:	2300      	movs	r3, #0
 8006d38:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d3a:	e00d      	b.n	8006d58 <__sflush_r+0xac>
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	4628      	mov	r0, r5
 8006d40:	47b0      	blx	r6
 8006d42:	4602      	mov	r2, r0
 8006d44:	1c50      	adds	r0, r2, #1
 8006d46:	d1c9      	bne.n	8006cdc <__sflush_r+0x30>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0c6      	beq.n	8006cdc <__sflush_r+0x30>
 8006d4e:	2b1d      	cmp	r3, #29
 8006d50:	d001      	beq.n	8006d56 <__sflush_r+0xaa>
 8006d52:	2b16      	cmp	r3, #22
 8006d54:	d11d      	bne.n	8006d92 <__sflush_r+0xe6>
 8006d56:	602f      	str	r7, [r5, #0]
 8006d58:	2000      	movs	r0, #0
 8006d5a:	e021      	b.n	8006da0 <__sflush_r+0xf4>
 8006d5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d60:	b21b      	sxth	r3, r3
 8006d62:	e01a      	b.n	8006d9a <__sflush_r+0xee>
 8006d64:	690f      	ldr	r7, [r1, #16]
 8006d66:	2f00      	cmp	r7, #0
 8006d68:	d0f6      	beq.n	8006d58 <__sflush_r+0xac>
 8006d6a:	0793      	lsls	r3, r2, #30
 8006d6c:	bf18      	it	ne
 8006d6e:	2300      	movne	r3, #0
 8006d70:	680e      	ldr	r6, [r1, #0]
 8006d72:	bf08      	it	eq
 8006d74:	694b      	ldreq	r3, [r1, #20]
 8006d76:	1bf6      	subs	r6, r6, r7
 8006d78:	600f      	str	r7, [r1, #0]
 8006d7a:	608b      	str	r3, [r1, #8]
 8006d7c:	2e00      	cmp	r6, #0
 8006d7e:	ddeb      	ble.n	8006d58 <__sflush_r+0xac>
 8006d80:	4633      	mov	r3, r6
 8006d82:	463a      	mov	r2, r7
 8006d84:	4628      	mov	r0, r5
 8006d86:	6a21      	ldr	r1, [r4, #32]
 8006d88:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006d8c:	47e0      	blx	ip
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	dc07      	bgt.n	8006da2 <__sflush_r+0xf6>
 8006d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d9e:	81a3      	strh	r3, [r4, #12]
 8006da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006da2:	4407      	add	r7, r0
 8006da4:	1a36      	subs	r6, r6, r0
 8006da6:	e7e9      	b.n	8006d7c <__sflush_r+0xd0>
 8006da8:	dfbffffe 	.word	0xdfbffffe

08006dac <_fflush_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	690b      	ldr	r3, [r1, #16]
 8006db0:	4605      	mov	r5, r0
 8006db2:	460c      	mov	r4, r1
 8006db4:	b913      	cbnz	r3, 8006dbc <_fflush_r+0x10>
 8006db6:	2500      	movs	r5, #0
 8006db8:	4628      	mov	r0, r5
 8006dba:	bd38      	pop	{r3, r4, r5, pc}
 8006dbc:	b118      	cbz	r0, 8006dc6 <_fflush_r+0x1a>
 8006dbe:	6a03      	ldr	r3, [r0, #32]
 8006dc0:	b90b      	cbnz	r3, 8006dc6 <_fflush_r+0x1a>
 8006dc2:	f7fe fa49 	bl	8005258 <__sinit>
 8006dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0f3      	beq.n	8006db6 <_fflush_r+0xa>
 8006dce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006dd0:	07d0      	lsls	r0, r2, #31
 8006dd2:	d404      	bmi.n	8006dde <_fflush_r+0x32>
 8006dd4:	0599      	lsls	r1, r3, #22
 8006dd6:	d402      	bmi.n	8006dde <_fflush_r+0x32>
 8006dd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dda:	f7fe fb46 	bl	800546a <__retarget_lock_acquire_recursive>
 8006dde:	4628      	mov	r0, r5
 8006de0:	4621      	mov	r1, r4
 8006de2:	f7ff ff63 	bl	8006cac <__sflush_r>
 8006de6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006de8:	4605      	mov	r5, r0
 8006dea:	07da      	lsls	r2, r3, #31
 8006dec:	d4e4      	bmi.n	8006db8 <_fflush_r+0xc>
 8006dee:	89a3      	ldrh	r3, [r4, #12]
 8006df0:	059b      	lsls	r3, r3, #22
 8006df2:	d4e1      	bmi.n	8006db8 <_fflush_r+0xc>
 8006df4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006df6:	f7fe fb39 	bl	800546c <__retarget_lock_release_recursive>
 8006dfa:	e7dd      	b.n	8006db8 <_fflush_r+0xc>

08006dfc <__swbuf_r>:
 8006dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfe:	460e      	mov	r6, r1
 8006e00:	4614      	mov	r4, r2
 8006e02:	4605      	mov	r5, r0
 8006e04:	b118      	cbz	r0, 8006e0e <__swbuf_r+0x12>
 8006e06:	6a03      	ldr	r3, [r0, #32]
 8006e08:	b90b      	cbnz	r3, 8006e0e <__swbuf_r+0x12>
 8006e0a:	f7fe fa25 	bl	8005258 <__sinit>
 8006e0e:	69a3      	ldr	r3, [r4, #24]
 8006e10:	60a3      	str	r3, [r4, #8]
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	071a      	lsls	r2, r3, #28
 8006e16:	d501      	bpl.n	8006e1c <__swbuf_r+0x20>
 8006e18:	6923      	ldr	r3, [r4, #16]
 8006e1a:	b943      	cbnz	r3, 8006e2e <__swbuf_r+0x32>
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f000 f82a 	bl	8006e78 <__swsetup_r>
 8006e24:	b118      	cbz	r0, 8006e2e <__swbuf_r+0x32>
 8006e26:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	6922      	ldr	r2, [r4, #16]
 8006e32:	b2f6      	uxtb	r6, r6
 8006e34:	1a98      	subs	r0, r3, r2
 8006e36:	6963      	ldr	r3, [r4, #20]
 8006e38:	4637      	mov	r7, r6
 8006e3a:	4283      	cmp	r3, r0
 8006e3c:	dc05      	bgt.n	8006e4a <__swbuf_r+0x4e>
 8006e3e:	4621      	mov	r1, r4
 8006e40:	4628      	mov	r0, r5
 8006e42:	f7ff ffb3 	bl	8006dac <_fflush_r>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	d1ed      	bne.n	8006e26 <__swbuf_r+0x2a>
 8006e4a:	68a3      	ldr	r3, [r4, #8]
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	60a3      	str	r3, [r4, #8]
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	6022      	str	r2, [r4, #0]
 8006e56:	701e      	strb	r6, [r3, #0]
 8006e58:	6962      	ldr	r2, [r4, #20]
 8006e5a:	1c43      	adds	r3, r0, #1
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d004      	beq.n	8006e6a <__swbuf_r+0x6e>
 8006e60:	89a3      	ldrh	r3, [r4, #12]
 8006e62:	07db      	lsls	r3, r3, #31
 8006e64:	d5e1      	bpl.n	8006e2a <__swbuf_r+0x2e>
 8006e66:	2e0a      	cmp	r6, #10
 8006e68:	d1df      	bne.n	8006e2a <__swbuf_r+0x2e>
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	f7ff ff9d 	bl	8006dac <_fflush_r>
 8006e72:	2800      	cmp	r0, #0
 8006e74:	d0d9      	beq.n	8006e2a <__swbuf_r+0x2e>
 8006e76:	e7d6      	b.n	8006e26 <__swbuf_r+0x2a>

08006e78 <__swsetup_r>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	4b29      	ldr	r3, [pc, #164]	@ (8006f20 <__swsetup_r+0xa8>)
 8006e7c:	4605      	mov	r5, r0
 8006e7e:	6818      	ldr	r0, [r3, #0]
 8006e80:	460c      	mov	r4, r1
 8006e82:	b118      	cbz	r0, 8006e8c <__swsetup_r+0x14>
 8006e84:	6a03      	ldr	r3, [r0, #32]
 8006e86:	b90b      	cbnz	r3, 8006e8c <__swsetup_r+0x14>
 8006e88:	f7fe f9e6 	bl	8005258 <__sinit>
 8006e8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e90:	0719      	lsls	r1, r3, #28
 8006e92:	d422      	bmi.n	8006eda <__swsetup_r+0x62>
 8006e94:	06da      	lsls	r2, r3, #27
 8006e96:	d407      	bmi.n	8006ea8 <__swsetup_r+0x30>
 8006e98:	2209      	movs	r2, #9
 8006e9a:	602a      	str	r2, [r5, #0]
 8006e9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ea0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ea4:	81a3      	strh	r3, [r4, #12]
 8006ea6:	e033      	b.n	8006f10 <__swsetup_r+0x98>
 8006ea8:	0758      	lsls	r0, r3, #29
 8006eaa:	d512      	bpl.n	8006ed2 <__swsetup_r+0x5a>
 8006eac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006eae:	b141      	cbz	r1, 8006ec2 <__swsetup_r+0x4a>
 8006eb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006eb4:	4299      	cmp	r1, r3
 8006eb6:	d002      	beq.n	8006ebe <__swsetup_r+0x46>
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f7ff f939 	bl	8006130 <_free_r>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ec2:	89a3      	ldrh	r3, [r4, #12]
 8006ec4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006ec8:	81a3      	strh	r3, [r4, #12]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	6063      	str	r3, [r4, #4]
 8006ece:	6923      	ldr	r3, [r4, #16]
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	89a3      	ldrh	r3, [r4, #12]
 8006ed4:	f043 0308 	orr.w	r3, r3, #8
 8006ed8:	81a3      	strh	r3, [r4, #12]
 8006eda:	6923      	ldr	r3, [r4, #16]
 8006edc:	b94b      	cbnz	r3, 8006ef2 <__swsetup_r+0x7a>
 8006ede:	89a3      	ldrh	r3, [r4, #12]
 8006ee0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ee8:	d003      	beq.n	8006ef2 <__swsetup_r+0x7a>
 8006eea:	4621      	mov	r1, r4
 8006eec:	4628      	mov	r0, r5
 8006eee:	f000 f8c0 	bl	8007072 <__smakebuf_r>
 8006ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ef6:	f013 0201 	ands.w	r2, r3, #1
 8006efa:	d00a      	beq.n	8006f12 <__swsetup_r+0x9a>
 8006efc:	2200      	movs	r2, #0
 8006efe:	60a2      	str	r2, [r4, #8]
 8006f00:	6962      	ldr	r2, [r4, #20]
 8006f02:	4252      	negs	r2, r2
 8006f04:	61a2      	str	r2, [r4, #24]
 8006f06:	6922      	ldr	r2, [r4, #16]
 8006f08:	b942      	cbnz	r2, 8006f1c <__swsetup_r+0xa4>
 8006f0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f0e:	d1c5      	bne.n	8006e9c <__swsetup_r+0x24>
 8006f10:	bd38      	pop	{r3, r4, r5, pc}
 8006f12:	0799      	lsls	r1, r3, #30
 8006f14:	bf58      	it	pl
 8006f16:	6962      	ldrpl	r2, [r4, #20]
 8006f18:	60a2      	str	r2, [r4, #8]
 8006f1a:	e7f4      	b.n	8006f06 <__swsetup_r+0x8e>
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	e7f7      	b.n	8006f10 <__swsetup_r+0x98>
 8006f20:	20000018 	.word	0x20000018

08006f24 <_sbrk_r>:
 8006f24:	b538      	push	{r3, r4, r5, lr}
 8006f26:	2300      	movs	r3, #0
 8006f28:	4d05      	ldr	r5, [pc, #20]	@ (8006f40 <_sbrk_r+0x1c>)
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	4608      	mov	r0, r1
 8006f2e:	602b      	str	r3, [r5, #0]
 8006f30:	f7fa fbd6 	bl	80016e0 <_sbrk>
 8006f34:	1c43      	adds	r3, r0, #1
 8006f36:	d102      	bne.n	8006f3e <_sbrk_r+0x1a>
 8006f38:	682b      	ldr	r3, [r5, #0]
 8006f3a:	b103      	cbz	r3, 8006f3e <_sbrk_r+0x1a>
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	bd38      	pop	{r3, r4, r5, pc}
 8006f40:	20000414 	.word	0x20000414

08006f44 <memcpy>:
 8006f44:	440a      	add	r2, r1
 8006f46:	4291      	cmp	r1, r2
 8006f48:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006f4c:	d100      	bne.n	8006f50 <memcpy+0xc>
 8006f4e:	4770      	bx	lr
 8006f50:	b510      	push	{r4, lr}
 8006f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f56:	4291      	cmp	r1, r2
 8006f58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f5c:	d1f9      	bne.n	8006f52 <memcpy+0xe>
 8006f5e:	bd10      	pop	{r4, pc}

08006f60 <__assert_func>:
 8006f60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f62:	4614      	mov	r4, r2
 8006f64:	461a      	mov	r2, r3
 8006f66:	4b09      	ldr	r3, [pc, #36]	@ (8006f8c <__assert_func+0x2c>)
 8006f68:	4605      	mov	r5, r0
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68d8      	ldr	r0, [r3, #12]
 8006f6e:	b954      	cbnz	r4, 8006f86 <__assert_func+0x26>
 8006f70:	4b07      	ldr	r3, [pc, #28]	@ (8006f90 <__assert_func+0x30>)
 8006f72:	461c      	mov	r4, r3
 8006f74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f78:	9100      	str	r1, [sp, #0]
 8006f7a:	462b      	mov	r3, r5
 8006f7c:	4905      	ldr	r1, [pc, #20]	@ (8006f94 <__assert_func+0x34>)
 8006f7e:	f000 f841 	bl	8007004 <fiprintf>
 8006f82:	f000 f8d5 	bl	8007130 <abort>
 8006f86:	4b04      	ldr	r3, [pc, #16]	@ (8006f98 <__assert_func+0x38>)
 8006f88:	e7f4      	b.n	8006f74 <__assert_func+0x14>
 8006f8a:	bf00      	nop
 8006f8c:	20000018 	.word	0x20000018
 8006f90:	080082c6 	.word	0x080082c6
 8006f94:	08008298 	.word	0x08008298
 8006f98:	0800828b 	.word	0x0800828b

08006f9c <_calloc_r>:
 8006f9c:	b570      	push	{r4, r5, r6, lr}
 8006f9e:	fba1 5402 	umull	r5, r4, r1, r2
 8006fa2:	b93c      	cbnz	r4, 8006fb4 <_calloc_r+0x18>
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	f7ff f935 	bl	8006214 <_malloc_r>
 8006faa:	4606      	mov	r6, r0
 8006fac:	b928      	cbnz	r0, 8006fba <_calloc_r+0x1e>
 8006fae:	2600      	movs	r6, #0
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	bd70      	pop	{r4, r5, r6, pc}
 8006fb4:	220c      	movs	r2, #12
 8006fb6:	6002      	str	r2, [r0, #0]
 8006fb8:	e7f9      	b.n	8006fae <_calloc_r+0x12>
 8006fba:	462a      	mov	r2, r5
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	f7fe f9d6 	bl	800536e <memset>
 8006fc2:	e7f5      	b.n	8006fb0 <_calloc_r+0x14>

08006fc4 <__ascii_mbtowc>:
 8006fc4:	b082      	sub	sp, #8
 8006fc6:	b901      	cbnz	r1, 8006fca <__ascii_mbtowc+0x6>
 8006fc8:	a901      	add	r1, sp, #4
 8006fca:	b142      	cbz	r2, 8006fde <__ascii_mbtowc+0x1a>
 8006fcc:	b14b      	cbz	r3, 8006fe2 <__ascii_mbtowc+0x1e>
 8006fce:	7813      	ldrb	r3, [r2, #0]
 8006fd0:	600b      	str	r3, [r1, #0]
 8006fd2:	7812      	ldrb	r2, [r2, #0]
 8006fd4:	1e10      	subs	r0, r2, #0
 8006fd6:	bf18      	it	ne
 8006fd8:	2001      	movne	r0, #1
 8006fda:	b002      	add	sp, #8
 8006fdc:	4770      	bx	lr
 8006fde:	4610      	mov	r0, r2
 8006fe0:	e7fb      	b.n	8006fda <__ascii_mbtowc+0x16>
 8006fe2:	f06f 0001 	mvn.w	r0, #1
 8006fe6:	e7f8      	b.n	8006fda <__ascii_mbtowc+0x16>

08006fe8 <__ascii_wctomb>:
 8006fe8:	4603      	mov	r3, r0
 8006fea:	4608      	mov	r0, r1
 8006fec:	b141      	cbz	r1, 8007000 <__ascii_wctomb+0x18>
 8006fee:	2aff      	cmp	r2, #255	@ 0xff
 8006ff0:	d904      	bls.n	8006ffc <__ascii_wctomb+0x14>
 8006ff2:	228a      	movs	r2, #138	@ 0x8a
 8006ff4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	4770      	bx	lr
 8006ffc:	2001      	movs	r0, #1
 8006ffe:	700a      	strb	r2, [r1, #0]
 8007000:	4770      	bx	lr
	...

08007004 <fiprintf>:
 8007004:	b40e      	push	{r1, r2, r3}
 8007006:	b503      	push	{r0, r1, lr}
 8007008:	4601      	mov	r1, r0
 800700a:	ab03      	add	r3, sp, #12
 800700c:	4805      	ldr	r0, [pc, #20]	@ (8007024 <fiprintf+0x20>)
 800700e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007012:	6800      	ldr	r0, [r0, #0]
 8007014:	9301      	str	r3, [sp, #4]
 8007016:	f7ff fd31 	bl	8006a7c <_vfiprintf_r>
 800701a:	b002      	add	sp, #8
 800701c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007020:	b003      	add	sp, #12
 8007022:	4770      	bx	lr
 8007024:	20000018 	.word	0x20000018

08007028 <__swhatbuf_r>:
 8007028:	b570      	push	{r4, r5, r6, lr}
 800702a:	460c      	mov	r4, r1
 800702c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007030:	4615      	mov	r5, r2
 8007032:	2900      	cmp	r1, #0
 8007034:	461e      	mov	r6, r3
 8007036:	b096      	sub	sp, #88	@ 0x58
 8007038:	da0c      	bge.n	8007054 <__swhatbuf_r+0x2c>
 800703a:	89a3      	ldrh	r3, [r4, #12]
 800703c:	2100      	movs	r1, #0
 800703e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007042:	bf14      	ite	ne
 8007044:	2340      	movne	r3, #64	@ 0x40
 8007046:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800704a:	2000      	movs	r0, #0
 800704c:	6031      	str	r1, [r6, #0]
 800704e:	602b      	str	r3, [r5, #0]
 8007050:	b016      	add	sp, #88	@ 0x58
 8007052:	bd70      	pop	{r4, r5, r6, pc}
 8007054:	466a      	mov	r2, sp
 8007056:	f000 f849 	bl	80070ec <_fstat_r>
 800705a:	2800      	cmp	r0, #0
 800705c:	dbed      	blt.n	800703a <__swhatbuf_r+0x12>
 800705e:	9901      	ldr	r1, [sp, #4]
 8007060:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007064:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007068:	4259      	negs	r1, r3
 800706a:	4159      	adcs	r1, r3
 800706c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007070:	e7eb      	b.n	800704a <__swhatbuf_r+0x22>

08007072 <__smakebuf_r>:
 8007072:	898b      	ldrh	r3, [r1, #12]
 8007074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007076:	079d      	lsls	r5, r3, #30
 8007078:	4606      	mov	r6, r0
 800707a:	460c      	mov	r4, r1
 800707c:	d507      	bpl.n	800708e <__smakebuf_r+0x1c>
 800707e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007082:	6023      	str	r3, [r4, #0]
 8007084:	6123      	str	r3, [r4, #16]
 8007086:	2301      	movs	r3, #1
 8007088:	6163      	str	r3, [r4, #20]
 800708a:	b003      	add	sp, #12
 800708c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800708e:	466a      	mov	r2, sp
 8007090:	ab01      	add	r3, sp, #4
 8007092:	f7ff ffc9 	bl	8007028 <__swhatbuf_r>
 8007096:	9f00      	ldr	r7, [sp, #0]
 8007098:	4605      	mov	r5, r0
 800709a:	4639      	mov	r1, r7
 800709c:	4630      	mov	r0, r6
 800709e:	f7ff f8b9 	bl	8006214 <_malloc_r>
 80070a2:	b948      	cbnz	r0, 80070b8 <__smakebuf_r+0x46>
 80070a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070a8:	059a      	lsls	r2, r3, #22
 80070aa:	d4ee      	bmi.n	800708a <__smakebuf_r+0x18>
 80070ac:	f023 0303 	bic.w	r3, r3, #3
 80070b0:	f043 0302 	orr.w	r3, r3, #2
 80070b4:	81a3      	strh	r3, [r4, #12]
 80070b6:	e7e2      	b.n	800707e <__smakebuf_r+0xc>
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80070be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070c2:	81a3      	strh	r3, [r4, #12]
 80070c4:	9b01      	ldr	r3, [sp, #4]
 80070c6:	6020      	str	r0, [r4, #0]
 80070c8:	b15b      	cbz	r3, 80070e2 <__smakebuf_r+0x70>
 80070ca:	4630      	mov	r0, r6
 80070cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070d0:	f000 f81e 	bl	8007110 <_isatty_r>
 80070d4:	b128      	cbz	r0, 80070e2 <__smakebuf_r+0x70>
 80070d6:	89a3      	ldrh	r3, [r4, #12]
 80070d8:	f023 0303 	bic.w	r3, r3, #3
 80070dc:	f043 0301 	orr.w	r3, r3, #1
 80070e0:	81a3      	strh	r3, [r4, #12]
 80070e2:	89a3      	ldrh	r3, [r4, #12]
 80070e4:	431d      	orrs	r5, r3
 80070e6:	81a5      	strh	r5, [r4, #12]
 80070e8:	e7cf      	b.n	800708a <__smakebuf_r+0x18>
	...

080070ec <_fstat_r>:
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	2300      	movs	r3, #0
 80070f0:	4d06      	ldr	r5, [pc, #24]	@ (800710c <_fstat_r+0x20>)
 80070f2:	4604      	mov	r4, r0
 80070f4:	4608      	mov	r0, r1
 80070f6:	4611      	mov	r1, r2
 80070f8:	602b      	str	r3, [r5, #0]
 80070fa:	f7fa facb 	bl	8001694 <_fstat>
 80070fe:	1c43      	adds	r3, r0, #1
 8007100:	d102      	bne.n	8007108 <_fstat_r+0x1c>
 8007102:	682b      	ldr	r3, [r5, #0]
 8007104:	b103      	cbz	r3, 8007108 <_fstat_r+0x1c>
 8007106:	6023      	str	r3, [r4, #0]
 8007108:	bd38      	pop	{r3, r4, r5, pc}
 800710a:	bf00      	nop
 800710c:	20000414 	.word	0x20000414

08007110 <_isatty_r>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	2300      	movs	r3, #0
 8007114:	4d05      	ldr	r5, [pc, #20]	@ (800712c <_isatty_r+0x1c>)
 8007116:	4604      	mov	r4, r0
 8007118:	4608      	mov	r0, r1
 800711a:	602b      	str	r3, [r5, #0]
 800711c:	f7fa fac9 	bl	80016b2 <_isatty>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	d102      	bne.n	800712a <_isatty_r+0x1a>
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	b103      	cbz	r3, 800712a <_isatty_r+0x1a>
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	bd38      	pop	{r3, r4, r5, pc}
 800712c:	20000414 	.word	0x20000414

08007130 <abort>:
 8007130:	2006      	movs	r0, #6
 8007132:	b508      	push	{r3, lr}
 8007134:	f000 f82c 	bl	8007190 <raise>
 8007138:	2001      	movs	r0, #1
 800713a:	f7fa fa5c 	bl	80015f6 <_exit>

0800713e <_raise_r>:
 800713e:	291f      	cmp	r1, #31
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4605      	mov	r5, r0
 8007144:	460c      	mov	r4, r1
 8007146:	d904      	bls.n	8007152 <_raise_r+0x14>
 8007148:	2316      	movs	r3, #22
 800714a:	6003      	str	r3, [r0, #0]
 800714c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007150:	bd38      	pop	{r3, r4, r5, pc}
 8007152:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007154:	b112      	cbz	r2, 800715c <_raise_r+0x1e>
 8007156:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800715a:	b94b      	cbnz	r3, 8007170 <_raise_r+0x32>
 800715c:	4628      	mov	r0, r5
 800715e:	f000 f831 	bl	80071c4 <_getpid_r>
 8007162:	4622      	mov	r2, r4
 8007164:	4601      	mov	r1, r0
 8007166:	4628      	mov	r0, r5
 8007168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800716c:	f000 b818 	b.w	80071a0 <_kill_r>
 8007170:	2b01      	cmp	r3, #1
 8007172:	d00a      	beq.n	800718a <_raise_r+0x4c>
 8007174:	1c59      	adds	r1, r3, #1
 8007176:	d103      	bne.n	8007180 <_raise_r+0x42>
 8007178:	2316      	movs	r3, #22
 800717a:	6003      	str	r3, [r0, #0]
 800717c:	2001      	movs	r0, #1
 800717e:	e7e7      	b.n	8007150 <_raise_r+0x12>
 8007180:	2100      	movs	r1, #0
 8007182:	4620      	mov	r0, r4
 8007184:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007188:	4798      	blx	r3
 800718a:	2000      	movs	r0, #0
 800718c:	e7e0      	b.n	8007150 <_raise_r+0x12>
	...

08007190 <raise>:
 8007190:	4b02      	ldr	r3, [pc, #8]	@ (800719c <raise+0xc>)
 8007192:	4601      	mov	r1, r0
 8007194:	6818      	ldr	r0, [r3, #0]
 8007196:	f7ff bfd2 	b.w	800713e <_raise_r>
 800719a:	bf00      	nop
 800719c:	20000018 	.word	0x20000018

080071a0 <_kill_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	2300      	movs	r3, #0
 80071a4:	4d06      	ldr	r5, [pc, #24]	@ (80071c0 <_kill_r+0x20>)
 80071a6:	4604      	mov	r4, r0
 80071a8:	4608      	mov	r0, r1
 80071aa:	4611      	mov	r1, r2
 80071ac:	602b      	str	r3, [r5, #0]
 80071ae:	f7fa fa12 	bl	80015d6 <_kill>
 80071b2:	1c43      	adds	r3, r0, #1
 80071b4:	d102      	bne.n	80071bc <_kill_r+0x1c>
 80071b6:	682b      	ldr	r3, [r5, #0]
 80071b8:	b103      	cbz	r3, 80071bc <_kill_r+0x1c>
 80071ba:	6023      	str	r3, [r4, #0]
 80071bc:	bd38      	pop	{r3, r4, r5, pc}
 80071be:	bf00      	nop
 80071c0:	20000414 	.word	0x20000414

080071c4 <_getpid_r>:
 80071c4:	f7fa ba00 	b.w	80015c8 <_getpid>

080071c8 <pow>:
 80071c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071cc:	4614      	mov	r4, r2
 80071ce:	461d      	mov	r5, r3
 80071d0:	4680      	mov	r8, r0
 80071d2:	4689      	mov	r9, r1
 80071d4:	f000 f868 	bl	80072a8 <__ieee754_pow>
 80071d8:	4622      	mov	r2, r4
 80071da:	4606      	mov	r6, r0
 80071dc:	460f      	mov	r7, r1
 80071de:	462b      	mov	r3, r5
 80071e0:	4620      	mov	r0, r4
 80071e2:	4629      	mov	r1, r5
 80071e4:	f7f9 fc12 	bl	8000a0c <__aeabi_dcmpun>
 80071e8:	bbc8      	cbnz	r0, 800725e <pow+0x96>
 80071ea:	2200      	movs	r2, #0
 80071ec:	2300      	movs	r3, #0
 80071ee:	4640      	mov	r0, r8
 80071f0:	4649      	mov	r1, r9
 80071f2:	f7f9 fbd9 	bl	80009a8 <__aeabi_dcmpeq>
 80071f6:	b1b8      	cbz	r0, 8007228 <pow+0x60>
 80071f8:	2200      	movs	r2, #0
 80071fa:	2300      	movs	r3, #0
 80071fc:	4620      	mov	r0, r4
 80071fe:	4629      	mov	r1, r5
 8007200:	f7f9 fbd2 	bl	80009a8 <__aeabi_dcmpeq>
 8007204:	2800      	cmp	r0, #0
 8007206:	d141      	bne.n	800728c <pow+0xc4>
 8007208:	4620      	mov	r0, r4
 800720a:	4629      	mov	r1, r5
 800720c:	f000 f844 	bl	8007298 <finite>
 8007210:	b328      	cbz	r0, 800725e <pow+0x96>
 8007212:	2200      	movs	r2, #0
 8007214:	2300      	movs	r3, #0
 8007216:	4620      	mov	r0, r4
 8007218:	4629      	mov	r1, r5
 800721a:	f7f9 fbcf 	bl	80009bc <__aeabi_dcmplt>
 800721e:	b1f0      	cbz	r0, 800725e <pow+0x96>
 8007220:	f7fe f8f8 	bl	8005414 <__errno>
 8007224:	2322      	movs	r3, #34	@ 0x22
 8007226:	e019      	b.n	800725c <pow+0x94>
 8007228:	4630      	mov	r0, r6
 800722a:	4639      	mov	r1, r7
 800722c:	f000 f834 	bl	8007298 <finite>
 8007230:	b9c8      	cbnz	r0, 8007266 <pow+0x9e>
 8007232:	4640      	mov	r0, r8
 8007234:	4649      	mov	r1, r9
 8007236:	f000 f82f 	bl	8007298 <finite>
 800723a:	b1a0      	cbz	r0, 8007266 <pow+0x9e>
 800723c:	4620      	mov	r0, r4
 800723e:	4629      	mov	r1, r5
 8007240:	f000 f82a 	bl	8007298 <finite>
 8007244:	b178      	cbz	r0, 8007266 <pow+0x9e>
 8007246:	4632      	mov	r2, r6
 8007248:	463b      	mov	r3, r7
 800724a:	4630      	mov	r0, r6
 800724c:	4639      	mov	r1, r7
 800724e:	f7f9 fbdd 	bl	8000a0c <__aeabi_dcmpun>
 8007252:	2800      	cmp	r0, #0
 8007254:	d0e4      	beq.n	8007220 <pow+0x58>
 8007256:	f7fe f8dd 	bl	8005414 <__errno>
 800725a:	2321      	movs	r3, #33	@ 0x21
 800725c:	6003      	str	r3, [r0, #0]
 800725e:	4630      	mov	r0, r6
 8007260:	4639      	mov	r1, r7
 8007262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007266:	2200      	movs	r2, #0
 8007268:	2300      	movs	r3, #0
 800726a:	4630      	mov	r0, r6
 800726c:	4639      	mov	r1, r7
 800726e:	f7f9 fb9b 	bl	80009a8 <__aeabi_dcmpeq>
 8007272:	2800      	cmp	r0, #0
 8007274:	d0f3      	beq.n	800725e <pow+0x96>
 8007276:	4640      	mov	r0, r8
 8007278:	4649      	mov	r1, r9
 800727a:	f000 f80d 	bl	8007298 <finite>
 800727e:	2800      	cmp	r0, #0
 8007280:	d0ed      	beq.n	800725e <pow+0x96>
 8007282:	4620      	mov	r0, r4
 8007284:	4629      	mov	r1, r5
 8007286:	f000 f807 	bl	8007298 <finite>
 800728a:	e7c8      	b.n	800721e <pow+0x56>
 800728c:	2600      	movs	r6, #0
 800728e:	4f01      	ldr	r7, [pc, #4]	@ (8007294 <pow+0xcc>)
 8007290:	e7e5      	b.n	800725e <pow+0x96>
 8007292:	bf00      	nop
 8007294:	3ff00000 	.word	0x3ff00000

08007298 <finite>:
 8007298:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800729c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80072a0:	0fc0      	lsrs	r0, r0, #31
 80072a2:	4770      	bx	lr
 80072a4:	0000      	movs	r0, r0
	...

080072a8 <__ieee754_pow>:
 80072a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ac:	b091      	sub	sp, #68	@ 0x44
 80072ae:	e9cd 2300 	strd	r2, r3, [sp]
 80072b2:	468b      	mov	fp, r1
 80072b4:	e9dd 1800 	ldrd	r1, r8, [sp]
 80072b8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 80072bc:	4682      	mov	sl, r0
 80072be:	ea57 0001 	orrs.w	r0, r7, r1
 80072c2:	d112      	bne.n	80072ea <__ieee754_pow+0x42>
 80072c4:	4653      	mov	r3, sl
 80072c6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 80072ca:	18db      	adds	r3, r3, r3
 80072cc:	4152      	adcs	r2, r2
 80072ce:	4298      	cmp	r0, r3
 80072d0:	4b91      	ldr	r3, [pc, #580]	@ (8007518 <__ieee754_pow+0x270>)
 80072d2:	4193      	sbcs	r3, r2
 80072d4:	f080 84ce 	bcs.w	8007c74 <__ieee754_pow+0x9cc>
 80072d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072dc:	4650      	mov	r0, sl
 80072de:	4659      	mov	r1, fp
 80072e0:	f7f8 ff44 	bl	800016c <__adddf3>
 80072e4:	b011      	add	sp, #68	@ 0x44
 80072e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ea:	4b8c      	ldr	r3, [pc, #560]	@ (800751c <__ieee754_pow+0x274>)
 80072ec:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 80072f0:	429e      	cmp	r6, r3
 80072f2:	465d      	mov	r5, fp
 80072f4:	46d1      	mov	r9, sl
 80072f6:	d807      	bhi.n	8007308 <__ieee754_pow+0x60>
 80072f8:	d102      	bne.n	8007300 <__ieee754_pow+0x58>
 80072fa:	f1ba 0f00 	cmp.w	sl, #0
 80072fe:	d1eb      	bne.n	80072d8 <__ieee754_pow+0x30>
 8007300:	429f      	cmp	r7, r3
 8007302:	d801      	bhi.n	8007308 <__ieee754_pow+0x60>
 8007304:	d10f      	bne.n	8007326 <__ieee754_pow+0x7e>
 8007306:	b171      	cbz	r1, 8007326 <__ieee754_pow+0x7e>
 8007308:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800730c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007310:	ea55 0509 	orrs.w	r5, r5, r9
 8007314:	d1e0      	bne.n	80072d8 <__ieee754_pow+0x30>
 8007316:	e9dd 3200 	ldrd	r3, r2, [sp]
 800731a:	18db      	adds	r3, r3, r3
 800731c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007320:	4152      	adcs	r2, r2
 8007322:	429d      	cmp	r5, r3
 8007324:	e7d4      	b.n	80072d0 <__ieee754_pow+0x28>
 8007326:	2d00      	cmp	r5, #0
 8007328:	4633      	mov	r3, r6
 800732a:	da39      	bge.n	80073a0 <__ieee754_pow+0xf8>
 800732c:	4a7c      	ldr	r2, [pc, #496]	@ (8007520 <__ieee754_pow+0x278>)
 800732e:	4297      	cmp	r7, r2
 8007330:	d84e      	bhi.n	80073d0 <__ieee754_pow+0x128>
 8007332:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007336:	4297      	cmp	r7, r2
 8007338:	f240 84ab 	bls.w	8007c92 <__ieee754_pow+0x9ea>
 800733c:	153a      	asrs	r2, r7, #20
 800733e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007342:	2a14      	cmp	r2, #20
 8007344:	dd0f      	ble.n	8007366 <__ieee754_pow+0xbe>
 8007346:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800734a:	fa21 f402 	lsr.w	r4, r1, r2
 800734e:	fa04 f202 	lsl.w	r2, r4, r2
 8007352:	428a      	cmp	r2, r1
 8007354:	f040 849d 	bne.w	8007c92 <__ieee754_pow+0x9ea>
 8007358:	f004 0401 	and.w	r4, r4, #1
 800735c:	f1c4 0402 	rsb	r4, r4, #2
 8007360:	2900      	cmp	r1, #0
 8007362:	d15a      	bne.n	800741a <__ieee754_pow+0x172>
 8007364:	e00e      	b.n	8007384 <__ieee754_pow+0xdc>
 8007366:	2900      	cmp	r1, #0
 8007368:	d156      	bne.n	8007418 <__ieee754_pow+0x170>
 800736a:	f1c2 0214 	rsb	r2, r2, #20
 800736e:	fa47 f402 	asr.w	r4, r7, r2
 8007372:	fa04 f202 	lsl.w	r2, r4, r2
 8007376:	42ba      	cmp	r2, r7
 8007378:	f040 8488 	bne.w	8007c8c <__ieee754_pow+0x9e4>
 800737c:	f004 0401 	and.w	r4, r4, #1
 8007380:	f1c4 0402 	rsb	r4, r4, #2
 8007384:	4a67      	ldr	r2, [pc, #412]	@ (8007524 <__ieee754_pow+0x27c>)
 8007386:	4297      	cmp	r7, r2
 8007388:	d130      	bne.n	80073ec <__ieee754_pow+0x144>
 800738a:	f1b8 0f00 	cmp.w	r8, #0
 800738e:	f280 8479 	bge.w	8007c84 <__ieee754_pow+0x9dc>
 8007392:	4652      	mov	r2, sl
 8007394:	465b      	mov	r3, fp
 8007396:	2000      	movs	r0, #0
 8007398:	4962      	ldr	r1, [pc, #392]	@ (8007524 <__ieee754_pow+0x27c>)
 800739a:	f7f9 f9c7 	bl	800072c <__aeabi_ddiv>
 800739e:	e7a1      	b.n	80072e4 <__ieee754_pow+0x3c>
 80073a0:	2400      	movs	r4, #0
 80073a2:	2900      	cmp	r1, #0
 80073a4:	d139      	bne.n	800741a <__ieee754_pow+0x172>
 80073a6:	4a5d      	ldr	r2, [pc, #372]	@ (800751c <__ieee754_pow+0x274>)
 80073a8:	4297      	cmp	r7, r2
 80073aa:	d1eb      	bne.n	8007384 <__ieee754_pow+0xdc>
 80073ac:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 80073b0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80073b4:	ea53 0309 	orrs.w	r3, r3, r9
 80073b8:	f000 845c 	beq.w	8007c74 <__ieee754_pow+0x9cc>
 80073bc:	4b5a      	ldr	r3, [pc, #360]	@ (8007528 <__ieee754_pow+0x280>)
 80073be:	429e      	cmp	r6, r3
 80073c0:	d908      	bls.n	80073d4 <__ieee754_pow+0x12c>
 80073c2:	f1b8 0f00 	cmp.w	r8, #0
 80073c6:	f2c0 8459 	blt.w	8007c7c <__ieee754_pow+0x9d4>
 80073ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073ce:	e789      	b.n	80072e4 <__ieee754_pow+0x3c>
 80073d0:	2402      	movs	r4, #2
 80073d2:	e7e6      	b.n	80073a2 <__ieee754_pow+0xfa>
 80073d4:	f1b8 0f00 	cmp.w	r8, #0
 80073d8:	f04f 0000 	mov.w	r0, #0
 80073dc:	f04f 0100 	mov.w	r1, #0
 80073e0:	da80      	bge.n	80072e4 <__ieee754_pow+0x3c>
 80073e2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80073e6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80073ea:	e77b      	b.n	80072e4 <__ieee754_pow+0x3c>
 80073ec:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80073f0:	d106      	bne.n	8007400 <__ieee754_pow+0x158>
 80073f2:	4652      	mov	r2, sl
 80073f4:	465b      	mov	r3, fp
 80073f6:	4650      	mov	r0, sl
 80073f8:	4659      	mov	r1, fp
 80073fa:	f7f9 f86d 	bl	80004d8 <__aeabi_dmul>
 80073fe:	e771      	b.n	80072e4 <__ieee754_pow+0x3c>
 8007400:	4a4a      	ldr	r2, [pc, #296]	@ (800752c <__ieee754_pow+0x284>)
 8007402:	4590      	cmp	r8, r2
 8007404:	d109      	bne.n	800741a <__ieee754_pow+0x172>
 8007406:	2d00      	cmp	r5, #0
 8007408:	db07      	blt.n	800741a <__ieee754_pow+0x172>
 800740a:	4650      	mov	r0, sl
 800740c:	4659      	mov	r1, fp
 800740e:	b011      	add	sp, #68	@ 0x44
 8007410:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007414:	f000 bd12 	b.w	8007e3c <__ieee754_sqrt>
 8007418:	2400      	movs	r4, #0
 800741a:	4650      	mov	r0, sl
 800741c:	4659      	mov	r1, fp
 800741e:	9302      	str	r3, [sp, #8]
 8007420:	f000 fc6a 	bl	8007cf8 <fabs>
 8007424:	9b02      	ldr	r3, [sp, #8]
 8007426:	f1b9 0f00 	cmp.w	r9, #0
 800742a:	d127      	bne.n	800747c <__ieee754_pow+0x1d4>
 800742c:	4a3d      	ldr	r2, [pc, #244]	@ (8007524 <__ieee754_pow+0x27c>)
 800742e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8007432:	4594      	cmp	ip, r2
 8007434:	d000      	beq.n	8007438 <__ieee754_pow+0x190>
 8007436:	bb0e      	cbnz	r6, 800747c <__ieee754_pow+0x1d4>
 8007438:	f1b8 0f00 	cmp.w	r8, #0
 800743c:	da05      	bge.n	800744a <__ieee754_pow+0x1a2>
 800743e:	4602      	mov	r2, r0
 8007440:	460b      	mov	r3, r1
 8007442:	2000      	movs	r0, #0
 8007444:	4937      	ldr	r1, [pc, #220]	@ (8007524 <__ieee754_pow+0x27c>)
 8007446:	f7f9 f971 	bl	800072c <__aeabi_ddiv>
 800744a:	2d00      	cmp	r5, #0
 800744c:	f6bf af4a 	bge.w	80072e4 <__ieee754_pow+0x3c>
 8007450:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8007454:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8007458:	4326      	orrs	r6, r4
 800745a:	d108      	bne.n	800746e <__ieee754_pow+0x1c6>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	4610      	mov	r0, r2
 8007462:	4619      	mov	r1, r3
 8007464:	f7f8 fe80 	bl	8000168 <__aeabi_dsub>
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	e795      	b.n	800739a <__ieee754_pow+0xf2>
 800746e:	2c01      	cmp	r4, #1
 8007470:	f47f af38 	bne.w	80072e4 <__ieee754_pow+0x3c>
 8007474:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007478:	4619      	mov	r1, r3
 800747a:	e733      	b.n	80072e4 <__ieee754_pow+0x3c>
 800747c:	0fea      	lsrs	r2, r5, #31
 800747e:	3a01      	subs	r2, #1
 8007480:	ea52 0c04 	orrs.w	ip, r2, r4
 8007484:	d102      	bne.n	800748c <__ieee754_pow+0x1e4>
 8007486:	4652      	mov	r2, sl
 8007488:	465b      	mov	r3, fp
 800748a:	e7e9      	b.n	8007460 <__ieee754_pow+0x1b8>
 800748c:	f04f 0900 	mov.w	r9, #0
 8007490:	3c01      	subs	r4, #1
 8007492:	4314      	orrs	r4, r2
 8007494:	bf14      	ite	ne
 8007496:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8007524 <__ieee754_pow+0x27c>
 800749a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8007530 <__ieee754_pow+0x288>
 800749e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 80074a2:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80074a6:	f240 8107 	bls.w	80076b8 <__ieee754_pow+0x410>
 80074aa:	4b22      	ldr	r3, [pc, #136]	@ (8007534 <__ieee754_pow+0x28c>)
 80074ac:	429f      	cmp	r7, r3
 80074ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007528 <__ieee754_pow+0x280>)
 80074b0:	d913      	bls.n	80074da <__ieee754_pow+0x232>
 80074b2:	429e      	cmp	r6, r3
 80074b4:	d808      	bhi.n	80074c8 <__ieee754_pow+0x220>
 80074b6:	f1b8 0f00 	cmp.w	r8, #0
 80074ba:	da08      	bge.n	80074ce <__ieee754_pow+0x226>
 80074bc:	2000      	movs	r0, #0
 80074be:	b011      	add	sp, #68	@ 0x44
 80074c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c4:	f000 bcb4 	b.w	8007e30 <__math_oflow>
 80074c8:	f1b8 0f00 	cmp.w	r8, #0
 80074cc:	dcf6      	bgt.n	80074bc <__ieee754_pow+0x214>
 80074ce:	2000      	movs	r0, #0
 80074d0:	b011      	add	sp, #68	@ 0x44
 80074d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d6:	f000 bca6 	b.w	8007e26 <__math_uflow>
 80074da:	429e      	cmp	r6, r3
 80074dc:	d20c      	bcs.n	80074f8 <__ieee754_pow+0x250>
 80074de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074e2:	2200      	movs	r2, #0
 80074e4:	2300      	movs	r3, #0
 80074e6:	f7f9 fa69 	bl	80009bc <__aeabi_dcmplt>
 80074ea:	3800      	subs	r0, #0
 80074ec:	bf18      	it	ne
 80074ee:	2001      	movne	r0, #1
 80074f0:	f1b8 0f00 	cmp.w	r8, #0
 80074f4:	daec      	bge.n	80074d0 <__ieee754_pow+0x228>
 80074f6:	e7e2      	b.n	80074be <__ieee754_pow+0x216>
 80074f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007524 <__ieee754_pow+0x27c>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	429e      	cmp	r6, r3
 80074fe:	d91b      	bls.n	8007538 <__ieee754_pow+0x290>
 8007500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007504:	2300      	movs	r3, #0
 8007506:	f7f9 fa59 	bl	80009bc <__aeabi_dcmplt>
 800750a:	3800      	subs	r0, #0
 800750c:	bf18      	it	ne
 800750e:	2001      	movne	r0, #1
 8007510:	f1b8 0f00 	cmp.w	r8, #0
 8007514:	dcd3      	bgt.n	80074be <__ieee754_pow+0x216>
 8007516:	e7db      	b.n	80074d0 <__ieee754_pow+0x228>
 8007518:	fff00000 	.word	0xfff00000
 800751c:	7ff00000 	.word	0x7ff00000
 8007520:	433fffff 	.word	0x433fffff
 8007524:	3ff00000 	.word	0x3ff00000
 8007528:	3fefffff 	.word	0x3fefffff
 800752c:	3fe00000 	.word	0x3fe00000
 8007530:	bff00000 	.word	0xbff00000
 8007534:	43f00000 	.word	0x43f00000
 8007538:	4b5b      	ldr	r3, [pc, #364]	@ (80076a8 <__ieee754_pow+0x400>)
 800753a:	f7f8 fe15 	bl	8000168 <__aeabi_dsub>
 800753e:	a352      	add	r3, pc, #328	@ (adr r3, 8007688 <__ieee754_pow+0x3e0>)
 8007540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007544:	4604      	mov	r4, r0
 8007546:	460d      	mov	r5, r1
 8007548:	f7f8 ffc6 	bl	80004d8 <__aeabi_dmul>
 800754c:	a350      	add	r3, pc, #320	@ (adr r3, 8007690 <__ieee754_pow+0x3e8>)
 800754e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007552:	4606      	mov	r6, r0
 8007554:	460f      	mov	r7, r1
 8007556:	4620      	mov	r0, r4
 8007558:	4629      	mov	r1, r5
 800755a:	f7f8 ffbd 	bl	80004d8 <__aeabi_dmul>
 800755e:	2200      	movs	r2, #0
 8007560:	4682      	mov	sl, r0
 8007562:	468b      	mov	fp, r1
 8007564:	4620      	mov	r0, r4
 8007566:	4629      	mov	r1, r5
 8007568:	4b50      	ldr	r3, [pc, #320]	@ (80076ac <__ieee754_pow+0x404>)
 800756a:	f7f8 ffb5 	bl	80004d8 <__aeabi_dmul>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	a149      	add	r1, pc, #292	@ (adr r1, 8007698 <__ieee754_pow+0x3f0>)
 8007574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007578:	f7f8 fdf6 	bl	8000168 <__aeabi_dsub>
 800757c:	4622      	mov	r2, r4
 800757e:	462b      	mov	r3, r5
 8007580:	f7f8 ffaa 	bl	80004d8 <__aeabi_dmul>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	2000      	movs	r0, #0
 800758a:	4949      	ldr	r1, [pc, #292]	@ (80076b0 <__ieee754_pow+0x408>)
 800758c:	f7f8 fdec 	bl	8000168 <__aeabi_dsub>
 8007590:	4622      	mov	r2, r4
 8007592:	4680      	mov	r8, r0
 8007594:	4689      	mov	r9, r1
 8007596:	462b      	mov	r3, r5
 8007598:	4620      	mov	r0, r4
 800759a:	4629      	mov	r1, r5
 800759c:	f7f8 ff9c 	bl	80004d8 <__aeabi_dmul>
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	4640      	mov	r0, r8
 80075a6:	4649      	mov	r1, r9
 80075a8:	f7f8 ff96 	bl	80004d8 <__aeabi_dmul>
 80075ac:	a33c      	add	r3, pc, #240	@ (adr r3, 80076a0 <__ieee754_pow+0x3f8>)
 80075ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b2:	f7f8 ff91 	bl	80004d8 <__aeabi_dmul>
 80075b6:	4602      	mov	r2, r0
 80075b8:	460b      	mov	r3, r1
 80075ba:	4650      	mov	r0, sl
 80075bc:	4659      	mov	r1, fp
 80075be:	f7f8 fdd3 	bl	8000168 <__aeabi_dsub>
 80075c2:	2400      	movs	r4, #0
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	4680      	mov	r8, r0
 80075ca:	4689      	mov	r9, r1
 80075cc:	4630      	mov	r0, r6
 80075ce:	4639      	mov	r1, r7
 80075d0:	f7f8 fdcc 	bl	800016c <__adddf3>
 80075d4:	4632      	mov	r2, r6
 80075d6:	463b      	mov	r3, r7
 80075d8:	4620      	mov	r0, r4
 80075da:	460d      	mov	r5, r1
 80075dc:	f7f8 fdc4 	bl	8000168 <__aeabi_dsub>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4640      	mov	r0, r8
 80075e6:	4649      	mov	r1, r9
 80075e8:	f7f8 fdbe 	bl	8000168 <__aeabi_dsub>
 80075ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075f4:	2300      	movs	r3, #0
 80075f6:	9304      	str	r3, [sp, #16]
 80075f8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80075fc:	4606      	mov	r6, r0
 80075fe:	460f      	mov	r7, r1
 8007600:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007604:	4652      	mov	r2, sl
 8007606:	465b      	mov	r3, fp
 8007608:	f7f8 fdae 	bl	8000168 <__aeabi_dsub>
 800760c:	4622      	mov	r2, r4
 800760e:	462b      	mov	r3, r5
 8007610:	f7f8 ff62 	bl	80004d8 <__aeabi_dmul>
 8007614:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007618:	4680      	mov	r8, r0
 800761a:	4689      	mov	r9, r1
 800761c:	4630      	mov	r0, r6
 800761e:	4639      	mov	r1, r7
 8007620:	f7f8 ff5a 	bl	80004d8 <__aeabi_dmul>
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	4640      	mov	r0, r8
 800762a:	4649      	mov	r1, r9
 800762c:	f7f8 fd9e 	bl	800016c <__adddf3>
 8007630:	4652      	mov	r2, sl
 8007632:	465b      	mov	r3, fp
 8007634:	4606      	mov	r6, r0
 8007636:	460f      	mov	r7, r1
 8007638:	4620      	mov	r0, r4
 800763a:	4629      	mov	r1, r5
 800763c:	f7f8 ff4c 	bl	80004d8 <__aeabi_dmul>
 8007640:	460b      	mov	r3, r1
 8007642:	4602      	mov	r2, r0
 8007644:	4680      	mov	r8, r0
 8007646:	4689      	mov	r9, r1
 8007648:	4630      	mov	r0, r6
 800764a:	4639      	mov	r1, r7
 800764c:	f7f8 fd8e 	bl	800016c <__adddf3>
 8007650:	4b18      	ldr	r3, [pc, #96]	@ (80076b4 <__ieee754_pow+0x40c>)
 8007652:	4604      	mov	r4, r0
 8007654:	4299      	cmp	r1, r3
 8007656:	460d      	mov	r5, r1
 8007658:	468a      	mov	sl, r1
 800765a:	468b      	mov	fp, r1
 800765c:	f340 82e0 	ble.w	8007c20 <__ieee754_pow+0x978>
 8007660:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007664:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007668:	4303      	orrs	r3, r0
 800766a:	f000 81df 	beq.w	8007a2c <__ieee754_pow+0x784>
 800766e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007672:	2200      	movs	r2, #0
 8007674:	2300      	movs	r3, #0
 8007676:	f7f9 f9a1 	bl	80009bc <__aeabi_dcmplt>
 800767a:	3800      	subs	r0, #0
 800767c:	bf18      	it	ne
 800767e:	2001      	movne	r0, #1
 8007680:	e71d      	b.n	80074be <__ieee754_pow+0x216>
 8007682:	bf00      	nop
 8007684:	f3af 8000 	nop.w
 8007688:	60000000 	.word	0x60000000
 800768c:	3ff71547 	.word	0x3ff71547
 8007690:	f85ddf44 	.word	0xf85ddf44
 8007694:	3e54ae0b 	.word	0x3e54ae0b
 8007698:	55555555 	.word	0x55555555
 800769c:	3fd55555 	.word	0x3fd55555
 80076a0:	652b82fe 	.word	0x652b82fe
 80076a4:	3ff71547 	.word	0x3ff71547
 80076a8:	3ff00000 	.word	0x3ff00000
 80076ac:	3fd00000 	.word	0x3fd00000
 80076b0:	3fe00000 	.word	0x3fe00000
 80076b4:	408fffff 	.word	0x408fffff
 80076b8:	4ad3      	ldr	r2, [pc, #844]	@ (8007a08 <__ieee754_pow+0x760>)
 80076ba:	402a      	ands	r2, r5
 80076bc:	2a00      	cmp	r2, #0
 80076be:	f040 817a 	bne.w	80079b6 <__ieee754_pow+0x70e>
 80076c2:	4bd2      	ldr	r3, [pc, #840]	@ (8007a0c <__ieee754_pow+0x764>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	f7f8 ff07 	bl	80004d8 <__aeabi_dmul>
 80076ca:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 80076ce:	460b      	mov	r3, r1
 80076d0:	151a      	asrs	r2, r3, #20
 80076d2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80076d6:	4422      	add	r2, r4
 80076d8:	920a      	str	r2, [sp, #40]	@ 0x28
 80076da:	4acd      	ldr	r2, [pc, #820]	@ (8007a10 <__ieee754_pow+0x768>)
 80076dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076e0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 80076e4:	4293      	cmp	r3, r2
 80076e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80076ea:	dd08      	ble.n	80076fe <__ieee754_pow+0x456>
 80076ec:	4ac9      	ldr	r2, [pc, #804]	@ (8007a14 <__ieee754_pow+0x76c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	f340 8163 	ble.w	80079ba <__ieee754_pow+0x712>
 80076f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076f6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80076fa:	3301      	adds	r3, #1
 80076fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80076fe:	2600      	movs	r6, #0
 8007700:	00f3      	lsls	r3, r6, #3
 8007702:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007704:	4bc4      	ldr	r3, [pc, #784]	@ (8007a18 <__ieee754_pow+0x770>)
 8007706:	4629      	mov	r1, r5
 8007708:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800770c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007710:	461a      	mov	r2, r3
 8007712:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007716:	4623      	mov	r3, r4
 8007718:	4682      	mov	sl, r0
 800771a:	f7f8 fd25 	bl	8000168 <__aeabi_dsub>
 800771e:	4652      	mov	r2, sl
 8007720:	462b      	mov	r3, r5
 8007722:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007726:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800772a:	f7f8 fd1f 	bl	800016c <__adddf3>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	2000      	movs	r0, #0
 8007734:	49b9      	ldr	r1, [pc, #740]	@ (8007a1c <__ieee754_pow+0x774>)
 8007736:	f7f8 fff9 	bl	800072c <__aeabi_ddiv>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007742:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007746:	f7f8 fec7 	bl	80004d8 <__aeabi_dmul>
 800774a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800774e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007752:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007756:	2300      	movs	r3, #0
 8007758:	2200      	movs	r2, #0
 800775a:	46ab      	mov	fp, r5
 800775c:	106d      	asrs	r5, r5, #1
 800775e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007762:	9304      	str	r3, [sp, #16]
 8007764:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007768:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800776c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007770:	4640      	mov	r0, r8
 8007772:	4649      	mov	r1, r9
 8007774:	4614      	mov	r4, r2
 8007776:	461d      	mov	r5, r3
 8007778:	f7f8 feae 	bl	80004d8 <__aeabi_dmul>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007784:	f7f8 fcf0 	bl	8000168 <__aeabi_dsub>
 8007788:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800778c:	4606      	mov	r6, r0
 800778e:	460f      	mov	r7, r1
 8007790:	4620      	mov	r0, r4
 8007792:	4629      	mov	r1, r5
 8007794:	f7f8 fce8 	bl	8000168 <__aeabi_dsub>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	4650      	mov	r0, sl
 800779e:	4659      	mov	r1, fp
 80077a0:	f7f8 fce2 	bl	8000168 <__aeabi_dsub>
 80077a4:	4642      	mov	r2, r8
 80077a6:	464b      	mov	r3, r9
 80077a8:	f7f8 fe96 	bl	80004d8 <__aeabi_dmul>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	4630      	mov	r0, r6
 80077b2:	4639      	mov	r1, r7
 80077b4:	f7f8 fcd8 	bl	8000168 <__aeabi_dsub>
 80077b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80077bc:	f7f8 fe8c 	bl	80004d8 <__aeabi_dmul>
 80077c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80077c8:	4610      	mov	r0, r2
 80077ca:	4619      	mov	r1, r3
 80077cc:	f7f8 fe84 	bl	80004d8 <__aeabi_dmul>
 80077d0:	a37b      	add	r3, pc, #492	@ (adr r3, 80079c0 <__ieee754_pow+0x718>)
 80077d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d6:	4604      	mov	r4, r0
 80077d8:	460d      	mov	r5, r1
 80077da:	f7f8 fe7d 	bl	80004d8 <__aeabi_dmul>
 80077de:	a37a      	add	r3, pc, #488	@ (adr r3, 80079c8 <__ieee754_pow+0x720>)
 80077e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e4:	f7f8 fcc2 	bl	800016c <__adddf3>
 80077e8:	4622      	mov	r2, r4
 80077ea:	462b      	mov	r3, r5
 80077ec:	f7f8 fe74 	bl	80004d8 <__aeabi_dmul>
 80077f0:	a377      	add	r3, pc, #476	@ (adr r3, 80079d0 <__ieee754_pow+0x728>)
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	f7f8 fcb9 	bl	800016c <__adddf3>
 80077fa:	4622      	mov	r2, r4
 80077fc:	462b      	mov	r3, r5
 80077fe:	f7f8 fe6b 	bl	80004d8 <__aeabi_dmul>
 8007802:	a375      	add	r3, pc, #468	@ (adr r3, 80079d8 <__ieee754_pow+0x730>)
 8007804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007808:	f7f8 fcb0 	bl	800016c <__adddf3>
 800780c:	4622      	mov	r2, r4
 800780e:	462b      	mov	r3, r5
 8007810:	f7f8 fe62 	bl	80004d8 <__aeabi_dmul>
 8007814:	a372      	add	r3, pc, #456	@ (adr r3, 80079e0 <__ieee754_pow+0x738>)
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	f7f8 fca7 	bl	800016c <__adddf3>
 800781e:	4622      	mov	r2, r4
 8007820:	462b      	mov	r3, r5
 8007822:	f7f8 fe59 	bl	80004d8 <__aeabi_dmul>
 8007826:	a370      	add	r3, pc, #448	@ (adr r3, 80079e8 <__ieee754_pow+0x740>)
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	f7f8 fc9e 	bl	800016c <__adddf3>
 8007830:	4622      	mov	r2, r4
 8007832:	4606      	mov	r6, r0
 8007834:	460f      	mov	r7, r1
 8007836:	462b      	mov	r3, r5
 8007838:	4620      	mov	r0, r4
 800783a:	4629      	mov	r1, r5
 800783c:	f7f8 fe4c 	bl	80004d8 <__aeabi_dmul>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	4630      	mov	r0, r6
 8007846:	4639      	mov	r1, r7
 8007848:	f7f8 fe46 	bl	80004d8 <__aeabi_dmul>
 800784c:	4604      	mov	r4, r0
 800784e:	460d      	mov	r5, r1
 8007850:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007854:	4642      	mov	r2, r8
 8007856:	464b      	mov	r3, r9
 8007858:	f7f8 fc88 	bl	800016c <__adddf3>
 800785c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007860:	f7f8 fe3a 	bl	80004d8 <__aeabi_dmul>
 8007864:	4622      	mov	r2, r4
 8007866:	462b      	mov	r3, r5
 8007868:	f7f8 fc80 	bl	800016c <__adddf3>
 800786c:	4642      	mov	r2, r8
 800786e:	4682      	mov	sl, r0
 8007870:	468b      	mov	fp, r1
 8007872:	464b      	mov	r3, r9
 8007874:	4640      	mov	r0, r8
 8007876:	4649      	mov	r1, r9
 8007878:	f7f8 fe2e 	bl	80004d8 <__aeabi_dmul>
 800787c:	2200      	movs	r2, #0
 800787e:	4b68      	ldr	r3, [pc, #416]	@ (8007a20 <__ieee754_pow+0x778>)
 8007880:	4606      	mov	r6, r0
 8007882:	460f      	mov	r7, r1
 8007884:	f7f8 fc72 	bl	800016c <__adddf3>
 8007888:	4652      	mov	r2, sl
 800788a:	465b      	mov	r3, fp
 800788c:	f7f8 fc6e 	bl	800016c <__adddf3>
 8007890:	2400      	movs	r4, #0
 8007892:	460d      	mov	r5, r1
 8007894:	4622      	mov	r2, r4
 8007896:	460b      	mov	r3, r1
 8007898:	4640      	mov	r0, r8
 800789a:	4649      	mov	r1, r9
 800789c:	f7f8 fe1c 	bl	80004d8 <__aeabi_dmul>
 80078a0:	2200      	movs	r2, #0
 80078a2:	4680      	mov	r8, r0
 80078a4:	4689      	mov	r9, r1
 80078a6:	4620      	mov	r0, r4
 80078a8:	4629      	mov	r1, r5
 80078aa:	4b5d      	ldr	r3, [pc, #372]	@ (8007a20 <__ieee754_pow+0x778>)
 80078ac:	f7f8 fc5c 	bl	8000168 <__aeabi_dsub>
 80078b0:	4632      	mov	r2, r6
 80078b2:	463b      	mov	r3, r7
 80078b4:	f7f8 fc58 	bl	8000168 <__aeabi_dsub>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	4650      	mov	r0, sl
 80078be:	4659      	mov	r1, fp
 80078c0:	f7f8 fc52 	bl	8000168 <__aeabi_dsub>
 80078c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078c8:	f7f8 fe06 	bl	80004d8 <__aeabi_dmul>
 80078cc:	4622      	mov	r2, r4
 80078ce:	4606      	mov	r6, r0
 80078d0:	460f      	mov	r7, r1
 80078d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80078d6:	462b      	mov	r3, r5
 80078d8:	f7f8 fdfe 	bl	80004d8 <__aeabi_dmul>
 80078dc:	4602      	mov	r2, r0
 80078de:	460b      	mov	r3, r1
 80078e0:	4630      	mov	r0, r6
 80078e2:	4639      	mov	r1, r7
 80078e4:	f7f8 fc42 	bl	800016c <__adddf3>
 80078e8:	2400      	movs	r4, #0
 80078ea:	4606      	mov	r6, r0
 80078ec:	460f      	mov	r7, r1
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4640      	mov	r0, r8
 80078f4:	4649      	mov	r1, r9
 80078f6:	f7f8 fc39 	bl	800016c <__adddf3>
 80078fa:	a33d      	add	r3, pc, #244	@ (adr r3, 80079f0 <__ieee754_pow+0x748>)
 80078fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007900:	4620      	mov	r0, r4
 8007902:	460d      	mov	r5, r1
 8007904:	f7f8 fde8 	bl	80004d8 <__aeabi_dmul>
 8007908:	4642      	mov	r2, r8
 800790a:	464b      	mov	r3, r9
 800790c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007910:	4620      	mov	r0, r4
 8007912:	4629      	mov	r1, r5
 8007914:	f7f8 fc28 	bl	8000168 <__aeabi_dsub>
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	4630      	mov	r0, r6
 800791e:	4639      	mov	r1, r7
 8007920:	f7f8 fc22 	bl	8000168 <__aeabi_dsub>
 8007924:	a334      	add	r3, pc, #208	@ (adr r3, 80079f8 <__ieee754_pow+0x750>)
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	f7f8 fdd5 	bl	80004d8 <__aeabi_dmul>
 800792e:	a334      	add	r3, pc, #208	@ (adr r3, 8007a00 <__ieee754_pow+0x758>)
 8007930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007934:	4606      	mov	r6, r0
 8007936:	460f      	mov	r7, r1
 8007938:	4620      	mov	r0, r4
 800793a:	4629      	mov	r1, r5
 800793c:	f7f8 fdcc 	bl	80004d8 <__aeabi_dmul>
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	4630      	mov	r0, r6
 8007946:	4639      	mov	r1, r7
 8007948:	f7f8 fc10 	bl	800016c <__adddf3>
 800794c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800794e:	4b35      	ldr	r3, [pc, #212]	@ (8007a24 <__ieee754_pow+0x77c>)
 8007950:	2400      	movs	r4, #0
 8007952:	4413      	add	r3, r2
 8007954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007958:	f7f8 fc08 	bl	800016c <__adddf3>
 800795c:	4682      	mov	sl, r0
 800795e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007960:	468b      	mov	fp, r1
 8007962:	f7f8 fd4f 	bl	8000404 <__aeabi_i2d>
 8007966:	4606      	mov	r6, r0
 8007968:	460f      	mov	r7, r1
 800796a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800796c:	4b2e      	ldr	r3, [pc, #184]	@ (8007a28 <__ieee754_pow+0x780>)
 800796e:	4413      	add	r3, r2
 8007970:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007974:	4652      	mov	r2, sl
 8007976:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800797a:	465b      	mov	r3, fp
 800797c:	f7f8 fbf6 	bl	800016c <__adddf3>
 8007980:	4642      	mov	r2, r8
 8007982:	464b      	mov	r3, r9
 8007984:	f7f8 fbf2 	bl	800016c <__adddf3>
 8007988:	4632      	mov	r2, r6
 800798a:	463b      	mov	r3, r7
 800798c:	f7f8 fbee 	bl	800016c <__adddf3>
 8007990:	4632      	mov	r2, r6
 8007992:	463b      	mov	r3, r7
 8007994:	4620      	mov	r0, r4
 8007996:	460d      	mov	r5, r1
 8007998:	f7f8 fbe6 	bl	8000168 <__aeabi_dsub>
 800799c:	4642      	mov	r2, r8
 800799e:	464b      	mov	r3, r9
 80079a0:	f7f8 fbe2 	bl	8000168 <__aeabi_dsub>
 80079a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079a8:	f7f8 fbde 	bl	8000168 <__aeabi_dsub>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4650      	mov	r0, sl
 80079b2:	4659      	mov	r1, fp
 80079b4:	e618      	b.n	80075e8 <__ieee754_pow+0x340>
 80079b6:	2400      	movs	r4, #0
 80079b8:	e68a      	b.n	80076d0 <__ieee754_pow+0x428>
 80079ba:	2601      	movs	r6, #1
 80079bc:	e6a0      	b.n	8007700 <__ieee754_pow+0x458>
 80079be:	bf00      	nop
 80079c0:	4a454eef 	.word	0x4a454eef
 80079c4:	3fca7e28 	.word	0x3fca7e28
 80079c8:	93c9db65 	.word	0x93c9db65
 80079cc:	3fcd864a 	.word	0x3fcd864a
 80079d0:	a91d4101 	.word	0xa91d4101
 80079d4:	3fd17460 	.word	0x3fd17460
 80079d8:	518f264d 	.word	0x518f264d
 80079dc:	3fd55555 	.word	0x3fd55555
 80079e0:	db6fabff 	.word	0xdb6fabff
 80079e4:	3fdb6db6 	.word	0x3fdb6db6
 80079e8:	33333303 	.word	0x33333303
 80079ec:	3fe33333 	.word	0x3fe33333
 80079f0:	e0000000 	.word	0xe0000000
 80079f4:	3feec709 	.word	0x3feec709
 80079f8:	dc3a03fd 	.word	0xdc3a03fd
 80079fc:	3feec709 	.word	0x3feec709
 8007a00:	145b01f5 	.word	0x145b01f5
 8007a04:	be3e2fe0 	.word	0xbe3e2fe0
 8007a08:	7ff00000 	.word	0x7ff00000
 8007a0c:	43400000 	.word	0x43400000
 8007a10:	0003988e 	.word	0x0003988e
 8007a14:	000bb679 	.word	0x000bb679
 8007a18:	080083e8 	.word	0x080083e8
 8007a1c:	3ff00000 	.word	0x3ff00000
 8007a20:	40080000 	.word	0x40080000
 8007a24:	080083c8 	.word	0x080083c8
 8007a28:	080083d8 	.word	0x080083d8
 8007a2c:	a39a      	add	r3, pc, #616	@ (adr r3, 8007c98 <__ieee754_pow+0x9f0>)
 8007a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a32:	4630      	mov	r0, r6
 8007a34:	4639      	mov	r1, r7
 8007a36:	f7f8 fb99 	bl	800016c <__adddf3>
 8007a3a:	4642      	mov	r2, r8
 8007a3c:	e9cd 0100 	strd	r0, r1, [sp]
 8007a40:	464b      	mov	r3, r9
 8007a42:	4620      	mov	r0, r4
 8007a44:	4629      	mov	r1, r5
 8007a46:	f7f8 fb8f 	bl	8000168 <__aeabi_dsub>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a52:	f7f8 ffd1 	bl	80009f8 <__aeabi_dcmpgt>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	f47f ae09 	bne.w	800766e <__ieee754_pow+0x3c6>
 8007a5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007a60:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8007a64:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8007a68:	fa43 fa0a 	asr.w	sl, r3, sl
 8007a6c:	44da      	add	sl, fp
 8007a6e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007a72:	489b      	ldr	r0, [pc, #620]	@ (8007ce0 <__ieee754_pow+0xa38>)
 8007a74:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007a78:	4108      	asrs	r0, r1
 8007a7a:	ea00 030a 	and.w	r3, r0, sl
 8007a7e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007a82:	f1c1 0114 	rsb	r1, r1, #20
 8007a86:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007a8a:	4640      	mov	r0, r8
 8007a8c:	fa4a fa01 	asr.w	sl, sl, r1
 8007a90:	f1bb 0f00 	cmp.w	fp, #0
 8007a94:	4649      	mov	r1, r9
 8007a96:	f04f 0200 	mov.w	r2, #0
 8007a9a:	bfb8      	it	lt
 8007a9c:	f1ca 0a00 	rsblt	sl, sl, #0
 8007aa0:	f7f8 fb62 	bl	8000168 <__aeabi_dsub>
 8007aa4:	4680      	mov	r8, r0
 8007aa6:	4689      	mov	r9, r1
 8007aa8:	2400      	movs	r4, #0
 8007aaa:	4632      	mov	r2, r6
 8007aac:	463b      	mov	r3, r7
 8007aae:	4640      	mov	r0, r8
 8007ab0:	4649      	mov	r1, r9
 8007ab2:	f7f8 fb5b 	bl	800016c <__adddf3>
 8007ab6:	a37a      	add	r3, pc, #488	@ (adr r3, 8007ca0 <__ieee754_pow+0x9f8>)
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	4620      	mov	r0, r4
 8007abe:	460d      	mov	r5, r1
 8007ac0:	f7f8 fd0a 	bl	80004d8 <__aeabi_dmul>
 8007ac4:	4642      	mov	r2, r8
 8007ac6:	464b      	mov	r3, r9
 8007ac8:	e9cd 0100 	strd	r0, r1, [sp]
 8007acc:	4620      	mov	r0, r4
 8007ace:	4629      	mov	r1, r5
 8007ad0:	f7f8 fb4a 	bl	8000168 <__aeabi_dsub>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4630      	mov	r0, r6
 8007ada:	4639      	mov	r1, r7
 8007adc:	f7f8 fb44 	bl	8000168 <__aeabi_dsub>
 8007ae0:	a371      	add	r3, pc, #452	@ (adr r3, 8007ca8 <__ieee754_pow+0xa00>)
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	f7f8 fcf7 	bl	80004d8 <__aeabi_dmul>
 8007aea:	a371      	add	r3, pc, #452	@ (adr r3, 8007cb0 <__ieee754_pow+0xa08>)
 8007aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af0:	4680      	mov	r8, r0
 8007af2:	4689      	mov	r9, r1
 8007af4:	4620      	mov	r0, r4
 8007af6:	4629      	mov	r1, r5
 8007af8:	f7f8 fcee 	bl	80004d8 <__aeabi_dmul>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4640      	mov	r0, r8
 8007b02:	4649      	mov	r1, r9
 8007b04:	f7f8 fb32 	bl	800016c <__adddf3>
 8007b08:	4604      	mov	r4, r0
 8007b0a:	460d      	mov	r5, r1
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b14:	f7f8 fb2a 	bl	800016c <__adddf3>
 8007b18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b1c:	4680      	mov	r8, r0
 8007b1e:	4689      	mov	r9, r1
 8007b20:	f7f8 fb22 	bl	8000168 <__aeabi_dsub>
 8007b24:	4602      	mov	r2, r0
 8007b26:	460b      	mov	r3, r1
 8007b28:	4620      	mov	r0, r4
 8007b2a:	4629      	mov	r1, r5
 8007b2c:	f7f8 fb1c 	bl	8000168 <__aeabi_dsub>
 8007b30:	4642      	mov	r2, r8
 8007b32:	4606      	mov	r6, r0
 8007b34:	460f      	mov	r7, r1
 8007b36:	464b      	mov	r3, r9
 8007b38:	4640      	mov	r0, r8
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	f7f8 fccc 	bl	80004d8 <__aeabi_dmul>
 8007b40:	a35d      	add	r3, pc, #372	@ (adr r3, 8007cb8 <__ieee754_pow+0xa10>)
 8007b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b46:	4604      	mov	r4, r0
 8007b48:	460d      	mov	r5, r1
 8007b4a:	f7f8 fcc5 	bl	80004d8 <__aeabi_dmul>
 8007b4e:	a35c      	add	r3, pc, #368	@ (adr r3, 8007cc0 <__ieee754_pow+0xa18>)
 8007b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b54:	f7f8 fb08 	bl	8000168 <__aeabi_dsub>
 8007b58:	4622      	mov	r2, r4
 8007b5a:	462b      	mov	r3, r5
 8007b5c:	f7f8 fcbc 	bl	80004d8 <__aeabi_dmul>
 8007b60:	a359      	add	r3, pc, #356	@ (adr r3, 8007cc8 <__ieee754_pow+0xa20>)
 8007b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b66:	f7f8 fb01 	bl	800016c <__adddf3>
 8007b6a:	4622      	mov	r2, r4
 8007b6c:	462b      	mov	r3, r5
 8007b6e:	f7f8 fcb3 	bl	80004d8 <__aeabi_dmul>
 8007b72:	a357      	add	r3, pc, #348	@ (adr r3, 8007cd0 <__ieee754_pow+0xa28>)
 8007b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b78:	f7f8 faf6 	bl	8000168 <__aeabi_dsub>
 8007b7c:	4622      	mov	r2, r4
 8007b7e:	462b      	mov	r3, r5
 8007b80:	f7f8 fcaa 	bl	80004d8 <__aeabi_dmul>
 8007b84:	a354      	add	r3, pc, #336	@ (adr r3, 8007cd8 <__ieee754_pow+0xa30>)
 8007b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8a:	f7f8 faef 	bl	800016c <__adddf3>
 8007b8e:	4622      	mov	r2, r4
 8007b90:	462b      	mov	r3, r5
 8007b92:	f7f8 fca1 	bl	80004d8 <__aeabi_dmul>
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	4640      	mov	r0, r8
 8007b9c:	4649      	mov	r1, r9
 8007b9e:	f7f8 fae3 	bl	8000168 <__aeabi_dsub>
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	460d      	mov	r5, r1
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4640      	mov	r0, r8
 8007bac:	4649      	mov	r1, r9
 8007bae:	f7f8 fc93 	bl	80004d8 <__aeabi_dmul>
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	e9cd 0100 	strd	r0, r1, [sp]
 8007bb8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	f7f8 fad2 	bl	8000168 <__aeabi_dsub>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bcc:	f7f8 fdae 	bl	800072c <__aeabi_ddiv>
 8007bd0:	4632      	mov	r2, r6
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	460d      	mov	r5, r1
 8007bd6:	463b      	mov	r3, r7
 8007bd8:	4640      	mov	r0, r8
 8007bda:	4649      	mov	r1, r9
 8007bdc:	f7f8 fc7c 	bl	80004d8 <__aeabi_dmul>
 8007be0:	4632      	mov	r2, r6
 8007be2:	463b      	mov	r3, r7
 8007be4:	f7f8 fac2 	bl	800016c <__adddf3>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	4620      	mov	r0, r4
 8007bee:	4629      	mov	r1, r5
 8007bf0:	f7f8 faba 	bl	8000168 <__aeabi_dsub>
 8007bf4:	4642      	mov	r2, r8
 8007bf6:	464b      	mov	r3, r9
 8007bf8:	f7f8 fab6 	bl	8000168 <__aeabi_dsub>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	2000      	movs	r0, #0
 8007c02:	4938      	ldr	r1, [pc, #224]	@ (8007ce4 <__ieee754_pow+0xa3c>)
 8007c04:	f7f8 fab0 	bl	8000168 <__aeabi_dsub>
 8007c08:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007c0c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8007c10:	da2e      	bge.n	8007c70 <__ieee754_pow+0x9c8>
 8007c12:	4652      	mov	r2, sl
 8007c14:	f000 f874 	bl	8007d00 <scalbn>
 8007c18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c1c:	f7ff bbed 	b.w	80073fa <__ieee754_pow+0x152>
 8007c20:	4c31      	ldr	r4, [pc, #196]	@ (8007ce8 <__ieee754_pow+0xa40>)
 8007c22:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007c26:	42a3      	cmp	r3, r4
 8007c28:	d91a      	bls.n	8007c60 <__ieee754_pow+0x9b8>
 8007c2a:	4b30      	ldr	r3, [pc, #192]	@ (8007cec <__ieee754_pow+0xa44>)
 8007c2c:	440b      	add	r3, r1
 8007c2e:	4303      	orrs	r3, r0
 8007c30:	d009      	beq.n	8007c46 <__ieee754_pow+0x99e>
 8007c32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c36:	2200      	movs	r2, #0
 8007c38:	2300      	movs	r3, #0
 8007c3a:	f7f8 febf 	bl	80009bc <__aeabi_dcmplt>
 8007c3e:	3800      	subs	r0, #0
 8007c40:	bf18      	it	ne
 8007c42:	2001      	movne	r0, #1
 8007c44:	e444      	b.n	80074d0 <__ieee754_pow+0x228>
 8007c46:	4642      	mov	r2, r8
 8007c48:	464b      	mov	r3, r9
 8007c4a:	f7f8 fa8d 	bl	8000168 <__aeabi_dsub>
 8007c4e:	4632      	mov	r2, r6
 8007c50:	463b      	mov	r3, r7
 8007c52:	f7f8 fec7 	bl	80009e4 <__aeabi_dcmpge>
 8007c56:	2800      	cmp	r0, #0
 8007c58:	d1eb      	bne.n	8007c32 <__ieee754_pow+0x98a>
 8007c5a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8007cf0 <__ieee754_pow+0xa48>
 8007c5e:	e6fd      	b.n	8007a5c <__ieee754_pow+0x7b4>
 8007c60:	469a      	mov	sl, r3
 8007c62:	4b24      	ldr	r3, [pc, #144]	@ (8007cf4 <__ieee754_pow+0xa4c>)
 8007c64:	459a      	cmp	sl, r3
 8007c66:	f63f aef9 	bhi.w	8007a5c <__ieee754_pow+0x7b4>
 8007c6a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007c6e:	e71b      	b.n	8007aa8 <__ieee754_pow+0x800>
 8007c70:	4621      	mov	r1, r4
 8007c72:	e7d1      	b.n	8007c18 <__ieee754_pow+0x970>
 8007c74:	2000      	movs	r0, #0
 8007c76:	491b      	ldr	r1, [pc, #108]	@ (8007ce4 <__ieee754_pow+0xa3c>)
 8007c78:	f7ff bb34 	b.w	80072e4 <__ieee754_pow+0x3c>
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	2100      	movs	r1, #0
 8007c80:	f7ff bb30 	b.w	80072e4 <__ieee754_pow+0x3c>
 8007c84:	4650      	mov	r0, sl
 8007c86:	4659      	mov	r1, fp
 8007c88:	f7ff bb2c 	b.w	80072e4 <__ieee754_pow+0x3c>
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	f7ff bb79 	b.w	8007384 <__ieee754_pow+0xdc>
 8007c92:	2400      	movs	r4, #0
 8007c94:	f7ff bb64 	b.w	8007360 <__ieee754_pow+0xb8>
 8007c98:	652b82fe 	.word	0x652b82fe
 8007c9c:	3c971547 	.word	0x3c971547
 8007ca0:	00000000 	.word	0x00000000
 8007ca4:	3fe62e43 	.word	0x3fe62e43
 8007ca8:	fefa39ef 	.word	0xfefa39ef
 8007cac:	3fe62e42 	.word	0x3fe62e42
 8007cb0:	0ca86c39 	.word	0x0ca86c39
 8007cb4:	be205c61 	.word	0xbe205c61
 8007cb8:	72bea4d0 	.word	0x72bea4d0
 8007cbc:	3e663769 	.word	0x3e663769
 8007cc0:	c5d26bf1 	.word	0xc5d26bf1
 8007cc4:	3ebbbd41 	.word	0x3ebbbd41
 8007cc8:	af25de2c 	.word	0xaf25de2c
 8007ccc:	3f11566a 	.word	0x3f11566a
 8007cd0:	16bebd93 	.word	0x16bebd93
 8007cd4:	3f66c16c 	.word	0x3f66c16c
 8007cd8:	5555553e 	.word	0x5555553e
 8007cdc:	3fc55555 	.word	0x3fc55555
 8007ce0:	fff00000 	.word	0xfff00000
 8007ce4:	3ff00000 	.word	0x3ff00000
 8007ce8:	4090cbff 	.word	0x4090cbff
 8007cec:	3f6f3400 	.word	0x3f6f3400
 8007cf0:	4090cc00 	.word	0x4090cc00
 8007cf4:	3fe00000 	.word	0x3fe00000

08007cf8 <fabs>:
 8007cf8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	4770      	bx	lr

08007d00 <scalbn>:
 8007d00:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8007d04:	4616      	mov	r6, r2
 8007d06:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007d0a:	4683      	mov	fp, r0
 8007d0c:	468c      	mov	ip, r1
 8007d0e:	460b      	mov	r3, r1
 8007d10:	b982      	cbnz	r2, 8007d34 <scalbn+0x34>
 8007d12:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007d16:	4303      	orrs	r3, r0
 8007d18:	d039      	beq.n	8007d8e <scalbn+0x8e>
 8007d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8007dd8 <scalbn+0xd8>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f7f8 fbdb 	bl	80004d8 <__aeabi_dmul>
 8007d22:	4b2e      	ldr	r3, [pc, #184]	@ (8007ddc <scalbn+0xdc>)
 8007d24:	4683      	mov	fp, r0
 8007d26:	429e      	cmp	r6, r3
 8007d28:	468c      	mov	ip, r1
 8007d2a:	da0d      	bge.n	8007d48 <scalbn+0x48>
 8007d2c:	a326      	add	r3, pc, #152	@ (adr r3, 8007dc8 <scalbn+0xc8>)
 8007d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d32:	e01b      	b.n	8007d6c <scalbn+0x6c>
 8007d34:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8007d38:	42ba      	cmp	r2, r7
 8007d3a:	d109      	bne.n	8007d50 <scalbn+0x50>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	f7f8 fa15 	bl	800016c <__adddf3>
 8007d42:	4683      	mov	fp, r0
 8007d44:	468c      	mov	ip, r1
 8007d46:	e022      	b.n	8007d8e <scalbn+0x8e>
 8007d48:	460b      	mov	r3, r1
 8007d4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007d4e:	3a36      	subs	r2, #54	@ 0x36
 8007d50:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8007d54:	428e      	cmp	r6, r1
 8007d56:	dd0c      	ble.n	8007d72 <scalbn+0x72>
 8007d58:	a31d      	add	r3, pc, #116	@ (adr r3, 8007dd0 <scalbn+0xd0>)
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	461c      	mov	r4, r3
 8007d60:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8007d64:	f361 74df 	bfi	r4, r1, #31, #1
 8007d68:	4621      	mov	r1, r4
 8007d6a:	481d      	ldr	r0, [pc, #116]	@ (8007de0 <scalbn+0xe0>)
 8007d6c:	f7f8 fbb4 	bl	80004d8 <__aeabi_dmul>
 8007d70:	e7e7      	b.n	8007d42 <scalbn+0x42>
 8007d72:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007d76:	4432      	add	r2, r6
 8007d78:	428a      	cmp	r2, r1
 8007d7a:	dced      	bgt.n	8007d58 <scalbn+0x58>
 8007d7c:	2a00      	cmp	r2, #0
 8007d7e:	dd0a      	ble.n	8007d96 <scalbn+0x96>
 8007d80:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007d84:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007d88:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007d8c:	46ac      	mov	ip, r5
 8007d8e:	4658      	mov	r0, fp
 8007d90:	4661      	mov	r1, ip
 8007d92:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8007d96:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007d9a:	da09      	bge.n	8007db0 <scalbn+0xb0>
 8007d9c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8007da0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8007da4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8007da8:	480e      	ldr	r0, [pc, #56]	@ (8007de4 <scalbn+0xe4>)
 8007daa:	f041 011f 	orr.w	r1, r1, #31
 8007dae:	e7bd      	b.n	8007d2c <scalbn+0x2c>
 8007db0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007db4:	3236      	adds	r2, #54	@ 0x36
 8007db6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007dba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007dbe:	4658      	mov	r0, fp
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	4b08      	ldr	r3, [pc, #32]	@ (8007de8 <scalbn+0xe8>)
 8007dc6:	e7d1      	b.n	8007d6c <scalbn+0x6c>
 8007dc8:	c2f8f359 	.word	0xc2f8f359
 8007dcc:	01a56e1f 	.word	0x01a56e1f
 8007dd0:	8800759c 	.word	0x8800759c
 8007dd4:	7e37e43c 	.word	0x7e37e43c
 8007dd8:	43500000 	.word	0x43500000
 8007ddc:	ffff3cb0 	.word	0xffff3cb0
 8007de0:	8800759c 	.word	0x8800759c
 8007de4:	c2f8f359 	.word	0xc2f8f359
 8007de8:	3c900000 	.word	0x3c900000

08007dec <with_errno>:
 8007dec:	b570      	push	{r4, r5, r6, lr}
 8007dee:	4604      	mov	r4, r0
 8007df0:	460d      	mov	r5, r1
 8007df2:	4616      	mov	r6, r2
 8007df4:	f7fd fb0e 	bl	8005414 <__errno>
 8007df8:	4629      	mov	r1, r5
 8007dfa:	6006      	str	r6, [r0, #0]
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	bd70      	pop	{r4, r5, r6, pc}

08007e00 <xflow>:
 8007e00:	b513      	push	{r0, r1, r4, lr}
 8007e02:	4604      	mov	r4, r0
 8007e04:	4619      	mov	r1, r3
 8007e06:	4610      	mov	r0, r2
 8007e08:	b10c      	cbz	r4, 8007e0e <xflow+0xe>
 8007e0a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007e0e:	e9cd 2300 	strd	r2, r3, [sp]
 8007e12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e16:	f7f8 fb5f 	bl	80004d8 <__aeabi_dmul>
 8007e1a:	2222      	movs	r2, #34	@ 0x22
 8007e1c:	b002      	add	sp, #8
 8007e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e22:	f7ff bfe3 	b.w	8007dec <with_errno>

08007e26 <__math_uflow>:
 8007e26:	2200      	movs	r2, #0
 8007e28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007e2c:	f7ff bfe8 	b.w	8007e00 <xflow>

08007e30 <__math_oflow>:
 8007e30:	2200      	movs	r2, #0
 8007e32:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8007e36:	f7ff bfe3 	b.w	8007e00 <xflow>
	...

08007e3c <__ieee754_sqrt>:
 8007e3c:	4a67      	ldr	r2, [pc, #412]	@ (8007fdc <__ieee754_sqrt+0x1a0>)
 8007e3e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e42:	438a      	bics	r2, r1
 8007e44:	4606      	mov	r6, r0
 8007e46:	460f      	mov	r7, r1
 8007e48:	460b      	mov	r3, r1
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	d10e      	bne.n	8007e6c <__ieee754_sqrt+0x30>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	f7f8 fb42 	bl	80004d8 <__aeabi_dmul>
 8007e54:	4602      	mov	r2, r0
 8007e56:	460b      	mov	r3, r1
 8007e58:	4630      	mov	r0, r6
 8007e5a:	4639      	mov	r1, r7
 8007e5c:	f7f8 f986 	bl	800016c <__adddf3>
 8007e60:	4606      	mov	r6, r0
 8007e62:	460f      	mov	r7, r1
 8007e64:	4630      	mov	r0, r6
 8007e66:	4639      	mov	r1, r7
 8007e68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e6c:	2900      	cmp	r1, #0
 8007e6e:	dc0c      	bgt.n	8007e8a <__ieee754_sqrt+0x4e>
 8007e70:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8007e74:	4302      	orrs	r2, r0
 8007e76:	d0f5      	beq.n	8007e64 <__ieee754_sqrt+0x28>
 8007e78:	b189      	cbz	r1, 8007e9e <__ieee754_sqrt+0x62>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	f7f8 f974 	bl	8000168 <__aeabi_dsub>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	f7f8 fc52 	bl	800072c <__aeabi_ddiv>
 8007e88:	e7ea      	b.n	8007e60 <__ieee754_sqrt+0x24>
 8007e8a:	150a      	asrs	r2, r1, #20
 8007e8c:	d115      	bne.n	8007eba <__ieee754_sqrt+0x7e>
 8007e8e:	2100      	movs	r1, #0
 8007e90:	e009      	b.n	8007ea6 <__ieee754_sqrt+0x6a>
 8007e92:	0ae3      	lsrs	r3, r4, #11
 8007e94:	3a15      	subs	r2, #21
 8007e96:	0564      	lsls	r4, r4, #21
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d0fa      	beq.n	8007e92 <__ieee754_sqrt+0x56>
 8007e9c:	e7f7      	b.n	8007e8e <__ieee754_sqrt+0x52>
 8007e9e:	460a      	mov	r2, r1
 8007ea0:	e7fa      	b.n	8007e98 <__ieee754_sqrt+0x5c>
 8007ea2:	005b      	lsls	r3, r3, #1
 8007ea4:	3101      	adds	r1, #1
 8007ea6:	02d8      	lsls	r0, r3, #11
 8007ea8:	d5fb      	bpl.n	8007ea2 <__ieee754_sqrt+0x66>
 8007eaa:	1e48      	subs	r0, r1, #1
 8007eac:	1a12      	subs	r2, r2, r0
 8007eae:	f1c1 0020 	rsb	r0, r1, #32
 8007eb2:	fa24 f000 	lsr.w	r0, r4, r0
 8007eb6:	4303      	orrs	r3, r0
 8007eb8:	408c      	lsls	r4, r1
 8007eba:	2600      	movs	r6, #0
 8007ebc:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8007ec0:	2116      	movs	r1, #22
 8007ec2:	07d2      	lsls	r2, r2, #31
 8007ec4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8007ec8:	4632      	mov	r2, r6
 8007eca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ed2:	bf5c      	itt	pl
 8007ed4:	005b      	lslpl	r3, r3, #1
 8007ed6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8007eda:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007ede:	bf58      	it	pl
 8007ee0:	0064      	lslpl	r4, r4, #1
 8007ee2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007ee6:	107f      	asrs	r7, r7, #1
 8007ee8:	0064      	lsls	r4, r4, #1
 8007eea:	1815      	adds	r5, r2, r0
 8007eec:	429d      	cmp	r5, r3
 8007eee:	bfde      	ittt	le
 8007ef0:	182a      	addle	r2, r5, r0
 8007ef2:	1b5b      	suble	r3, r3, r5
 8007ef4:	1836      	addle	r6, r6, r0
 8007ef6:	0fe5      	lsrs	r5, r4, #31
 8007ef8:	3901      	subs	r1, #1
 8007efa:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8007efe:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007f02:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8007f06:	d1f0      	bne.n	8007eea <__ieee754_sqrt+0xae>
 8007f08:	460d      	mov	r5, r1
 8007f0a:	f04f 0a20 	mov.w	sl, #32
 8007f0e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8007f12:	429a      	cmp	r2, r3
 8007f14:	eb01 0c00 	add.w	ip, r1, r0
 8007f18:	db02      	blt.n	8007f20 <__ieee754_sqrt+0xe4>
 8007f1a:	d113      	bne.n	8007f44 <__ieee754_sqrt+0x108>
 8007f1c:	45a4      	cmp	ip, r4
 8007f1e:	d811      	bhi.n	8007f44 <__ieee754_sqrt+0x108>
 8007f20:	f1bc 0f00 	cmp.w	ip, #0
 8007f24:	eb0c 0100 	add.w	r1, ip, r0
 8007f28:	da42      	bge.n	8007fb0 <__ieee754_sqrt+0x174>
 8007f2a:	2900      	cmp	r1, #0
 8007f2c:	db40      	blt.n	8007fb0 <__ieee754_sqrt+0x174>
 8007f2e:	f102 0e01 	add.w	lr, r2, #1
 8007f32:	1a9b      	subs	r3, r3, r2
 8007f34:	4672      	mov	r2, lr
 8007f36:	45a4      	cmp	ip, r4
 8007f38:	bf88      	it	hi
 8007f3a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8007f3e:	eba4 040c 	sub.w	r4, r4, ip
 8007f42:	4405      	add	r5, r0
 8007f44:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8007f48:	f1ba 0a01 	subs.w	sl, sl, #1
 8007f4c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8007f50:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007f54:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8007f58:	d1db      	bne.n	8007f12 <__ieee754_sqrt+0xd6>
 8007f5a:	431c      	orrs	r4, r3
 8007f5c:	d01a      	beq.n	8007f94 <__ieee754_sqrt+0x158>
 8007f5e:	4c20      	ldr	r4, [pc, #128]	@ (8007fe0 <__ieee754_sqrt+0x1a4>)
 8007f60:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8007fe4 <__ieee754_sqrt+0x1a8>
 8007f64:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007f68:	e9db 2300 	ldrd	r2, r3, [fp]
 8007f6c:	f7f8 f8fc 	bl	8000168 <__aeabi_dsub>
 8007f70:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	4640      	mov	r0, r8
 8007f7a:	4649      	mov	r1, r9
 8007f7c:	f7f8 fd28 	bl	80009d0 <__aeabi_dcmple>
 8007f80:	b140      	cbz	r0, 8007f94 <__ieee754_sqrt+0x158>
 8007f82:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007f86:	e9db 2300 	ldrd	r2, r3, [fp]
 8007f8a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8007f8e:	d111      	bne.n	8007fb4 <__ieee754_sqrt+0x178>
 8007f90:	4655      	mov	r5, sl
 8007f92:	3601      	adds	r6, #1
 8007f94:	1072      	asrs	r2, r6, #1
 8007f96:	086b      	lsrs	r3, r5, #1
 8007f98:	07f1      	lsls	r1, r6, #31
 8007f9a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007f9e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8007fa2:	bf48      	it	mi
 8007fa4:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8007fa8:	4618      	mov	r0, r3
 8007faa:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8007fae:	e757      	b.n	8007e60 <__ieee754_sqrt+0x24>
 8007fb0:	4696      	mov	lr, r2
 8007fb2:	e7be      	b.n	8007f32 <__ieee754_sqrt+0xf6>
 8007fb4:	f7f8 f8da 	bl	800016c <__adddf3>
 8007fb8:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	4640      	mov	r0, r8
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	f7f8 fcfa 	bl	80009bc <__aeabi_dcmplt>
 8007fc8:	b120      	cbz	r0, 8007fd4 <__ieee754_sqrt+0x198>
 8007fca:	1ca8      	adds	r0, r5, #2
 8007fcc:	bf08      	it	eq
 8007fce:	3601      	addeq	r6, #1
 8007fd0:	3502      	adds	r5, #2
 8007fd2:	e7df      	b.n	8007f94 <__ieee754_sqrt+0x158>
 8007fd4:	1c6b      	adds	r3, r5, #1
 8007fd6:	f023 0501 	bic.w	r5, r3, #1
 8007fda:	e7db      	b.n	8007f94 <__ieee754_sqrt+0x158>
 8007fdc:	7ff00000 	.word	0x7ff00000
 8007fe0:	200001e0 	.word	0x200001e0
 8007fe4:	200001d8 	.word	0x200001d8

08007fe8 <_init>:
 8007fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fea:	bf00      	nop
 8007fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fee:	bc08      	pop	{r3}
 8007ff0:	469e      	mov	lr, r3
 8007ff2:	4770      	bx	lr

08007ff4 <_fini>:
 8007ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff6:	bf00      	nop
 8007ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffa:	bc08      	pop	{r3}
 8007ffc:	469e      	mov	lr, r3
 8007ffe:	4770      	bx	lr
